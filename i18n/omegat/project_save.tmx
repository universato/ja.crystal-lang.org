<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="4.3.3_0_924066809" segtype="sentence" srclang="EN-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="EN-US">
        <seg>!!!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T055918Z" creationid="makenowjust" creationdate="20201213T055918Z">
        <seg>!!!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>" / " \</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182759Z" creationid="makenowjust" creationdate="20200413T182759Z">
        <seg>" / " \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>" link_text="Crystal Events Calendar" url=events_ical_url icon="today" %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T103558Z" creationid="makenowjust" creationdate="20200516T101335Z">
        <seg>'
   link_text='Crystal イベントカレンダー'
   url=events_ical_url
   icon='today' %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"***#{ {{value}} }***"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T020423Z" creationid="hirofumiwakasugi" creationdate="20151001T020423Z">
        <seg>"***#{ {{value}} }***"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"ARS" =&gt; 10.55,</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012156Z" creationid="hirofumiwakasugi" creationdate="20151010T012156Z">
        <seg>"ARS" =&gt; 10.55,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Class is: " + {{ @type.stringify }}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215834Z" creationid="makenowjust" creationdate="20200509T215834Z">
        <seg>"Class is: " + {{ @type.stringify }}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"EUR" =&gt; 1.0,</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012155Z" creationid="hirofumiwakasugi" creationdate="20151010T012155Z">
        <seg>"EUR" =&gt; 1.0,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"George Harrison",</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174751Z" creationid="makenowjust" creationdate="20200413T174751Z">
        <seg>"George Harrison",</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Hello world!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162732Z" creationid="makenowjust" creationdate="20200413T162732Z">
        <seg>"Hello world!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Hello world! The time is #{Time.now}"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072712Z" creationid="hirofumiwakasugi" creationdate="20150901T072712Z">
        <seg>"Hello world! The time is #{Time.now}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Hello"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T113027Z" creationid="makenowjust" creationdate="20200502T113027Z">
        <seg>"Hello"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"JPY" =&gt; 134.15,</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012156Z" creationid="hirofumiwakasugi" creationdate="20151010T012156Z">
        <seg>"JPY" =&gt; 134.15,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"John Lennon",</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174748Z" creationid="makenowjust" creationdate="20200413T174748Z">
        <seg>"John Lennon",</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Miau"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031541Z" creationid="hirofumiwakasugi" creationdate="20150910T031541Z">
        <seg>"Miau"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Na-na-na na, hey Jude"

lyrics = user_input.presence || default_lyrics

puts "The Beatles are singing: #{"🎵#{lyrics}🎶🎸🥁".colorize.mode(:blink)}"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100630Z" creationid="makenowjust" creationdate="20210324T100630Z">
        <seg>"Na-na-na na, hey Jude"

lyrics = user_input.presence || default_lyrics

puts "The Beatles are singing: #{"🎵#{lyrics}🎶🎸🥁".colorize.mode(:blink)}"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Na-na-na na, hey Jude"

lyrics = user_input.presence || default_lyrics

puts "The Beatles are singing: #{"🎵#{user_input}🎶🎸🥁".colorize.mode(:blink)}"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T184438Z" creationid="makenowjust" creationdate="20200413T184438Z">
        <seg>"Na-na-na na, hey Jude"

lyrics = user_input.presence || default_lyrics

puts "The Beatles are singing: #{"🎵#{user_input}🎶🎸🥁".colorize.mode(:blink)}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Na-na-na na, hey Jude"

lyrics = user_input.presence || default_lyrics

puts "The Beatles are singing: 🎵#{lyrics.upcase}🎶🎸🥁"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182801Z" creationid="makenowjust" creationdate="20200413T182801Z">
        <seg>"Na-na-na na, hey Jude"

lyrics = user_input.presence || default_lyrics

puts "The Beatles are singing: 🎵#{lyrics.upcase}🎶🎸🥁"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Na-na-na na, hey Jude"

lyrics = user_input.presence || default_lyrics

puts "The Beatles are singing: 🎵#{lyrics.upcase}🎶🎸🥁"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100619Z" creationid="makenowjust" creationdate="20210324T100619Z">
        <seg>"Na-na-na na, hey Jude"

lyrics = user_input.presence || default_lyrics

puts "The Beatles are singing: 🎵#{lyrics.upcase}🎶🎸🥁"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Paul McCartney",</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174749Z" creationid="makenowjust" creationdate="20200413T174749Z">
        <seg>"Paul McCartney",</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Ringo Starr"
]
say_hi_to = ""

option_parser = OptionParser.parse do |parser|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175224Z" creationid="makenowjust" creationdate="20200413T175224Z">
        <seg>"Ringo Starr"
]
say_hi_to = ""

option_parser = OptionParser.parse do |parser|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Ringo Starr"
]
shout = false

option_parser = OptionParser.parse do |parser|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174753Z" creationid="makenowjust" creationdate="20200413T174753Z">
        <seg>"Ringo Starr"
]
shout = false

option_parser = OptionParser.parse do |parser|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Ringo Starr"
]
shout = false
say_hi_to = ""
strawberry = false

option_parser = OptionParser.parse do |parser|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180417Z" creationid="makenowjust" creationdate="20200413T180417Z">
        <seg>"Ringo Starr"
]
shout = false
say_hi_to = ""
strawberry = false

option_parser = OptionParser.parse do |parser|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Ringo Starr",
]
say_hi_to = ""

option_parser = OptionParser.parse do |parser|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T085143Z" creationid="makenowjust" creationdate="20211107T085143Z">
        <seg>"Ringo Starr",
]
say_hi_to = ""

option_parser = OptionParser.parse do |parser|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Ringo Starr",
]
shout = false

option_parser = OptionParser.parse do |parser|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T085139Z" creationid="makenowjust" creationdate="20211107T085139Z">
        <seg>"Ringo Starr",
]
shout = false

option_parser = OptionParser.parse do |parser|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Ringo Starr",
]
shout = false
say_hi_to = ""
strawberry = false

option_parser = OptionParser.parse do |parser|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T085507Z" creationid="makenowjust" creationdate="20211107T085507Z">
        <seg>"Ringo Starr",
]
shout = false
say_hi_to = ""
strawberry = false

option_parser = OptionParser.parse do |parser|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"USD" =&gt; 1.12,</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012156Z" creationid="hirofumiwakasugi" creationdate="20151010T012156Z">
        <seg>"USD" =&gt; 1.12,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Unsafe" means that memory corruption, segmentation faults and crashes are possible to achieve.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012816Z" creationid="hirofumiwakasugi" creationdate="20151009T012735Z">
        <seg>「安全でない」というのは、メモリの破壊、セグメンテーション違反、そしてクラッシュの可能性があることを意味しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Woof!"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031540Z" creationid="hirofumiwakasugi" creationdate="20150910T031540Z">
        <seg>"Woof!"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"\""                  # double quote
"\\"                  # backslash
"\a"                  # alert
"\b"                  # backspace
"\e"                  # escape
"\f"                  # form feed
"\n"                  # newline
"\r"                  # carriage return
"\t"                  # tab
"\v"                  # vertical tab
"\377"                # octal ASCII character
"\xFF"                # hexadecimal ASCII character
"\uFFFF"              # hexadecimal unicode character
"\u{0}".."\u{10FFFF}" # hexadecimal unicode character</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T090319Z" creationid="makenowjust" creationdate="20210130T090319Z">
        <seg>"\""                  # ダブルクオート
"\\"                  # バックスラッシュ
"\a"                  # アラート
"\b"                  # バックスペース
"\e"                  # エスケープ
"\f"                  # フォームフィード (改ページ)
"\n"                  # 改行
"\r"                  # キャリッジリターン (復帰)
"\t"                  # タブ
"\v"                  # 垂直タブ
"\377"                # 8進数による ASCII 文字
"\xFF"                # 16進数による ASCII 文字
"\uFFFF"              # 16進数によるユニコード文字
"\u{0}".."\u{10FFFF}" # 16進数によるユニコード文字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"\""                  # double quote
"\\"                  # backslash
"\a"                  # alert
"\b"                  # backspace
"\e"                  # escape
"\f"                  # form feed
"\n"                  # newline
"\r"                  # carriage return
"\t"                  # tab
"\v"                  # vertical tab
"\888"                # octal ASCII character
"\xFF"                # hexadecimal ASCII character
"\uFFFF"              # hexadecimal unicode character
"\u{0}".."\u{10FFFF}" # hexadecimal unicode character</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T191907Z" creationid="makenowjust" creationdate="20200419T191803Z">
        <seg>"\""                  # ダブルクォート
"\\"                  # バックスラッシュ
"\a"                  # アラート
"\b"                  # バックスペース
"\e"                  # エスケープ
"\f"                  # フォームフィード (改ページ)
"\n"                  # 改行
"\r"                  # キャリッジリターン (復帰)
"\t"                  # タブ文字
"\v"                  # 垂直タブ
"\888"                # 8進数による ASCII 文字
"\xFF"                # 16進数による ASCII 文字
"\uFFFF"              # 16進数によるユニコード文字
"\u{0}".."\u{10FFFF}" # 16進数によるユニコード文字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"\#{a + b}"  # =&gt; "#{a + b}"
%q(#{a + b}) # =&gt; "#{a + b}"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192730Z" creationid="makenowjust" creationdate="20200419T192730Z">
        <seg>"\#{a + b}"  # =&gt; "#{a + b}"
%q(#{a + b}) # =&gt; "#{a + b}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"\101" # =&gt; "A"
"\123" # =&gt; "S"
"\12"  # =&gt; "\n"
"\1"   # string with one character with code point 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192042Z" creationid="makenowjust" creationdate="20200419T192042Z">
        <seg>"\101" # =&gt; "A"
"\123" # =&gt; "S"
"\12"  # =&gt; "\n"
"\1"   # コードポイント1の文字が1つだけの文字列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"\u0041"    # =&gt; "A"
"\u{41}"    # =&gt; "A"
"\u{1F52E}" # =&gt; "&amp;#x1F52E;"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192103Z" creationid="makenowjust" creationdate="20200419T192103Z">
        <seg>"\u0041"    # =&gt; "A"
"\u{41}"    # =&gt; "A"
"\u{1F52E}" # =&gt; "🔮"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"\u{48 45 4C 4C 4F}" # =&gt; "HELLO"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192149Z" creationid="makenowjust" creationdate="20200419T192149Z">
        <seg>"\u{48 45 4C 4C 4F}" # =&gt; "HELLO"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"\{{greeting.id}} {{name.id}}"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220320Z" creationid="makenowjust" creationdate="20200509T220320Z">
        <seg>"\{{greeting.id}} {{name.id}}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"base": "https://github.com/crystal-lang/crystal-book/edit/master",</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T040217Z" creationid="makenowjust" creationdate="20200420T035410Z">
        <seg>"base": "https://github.com/crystal-jp/ja.crystal-lang.org/edit/master/locale/ja/crystal-book",</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"class"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011920Z" creationid="hirofumiwakasugi" creationdate="20151009T011920Z">
        <seg>"class"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"class"
end

foo 1     # "instance"
foo Int32 # "class"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T122859Z" creationid="makenowjust" creationdate="20200507T122859Z">
        <seg>"class"
end

foo 1     # "instance"
foo Int32 # "class"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"contributePrefix": "https://github.com/crystal-lang/crystal-book/"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035459Z" creationid="makenowjust" creationdate="20200420T035459Z">
        <seg>"contributePrefix": "https://github.com/crystal-lang/crystal-book/"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"edit-link": {</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035515Z" creationid="makenowjust" creationdate="20200420T035515Z">
        <seg>"edit-link": {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"foo"
end

@[MyAnnotation]
class Klass
end

@[MyAnnotation]
module MyModule
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T104626Z" creationid="makenowjust" creationdate="20200510T104626Z">
        <seg>"foo"
end

@[MyAnnotation]
class Klass
end

@[MyAnnotation]
module MyModule
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"ga": {</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035935Z" creationid="makenowjust" creationdate="20200420T035935Z">
        <seg>"ga": {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"gitbook": "3.2.2",</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035526Z" creationid="makenowjust" creationdate="20200420T035526Z">
        <seg>"gitbook": "3.2.2",</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"hello</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194211Z" creationid="makenowjust" creationdate="20200419T194211Z">
        <seg>"hello</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"hello " \
"world, " \
"no newlines" # same as "hello world, no newlines"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194658Z" creationid="makenowjust" creationdate="20200419T194658Z">
        <seg>"hello " \
"world, " \
"no newlines" # same as "hello world, no newlines"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"hello \</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194800Z" creationid="makenowjust" creationdate="20200419T194800Z">
        <seg>"hello \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"hello world"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T191538Z" creationid="makenowjust" creationdate="20200419T191538Z">
        <seg>"hello world"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"hello"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T141149Z" creationid="makenowjust" creationdate="20200430T141149Z">
        <seg>"hello"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"hello"
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T024643Z" creationid="hirofumiwakasugi" creationdate="20150909T024643Z">
        <seg>"hello"
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"instance"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011919Z" creationid="hirofumiwakasugi" creationdate="20151009T011919Z">
        <seg>"instance"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"instance"
end

def foo(x : Int32.class)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T122857Z" creationid="makenowjust" creationdate="20200507T122857Z">
        <seg>"instance"
end

def foo(x : Int32.class)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"label": "Edit This Page"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035417Z" creationid="makenowjust" creationdate="20200420T035417Z">
        <seg>"label": "このページを編集"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"links": {</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035523Z" creationid="makenowjust" creationdate="20200420T035523Z">
        <seg>"links": {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"one"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035954Z" creationid="hirofumiwakasugi" creationdate="20151001T035954Z">
        <seg>"one"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"one"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030945Z" creationid="hirofumiwakasugi" creationdate="20150916T030945Z">
        <seg>"one"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"one"
end

Foo.new.yield_with_self { one } # =&gt; 1
Foo.new.yield_normally { one }  # =&gt; "one"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T191447Z" creationid="makenowjust" creationdate="20200505T191447Z">
        <seg>"one"
end

Foo.new.yield_with_self { one } # =&gt; 1
Foo.new.yield_normally { one }  # =&gt; "one"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"plugins": ["ga", "edit-link", "offline"],</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035309Z" creationid="makenowjust" creationdate="20200420T035309Z">
        <seg>"plugins": ["edit-link", "offline"],</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"pluginsConfig": {</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035511Z" creationid="makenowjust" creationdate="20200420T035511Z">
        <seg>"pluginsConfig": {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"token": "UA-42353458-1"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035928Z" creationid="makenowjust" creationdate="20200420T035324Z">
        <seg>"token": "UA-42353458-1"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"two"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215030Z" creationid="makenowjust" creationdate="20200509T215030Z">
        <seg>"two"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"unicorn"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213225Z" creationid="makenowjust" creationdate="20200412T213225Z">
        <seg>"unicorn"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"{{@type.name.id}} &lt; Parent"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224456Z" creationid="makenowjust" creationdate="20200509T224456Z">
        <seg>"{{@type.name.id}} &lt; Parent"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"{{greeting.id}} {{name.id}}"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220604Z" creationid="makenowjust" creationdate="20200509T220604Z">
        <seg>"{{greeting.id}} {{name.id}}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"¡hola {{name.id}}!"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220319Z" creationid="makenowjust" creationdate="20200509T220319Z">
        <seg>"¡hola {{name.id}}!"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"🍓" : "-"} #{member}"
end

unless say_hi_to.empty?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180437Z" creationid="makenowjust" creationdate="20200413T180437Z">
        <seg>"🍓" : "-"} #{member}"
end

unless say_hi_to.empty?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045654Z" creationid="hirofumiwakasugi" creationdate="20151007T045654Z">
        <seg>#</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#
# To create a unicorn:
#
# ```
# unicorn = Unicorn.new
# unicorn.speak
# ```
#
# The above produces:
#
# ```text
# "I'm a unicorn"
# ```
#
# Check the number of horns with `#horns`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144049Z" creationid="hirofumiwakasugi" creationdate="20151010T144049Z">
        <seg>#
# To create a unicorn:
#
# ```
# unicorn = Unicorn.new
# unicorn.speak
# ```
#
# The above produces:
#
# ```text
# "I'm a unicorn"
# ```
#
# Check the number of horns with `#horns`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#
# ```
# Unicorn.new.horns # =&gt; 1
# ```
def horns</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T211725Z" creationid="makenowjust" creationdate="20200412T211725Z">
        <seg>#
# ```
# Unicorn.new.horns # =&gt; 1
# ```
def horns</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#
# ```
# Unicorn.new.horns #=&gt; 1
# ```
def horns</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140135Z" creationid="hirofumiwakasugi" creationdate="20151010T140135Z">
        <seg>#
# ```
# Unicorn.new.horns #=&gt; 1
# ```
def horns</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#     end
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T201055Z" creationid="makenowjust" creationdate="20200413T201055Z">
        <seg>#     end
end{% endhighlight %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#     unicorn = Unicorn.new
#     unicorn.speak</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212032Z" creationid="makenowjust" creationdate="20200412T212032Z">
        <seg>#     unicorn = Unicorn.new
#     unicorn.speak</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#    One,</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052628Z" creationid="hirofumiwakasugi" creationdate="20151007T052628Z">
        <seg>#    One,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#    Three,</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052628Z" creationid="hirofumiwakasugi" creationdate="20151007T052628Z">
        <seg>#    Three,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#    Two,</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052628Z" creationid="hirofumiwakasugi" creationdate="20151007T052628Z">
        <seg>#    Two,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#    Zero,</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052627Z" creationid="hirofumiwakasugi" creationdate="20151007T052627Z">
        <seg>#    Zero,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#    double some_float;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052210Z" creationid="hirofumiwakasugi" creationdate="20151007T052210Z">
        <seg>#    double some_float;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#    int dst_time;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045656Z" creationid="hirofumiwakasugi" creationdate="20151007T045656Z">
        <seg>#    int dst_time;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#    int minutes_west;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045655Z" creationid="hirofumiwakasugi" creationdate="20151007T045655Z">
        <seg>#    int minutes_west;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#    int some_int;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052210Z" creationid="hirofumiwakasugi" creationdate="20151007T052210Z">
        <seg>#    int some_int;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#    void callback(int (*f)(int));</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024217Z" creationid="hirofumiwakasugi" creationdate="20151008T024217Z">
        <seg>#    void callback(int (*f)(int));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#  ...
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081527Z" creationid="makenowjust" creationdate="20200518T081527Z">
        <seg>#  ...
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#  enum SomeEnum {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052627Z" creationid="hirofumiwakasugi" creationdate="20151007T052627Z">
        <seg>#  enum SomeEnum {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#  struct TimeZone {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045654Z" creationid="hirofumiwakasugi" creationdate="20151007T045654Z">
        <seg>#  struct TimeZone {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#  union IntOrFloat {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052209Z" creationid="hirofumiwakasugi" creationdate="20151007T052209Z">
        <seg>#  union IntOrFloat {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#  };</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045656Z" creationid="hirofumiwakasugi" creationdate="20151007T045656Z">
        <seg>#  };</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># "box" it: we allocate memory and store the Proc there</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090523Z" creationid="makenowjust" creationdate="20200512T090523Z">
        <seg># そこで、メモリを確保して Proc をそこに保存する「ボックス化」をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># &amp;&amp;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T051346Z" creationid="hirofumiwakasugi" creationdate="20150905T051346Z">
        <seg># &amp;&amp;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># 'self' here is the Hello class</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T101247Z" creationid="makenowjust" creationdate="20200427T101247Z">
        <seg># ここでの 'self' は Hello クラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ..</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T104148Z" creationid="makenowjust" creationdate="20200506T104148Z">
        <seg># ..</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ...</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T031031Z" creationid="hirofumiwakasugi" creationdate="20150909T031031Z">
        <seg># ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ...
else</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103822Z" creationid="makenowjust" creationdate="20200506T103822Z">
        <seg># ...
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ...
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093557Z" creationid="makenowjust" creationdate="20200424T093557Z">
        <seg># ...
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ...
end

spawn do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081522Z" creationid="makenowjust" creationdate="20200518T081522Z">
        <seg># ...
end

spawn do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ...
ensure</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013615Z" creationid="hirofumiwakasugi" creationdate="20150907T013615Z">
        <seg># ...
ensure</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ...
rescue ex : MyException | MyOtherException</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013138Z" creationid="hirofumiwakasugi" creationdate="20150907T013138Z">
        <seg># ...
rescue ex : MyException | MyOtherException</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ...
rescue ex1 : MyException</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012446Z" creationid="hirofumiwakasugi" creationdate="20150907T012446Z">
        <seg># ...
rescue ex1 : MyException</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ...
when {1, 2, 3} # Syntax error: wrong number of tuple elements (given 3, expected 2)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093534Z" creationid="makenowjust" creationdate="20200424T093534Z">
        <seg># ...
when {1, 2, 3} # Syntax error: wrong number of tuple elements (given 3, expected 2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ... perform for each row in the ResultSet</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T235250Z" creationid="daiki" creationdate="20200705T235250Z">
        <seg># ... ResultSet の各行が実行される</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ... use db to perform queries
end</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200706T001422Z" creationid="daiki" creationdate="20200706T001422Z">
        <seg># ... クエリを実行するために db を利用します
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ... use db to perform queries
ensure</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200706T001331Z" creationid="daiki" creationdate="20200706T001331Z">
        <seg># ... クエリを実行するために db を利用します
ensure</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># 2 x Int32 = 2 x 4 = 8
instance_sizeof(Point) #=&gt; 12
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T120625Z" creationid="hirofumiwakasugi" creationdate="20150906T120625Z">
        <seg># 2 x Int32 = 2 x 4 = 8
instance_sizeof(Point) #=&gt; 12
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># :ditto:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215318Z" creationid="makenowjust" creationdate="20200412T215318Z">
        <seg># :ditto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># :ditto:
def number_of_horns</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212643Z" creationid="makenowjust" creationdate="20200412T212643Z">
        <seg># :ditto:
def number_of_horns</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># :inherit:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213758Z" creationid="makenowjust" creationdate="20200412T213758Z">
        <seg># :inherit:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># :nodoc:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144013Z" creationid="hirofumiwakasugi" creationdate="20151010T144013Z">
        <seg># :nodoc:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># =&gt; John Doe (30)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100807Z" creationid="makenowjust" creationdate="20210324T100807Z">
        <seg># =&gt; John Doe (30)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># =&gt; Sarah (33)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100806Z" creationid="makenowjust" creationdate="20210324T100806Z">
        <seg># =&gt; Sarah (33)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># =&gt; false</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182817Z" creationid="makenowjust" creationdate="20200505T182817Z">
        <seg># =&gt; false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># =&gt; false

b = nil
b.nil?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T090827Z" creationid="makenowjust" creationdate="20200518T090827Z">
        <seg># =&gt; false

b = nil
b.nil?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># =&gt; true</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T173841Z" creationid="makenowjust" creationdate="20200422T173841Z">
        <seg># =&gt; true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># =&gt; true
Color::Blue.red?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182816Z" creationid="makenowjust" creationdate="20200505T182816Z">
        <seg># =&gt; true
Color::Blue.red?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A Proc accepting a single Int32 argument and returning a String
Proc(Int32, String)

# A proc accepting no arguments and returning Void
Proc(Void)

# A proc accepting two arguments (one Int32 and one String) and returning a Char
Proc(Int32, String, Char)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171910Z" creationid="makenowjust" creationdate="20200422T171536Z">
        <seg># Int32 の引数を受け付けて、String を返す Proc の型を表す
Proc(Int32, String)

# 引数を受け付けず Void を返す Proc の型を表す
Proc(Void)

# Int32 と String という2つの引数を受け付け Char を返す Proc の型を表す
Proc(Int32, String, Char)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A bit more useful: any two arguments Proc that returns an Int32:
def foo(x : _, _ -&gt; Int32)
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012249Z" creationid="hirofumiwakasugi" creationdate="20151009T012249Z">
        <seg># もう少し役に立つパターンで、引数を2つ取って Int32 を返す Proc
def foo(x : _, _ -&gt; Int32)
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A bit shorter:
if (a = @a).is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022633Z" creationid="hirofumiwakasugi" creationdate="20150903T022633Z">
        <seg># より簡潔な書き方
if (a = @a).is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A bit shorter:
if (a = @a).responds_to?(:abs)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030640Z" creationid="hirofumiwakasugi" creationdate="20150903T030640Z">
        <seg># より簡潔な書き方
if (a = @a).responds_to?(:abs)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A buffered channel of capacity 2
channel = Channel(Int32).new(2)

spawn do</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103759Z" creationid="akiji" creationdate="20200429T144030Z">
        <seg># 容量が2のバッファ付きチャネル
channel = Channel(Int32).new(2)

spawn do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A class that has a + method but isn't a Number
class Six</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T160552Z" creationid="makenowjust" creationdate="20200429T160552Z">
        <seg># + メソッドを持っているけれど Number ではないクラス
class Six</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A method with two required named arguments: x and y
def foo(*, x, y = 2)
end

foo            # Error: missing argument: x
foo x: 1       # OK, y is 2
foo x: 1, y: 3 # OK, y is 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160436Z" creationid="makenowjust" creationdate="20200501T160436Z">
        <seg># どちらも名前付き引数として渡さなければいけないが、x は必須で y は必須ではないメソッド
def foo(*, x, y = 2)
end

foo            # Error: missing argument: x
foo x: 1       # OK, y is 2
foo x: 1, y: 3 # OK, y is 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A method with two required named arguments: x and y
def foo(*, x, y)
end

foo            # Error: missing arguments: x, y
foo x: 1       # Error: missing argument: y
foo x: 1, y: 2 # OK</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160255Z" creationid="makenowjust" creationdate="20200501T160255Z">
        <seg># x と y という2つの名前付き引数を渡さなければいけないメソッド
def foo(*, x, y)
end

foo            # Error: missing arguments: x, y
foo x: 1       # Error: missing argument: y
foo x: 1, y: 2 # OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A method with two required named parameters: x and y
def foo(*, x, y)
end

foo            # Error: missing arguments: x, y
foo x: 1       # Error: missing argument: y
foo x: 1, y: 2 # OK</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T092009Z" creationid="makenowjust" creationdate="20210324T092009Z">
        <seg># x と y という2つの名前付き引数を渡さなければいけないメソッド
def foo(*, x, y)
end

foo            # Error: missing arguments: x, y
foo x: 1       # Error: missing argument: y
foo x: 1, y: 2 # OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A proc with one argument
-&gt;(x : Int32) { x.to_s } # Proc(Int32, String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021112Z" creationid="hirofumiwakasugi" creationdate="20150902T021112Z">
        <seg># 引数を1つ持つ Proc
-&gt;(x : Int32) { x.to_s } # Proc(Int32, String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A proc with two arguments:
-&gt;(x : Int32, y : Int32) { x + y } # Proc(Int32, Int32, Int32)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021130Z" creationid="hirofumiwakasugi" creationdate="20150902T021121Z">
        <seg># 引数を2つ持つ Proc
-&gt;(x : Int32, y : Int32) { x + y } # Proc(Int32, Int32, Int32)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A proc without arguments
-&gt;{ 1 } # Proc(Int32)

# A proc with one argument
-&gt;(x : Int32) { x.to_s } # Proc(Int32, String)

# A proc with two arguments:
-&gt;(x : Int32, y : Int32) { x + y } # Proc(Int32, Int32, Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171144Z" creationid="makenowjust" creationdate="20200422T171102Z">
        <seg># 引数を持たない Proc
-&gt;{ 1 } # Proc(Int32)

# 1つの引数を持つ Proc
-&gt;(x : Int32) { x.to_s } # Proc(Int32, String)

# 2つの引数を持つ Proc
-&gt;(x : Int32, y : Int32) { x + y } # Proc(Int32, Int32, Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A proc without parameters
-&gt;{ 1 } # Proc(Int32)

# A proc with one parameters
-&gt;(x : Int32) { x.to_s } # Proc(Int32, String)

# A proc with two parameters
-&gt;(x : Int32, y : Int32) { x + y } # Proc(Int32, Int32, Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T081659Z" creationid="makenowjust" creationdate="20210324T081659Z">
        <seg># 引数なしの Proc
-&gt;{ 1 } # Proc(Int32)

# 1引数の Proc
-&gt;(x : Int32) { x.to_s } # Proc(Int32, String)

# 2引数の Proc
-&gt;(x : Int32, y : Int32) { x + y } # Proc(Int32, Int32, Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A setter
person.name=("John")

# The above can be written as:
person.name = "John"

# An indexed assignment
objects.[]=(2, 3)

# The above can be written as:
objects[2] = 3

# Not assignment-related, but also syntax sugar:
objects.[](2, 3)

# The above can be written as:
objects[2, 3]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174603Z" creationid="makenowjust" creationdate="20200422T174507Z">
        <seg># セッターメソッドの呼び出し
person.name=("John")

# 上記は次ように書ける
person.name = "John"

# インデックスに対する代入
objects.[]=(2, 3)

# 上記は次のように書ける
objects[2] = 3

# 代入とは関係ないけれど、こういうシンタックスシュガーも
objects.[](2, 3)

# 上記は次のように書ける
objects[2, 3]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A struct to easily convert between Int32 codepoints and Chars
@[Extern(union: true)]
struct Int32OrChar</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114943Z" creationid="makenowjust" creationdate="20200510T114943Z">
        <seg># Int32 のコードポイントと文字列の間で簡単に変換できる構造体
@[Extern(union: true)]
struct Int32OrChar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A unicorn is a **legendary animal** (see the `Legendary` module) that has been
# described since antiquity as a beast with a large, spiraling horn projecting
# from its forehead.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T211654Z" creationid="makenowjust" creationdate="20200412T211654Z">
        <seg># A unicorn is a **legendary animal** (see the `Legendary` module) that has been
# described since antiquity as a beast with a large, spiraling horn projecting
# from its forehead.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># An array of Proc(Int32, String, Char)
Array(Int32, String -&gt; Char)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171851Z" creationid="makenowjust" creationdate="20200422T171847Z">
        <seg># Proc(Int32, String, Char) の配列の型を表す
Array(Int32, String -&gt; Char)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># An array of named tuples of x: Int32, y: String
Array({x: Int32, y: String})</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T170128Z" creationid="makenowjust" creationdate="20200422T170128Z">
        <seg># x が Int32、 y が String であるような名前付きタプルの配列の型を表す
Array({x: Int32, y: String})</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># An array of tuples of Int32, String and Char
Array({Int32, String, Char})</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T170138Z" creationid="makenowjust" creationdate="20200422T165146Z">
        <seg># Int32、String、Char のタプルの配列の型を表す
Array({Int32, String, Char})</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># An indexed assignment
objects.[]=(2, 3)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054712Z" creationid="hirofumiwakasugi" creationdate="20150902T054712Z">
        <seg># インデックスを指定した代入
objects.[]=(2, 3)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># And finally invoke the user's callback</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090930Z" creationid="makenowjust" creationdate="20200512T090930Z">
        <seg># そして、最終的にユーザーのコールバックを呼び出します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Another example:
if 1 &gt; 2
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013543Z" creationid="hirofumiwakasugi" creationdate="20150903T013543Z">
        <seg># 例2
if 1 &gt; 2
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Array</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022630Z" creationid="hirofumiwakasugi" creationdate="20150901T073243Z">
        <seg># 配列 (Array)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># As a suffix</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012834Z" creationid="hirofumiwakasugi" creationdate="20150903T012805Z">
        <seg># 後置 if</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># As an expression</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013030Z" creationid="hirofumiwakasugi" creationdate="20150903T013022Z">
        <seg># 式としての if</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053909Z" creationid="hirofumiwakasugi" creationdate="20150902T053904Z">
        <seg># 代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Assigns to a class variable
@@class = 3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054112Z" creationid="hirofumiwakasugi" creationdate="20150902T054112Z">
        <seg>#  クラス変数への代入
@@class = 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Assigns to a global variable
$global = 4
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054124Z" creationid="hirofumiwakasugi" creationdate="20150902T054124Z">
        <seg># グローバル変数への代入
$global = 4
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Assigns to a local variable
local = 1

# Assigns to an instance variable
@instance = 2

# Assigns to a class variable
@@class = 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174245Z" creationid="makenowjust" creationdate="20200422T174221Z">
        <seg># ローカル変数への代入
local = 1

# インスタンス変数への代入
@instance = 2

# クラス変数への代入
@@class = 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Assigns to an instance variable
@instance = 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053953Z" creationid="hirofumiwakasugi" creationdate="20150902T053953Z">
        <seg># インスタンス変数への代入
@instance = 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Assuming this example code is saved at: /crystal_code/pseudo_constants.cr
#
def pseudo_constants(caller_line = __LINE__, end_of_caller = __END_LINE__)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T180913Z" creationid="makenowjust" creationdate="20200505T180913Z">
        <seg># このコードは /crystal_code/pseudo_constants.cr に保存されているとします。
#
def pseudo_constants(caller_line = __LINE__, end_of_caller = __END_LINE__)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Attributes</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071820Z" creationid="hirofumiwakasugi" creationdate="20150919T071445Z">
        <seg># 属性 (Attribute)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Bad</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T130104Z" creationid="akiji" creationdate="20200430T130057Z">
        <seg># 良くない方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Bad: This is not attached to any class.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T033552Z" creationid="hirofumiwakasugi" creationdate="20151010T033519Z">
        <seg># よくない例: これはどのクラスにも紐付けられません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Better</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T161418Z" creationid="makenowjust" creationdate="20200501T161418Z">
        <seg># こちらの方が良いでしょう</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Binary operator.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T083914Z" creationid="makenowjust" creationdate="20200502T083914Z">
        <seg># 2項演算子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Block forwarding</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024230Z" creationid="hirofumiwakasugi" creationdate="20150916T025620Z">
        <seg># ブロックのフォワーディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Blocks and Procs</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T013126Z" creationid="hirofumiwakasugi" creationdate="20150916T013117Z">
        <seg># ブロックと Proc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Bool</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022650Z" creationid="hirofumiwakasugi" creationdate="20150901T050949Z">
        <seg># 真偽値 (Bool)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># C bindings</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T141459Z" creationid="hirofumiwakasugi" creationdate="20151003T141459Z">
        <seg># C バインディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Callbacks</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024120Z" creationid="hirofumiwakasugi" creationdate="20150902T023632Z">
        <seg># コールバック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Can also be written as a suffix
close_door unless door_closed?
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022902Z" creationid="hirofumiwakasugi" creationdate="20150903T022902Z">
        <seg># 後置することも可能
close_door unless door_closed?
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Capturing blocks</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T040138Z" creationid="hirofumiwakasugi" creationdate="20150916T035548Z">
        <seg># ブロックの捕捉</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Char</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022713Z" creationid="hirofumiwakasugi" creationdate="20150901T051210Z">
        <seg># 文字 (Char)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Check the number of horns with `#horns`.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212601Z" creationid="makenowjust" creationdate="20200412T212601Z">
        <seg># Check the number of horns with `#horns`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Class variables</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040358Z" creationid="hirofumiwakasugi" creationdate="20150910T040342Z">
        <seg># クラス変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Classes and methods</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021653Z" creationid="hirofumiwakasugi" creationdate="20150904T021646Z">
        <seg># クラスとメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Clearer than the above: `a` doesn't need
# to be in the exception handling code.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T104656Z" creationid="makenowjust" creationdate="20200506T104656Z">
        <seg># 例外処理のコードの内部で `a` を宣言する必要はないため、
# こう書くことで意図がより明確になる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Closures</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T053421Z" creationid="hirofumiwakasugi" creationdate="20150918T053413Z">
        <seg># クロージャ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Coding Style</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T141932Z" creationid="hirofumiwakasugi" creationdate="20151009T141850Z">
        <seg># コーディングスタイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Comments</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T050436Z" creationid="hirofumiwakasugi" creationdate="20150901T050436Z">
        <seg># コメント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Compile-time flags</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043628Z" creationid="hirofumiwakasugi" creationdate="20150906T115931Z">
        <seg># コンパイル時のフラグ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Constants</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055210Z" creationid="hirofumiwakasugi" creationdate="20150913T055203Z">
        <seg># 定数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Control expressions</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023852Z" creationid="hirofumiwakasugi" creationdate="20151009T023852Z">
        <seg># 制御式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Conventions</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T141412Z" creationid="hirofumiwakasugi" creationdate="20151009T141322Z">
        <seg># 規約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Creates a unicorn with the specified number of *horns*.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144050Z" creationid="hirofumiwakasugi" creationdate="20151010T144050Z">
        <seg># Creates a unicorn with the specified number of *horns*.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Cross-compilation</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T044416Z" creationid="hirofumiwakasugi" creationdate="20150909T044408Z">
        <seg># クロスコンパイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Crystal Programming Language</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T083639Z" creationid="hirofumiwakasugi" creationdate="20150831T050519Z">
        <seg># プログラミング言語 Crystal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Ctrl+D

default_lyrics = "Na, na, na, na-na-na na" \</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182757Z" creationid="makenowjust" creationdate="20200413T182757Z">
        <seg># Ctrl+D

default_lyrics = "Na, na, na, na-na-na na" \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Default and named arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T073703Z" creationid="hirofumiwakasugi" creationdate="20150906T073625Z">
        <seg># デフォルト引数と名前付き引数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Defines a method in the program
def add(x, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T095915Z" creationid="makenowjust" creationdate="20200427T095915Z">
        <seg># プログラムにメソッドを定義
def add(x, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Do something with *path*
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T160816Z" creationid="makenowjust" creationdate="20200429T160816Z">
        <seg># *path* を使う
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Documenting code</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012252Z" creationid="hirofumiwakasugi" creationdate="20151009T141854Z">
        <seg># コードのドキュメント化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Ending with question and exclamation marks
:question?
:exclamation!</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T131417Z" creationid="hirofumiwakasugi" creationdate="20150901T131350Z">
        <seg># 名前が ? や ! で終わるシンボル
:question?
:exclamation!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Enums</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T023927Z" creationid="hirofumiwakasugi" creationdate="20150914T023927Z">
        <seg># Enum</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Error: no overload matches 'String#+' with types Int32
john.name + 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043144Z" creationid="hirofumiwakasugi" creationdate="20150905T043144Z">
        <seg># Error: no overload matches 'String#+' with types Int32
john.name + 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Error: no overload matches 'add' with types Bool, Bool
add true, false
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042650Z" creationid="hirofumiwakasugi" creationdate="20150907T042650Z">
        <seg># Error: no overload matches 'add' with types Bool, Bool
add true, false
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Error: no overload matches 'restricted_add' with types Six, Int32
restricted_add Six.new, 10
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135923Z" creationid="hirofumiwakasugi" creationdate="20151009T135923Z">
        <seg># Error: no overload matches 'restricted_add' with types Six, Int32
restricted_add Six.new, 10
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Error: the next line gives a parser error</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T043752Z" creationid="hirofumiwakasugi" creationdate="20150909T043752Z">
        <seg># 次の行はパースエラーとなる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Error: undefined method 'length' for Int32
john.name.length</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043142Z" creationid="hirofumiwakasugi" creationdate="20150905T043142Z">
        <seg># Error: undefined method 'length' for Int32
john.name.length</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Error: undefined method 'size' for Int32
john.name.size</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025344Z" creationid="hirofumiwakasugi" creationdate="20151009T025344Z">
        <seg># Error: undefined method 'size' for Int32
john.name.size</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Everything is an object</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061745Z" creationid="hirofumiwakasugi" creationdate="20150904T012623Z">
        <seg># すべてがオブジェクト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Example of 1

class Person</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T110333Z" creationid="makenowjust" creationdate="20200502T110333Z">
        <seg># 1 の場合の例

class Person</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Exception handling</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T010529Z" creationid="hirofumiwakasugi" creationdate="20150907T010502Z">
        <seg># 例外処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># First declare vars</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T021023Z" creationid="hirofumiwakasugi" creationdate="20151002T021007Z">
        <seg># まず変数を宣言する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># First, this method is defined</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072605Z" creationid="hirofumiwakasugi" creationdate="20150906T072558Z">
        <seg># 最初にこのメソッドが定義されている</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Floats</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022728Z" creationid="hirofumiwakasugi" creationdate="20150901T073255Z">
        <seg># 浮動小数点数 (Float)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># For the operators
:+
:-
:*
:/
:==
:&lt;
:&lt;=
:&gt;
:&gt;=
:!
:!=
:=~
:!~
:&amp;
:|
:^
:~
:**
:&gt;&gt;
:&lt;&lt;
:%
:[]
:[]?
:[]=
:&lt;=&gt;
:===
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T131433Z" creationid="hirofumiwakasugi" creationdate="20150901T131433Z">
        <seg># 演算子
:+
:-
:*
:/
:==
:&lt;
:&lt;=
:&gt;
:&gt;=
:!
:!=
:=~
:!~
:&amp;
:|
:^
:~
:**
:&gt;&gt;
:&lt;&lt;
:%
:[]
:[]?
:[]=
:&lt;=&gt;
:===
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Fresh variables</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044635Z" creationid="hirofumiwakasugi" creationdate="20151002T014547Z">
        <seg># フレッシュな変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># From a tar.gz</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T061923Z" creationid="hirofumiwakasugi" creationdate="20150831T050418Z">
        <seg># tar.gz からインストール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># From sources</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060014Z" creationid="hirofumiwakasugi" creationdate="20150831T054710Z">
        <seg># ソースコードからインストール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Generics</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T053729Z" creationid="hirofumiwakasugi" creationdate="20150910T042033Z">
        <seg># ジェネリクス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Global variables</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053417Z" creationid="hirofumiwakasugi" creationdate="20150902T053409Z">
        <seg># グローバル変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Good</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T130043Z" creationid="akiji" creationdate="20200430T130043Z">
        <seg># 良い方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># HTTP Server</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072521Z" creationid="hirofumiwakasugi" creationdate="20150831T064731Z">
        <seg># HTTP サーバー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Hash</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022737Z" creationid="hirofumiwakasugi" creationdate="20150901T074025Z">
        <seg># ハッシュ (Hash)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Hello World!</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T054726Z" creationid="hirofumiwakasugi" creationdate="20150831T054726Z">
        <seg># Hello World!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Hooks</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T012230Z" creationid="hirofumiwakasugi" creationdate="20151002T012205Z">
        <seg># フック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># In C:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024224Z" creationid="hirofumiwakasugi" creationdate="20151007T045653Z">
        <seg># C では:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># In C: double cos(double x)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T143724Z" creationid="hirofumiwakasugi" creationdate="20151003T143719Z">
        <seg># C では double cos(double x) となっている</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># In file one.cr
private class Greeter</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T113023Z" creationid="makenowjust" creationdate="20200502T113023Z">
        <seg># one.cr:
private class Greeter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># In file one.cr
private def greet</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T112724Z" creationid="makenowjust" creationdate="20200502T112724Z">
        <seg># one.cr:
private def greet</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># In file two.cr
require "./one"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T040833Z" creationid="hirofumiwakasugi" creationdate="20150909T040833Z">
        <seg># two.cr ファイル
require "./one"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Increases age by one</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071436Z" creationid="hirofumiwakasugi" creationdate="20150906T071436Z">
        <seg># 1歳年をとる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Increases age by the given number of years</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071454Z" creationid="hirofumiwakasugi" creationdate="20150906T071454Z">
        <seg># 受け取った数値だけ年をとる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Increases age by the given number of years, as a String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071528Z" creationid="hirofumiwakasugi" creationdate="20150906T071528Z">
        <seg># 「String 型で」受け取った数値だけ年をとる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Inheritance</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T022942Z" creationid="hirofumiwakasugi" creationdate="20150910T022936Z">
        <seg># 継承</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Installation</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T053756Z" creationid="hirofumiwakasugi" creationdate="20150831T053748Z">
        <seg># インストール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Instance variables type inference</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T125640Z" creationid="hirofumiwakasugi" creationdate="20150904T125335Z">
        <seg># インスタンス変数と型推論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Integers</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022745Z" creationid="hirofumiwakasugi" creationdate="20150901T051254Z">
        <seg># 整数 (Integer)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Invoked when Foo is garbage-collected</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T140329Z" creationid="hirofumiwakasugi" creationdate="20150910T041658Z">
        <seg># Foo がガベージコレクトされるときに呼び出される</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Invokes the add method in the program
add(1, 2) #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021439Z" creationid="hirofumiwakasugi" creationdate="20150904T015211Z">
        <seg># プログラムで add メソッドを実行
add(1, 2) #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Invokes the first definition
person.become_older 20</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072914Z" creationid="hirofumiwakasugi" creationdate="20150906T072914Z">
        <seg># これは最初に定義されたメソッドを実行する
person.become_older 20</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Invokes the second definition
person.become_older "12"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072931Z" creationid="hirofumiwakasugi" creationdate="20150906T072931Z">
        <seg># これは2番目に定義されたメソッドを実行する
person.become_older "12"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Literals</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T050728Z" creationid="hirofumiwakasugi" creationdate="20150901T050720Z">
        <seg># リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Local variables</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T051622Z" creationid="hirofumiwakasugi" creationdate="20150902T051615Z">
        <seg># ローカル変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Low-level primitives</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T033540Z" creationid="hirofumiwakasugi" creationdate="20150902T053536Z">
        <seg># ローレベルプリミティブ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Macro methods</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T012220Z" creationid="hirofumiwakasugi" creationdate="20151001T041809Z">
        <seg># マクロメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Macros</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T014441Z" creationid="hirofumiwakasugi" creationdate="20151001T014441Z">
        <seg># マクロ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Makes the unicorn speak to STDOUT</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144055Z" creationid="hirofumiwakasugi" creationdate="20151010T144055Z">
        <seg># Makes the unicorn speak to STDOUT</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Makes the unicorn speak to STDOUT
#
# NOTE: Although unicorns don't normally talk, this one is special
# TODO: Check if unicorn is asleep and raise exception if not able to speak
# TODO: Create another `speak` method that takes and prints a string
def speak</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214634Z" creationid="makenowjust" creationdate="20200412T214634Z">
        <seg># Makes the unicorn speak to STDOUT
#
# NOTE: Although unicorns don't normally talk, this one is special
# TODO: Check if unicorn is asleep and raise exception if not able to speak
# TODO: Create another `speak` method that takes and prints a string
def speak</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Makes this animal talk</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040149Z" creationid="hirofumiwakasugi" creationdate="20150910T040129Z">
        <seg># Animal に talk を定義</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Matches if 0 === value1, no test done against value2
when {_, 0}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093648Z" creationid="makenowjust" creationdate="20200424T093648Z">
        <seg># 0 === value1 の場合にマッチして、 value2 に対するチェックは行なわれない
when {_, 0}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Matches if 0 === value2, no test done against value1
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094429Z" creationid="makenowjust" creationdate="20200424T093707Z">
        <seg># 0 === value2 の場合にマッチして、 value1 に対するチェックは行なわれない
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Matches if value1.even?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093746Z" creationid="makenowjust" creationdate="20200424T093727Z">
        <seg># value1.even? &amp;&amp; value2.even? のときにマッチ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Matches if value1.is_a?(String) &amp;&amp; value2.is_a?(Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093847Z" creationid="makenowjust" creationdate="20200424T093847Z">
        <seg># value1.is_a?(String) &amp;&amp; value2.is_a?(Int32) のときにマッチ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Methods and instance variables</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T121622Z" creationid="hirofumiwakasugi" creationdate="20150904T121612Z">
        <seg># メソッドとインスタンス変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Modules</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T130326Z" creationid="hirofumiwakasugi" creationdate="20150911T130320Z">
        <seg># モジュール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Multiple assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T055224Z" creationid="hirofumiwakasugi" creationdate="20150902T055157Z">
        <seg># 多重代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># MySQL
db.exec "insert into contacts values (?, ?)", "John", 30
# Postgres
db.exec "insert into contacts values ($1, $2)", "Sarah", 33</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100758Z" creationid="makenowjust" creationdate="20210324T100758Z">
        <seg># MySQL
db.exec "insert into contacts values (?, ?)", "John", 30
# Postgres
db.exec "insert into contacts values ($1, $2)", "Sarah", 33</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Nil</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T050840Z" creationid="hirofumiwakasugi" creationdate="20150901T050840Z">
        <seg># Nil</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># No need for a return type restriction here</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T142228Z" creationid="makenowjust" creationdate="20200427T142228Z">
        <seg># ここの戻り値の型制約は必要ない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Not assignment-related, but also syntax sugar:
objects.[](2, 3)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054747Z" creationid="hirofumiwakasugi" creationdate="20150902T054747Z">
        <seg># 代入ではないが、以下のシンタックスシュガーも有効
objects.[](2, 3)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Now we cast that pointer to the same type, and
# we should get the same value
array2 = ptr as Array(Int32)
array2.same?(array) #=&gt; true
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T020318Z" creationid="hirofumiwakasugi" creationdate="20150930T020305Z">
        <seg># ポインタをその型にキャストすると、
# 同一の値が得られる
array2 = ptr as Array(Int32)
array2.same?(array) #=&gt; true
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Now we turn data back into the Proc, using Box.unbox</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090935Z" creationid="makenowjust" creationdate="20200512T090912Z">
        <seg># ここで Box.unbox を使い data を Proc に戻します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># OK</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T043802Z" creationid="hirofumiwakasugi" creationdate="20150909T043802Z">
        <seg># OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># OK
add Six.new, 10</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135900Z" creationid="hirofumiwakasugi" creationdate="20151009T135900Z">
        <seg># OK
add Six.new, 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># OK, but reads odd</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T161408Z" creationid="makenowjust" creationdate="20200501T161408Z">
        <seg># OK、ですが読んでいて違和感があります</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Ok
add 1, 2 # Ok</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042707Z" creationid="hirofumiwakasugi" creationdate="20150907T042648Z">
        <seg># これは OK
add 1, 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># On Arch Linux</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021510Z" creationid="hirofumiwakasugi" creationdate="20151009T021435Z">
        <seg># Arch Linux</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># On Debian and Ubuntu</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T053648Z" creationid="hirofumiwakasugi" creationdate="20150831T052610Z">
        <seg># Debian や Ubuntu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># On Mac OSX using Homebrew</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055126Z" creationid="hirofumiwakasugi" creationdate="20150831T055126Z">
        <seg># Mac OS X (Homebrew を利用)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># On RedHat and CentOS</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055033Z" creationid="hirofumiwakasugi" creationdate="20150831T054955Z">
        <seg># RedHat や CentOS</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># On a 64 bits machine
sizeof(Pointer(Int32)) # =&gt; 8
sizeof(String)         # =&gt; 8</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T015446Z" creationid="makenowjust" creationdate="20200511T015435Z">
        <seg># 64ビット処理系の場合
sizeof(Pointer(Int32)) # =&gt; 8
sizeof(String)         # =&gt; 8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># One for each thread</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T115028Z" creationid="makenowjust" creationdate="20200510T115028Z">
        <seg># スレッドごとに1つずつ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># One or more positional argument allowed, y must be passed as a named argument
def foo(x, *args, y)
end

foo 1             # Error, missing argument: y
foo 1, 2          # Error: missing argument; y
foo 1, 2, 3       # Error: missing argument: y
foo 1, y: 10      # OK
foo 1, 2, 3, y: 4 # OK</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160159Z" creationid="makenowjust" creationdate="20200501T160159Z">
        <seg># 1つ以上の位置指定の引数と、y という名前の名前付き引数を渡さなければいけないメソッド
def foo(x, *args, y)
end

foo 1             # Error, missing argument: y
foo 1, 2          # Error: missing argument; y
foo 1, 2, 3       # Error: missing argument: y
foo 1, y: 10      # OK
foo 1, 2, 3, y: 4 # OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Only one positional argument allowed, y must be passed as a named argument
def foo(x, *, y)
end

foo 1        # Error, missing argument: y
foo 1, 2     # Error: wrong number of arguments (given 2, expected 1)
foo 1, y: 10 # OK</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160050Z" creationid="makenowjust" creationdate="20200501T160036Z">
        <seg># ちょうど1つの位置指定の引数と、y という名前の名前付き引数を渡さなければいけないメソッド
def foo(x, *, y)
end

foo 1        # Error, missing argument: y
foo 1, 2     # Error: wrong number of arguments (given 2, expected 1)
foo 1, y: 10 # OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Operators</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T024905Z" creationid="hirofumiwakasugi" creationdate="20150905T052333Z">
        <seg># 演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Ouptut:
# Skipping 1
# Got 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025711Z" creationid="hirofumiwakasugi" creationdate="20150916T025711Z">
        <seg># 出力:
# Skipping 1
# Got 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Output
# 10
# 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030115Z" creationid="hirofumiwakasugi" creationdate="20150916T030115Z">
        <seg># 出力:
# 10
# 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Output:
# Before foo
# 1
# After foo
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025557Z" creationid="hirofumiwakasugi" creationdate="20150917T025545Z">
        <seg># 出力:
# Before foo
# 1
# After foo
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Output: 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022448Z" creationid="hirofumiwakasugi" creationdate="20150916T022448Z">
        <seg># 出力: 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Output: 6
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022229Z" creationid="hirofumiwakasugi" creationdate="20150916T022229Z">
        <seg># 出力: 6
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Output: OH NO!
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012113Z" creationid="hirofumiwakasugi" creationdate="20150907T012113Z">
        <seg># 出力: OH NO!
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Output: Rescued MyException
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012247Z" creationid="hirofumiwakasugi" creationdate="20150907T012247Z">
        <seg># 出力: Rescued MyException
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Output: Rescued MyException: OH NO!
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012422Z" creationid="hirofumiwakasugi" creationdate="20150907T012422Z">
        <seg># 出力: Rescued MyException: OH NO!
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Output: Rescued!
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012008Z" creationid="hirofumiwakasugi" creationdate="20150907T012000Z">
        <seg># 出力: Rescued!
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Overloading</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T070556Z" creationid="hirofumiwakasugi" creationdate="20150906T070551Z">
        <seg># オーバーロード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Overview</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T071446Z" creationid="hirofumiwakasugi" creationdate="20150831T054952Z">
        <seg># 概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Performance</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022632Z" creationid="hirofumiwakasugi" creationdate="20150905T051354Z">
        <seg># パフォーマンス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Prints "Bye bye ...!" for ever
loop do</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041701Z" creationid="hirofumiwakasugi" creationdate="20150910T041701Z">
        <seg># Prints "Bye bye ...!" for ever
loop do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Proc</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T020906Z" creationid="hirofumiwakasugi" creationdate="20150902T020906Z">
        <seg># Proc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Proc literal</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061544Z" creationid="hirofumiwakasugi" creationdate="20150918T061544Z">
        <seg># Proc リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Proc pointer</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135209Z" creationid="hirofumiwakasugi" creationdate="20151009T135209Z">
        <seg># Proc pointer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Provides a placeholder {{name.id}} method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221043Z" creationid="makenowjust" creationdate="20200509T221043Z">
        <seg># Provides a placeholder {{name.id}} method.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Range</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022803Z" creationid="hirofumiwakasugi" creationdate="20150902T014000Z">
        <seg># 範囲 (Range)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Regex</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022811Z" creationid="hirofumiwakasugi" creationdate="20150902T013959Z">
        <seg># 正規表現 (Regex)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Requiring files</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T162046Z" creationid="hirofumiwakasugi" creationdate="20150901T050320Z">
        <seg>#ファイルの require</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Return the captured named arguments as a NamedTuple</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T155133Z" creationid="makenowjust" creationdate="20200429T155116Z">
        <seg># NamedTuple としてキャプチャした名前付き引数を返す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Return types</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T024222Z" creationid="hirofumiwakasugi" creationdate="20150901T130925Z">
        <seg># 戻り値の型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Returns the name of `self`.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213218Z" creationid="makenowjust" creationdate="20200412T213218Z">
        <seg># Returns the name of `self`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Returns the number of horns this unicorn has</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144052Z" creationid="hirofumiwakasugi" creationdate="20151010T144052Z">
        <seg># Returns the number of horns this unicorn has</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Returns the number of horns this unicorn has.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T211722Z" creationid="makenowjust" creationdate="20200412T211722Z">
        <seg># Returns the number of horns this unicorn has.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Same as "  Hello\n    world"
&lt;&lt;-STRING</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T062401Z" creationid="hirofumiwakasugi" creationdate="20160204T062401Z">
        <seg># "  Hello\n    world" と同じ
&lt;&lt;-STRING</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Same as callback(NULL) in C
X.callback nil</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T085907Z" creationid="makenowjust" creationdate="20200512T085907Z">
        <seg># C での callback(NULL) と同じ
X.callback nil</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Same as not specifying a restriction, not very useful
def foo(x : _)
end

# A bit more useful: any two arguments Proc that returns an Int32:
def foo(x : _, _ -&gt; Int32)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T123245Z" creationid="makenowjust" creationdate="20200507T123245Z">
        <seg># 型制約を指定しないことと同じです。あまり便利な例ではありません。
def foo(x : _)
end

# もう少し有用な例として、これは引数を2つ受け取って Int32 を返す Proc を表します
def foo(x : _, _ -&gt; Int32)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Same as not specifying a restriction, not very useful
def foo(x : _)
end

# A bit more useful: any two-parameter Proc that returns an Int32:
def foo(x : _, _ -&gt; Int32)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T074533Z" creationid="makenowjust" creationdate="20210324T074533Z">
        <seg># 型制約を指定しないことと同じです。あまり便利な例ではありませんが。
def foo(x : _)
end

# もう少し有用な例として、これは引数を2つ受け取って Int32 を返す Proc を表します
def foo(x : _, _ -&gt; Int32)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Same as:
temp1 = "John"
temp2 = 32
person.name = temp1
person.age = temp2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060250Z" creationid="hirofumiwakasugi" creationdate="20150902T060250Z">
        <seg># 上記は以下と同じ
temp1 = "John"
temp2 = 32
person.name = temp1
person.age = temp2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Same as:
temp1 = 3
temp2 = 4
objects[1] = temp1
objects[2] = temp2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060327Z" creationid="hirofumiwakasugi" creationdate="20150902T060327Z">
        <seg># 上記は以下と同じ
temp1 = 3
temp2 = 4
objects[1] = temp1
objects[2] = temp2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Sample output:
# Declaring: __temp_255
# Declaring: __temp_256
# Declaring: __temp_257
# __temp_255: 0
# __temp_256: 1
# __temp_257: 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T021041Z" creationid="hirofumiwakasugi" creationdate="20151002T021041Z">
        <seg># 出力例:
# Declaring: __temp_255
# Declaring: __temp_256
# Declaring: __temp_257
# __temp_255: 0
# __temp_256: 1
# __temp_257: 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Second option: use `Object#try` found in the standard library
@a.try do |a|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T020410Z" creationid="hirofumiwakasugi" creationdate="20150903T020339Z">
        <seg># 方法2: 標準ライブラリの `Object#try` を使う
@a.try do |a|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># See what a unicorn would say with `Unicorn#speak`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T142314Z" creationid="hirofumiwakasugi" creationdate="20151010T142314Z">
        <seg># See what a unicorn would say with `Unicorn#speak`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Since "String" is more restrictive than no restriction</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072655Z" creationid="hirofumiwakasugi" creationdate="20150906T072607Z">
        <seg># 「String」の指定は制約なしのものより制約的であるため、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Since Proc is a {Void*, Void*}, we can't turn that into a Void*, so we</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090448Z" creationid="makenowjust" creationdate="20200512T090448Z">
        <seg># Proc は内部的には {Void*, Void*} なので Void* にすることはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Since the only way to get here is if a is truthy,</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014415Z" creationid="hirofumiwakasugi" creationdate="20150903T014312Z">
        <seg># ここに到達するためには if が真でなければならない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Some documentation common to every *id*.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213750Z" creationid="makenowjust" creationdate="20200412T213750Z">
        <seg># Some documentation common to every *id*.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Some documentation specific to *id*'s usage within `Child`.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213753Z" creationid="makenowjust" creationdate="20200412T213753Z">
        <seg># Some documentation specific to *id*'s usage within `Child`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Splats and tuples</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T041746Z" creationid="hirofumiwakasugi" creationdate="20150907T041746Z">
        <seg># splat 展開とタプル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022820Z" creationid="hirofumiwakasugi" creationdate="20150901T080750Z">
        <seg># 文字列 (String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Structs</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T053653Z" creationid="hirofumiwakasugi" creationdate="20150907T042239Z">
        <seg># 構造体 (Struct)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Summary</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T051321Z" creationid="hirofumiwakasugi" creationdate="20150831T051321Z">
        <seg># Summary</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Supports double quotes and nested angles
%&lt;hello &lt;"world"&gt;&gt; # same as "hello &lt;\"world\"&gt;"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T105144Z" creationid="hirofumiwakasugi" creationdate="20150901T104920Z">
        <seg># ダブルクォートと入れ子の山カッコ (アングルブラケット) を含む
%&lt;hello &lt;"world"&gt;&gt; # "hello &lt;\"world\"&gt;" と同じ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Supports double quotes and nested brackets
%[hello ["world"]] # same as "hello [\"world\"]"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104824Z" creationid="hirofumiwakasugi" creationdate="20150901T104611Z">
        <seg># ダブルクォートと入れ子の角カッコ (ブラケット) を含む
%[hello ["world"]] # "hello [\"world\"]" と同じ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Supports double quotes and nested curlies
%{hello {"world"}} # same as "hello {\"world\"}"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104944Z" creationid="hirofumiwakasugi" creationdate="20150901T104839Z">
        <seg># ダブルクォートと入れ子の波カッコ (ブレース) を含む
%{hello {"world"}} # "hello {\"world\"}" と同じ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Symbol</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022831Z" creationid="hirofumiwakasugi" creationdate="20150901T071023Z">
        <seg># シンボル (Symbol)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Syntax and Semantics</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T050310Z" creationid="hirofumiwakasugi" creationdate="20150901T050310Z">
        <seg># シンタックスとセマンティクス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Ternary if</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013648Z" creationid="hirofumiwakasugi" creationdate="20150903T013642Z">
        <seg># 3項演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The Program</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T013825Z" creationid="hirofumiwakasugi" creationdate="20150904T013825Z">
        <seg># プログラム</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above can be written as:
objects[2, 3]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054803Z" creationid="hirofumiwakasugi" creationdate="20150902T054803Z">
        <seg># 上記は以下のように書くことができる
objects[2, 3]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above can be written as:
objects[2] = 3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054809Z" creationid="hirofumiwakasugi" creationdate="20150902T054724Z">
        <seg># 上記は以下のように書くことができる
objects[2] = 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above can be written as:
person.name = "John"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054814Z" creationid="hirofumiwakasugi" creationdate="20150902T054654Z">
        <seg># 上記は以下のように書くことができる
person.name = "John"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as this:
temp = "Crystal,1,github".split(",")
name   = temp[0]
age    = temp[1]
source = temp[2]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060047Z" creationid="hirofumiwakasugi" creationdate="20150902T060047Z">
        <seg># 上記は以下と同じ
temp = "Crystal,1,github".split(",")
name   = temp[0]
age    = temp[1]
source = temp[2]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as this:
temp1 = "Crystal"
temp2 = 1
name  = temp1
age   = temp2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T055439Z" creationid="hirofumiwakasugi" creationdate="20150902T055439Z">
        <seg># 上記は以下と同じ
temp1 = "Crystal"
temp2 = 1
name  = temp1
age   = temp2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as:
a = if 1 &gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013728Z" creationid="hirofumiwakasugi" creationdate="20150903T013728Z">
        <seg># 上記は以下と同じ
a = if 1 &gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as:
def some_method</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014243Z" creationid="hirofumiwakasugi" creationdate="20150907T014243Z">
        <seg># 上記は以下と同じ
def some_method</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as:
if 1 &gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013521Z" creationid="hirofumiwakasugi" creationdate="20150903T013513Z">
        <seg># 上記は以下と同じ
if 1 &gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as:
if cond1 || cond2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010134Z" creationid="hirofumiwakasugi" creationdate="20151001T010134Z">
        <seg># 上記は以下と同じ
if cond1 || cond2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as:
if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012932Z" creationid="hirofumiwakasugi" creationdate="20150903T012907Z">
        <seg># 上記は以下と同じ
if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as:
if var.is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010049Z" creationid="hirofumiwakasugi" creationdate="20151001T010049Z">
        <seg># 上記は以下と同じ
if var.is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as:
names = ["John", "Peter", "Jack"]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060214Z" creationid="hirofumiwakasugi" creationdate="20150902T060214Z">
        <seg># 上記は以下と同じ
names = ["John", "Peter", "Jack"]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as:
tmp = exp
if value1 === tmp || value2 === tmp</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T023542Z" creationid="hirofumiwakasugi" creationdate="20150903T023542Z">
        <seg># 上記は以下と同じ
tmp = exp
if value1 === tmp || value2 === tmp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as:
tmp = num
if tmp.even?</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010116Z" creationid="hirofumiwakasugi" creationdate="20151001T010116Z">
        <seg># 上記は以下と同じ
tmp = num
if tmp.even?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as:
tmp = some_exp1
if tmp</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052620Z" creationid="hirofumiwakasugi" creationdate="20150905T052620Z">
        <seg># 上記は以下と同じ
tmp = some_exp1
if tmp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as:
while !some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052419Z" creationid="hirofumiwakasugi" creationdate="20150905T052419Z">
        <seg># 上記は以下と同じ
while !some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is valid with these operators:
# +, -, *, /, %, |, &amp;, ^, **, &lt;&lt;, &gt;&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054447Z" creationid="hirofumiwakasugi" creationdate="20150902T054433Z">
        <seg># 上記は以下の演算子でも有効
# +, -, *, /, %, |, &amp;, ^, **, &lt;&lt;, &gt;&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The array's buffer will have 8 bytes dedicated to each Point
ary = [] of Point</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T175410Z" creationid="makenowjust" creationdate="20200505T175410Z">
        <seg># 各 Point 毎に配列のバッファが8バイト確保される
ary = [] of Point</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The callback for the user doesn't have a Void*</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090701Z" creationid="makenowjust" creationdate="20200512T090415Z">
        <seg># ユーザーのコールバックは Void* を持ちません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The compile-time type
typeof(a) # =&gt; Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T143922Z" creationid="makenowjust" creationdate="20200429T143922Z">
        <seg># コンパイル時の型
typeof(a) # =&gt; Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The name can be a `String`, `Symbol`, or `MacroId`</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114212Z" creationid="makenowjust" creationdate="20200510T110334Z">
        <seg># キー名は `String`、`Symbol` もしくは `MacroId` の必要があります</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The runtime type
a.class # =&gt; Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T143900Z" creationid="makenowjust" creationdate="20200429T143900Z">
        <seg># 実行時の型
a.class # =&gt; Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The type denoting a named tuple of x: Int32, y: String
NamedTuple(x: Int32, y: String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T170014Z" creationid="makenowjust" creationdate="20200422T165947Z">
        <seg># x が Int32 で y が String であるような名前付きタプルの型を表す
NamedTuple(x: Int32, y: String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The type denoting a tuple of Int32, String and Char
Tuple(Int32, String, Char)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T165007Z" creationid="makenowjust" creationdate="20200422T164945Z">
        <seg># Int32、String、Char のタプルの型を表す
Tuple(Int32, String, Char)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The type of value1 is known to be a String by the compiler,</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093920Z" creationid="makenowjust" creationdate="20200424T093920Z">
        <seg># このとき value1 と String 型 となることが保証され、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Then print them</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T021032Z" creationid="hirofumiwakasugi" creationdate="20151002T021012Z">
        <seg># それから出力する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># These are named arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T145251Z" creationid="makenowjust" creationdate="20200430T145251Z">
        <seg># 名前付き引数:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># These are positional arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T145240Z" creationid="makenowjust" creationdate="20200430T145240Z">
        <seg># 位置指定の引数:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># These are positional arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T144444Z" creationid="makenowjust" creationdate="20200430T144411Z">
        <seg># 位置指定の引数:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># These are positional parameters:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T090948Z" creationid="makenowjust" creationdate="20210324T090948Z">
        <seg># 位置指定の引数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># These are the named arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T144508Z" creationid="makenowjust" creationdate="20200430T144508Z">
        <seg># 名前付き引数:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># These are the named parameters:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T090956Z" creationid="makenowjust" creationdate="20210324T090956Z">
        <seg># 名前付き引数:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># This correctly generates:
#
#     def foo
#       1
#     end
define_method :foo, 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035824Z" creationid="hirofumiwakasugi" creationdate="20151001T035824Z">
        <seg># 以下が正しく生成される
#
#     def foo
#       1
#     end
define_method :foo, 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># This generates:
#
#     def :foo
#       1
#     end
define_method :foo, 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T214633Z" creationid="makenowjust" creationdate="20200509T214633Z">
        <seg># これで以下が生成されます:
#
#     def :foo
#       1
#     end
define_method :foo, 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># This generates:
#
#     def foo
#       1
#     end
define_method foo, 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T014701Z" creationid="hirofumiwakasugi" creationdate="20151001T014701Z">
        <seg># これで以下が生成されます
#
#     def foo
#       1
#     end
define_method foo, 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># This is a comment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000228Z" creationid="makenowjust" creationdate="20200414T000228Z">
        <seg># This is a comment</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># This is a comment
puts "hello" # This is a trailing comment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T092955Z" creationid="makenowjust" creationdate="20210324T092955Z">
        <seg># これはコメントです
puts "hello" # これは trailing comment です</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># This is a forward declaration</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045918Z" creationid="hirofumiwakasugi" creationdate="20151007T045918Z">
        <seg># 以下が宣言フォーワーディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># This is a program that prints "Hello Crystal!"
puts "Hello Crystal!"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T101159Z" creationid="makenowjust" creationdate="20200427T101159Z">
        <seg># "Hello Crystal!" と表示するプログラム
puts "Hello Crystal!"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># This is a program that prints "Hello"
class Hello</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T101234Z" creationid="makenowjust" creationdate="20200427T101234Z">
        <seg># "Hello" と表示するプログラム
class Hello</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># This is the double splat argument:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T144526Z" creationid="makenowjust" creationdate="20200430T144513Z">
        <seg># 二重スプラット展開指定された引数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># This is the double splat parameter:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T091027Z" creationid="makenowjust" creationdate="20210324T091027Z">
        <seg># 二重スプラット展開指定された引数:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># This is the empty-tuple case
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T162206Z" creationid="makenowjust" creationdate="20200429T162206Z">
        <seg># タプルが空の場合
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># This is the empty-tuple case
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T030232Z" creationid="hirofumiwakasugi" creationdate="20150908T030230Z">
        <seg># 空のタプルの場合
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># This is the splat argument:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T144500Z" creationid="makenowjust" creationdate="20200430T144500Z">
        <seg># スプラット展開指定された引数:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># This is the splat parameter:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T091008Z" creationid="makenowjust" creationdate="20210324T091008Z">
        <seg># スプラット展開指定された引数:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Truthy and falsey values</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T005214Z" creationid="hirofumiwakasugi" creationdate="20150903T005158Z">
        <seg># 真偽値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Tuple</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022854Z" creationid="hirofumiwakasugi" creationdate="20150901T131530Z">
        <seg># タプル (Tuple)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Type grammar</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T004701Z" creationid="hirofumiwakasugi" creationdate="20150908T022338Z">
        <seg># 型文法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Type reflection</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T004527Z" creationid="hirofumiwakasugi" creationdate="20150930T004504Z">
        <seg># 型のリフレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Type restrictions</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042437Z" creationid="hirofumiwakasugi" creationdate="20150907T042437Z">
        <seg># 型制約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Types and methods</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T011549Z" creationid="hirofumiwakasugi" creationdate="20150904T011542Z">
        <seg># 型とメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Unary operator.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T083649Z" creationid="makenowjust" creationdate="20200502T083649Z">
        <seg># 単項演算子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Unicorn.new.horns # =&gt; 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215316Z" creationid="makenowjust" creationdate="20200412T215316Z">
        <seg># Unicorn.new.horns # =&gt; 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Unicorn.new.horns #=&gt; 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144053Z" creationid="hirofumiwakasugi" creationdate="20151010T144053Z">
        <seg># Unicorn.new.horns #=&gt; 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Uninitialized variable declaration</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T120457Z" creationid="hirofumiwakasugi" creationdate="20150906T114917Z">
        <seg># 初期化しない変数宣言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Unsafe code</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012416Z" creationid="hirofumiwakasugi" creationdate="20151009T012405Z">
        <seg># 安全でない (unsafe) コード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Unusual, but still can happen</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T012051Z" creationid="hirofumiwakasugi" creationdate="20150916T012050Z">
        <seg># あまり考えられないが、絶対にないとは言えない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Use to release non-managed resources (ie.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T140336Z" creationid="makenowjust" creationdate="20200504T135953Z">
        <seg># 管理されていないリソースを解放するのに使う (例:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Using the compiler</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T071702Z" creationid="hirofumiwakasugi" creationdate="20150901T071653Z">
        <seg># コンパイラを使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Variables</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053403Z" creationid="hirofumiwakasugi" creationdate="20151007T053358Z">
        <seg># 変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Virtual and abstract types</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031215Z" creationid="hirofumiwakasugi" creationdate="20150905T052421Z">
        <seg># virtual 型と abstract 型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Visibility</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032003Z" creationid="hirofumiwakasugi" creationdate="20150905T052029Z">
        <seg># 可視性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># We cannot access name inside the macro expansion here,</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030902Z" creationid="hirofumiwakasugi" creationdate="20151009T030902Z">
        <seg># ここで、マクロ展開によって name にアクセスすることはできない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># We must save this in Crystal-land so the GC doesn't collect it (*)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090738Z" creationid="makenowjust" creationdate="20200512T090543Z">
        <seg># 勝手に GC されるのを防ぐため、Crystal 上に保持しておく必要があります (*)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># We pass a callback that doesn't form a closure, and pass the boxed_data as</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090835Z" creationid="makenowjust" creationdate="20200512T090835Z">
        <seg># クロージャではない形になるようにコールバックを渡し、boxed_data をコールバック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># We want to create an array 1, 2, 3 of Int32 | Float64
ary2 = ary.map { |x| x as Int32 | Float64 }</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T061411Z" creationid="hirofumiwakasugi" creationdate="20150930T061411Z">
        <seg># Int32 | Float64型 の 1, 2, 3 の配列にしたい
ary2 = ary.map { |x| x as Int32 | Float64 }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Will print "Cleanup..." after invoking something_dangerous,
# regardless of whether it raised or not
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013454Z" creationid="hirofumiwakasugi" creationdate="20150907T013435Z">
        <seg># 例外が発生したかどうかに関わらず、
# something_dangerous が実行された後に「Cleanup...」が出力される 

```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># With spaces and symbols
:"symbol with spaces"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T131413Z" creationid="hirofumiwakasugi" creationdate="20150901T131314Z">
        <seg># 名前にスペースを含むシンボル
:"symbol with spaces"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Works, because Foo and Bar are under Namespace</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T112013Z" creationid="makenowjust" creationdate="20200502T112013Z">
        <seg># Foo と Bar は Namespace 以下で定義されているので正しく動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Yields the current age of this person and increases</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071807Z" creationid="hirofumiwakasugi" creationdate="20150906T071717Z">
        <seg># 現在の年齢を yield して</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144052Z" creationid="hirofumiwakasugi" creationdate="20151010T144052Z">
        <seg># ```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ```
# unicorn = Unicorn.new
# unicorn.speak
# ```</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212013Z" creationid="makenowjust" creationdate="20200412T212013Z">
        <seg># ```
# unicorn = Unicorn.new
# unicorn.speak
# ```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ```text
# "I'm a unicorn"
# ```</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212111Z" creationid="makenowjust" creationdate="20200412T212111Z">
        <seg># ```text
# "I'm a unicorn"
# ```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a : Int32
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061719Z" creationid="hirofumiwakasugi" creationdate="20160204T061719Z">
        <seg># a : Int32
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a : Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T062429Z" creationid="hirofumiwakasugi" creationdate="20160204T062429Z">
        <seg># a : Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a : Int32 | String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061348Z" creationid="hirofumiwakasugi" creationdate="20160204T061348Z">
        <seg># a : Int32 | String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a : String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061712Z" creationid="hirofumiwakasugi" creationdate="20160204T061712Z">
        <seg># a : String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a : String
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083253Z" creationid="makenowjust" creationdate="20200424T083253Z">
        <seg># a : String
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a : String
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061720Z" creationid="hirofumiwakasugi" creationdate="20160204T061720Z">
        <seg># a : String
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a :: Int32
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022016Z" creationid="hirofumiwakasugi" creationdate="20150903T022016Z">
        <seg># a :: Int32
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a :: Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052145Z" creationid="hirofumiwakasugi" creationdate="20150905T052145Z">
        <seg># a :: Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a :: Int32 | String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T014203Z" creationid="hirofumiwakasugi" creationdate="20150930T014203Z">
        <seg># a :: Int32 | String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a :: String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012210Z" creationid="hirofumiwakasugi" creationdate="20150903T012210Z">
        <seg># a :: String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a :: String
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022016Z" creationid="hirofumiwakasugi" creationdate="20150903T022016Z">
        <seg># a :: String
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a can't be nil.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014532Z" creationid="hirofumiwakasugi" creationdate="20150903T014424Z">
        <seg># ということは、a  が nil というのはあり得ないので、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># add method with type restrictions
def restricted_add(x : Number, y : Number)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135914Z" creationid="hirofumiwakasugi" creationdate="20151009T135914Z">
        <seg># 型制約のある add メソッド
def restricted_add(x : Number, y : Number)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># add method without type restrictions
def add(x, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135851Z" creationid="hirofumiwakasugi" creationdate="20151009T135851Z">
        <seg># 型制約のない add メソッド
def add(x, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># alias</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023817Z" creationid="hirofumiwakasugi" creationdate="20150902T023048Z">
        <seg># エイリアス (alias)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># always execute this</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014337Z" creationid="hirofumiwakasugi" creationdate="20150907T014337Z">
        <seg># ここは必ず実行される</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># always execute this
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014328Z" creationid="hirofumiwakasugi" creationdate="20150907T014328Z">
        <seg># ここは必ず実行される
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># always execute this
end

# The above is the same as:
def some_method</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T104109Z" creationid="makenowjust" creationdate="20200506T104109Z">
        <seg># ここは常に実行される
end

# 上記は以下と同じ
def some_method</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># and do the inclusion check at runtime.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T031129Z" creationid="hirofumiwakasugi" creationdate="20151009T031028Z">
        <seg># そして、それを含んでいるかのチェックをランタイムに行う必要がある</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># and the type of value2 is known to be an Int32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093932Z" creationid="makenowjust" creationdate="20200424T093932Z">
        <seg># value2 は Int32 型となることが保証される
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># any other kind of exception
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103531Z" creationid="makenowjust" creationdate="20200506T103531Z">
        <seg># any other kind of exception
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># any other kind of exception
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012505Z" creationid="hirofumiwakasugi" creationdate="20150907T012505Z">
        <seg># その他の例外
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># appends "1, 2" to IO without creating intermediate strings</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T125949Z" creationid="akiji" creationdate="20200430T125949Z">
        <seg># 中間的な文字列を生成せずに "1, 2" を IO に追加する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># as</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T014115Z" creationid="hirofumiwakasugi" creationdate="20150930T014115Z">
        <seg># as</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># at all, the compiler puts this method before the previous</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072850Z" creationid="hirofumiwakasugi" creationdate="20150906T072608Z">
        <seg># オーバーロードの条件に合致していた場合は、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># break</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T050519Z" creationid="hirofumiwakasugi" creationdate="20150831T050519Z">
        <seg># break</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># but current type is an Animal</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033633Z" creationid="hirofumiwakasugi" creationdate="20150909T033633Z">
        <seg># 現在の型が Animal なのでエラー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># but current type is the Program
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033723Z" creationid="hirofumiwakasugi" creationdate="20150909T033654Z">
        <seg># 現在の型が Program なのでエラー
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># case</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022913Z" creationid="hirofumiwakasugi" creationdate="20150903T022913Z">
        <seg># case</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># class_vs_struct.cr
require "benchmark"

class PointClass</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091245Z" creationid="makenowjust" creationdate="20200506T091245Z">
        <seg># class_vs_struct.cr
require "benchmark"

class PointClass</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ditto</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144054Z" creationid="hirofumiwakasugi" creationdate="20151010T144054Z">
        <seg># ditto</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># do something...
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T113108Z" creationid="hirofumiwakasugi" creationdate="20150906T113108Z">
        <seg># do something...
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># do something...
end

some_method 10                   # x: 10, y: 1, z: 2, w: 3
some_method 10, z: 10            # x: 10, y: 1, z: 10, w: 3
some_method 10, w: 1, y: 2, z: 3 # x: 10, y: 2, z: 3, w: 1
some_method y: 10, x: 20         # x: 20, y: 10, z: 2, w: 3

some_method y: 10 # Error, missing argument: x</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T152713Z" creationid="makenowjust" creationdate="20200429T152713Z">
        <seg># いろいろする
end

some_method 10                   # x: 10, y: 1, z: 2, w: 3
some_method 10, z: 10            # x: 10, y: 1, z: 10, w: 3
some_method 10, w: 1, y: 2, z: 3 # x: 10, y: 2, z: 3, w: 1
some_method y: 10, x: 20         # x: 20, y: 10, z: 2, w: 3

some_method y: 10 # Error, missing argument: x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># e : String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061715Z" creationid="hirofumiwakasugi" creationdate="20160204T061715Z">
        <seg># e : String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># e :: String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012732Z" creationid="hirofumiwakasugi" creationdate="20150903T012732Z">
        <seg># e :: String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># elements is Tuple(Int32, Int32, Int32)
sum 1, 2, 3

# elements is Tuple(Int32, Int32, Int32, Float64)
sum 1, 2, 3, 4.5</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T154234Z" creationid="makenowjust" creationdate="20200429T154234Z">
        <seg># elements は Tuple(Int32, Int32, Int32) になる
sum 1, 2, 3

# elements は Tuple(Int32, Int32, Int32, Float64) になる
sum 1, 2, 3, 4.5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># elements is Tuple(Int32, Int32, Int32, Float64)
sum 1, 2, 3, 4.5
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042223Z" creationid="hirofumiwakasugi" creationdate="20150907T042223Z">
        <seg># Tuple(Int32, Int32, Int32, Float64)
sum 1, 2, 3, 4.5
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># enum</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T013958Z" creationid="hirofumiwakasugi" creationdate="20150902T013958Z">
        <seg># enum</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># execute if an exception is raised</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014254Z" creationid="hirofumiwakasugi" creationdate="20150907T014254Z">
        <seg># 例外が発生するとここが実行される</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># execute if an exception is raised
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014235Z" creationid="hirofumiwakasugi" creationdate="20150907T014235Z">
        <seg># 例外が発生するとここが実行される
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># execute if an exception is raised
end

# The above is the same as:
def some_method</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T104008Z" creationid="makenowjust" creationdate="20200506T103958Z">
        <seg># 例外が発生するとここが実行される
end

# 上記は以下と同じ
def some_method</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># execute this if an exception is raised
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013847Z" creationid="hirofumiwakasugi" creationdate="20150907T013847Z">
        <seg># 例外が発生するとここが実行される
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># execute this if an exception isn't raised
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103607Z" creationid="makenowjust" creationdate="20200506T103607Z">
        <seg># 例外が発生しなかった場合のみここが実行される
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># execute this if an exception isn't raised
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013915Z" creationid="hirofumiwakasugi" creationdate="20150907T013907Z">
        <seg># 例外が発生しなかった場合のみここが実行される
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># file: all_my_cli.cr
require "option_parser"

the_beatles = [</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180415Z" creationid="makenowjust" creationdate="20200413T180415Z">
        <seg># file: all_my_cli.cr
require "option_parser"

the_beatles = [</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># file: hello_goodbye.cr
require "option_parser"

the_beatles = [</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175223Z" creationid="makenowjust" creationdate="20200413T175223Z">
        <seg># file: hello_goodbye.cr
require "option_parser"

the_beatles = [</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># file: help.cr
require "option_parser"

OptionParser.parse do |parser|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172454Z" creationid="makenowjust" creationdate="20200413T172454Z">
        <seg># file: help.cr
require "option_parser"

OptionParser.parse do |parser|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># file: let_it_cli.cr
puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets

exit if user_input.nil?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T183050Z" creationid="makenowjust" creationdate="20200413T182755Z">
        <seg> # file: let_it_cli.cr
puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets

exit if user_input.nil?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># file: let_it_cli.cr
puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets
puts "The Beatles are singing: 🎵#{user_input.upcase}🎶🎸🥁"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182407Z" creationid="makenowjust" creationdate="20200413T182407Z">
        <seg># file: let_it_cli.cr
puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets
puts "The Beatles are singing: 🎵#{user_input.upcase}🎶🎸🥁"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># file: let_it_cli.cr
puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets
puts "The Beatles are singing: 🎵#{user_input}🎶🎸🥁"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T181858Z" creationid="makenowjust" creationdate="20200413T181858Z">
        <seg># file: let_it_cli.cr
puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets
puts "The Beatles are singing: 🎵#{user_input}🎶🎸🥁"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># file: let_it_cli.cr
require "colorize"

puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets

exit if user_input.nil?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T184436Z" creationid="makenowjust" creationdate="20200413T184436Z">
        <seg># file: let_it_cli.cr
require "colorize"

puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets

exit if user_input.nil?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># file: twist_and_shout.cr
require "option_parser"

the_beatles = [</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174747Z" creationid="makenowjust" creationdate="20200413T174747Z">
        <seg># file: twist_and_shout.cr
require "option_parser"

the_beatles = [</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># file: yellow_cli.cr
require "colorize"

puts "#{"The Beatles".colorize(:yellow).on(:black)} App"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T183318Z" creationid="makenowjust" creationdate="20200413T183318Z">
        <seg># file: yellow_cli.cr
require "colorize"

puts "#{"The Beatles".colorize(:yellow).on(:black)} App"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># finalize</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041437Z" creationid="hirofumiwakasugi" creationdate="20150910T041437Z">
        <seg># finalize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># first is Int32 | Bool</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023043Z" creationid="hirofumiwakasugi" creationdate="20150916T023043Z">
        <seg># first は Int32 | Bool</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># for 'Employee:Class#new' (1 for 2)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T023925Z" creationid="hirofumiwakasugi" creationdate="20150910T023849Z">
        <seg># wrong number of arguments のエラーが発生
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># fun</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T143531Z" creationid="hirofumiwakasugi" creationdate="20151003T143531Z">
        <seg># fun</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># goes to 'puts a'</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052248Z" creationid="hirofumiwakasugi" creationdate="20150905T052248Z">
        <seg># ループを抜けて 'puts a' に行く</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># handle error ...</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160118T020615Z" creationid="hirofumiwakasugi" creationdate="20151010T011944Z">
        <seg># エラーハンドリング…</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># hello_world.cr

puts "Hello World!"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080825Z" creationid="makenowjust" creationdate="20200516T080825Z">
        <seg># hello_world.cr

puts "Hello World!"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here @a can be nil
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T015347Z" creationid="hirofumiwakasugi" creationdate="20150903T015333Z">
        <seg># @a は nil ということもあり得る
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here @a is not guaranteed to be a String
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022613Z" creationid="hirofumiwakasugi" creationdate="20150903T022459Z">
        <seg># ここでは @a が String であることが保証され「ない」
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here @a is not guaranteed to be a String
end

a = @a
if a.is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083225Z" creationid="makenowjust" creationdate="20200424T083225Z">
        <seg># ここでも @a が String であることは保証されない
end

a = @a
if a.is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here @a is not guaranteed to respond to `abs`
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030611Z" creationid="hirofumiwakasugi" creationdate="20150903T030547Z">
        <seg># ここでは @a が `abs` に応答することが保証「されない」
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here @a is not guaranteed to respond to `abs`
end

a = @a
if a.responds_to?(:abs)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T084105Z" creationid="makenowjust" creationdate="20200424T084105Z">
        <seg># ここでも @a は `abs` メソッドを持つことが保証されない
end

a = @a
if a.responds_to?(:abs)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here `@@a` can be nil
end

a = nil
closure = -&gt;{ a = "foo" }

if a</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081935Z" creationid="makenowjust" creationdate="20200424T081935Z">
        <seg># ここでも `@@a` が nil の可能性がある
end

a = nil
closure = -&gt;{ a = "foo" }

if a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here `@a` can be nil
end

if @@a</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081921Z" creationid="makenowjust" creationdate="20200424T081921Z">
        <seg># ここでも `@a` が nil の可能性がある
end

if @@a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here `a` can be nil
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081953Z" creationid="makenowjust" creationdate="20200424T081941Z">
        <seg># ここでも `a` が nil の可能性がある
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here `a` can't be nil
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T082106Z" creationid="makenowjust" creationdate="20200424T082106Z">
        <seg># ここで `a` は nil にはならない
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a can't be nil
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T020353Z" creationid="hirofumiwakasugi" creationdate="20150903T020222Z">
        <seg># ここでは a が nil ということはあり得ない
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a can't be nil
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T020428Z" creationid="hirofumiwakasugi" creationdate="20150903T020428Z">
        <seg># ここでは a が nil ということはあり得ない
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is Int32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085246Z" creationid="makenowjust" creationdate="20200424T085246Z">
        <seg># ここで a は Int32 型
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is Int32, because a is truthy in this branch
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085848Z" creationid="makenowjust" creationdate="20200424T085848Z">
        <seg># この節は a が真となる場合に評価されるので、ここで a は Int32 型
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is Nil
else</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085239Z" creationid="makenowjust" creationdate="20200424T085239Z">
        <seg># ここで a は Nil 型
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is Nil because a is falsey in this branch
else</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085824Z" creationid="makenowjust" creationdate="20200424T085818Z">
        <seg># この節は a が偽となる場合に評価されるので、ここで a は Nil 型
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is a String
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T021709Z" creationid="hirofumiwakasugi" creationdate="20150903T021709Z">
        <seg># a は必ず String
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is a String
end

if b.is_a?(Number)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T082857Z" creationid="makenowjust" creationdate="20200424T082857Z">
        <seg># ここで a は String 型
end

if b.is_a?(Number)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is a String and b is a Number
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083136Z" creationid="makenowjust" creationdate="20200424T083136Z">
        <seg># ここで a は String 型で b は Number 型
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is a String and b is a Number
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022339Z" creationid="hirofumiwakasugi" creationdate="20150903T022339Z">
        <seg># ここでは a は String で b は Number
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is guaranteed to be a String
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022641Z" creationid="hirofumiwakasugi" creationdate="20150903T022608Z">
        <seg># ここでは a が String であることが保証される
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is guaranteed to be a String
end

# A bit shorter:
if (a = @a).is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083329Z" creationid="makenowjust" creationdate="20200424T083313Z">
        <seg># ここで a は String であることが保証される
end

# より簡潔な書き方:
if (a = @a).is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is guaranteed to be a String
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022651Z" creationid="hirofumiwakasugi" creationdate="20150903T022640Z">
        <seg># ここでは a が String であることが保証される
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is guaranteed to respond to `abs`
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030630Z" creationid="hirofumiwakasugi" creationdate="20150903T030630Z">
        <seg># ここでは a が `abs` に応答することが保証される
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is guaranteed to respond to `abs`
end

# A bit shorter:
if (a = @a).responds_to?(:abs)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T084130Z" creationid="makenowjust" creationdate="20200424T084130Z">
        <seg># ここでは a が `abs` メソッドを持つことが保証されます
end

# より簡潔な書き方:
if (a = @a).responds_to?(:abs)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is guaranteed to respond to `abs`
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030646Z" creationid="hirofumiwakasugi" creationdate="20150903T030646Z">
        <seg># ここでは a が `abs` に応答することが保証される
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is not nil
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081440Z" creationid="makenowjust" creationdate="20200424T081440Z">
        <seg># ここでは a は nil ではない
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is not nil
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014817Z" creationid="hirofumiwakasugi" creationdate="20150903T014725Z">
        <seg># ここでは a は nil ではない
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a will be Int32, since Int32#abs exists but String#abs doesn't
else</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T084037Z" creationid="hirofumiwakasugi" creationdate="20150903T030437Z">
        <seg># Int32#abs は存在するが String#abs は存在しないので、ここでは Int32 となり、
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a will be String
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T084046Z" creationid="makenowjust" creationdate="20200424T084019Z">
        <seg># ここでは a は String となる
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a will be String
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030535Z" creationid="hirofumiwakasugi" creationdate="20150903T030535Z">
        <seg># ここでは String となる
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a's type will be reduced to those responding to the 'abs' method
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083929Z" creationid="makenowjust" creationdate="20200424T083929Z">
        <seg># ここで a の型は 'abs' メソッドを持つ型のみに縮小されている
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a's type will be reduced to those responding to the 'abs' method
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030444Z" creationid="hirofumiwakasugi" creationdate="20150903T030314Z">
        <seg># ここでは、a の型は必ず 'abs' メソッドに応答するものに制限される
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here b is String because it's not an Int32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085920Z" creationid="makenowjust" creationdate="20200424T085920Z">
        <seg># b が Int32 ではないときに評価されるので、ここで b は String 型
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here b is a Number
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T082924Z" creationid="makenowjust" creationdate="20200424T082924Z">
        <seg># ここで b は Number 型
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here b is a Number
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T021718Z" creationid="hirofumiwakasugi" creationdate="20150903T021718Z">
        <seg># b は必ず Number
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here both a and b are guaranteed not to be Nil
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081528Z" creationid="makenowjust" creationdate="20200424T081528Z">
        <seg># ここでは a も b も Nil ではないことが保証される
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here both a and b are guaranteed not to be Nil
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014839Z" creationid="hirofumiwakasugi" creationdate="20150903T014805Z">
        <seg># ここでは a も b も Nil でないことが保証される
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here var is neither a String nor an Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010037Z" creationid="hirofumiwakasugi" creationdate="20151001T010037Z">
        <seg># ここでは var は String と Int32 のどちらでもない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here we know that the first call did not return Nil</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T021306Z" creationid="hirofumiwakasugi" creationdate="20150903T021121Z">
        <seg># ここで、最初の呼び出しが Nil を返していないことはわかっている</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here we use internal_name
end

foo external_name: 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T161136Z" creationid="makenowjust" creationdate="20200501T161136Z">
        <seg># ここで internal_name を使えます
end

foo external_name: 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># if</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T005824Z" creationid="hirofumiwakasugi" creationdate="20150903T005824Z">
        <seg># if</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># if var</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014124Z" creationid="hirofumiwakasugi" creationdate="20150903T014114Z">
        <seg># if 変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># if var.is_a?(...)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T021530Z" creationid="hirofumiwakasugi" creationdate="20150903T021456Z">
        <seg># if 変数.is_a?(...)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># if var.responds_to?(...)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030006Z" creationid="hirofumiwakasugi" creationdate="20150903T025945Z">
        <seg># if 変数.responds_to?(...)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># implement conversion ...</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012218Z" creationid="hirofumiwakasugi" creationdate="20151010T012158Z">
        <seg># 変換の実装…</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># in spec/project_spec.cr
require "../src/project"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T090803Z" creationid="makenowjust" creationdate="20200427T090803Z">
        <seg># spec/project_spec.cr
require "../src/project"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># instance_sizeof</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T120355Z" creationid="hirofumiwakasugi" creationdate="20150906T120355Z">
        <seg># instance_sizeof</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># instead we need to use the macro language to construct an array</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T031006Z" creationid="hirofumiwakasugi" creationdate="20151009T031006Z">
        <seg># その代わりに、マクロの記法を使って配列を構築する必要がある</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># invokes Foo's baz method</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021151Z" creationid="hirofumiwakasugi" creationdate="20150904T021151Z">
        <seg># Foo の baz メソッドを実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># invokes the program's add method</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021130Z" creationid="hirofumiwakasugi" creationdate="20150904T021130Z">
        <seg># プログラムの add メソッドを実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># io_benchmark.cr
require "benchmark"

io = IO::Memory.new

Benchmark.ips do |x|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T090903Z" creationid="makenowjust" creationdate="20200506T090903Z">
        <seg># io_benchmark.cr
require "benchmark"

io = IO::Memory.new

Benchmark.ips do |x|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># is passed instead
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044920Z" creationid="hirofumiwakasugi" creationdate="20151005T044920Z">
        <seg># wrapper.to_unsafe が代わりに渡される
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># is_a?</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T005239Z" creationid="hirofumiwakasugi" creationdate="20150930T005239Z">
        <seg># is_a?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># its age by the value returned by the block</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071812Z" creationid="hirofumiwakasugi" creationdate="20150906T071725Z">
        <seg># そのブロックの戻り値にしたがって年をとる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># lib</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T142125Z" creationid="hirofumiwakasugi" creationdate="20151003T142125Z">
        <seg># lib</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># method is, so wrapper.to_unsafe</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151121T153759Z" creationid="hirofumiwakasugi" creationdate="20151005T044902Z">
        <seg># to_unsafe があるため、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># must be X::MyInt, not Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023302Z" creationid="hirofumiwakasugi" creationdate="20151008T023202Z">
        <seg># Int32 ではなく X::MyInt でなければならない
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># name will not be available within the verbatim block</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220558Z" creationid="makenowjust" creationdate="20200509T220558Z">
        <seg># name は verbatim ブロックの中では有効ではありません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># new, initialize and allocate</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T022232Z" creationid="hirofumiwakasugi" creationdate="20150904T022214Z">
        <seg># new/initialize/allocate</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># next</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052311Z" creationid="hirofumiwakasugi" creationdate="20150905T052311Z">
        <seg># next</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># object_id returns the address of an object in memory,
# so we create a pointer with that address
ptr = Pointer(Void).new(array.object_id)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T020202Z" creationid="hirofumiwakasugi" creationdate="20150930T020202Z">
        <seg># object_id はメモリ上のオブジェクトのアドレスを返すため、
# そのアドレスからポインタを作ることができる
ptr = Pointer(Void).new(array.object_id)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># one when considering which overload matches.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072842Z" creationid="hirofumiwakasugi" creationdate="20150906T072738Z">
        <seg># コンパイラはこのメソッドを最初のものより先に並べる (優先させる)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># only MyException or MyOtherException
rescue</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013158Z" creationid="hirofumiwakasugi" creationdate="20150907T013138Z">
        <seg># MyException/MyOtherException のみ
rescue</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># only MyException...
rescue ex2 : MyOtherException</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012453Z" creationid="hirofumiwakasugi" creationdate="20150907T012453Z">
        <seg># MyException のみ
rescue ex2 : MyOtherException</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># only MyOtherException...
rescue</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012458Z" creationid="hirofumiwakasugi" creationdate="20150907T012458Z">
        <seg># MyOtherException のみ
rescue</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># out</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043319Z" creationid="hirofumiwakasugi" creationdate="20151005T043319Z">
        <seg># out</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># pointerof</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T130937Z" creationid="hirofumiwakasugi" creationdate="20150905T130937Z">
        <seg># pointerof</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># potentially dangerous operation


rescue</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T104147Z" creationid="makenowjust" creationdate="20200506T104147Z">
        <seg># 潜在的に危険な操作をする


rescue</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># responds_to?</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T012702Z" creationid="hirofumiwakasugi" creationdate="20150930T012702Z">
        <seg># responds_to?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># returns nil because of index out of bounds</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T104901Z" creationid="makenowjust" creationdate="20200506T104901Z">
        <seg># インデックス範囲外のため nil が返る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># second is Char | String | Nil
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184839Z" creationid="makenowjust" creationdate="20200505T184832Z">
        <seg># second は Char | String | Nil
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># second is Char | String | Nil
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023048Z" creationid="hirofumiwakasugi" creationdate="20150916T023048Z">
        <seg># second は Char | String | Nil
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># set the compile-time type
a = 0.as(Int32 | Nil | String)
typeof(a) # =&gt; Int32 | Nil | String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T144538Z" creationid="makenowjust" creationdate="20200429T144538Z">
        <seg># コンパイル時の型を設定する
a = 0.as(Int32 | Nil | String)
typeof(a) # =&gt; Int32 | Nil | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># sizeof</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035215Z" creationid="hirofumiwakasugi" creationdate="20150906T035215Z">
        <seg># sizeof</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># so the flags are: darwin, x86_64
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043023Z" creationid="hirofumiwakasugi" creationdate="20150908T043023Z">
        <seg># この場合のフラグは darwin と x86_64
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># some specific code for 64 bits platforms
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043314Z" creationid="hirofumiwakasugi" creationdate="20150908T043243Z">
        <seg># 64ビットプラットフォームに固有のコード
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># some specific code for 64 bits platforms
{% else %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T023107Z" creationid="makenowjust" creationdate="20200511T023107Z">
        <seg># 64ビットプラットフォーム固有のコード
{% else %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># some specific code for linux 64 bits
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043426Z" creationid="hirofumiwakasugi" creationdate="20150908T043426Z">
        <seg># Linux の64ビットに固有のコード
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># some specific code for linux 64 bits
{% end %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T023200Z" creationid="makenowjust" creationdate="20200511T023200Z">
        <seg># Linux で64ビットの場合に固有のコード
{% end %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># some specific code for non-64 bits platforms
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043316Z" creationid="hirofumiwakasugi" creationdate="20150908T043305Z">
        <seg># 64ビットではないプラットフォームに固有のコード
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># some specific code for non-64 bits platforms
{% end %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T023124Z" creationid="makenowjust" creationdate="20200511T023124Z">
        <seg># 64ビットでないプラットフォームに固有のコード
{% end %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># spec/myapp_spec.cr:7

Finished in 880 microseconds
1 examples, 1 failures, 0 errors, 0 pending

Failed examples:

crystal spec spec/myapp_spec.cr:6 # Myapp works</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165205Z" creationid="makenowjust" creationdate="20200419T165205Z">
        <seg># spec/myapp_spec.cr:7

Finished in 880 microseconds
1 examples, 1 failures, 0 errors, 0 pending

Failed examples:

crystal spec spec/myapp_spec.cr:6 # Myapp works</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># struct</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053516Z" creationid="hirofumiwakasugi" creationdate="20151003T141453Z">
        <seg># 構造体 (struct)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># the `Legendary` module</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212127Z" creationid="makenowjust" creationdate="20200412T212127Z">
        <seg># the `Legendary` module</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># the callback data</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090938Z" creationid="makenowjust" creationdate="20200512T090841Z">
        <seg># のデータとして渡します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># this should be avoided</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T130142Z" creationid="akiji" creationdate="20200430T130142Z">
        <seg># これは避けるべき</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># this will always be executed
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103831Z" creationid="makenowjust" creationdate="20200506T103831Z">
        <seg># ここは必ず実行される
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># this will always be executed
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013625Z" creationid="hirofumiwakasugi" creationdate="20150907T013625Z">
        <seg># ここは必ず実行される
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># to C function
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024730Z" creationid="hirofumiwakasugi" creationdate="20151008T024714Z">
        <seg># C の関数には渡せない
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># to_s is defined for Int32 and String, it returns String
a.to_s # =&gt; String

a + 1 # Error, because String#+(Int32) isn't defined</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T144444Z" creationid="makenowjust" creationdate="20200429T144444Z">
        <seg># to_s は Int32 と String で定義されていて、どちらも String を返す
a.to_s # =&gt; String

a + 1 # String#+(Int32) は存在しないのでエラーになる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># to_unsafe</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044206Z" creationid="hirofumiwakasugi" creationdate="20151005T044206Z">
        <seg># to_unsafe</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># type</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T022207Z" creationid="hirofumiwakasugi" creationdate="20151008T022131Z">
        <seg># 型 (type)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># typeof</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062438Z" creationid="hirofumiwakasugi" creationdate="20150930T062438Z">
        <seg># typeof</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># union</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053540Z" creationid="hirofumiwakasugi" creationdate="20151007T052034Z">
        <seg># 共用体 (union)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># unless</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022723Z" creationid="hirofumiwakasugi" creationdate="20150903T022723Z">
        <seg># unless</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># until</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052352Z" creationid="hirofumiwakasugi" creationdate="20150905T052352Z">
        <seg># until</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># using a string interpolation creates an intermediate string.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T022610Z" creationid="akiji" creationdate="20200430T130133Z">
        <seg># 文字列の式展開により中間的な文字列を生成している</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># var : Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061605Z" creationid="hirofumiwakasugi" creationdate="20160204T061605Z">
        <seg># var : Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># var : String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061551Z" creationid="hirofumiwakasugi" creationdate="20160204T061551Z">
        <seg># var : String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># var :: Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010029Z" creationid="hirofumiwakasugi" creationdate="20151001T010029Z">
        <seg># var :: Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># var :: String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010027Z" creationid="hirofumiwakasugi" creationdate="20151001T010027Z">
        <seg># var :: String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># while</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052030Z" creationid="hirofumiwakasugi" creationdate="20150905T052030Z">
        <seg># while</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># x is a required named parameter, y is an optional named parameter
def foo(*, x, y = 2)
end

foo            # Error: missing argument: x
foo x: 1       # OK, y is 2
foo x: 1, y: 3 # OK, y is 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T092128Z" creationid="makenowjust" creationdate="20210324T092128Z">
        <seg># どちらも名前付き引数として渡す必要があるが、x は必須で y は必須ではないメソッド
def foo(*, x, y = 2)
end

foo            # Error: missing argument: x
foo x: 1       # OK, y is 2
foo x: 1, y: 3 # OK, y is 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># {% end %}
end

a</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221155Z" creationid="makenowjust" creationdate="20200509T221155Z">
        <seg># {% end %}
end

a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># {% if false %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221153Z" creationid="makenowjust" creationdate="20200509T221153Z">
        <seg># {% if false %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ||</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052633Z" creationid="hirofumiwakasugi" creationdate="20150905T052633Z">
        <seg># ||</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Alternative ways to do error handling</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T023311Z" creationid="hirofumiwakasugi" creationdate="20150907T023311Z">
        <seg>## 例外処理の他の方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## AlwaysInline</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073053Z" creationid="hirofumiwakasugi" creationdate="20150919T073053Z">
        <seg>## AlwaysInline</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Array of String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140030Z" creationid="hirofumiwakasugi" creationdate="20150901T135818Z">
        <seg>## 文字列の配列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Array of Symbol</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140056Z" creationid="hirofumiwakasugi" creationdate="20150901T140056Z">
        <seg>## シンボルの配列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Array-like types</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140128Z" creationid="hirofumiwakasugi" creationdate="20150901T140128Z">
        <seg>## 配列ライクな型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Binary operators</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025935Z" creationid="hirofumiwakasugi" creationdate="20150909T025935Z">
        <seg>## 2項演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## CallConvention</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073603Z" creationid="hirofumiwakasugi" creationdate="20150919T073603Z">
        <seg>## CallConvention</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Catch-all initialization</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T054815Z" creationid="hirofumiwakasugi" creationdate="20150905T054815Z">
        <seg>## Catch-all initialization</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Checking the condition at the end of a loop</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052153Z" creationid="hirofumiwakasugi" creationdate="20150905T052153Z">
        <seg>## 条件によってループを抜ける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Classes as restrictions</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T030026Z" creationid="hirofumiwakasugi" creationdate="20150908T025409Z">
        <seg>## クラスによる制約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Compiling and running at once</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T071943Z" creationid="hirofumiwakasugi" creationdate="20150901T071943Z">
        <seg>## コンパイルと同時に実行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Conditionals</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035929Z" creationid="hirofumiwakasugi" creationdate="20151001T035825Z">
        <seg>## 条件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Converting between pointer types</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T015557Z" creationid="hirofumiwakasugi" creationdate="20150930T015434Z">
        <seg>## ポインタ型同士の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Converting between pointer types and other types</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T020020Z" creationid="hirofumiwakasugi" creationdate="20150930T020009Z">
        <seg>## ポインタ型と他の型の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Creating a project or library</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072138Z" creationid="hirofumiwakasugi" creationdate="20150901T072138Z">
        <seg>## プロジェクトやライブラリの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Creating an executable</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072020Z" creationid="hirofumiwakasugi" creationdate="20150901T072020Z">
        <seg>## 実行ファイルの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Defining custom exceptions</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011545Z" creationid="hirofumiwakasugi" creationdate="20150907T011545Z">
        <seg>## 独自の例外を定義する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Enums from integers</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011435Z" creationid="hirofumiwakasugi" creationdate="20150916T010814Z">
        <seg>## 整数から Enum を作る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Flags</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T074728Z" creationid="hirofumiwakasugi" creationdate="20150919T074728Z">
        <seg>## Flags</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Flags enums</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150915T045224Z" creationid="hirofumiwakasugi" creationdate="20150914T024723Z">
        <seg>## Flags Enum</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Forwarding non-captured blocks</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025438Z" creationid="hirofumiwakasugi" creationdate="20150917T025434Z">
        <seg>## 捕捉されないブロックのフォワーディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Free variables</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T035525Z" creationid="hirofumiwakasugi" creationdate="20150908T030254Z">
        <seg>## 自由変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Free variables in constructors</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T040552Z" creationid="hirofumiwakasugi" creationdate="20150908T040552Z">
        <seg>## コンストラクタにおける自由変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## From methods</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022025Z" creationid="hirofumiwakasugi" creationdate="20150902T022025Z">
        <seg>## メソッドから Proc を生成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Generic structs and modules</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061119Z" creationid="hirofumiwakasugi" creationdate="20150924T060902Z">
        <seg>## ジェネリックな構造体とモジュール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Generic types inheritance</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061624Z" creationid="hirofumiwakasugi" creationdate="20150924T061624Z">
        <seg>## ジェネリック型の継承</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Hash-like types</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T143020Z" creationid="hirofumiwakasugi" creationdate="20150901T143020Z">
        <seg>## ハッシュライクな型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Heredoc</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061749Z" creationid="hirofumiwakasugi" creationdate="20160204T061749Z">
        <seg>## ヒアドキュメント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Indexing</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T030920Z" creationid="hirofumiwakasugi" creationdate="20150909T030133Z">
        <seg>## インデックス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Install</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021536Z" creationid="hirofumiwakasugi" creationdate="20151009T021536Z">
        <seg>## インストール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Install
Once the repository is configured you're ready to install Crystal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T071613Z" creationid="hirofumiwakasugi" creationdate="20150831T053128Z">
        <seg>## インストール
リポジトリの構成が完了すると、Crystal をインストールすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Interpolation</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T020509Z" creationid="hirofumiwakasugi" creationdate="20150901T105226Z">
        <seg>## 文字列埋め込み (String Interpolation)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Invoking</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021845Z" creationid="hirofumiwakasugi" creationdate="20150902T021845Z">
        <seg>## Proc の実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Link</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T072310Z" creationid="hirofumiwakasugi" creationdate="20150919T072310Z">
        <seg>## Link</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Macro calls</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035857Z" creationid="hirofumiwakasugi" creationdate="20151001T021310Z">
        <seg>## マクロにおけるメソッド呼び出し</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Meaning</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T031707Z" creationid="hirofumiwakasugi" creationdate="20150909T031215Z">
        <seg>## 演算子の意味について</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Methods</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011351Z" creationid="hirofumiwakasugi" creationdate="20150916T011351Z">
        <seg>## メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Naming</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010149Z" creationid="hirofumiwakasugi" creationdate="20151010T010149Z">
        <seg>## 命名</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Nilable</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010851Z" creationid="hirofumiwakasugi" creationdate="20151009T010703Z">
        <seg>## Nil を許容する (nilable)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Nilable instance variables</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T053635Z" creationid="hirofumiwakasugi" creationdate="20150905T053635Z">
        <seg>## Nil を許容する (nilable) インスタンス変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## NoInline</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073144Z" creationid="hirofumiwakasugi" creationdate="20150919T073144Z">
        <seg>## NoInline</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Other commands and options</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072203Z" creationid="hirofumiwakasugi" creationdate="20150901T072203Z">
        <seg>## その他のコマンドやオプション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Other forms</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T160409Z" creationid="hirofumiwakasugi" creationdate="20150905T160409Z">
        <seg>## その他の形式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Other uses for generic types</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T072702Z" creationid="hirofumiwakasugi" creationdate="20150912T072021Z">
        <seg>## ジェネリック型のその他の用途</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Overloads</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T014852Z" creationid="hirofumiwakasugi" creationdate="20150916T014759Z">
        <seg>## オーバーロード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Packed</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T072507Z" creationid="hirofumiwakasugi" creationdate="20150919T072507Z">
        <seg>## Packed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Paths and generics</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010354Z" creationid="hirofumiwakasugi" creationdate="20151009T010039Z">
        <seg>## パスとジェネリクス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Performance</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030953Z" creationid="hirofumiwakasugi" creationdate="20150916T030953Z">
        <seg>## パフォーマンス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Pointer</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010918Z" creationid="hirofumiwakasugi" creationdate="20151009T010918Z">
        <seg>## ポインタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Private top-level methods</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T040722Z" creationid="hirofumiwakasugi" creationdate="20150909T040701Z">
        <seg>## トップレベルの private メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Proc</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011308Z" creationid="hirofumiwakasugi" creationdate="20151009T011308Z">
        <seg>## Proc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Raises</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073451Z" creationid="hirofumiwakasugi" creationdate="20150919T073451Z">
        <seg>## Raises</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Raises attribute</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T030141Z" creationid="hirofumiwakasugi" creationdate="20151008T024845Z">
        <seg>## Raise 属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Raising exception</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012813Z" creationid="hirofumiwakasugi" creationdate="20150907T010836Z">
        <seg>## 例外を発生させる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Redefining methods, and previous_def</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T123019Z" creationid="hirofumiwakasugi" creationdate="20150904T122932Z">
        <seg>## メソッドの再定義と previous_def</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Rescuing exceptions</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013102Z" creationid="hirofumiwakasugi" creationdate="20150907T011908Z">
        <seg>## 例外の捕捉</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## ReturnsTwice</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073224Z" creationid="hirofumiwakasugi" creationdate="20150919T073224Z">
        <seg>## ReturnsTwice</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Scope</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T015422Z" creationid="hirofumiwakasugi" creationdate="20151001T015229Z">
        <seg>## スコープ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Setup repository</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T052818Z" creationid="hirofumiwakasugi" creationdate="20150831T052654Z">
        <seg>## リポジトリの設定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Short one-argument syntax</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153206Z" creationid="hirofumiwakasugi" creationdate="20160115T152930Z">
        <seg>## 単一引数の場合の短縮記法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Short syntax form</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014047Z" creationid="hirofumiwakasugi" creationdate="20150907T014047Z">
        <seg>## 短縮記法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Specifying the types of instance variables</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T093240Z" creationid="hirofumiwakasugi" creationdate="20150905T093131Z">
        <seg>## インスタンス変数の型を指定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## StaticArray</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011052Z" creationid="hirofumiwakasugi" creationdate="20151009T011052Z">
        <seg>## 静的配列 (StaticArray)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## String keys</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T142958Z" creationid="hirofumiwakasugi" creationdate="20150901T142958Z">
        <seg>## キーが文字列のハッシュ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Symbol keys</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T142753Z" creationid="hirofumiwakasugi" creationdate="20150901T142700Z">
        <seg>## キーがシンボルのハッシュ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## ThreadLocal</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T072358Z" creationid="hirofumiwakasugi" creationdate="20150919T072358Z">
        <seg>## ThreadLocal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Troubleshooting on OSX 10.11 (El Capitan)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061015Z" creationid="hirofumiwakasugi" creationdate="20160204T061015Z">
        <seg>## OSX 10.11 (El Capitan) での注意</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Tuple</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011132Z" creationid="hirofumiwakasugi" creationdate="20151009T011132Z">
        <seg>## タプル (Tuple)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Type inference</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014344Z" creationid="hirofumiwakasugi" creationdate="20150907T014344Z">
        <seg>## 型推論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Type of closured variables</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T054141Z" creationid="hirofumiwakasugi" creationdate="20150918T054141Z">
        <seg>## クロージャの変数の型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Type restrictions in splats</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025907Z" creationid="hirofumiwakasugi" creationdate="20150908T025823Z">
        <seg>## splat 展開での型制約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Type variables inference</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T070729Z" creationid="hirofumiwakasugi" creationdate="20150912T070034Z">
        <seg>## 型変数の型推論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Unary operators</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025408Z" creationid="hirofumiwakasugi" creationdate="20150909T025304Z">
        <seg>## 単項演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Underscore</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012030Z" creationid="hirofumiwakasugi" creationdate="20151009T012030Z">
        <seg>## アンダースコア</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Union</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010431Z" creationid="hirofumiwakasugi" creationdate="20151009T010431Z">
        <seg>## 型の組み合わせ (ユニオン)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Upgrade</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T053203Z" creationid="hirofumiwakasugi" creationdate="20150831T053203Z">
        <seg>## アップグレード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Usage</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011633Z" creationid="hirofumiwakasugi" creationdate="20150916T011601Z">
        <seg>## 用途</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Usage for casting to a bigger type</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062412Z" creationid="hirofumiwakasugi" creationdate="20150930T022448Z">
        <seg>## 大きな型へのキャストの利用方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Usage for when the compiler can't infer the type of a block</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062404Z" creationid="hirofumiwakasugi" creationdate="20150930T061634Z">
        <seg>## コンパイラがブロックの型を推論できないときの利用方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Variadic arguments and splatting</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040717Z" creationid="hirofumiwakasugi" creationdate="20151001T040717Z">
        <seg>## 可変長引数と展開</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Whitespace</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011841Z" creationid="hirofumiwakasugi" creationdate="20151010T011841Z">
        <seg>## 空白 (whitespace)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Yield arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T015648Z" creationid="hirofumiwakasugi" creationdate="20150916T015539Z">
        <seg>## yield の引数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## break</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024257Z" creationid="hirofumiwakasugi" creationdate="20150916T024257Z">
        <seg>## break</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## break and next</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T062000Z" creationid="hirofumiwakasugi" creationdate="20150918T062000Z">
        <seg>## break と next</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## class</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011834Z" creationid="hirofumiwakasugi" creationdate="20151009T011834Z">
        <seg>## クラス (class)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013734Z" creationid="hirofumiwakasugi" creationdate="20150907T013734Z">
        <seg>## else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## ensure</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013143Z" creationid="hirofumiwakasugi" creationdate="20150907T013143Z">
        <seg>## ensure</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## extend self</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142607Z" creationid="hirofumiwakasugi" creationdate="20150911T142607Z">
        <seg>## extend self</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## next</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025550Z" creationid="hirofumiwakasugi" creationdate="20150916T025550Z">
        <seg>## next</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## require "./filename"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155924Z" creationid="hirofumiwakasugi" creationdate="20150905T155924Z">
        <seg>## require "./filename"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## require "filename"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T144752Z" creationid="hirofumiwakasugi" creationdate="20150905T144752Z">
        <seg>## require "ファイル名"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## self</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011653Z" creationid="hirofumiwakasugi" creationdate="20151009T011653Z">
        <seg>## self</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## self restriction</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T022705Z" creationid="hirofumiwakasugi" creationdate="20150908T022635Z">
        <seg>## self 制約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## super</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024426Z" creationid="hirofumiwakasugi" creationdate="20150910T024426Z">
        <seg>## super</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## typeof</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012250Z" creationid="hirofumiwakasugi" creationdate="20151009T012250Z">
        <seg>## typeof</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## with ... yield</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030226Z" creationid="hirofumiwakasugi" creationdate="20150916T030226Z">
        <seg>## with ... yield</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## yield value</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023351Z" creationid="hirofumiwakasugi" creationdate="20150916T023229Z">
        <seg>## yield の値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### A Complete Example</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144048Z" creationid="hirofumiwakasugi" creationdate="20151010T144029Z">
        <seg>### 全体の例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Acronyms</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010716Z" creationid="hirofumiwakasugi" creationdate="20151010T010701Z">
        <seg>### 頭字語 (Acronym)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Constants</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T041439Z" creationid="hirofumiwakasugi" creationdate="20151001T041439Z">
        <seg>### 定数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Directory and File Names</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011037Z" creationid="hirofumiwakasugi" creationdate="20151010T011037Z">
        <seg>### ディレクトリとファイル名</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Generate Documentation</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144107Z" creationid="hirofumiwakasugi" creationdate="20151010T144107Z">
        <seg>### ドキュメントの生成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Iteration
To iterate an `ArrayLiteral`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040350Z" creationid="hirofumiwakasugi" creationdate="20151001T040258Z">
        <seg>### イテレーション
`ArrayLiteral` をイテレートするには以下のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Libs</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010940Z" creationid="hirofumiwakasugi" creationdate="20151010T010921Z">
        <seg>### ライブラリ (Lib)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Type information</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T041040Z" creationid="hirofumiwakasugi" creationdate="20151001T041040Z">
        <seg>### 型情報</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$  git add -A
$  git commit -am "First Commit"
[master (root-commit) 77bad84] First Commit
10 files changed, 102 insertions(+)
create mode 100644 .editorconfig
create mode 100644 .gitignore
create mode 100644 .travis.yml
create mode 100644 LICENSE
create mode 100644 README.md
create mode 100644 shard.yml
create mode 100644 spec/palindrome-example_spec.cr
create mode 100644 spec/spec_helper.cr
create mode 100644 src/palindrome-example.cr
create mode 100644 src/palindrome-example/version.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T154844Z" creationid="makenowjust" creationdate="20200527T154844Z">
        <seg>$  git add -A
$  git commit -am "First Commit"
[master (root-commit) 77bad84] First Commit
10 files changed, 102 insertions(+)
create mode 100644 .editorconfig
create mode 100644 .gitignore
create mode 100644 .travis.yml
create mode 100644 LICENSE
create mode 100644 README.md
create mode 100644 shard.yml
create mode 100644 spec/palindrome-example_spec.cr
create mode 100644 spec/spec_helper.cr
create mode 100644 src/palindrome-example.cr
create mode 100644 src/palindrome-example/version.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal
Usage: crystal [command] [switches] [program file] [--] [arguments]

Command:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080652Z" creationid="makenowjust" creationdate="20200516T080652Z">
        <seg>$ crystal
Usage: crystal [command] [switches] [program file] [--] [arguments]

Command:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal --version
--8&lt;-- "crystal-version.txt"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100458Z" creationid="makenowjust" creationdate="20210324T100458Z">
        <seg>$ crystal --version
--8&lt;-- "crystal-version.txt"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal --version
Crystal 0.34.0 (2020-04-07)

LLVM: 10.0.0
Default target: x86_64-apple-macosx</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080602Z" creationid="makenowjust" creationdate="20200516T080602Z">
        <seg>$ crystal --version
Crystal 0.34.0 (2020-04-07)

LLVM: 10.0.0
Default target: x86_64-apple-macosx</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal -v
--8&lt;-- "crystal-version.txt"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100514Z" creationid="makenowjust" creationdate="20210324T100514Z">
        <seg>$ crystal -v
--8&lt;-- "crystal-version.txt"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal -v
Crystal 0.31.1 (2019-10-02)

LLVM: 8.0.1
Default target: x86_64-apple-macosx</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172032Z" creationid="makenowjust" creationdate="20200413T172032Z">
        <seg>$ crystal -v
Crystal 0.31.1 (2019-10-02)

LLVM: 8.0.1
Default target: x86_64-apple-macosx</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal ./hello_goodbye.cr -- -g "Penny Lane"

You say goodbye, and Ringo Starr say hello to Penny Lane!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175339Z" creationid="makenowjust" creationdate="20200413T175339Z">
        <seg>$ crystal ./hello_goodbye.cr -- -g "Penny Lane"

You say goodbye, and Ringo Starr say hello to Penny Lane!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal ./hello_goodbye.cr -- -n
Unhandled exception: Invalid option: -n (OptionParser::InvalidOption)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175905Z" creationid="makenowjust" creationdate="20200413T175905Z">
        <seg>$ crystal ./hello_goodbye.cr -- -n
Unhandled exception: Invalid option: -n (OptionParser::InvalidOption)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal ./help.cr -- -h

Welcome to The Beatles App!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174323Z" creationid="makenowjust" creationdate="20200413T174323Z">
        <seg>$ crystal ./help.cr -- -h

Welcome to The Beatles App!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal ./let_it_cli.cr
Showing last frame.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182447Z" creationid="makenowjust" creationdate="20200413T182447Z">
        <seg>$ crystal ./let_it_cli.cr
Showing last frame.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal build hello_world.cr
$ ./hello_world
Hello World!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150603Z" creationid="makenowjust" creationdate="20200419T150603Z">
        <seg>$ crystal build hello_world.cr
$ ./hello_world
Hello World!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal build hello_world.cr --release</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150703Z" creationid="makenowjust" creationdate="20200419T150703Z">
        <seg>$ crystal build hello_world.cr --release</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal build hello_world.cr --release --static</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T152729Z" creationid="makenowjust" creationdate="20200419T152729Z">
        <seg>$ crystal build hello_world.cr --release --static</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal env
CRYSTAL_CACHE_DIR="/home/crystal/.cache/crystal"
CRYSTAL_PATH="/usr/bin/../share/crystal/src:lib"
CRYSTAL_VERSION="0.28.0"
CRYSTAL_LIBRARY_PATH="/usr/bin/../lib/crystal/lib"
$ crystal env CRYSTAL_VERSION
0.28.0</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163401Z" creationid="makenowjust" creationdate="20200419T163401Z">
        <seg>$ crystal env
CRYSTAL_CACHE_DIR="/home/crystal/.cache/crystal"
CRYSTAL_PATH="/usr/bin/../share/crystal/src:lib"
CRYSTAL_VERSION="0.28.0"
CRYSTAL_LIBRARY_PATH="/usr/bin/../lib/crystal/lib"
$ crystal env CRYSTAL_VERSION
0.28.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal eval 'puts "Hello World"'
Hello World!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160056Z" creationid="makenowjust" creationdate="20200419T160056Z">
        <seg>$ crystal eval 'puts "Hello World"'
Hello World!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal hello_world.cr
Hello World!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080834Z" creationid="makenowjust" creationdate="20200516T080834Z">
        <seg>$ crystal hello_world.cr
Hello World!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal init app myapp</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153545Z" creationid="makenowjust" creationdate="20200419T153545Z">
        <seg>$ crystal init app myapp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal init lib my_cool_lib</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161504Z" creationid="makenowjust" creationdate="20200419T161504Z">
        <seg>$ crystal init lib my_cool_lib</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal init lib palindrome-example</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T154750Z" creationid="makenowjust" creationdate="20200527T154750Z">
        <seg>$ crystal init lib palindrome-example</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal run --release class_vs_struct.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091357Z" creationid="makenowjust" creationdate="20200506T091357Z">
        <seg>$ crystal run --release class_vs_struct.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal run --release io_benchmark.cr
without to_s  77.11M ( 12.97ns) (± 1.05%)       fastest</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T090914Z" creationid="makenowjust" creationdate="20200506T090914Z">
        <seg>$ crystal run --release io_benchmark.cr
without to_s  77.11M ( 12.97ns) (± 1.05%)       fastest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal run --release str_benchmark.cr
String.build 597.57k (  1.67µs) (± 5.52%)       fastest</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091006Z" creationid="makenowjust" creationdate="20200506T091006Z">
        <seg>$ crystal run --release str_benchmark.cr
String.build 597.57k (  1.67µs) (± 5.52%)       fastest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal run ./hello_goodbye.cr -- -g "Penny Lane"

You say goodbye, and Ringo Starr say hello to Penny Lane!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T101332Z" creationid="makenowjust" creationdate="20200809T101332Z">
        <seg>$ crystal run ./hello_goodbye.cr -- -g "Penny Lane"

You say goodbye, and Ringo Starr say hello to Penny Lane!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal run ./hello_goodbye.cr -- -g "Penny Lane"

You say goodbye, and Ringo Starr says hello to Penny Lane!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T085309Z" creationid="makenowjust" creationdate="20211107T085309Z">
        <seg>$ crystal run ./hello_goodbye.cr -- -g "Penny Lane"

You say goodbye, and Ringo Starr says hello to Penny Lane!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal run ./hello_goodbye.cr -- -n
Unhandled exception: Invalid option: -n (OptionParser::InvalidOption)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T101334Z" creationid="makenowjust" creationdate="20200809T101334Z">
        <seg>$ crystal run ./hello_goodbye.cr -- -n
Unhandled exception: Invalid option: -n (OptionParser::InvalidOption)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal run ./help.cr -- -h

Welcome to The Beatles App!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T101315Z" creationid="makenowjust" creationdate="20200809T101315Z">
        <seg>$ crystal run ./help.cr -- -h

Welcome to The Beatles App!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal run ./let_it_cli.cr
Showing last frame.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T101601Z" creationid="makenowjust" creationdate="20200809T101601Z">
        <seg>$ crystal run ./let_it_cli.cr
Showing last frame.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal run ./twist_and_shout.cr -- -t

Group members:
==============
JOHN LENNON
PAUL MCCARTNEY
GEORGE HARRISON
RINGO STARR</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174951Z" creationid="makenowjust" creationdate="20200413T174951Z">
        <seg>$ crystal run ./twist_and_shout.cr -- -t

Group members:
==============
JOHN LENNON
PAUL MCCARTNEY
GEORGE HARRISON
RINGO STARR</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal spec
F

Failures:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165157Z" creationid="makenowjust" creationdate="20200419T165157Z">
        <seg>$ crystal spec
F

Failures:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal tool format file.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215751Z" creationid="makenowjust" creationdate="20200412T215751Z">
        <seg>$ crystal tool format file.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal tool format src/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215826Z" creationid="makenowjust" creationdate="20200412T215826Z">
        <seg>$ crystal tool format src/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal version
--8&lt;-- "crystal-version.txt"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T101941Z" creationid="makenowjust" creationdate="20210324T101941Z">
        <seg>$ crystal version
--8&lt;-- "crystal-version.txt"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal version
Crystal 0.25.1 [b782738ff] (2018-06-27)

LLVM: 4.0.0
Default target: x86_64-unknown-linux-gnu</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160758Z" creationid="makenowjust" creationdate="20200419T160758Z">
        <seg>$ crystal version
Crystal 0.25.1 [b782738ff] (2018-06-27)

LLVM: 4.0.0
Default target: x86_64-unknown-linux-gnu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ docker-compose up
...
gitbook_1  | Starting server ...
gitbook_1  | Serving book on http://localhost:4000
gitbook_1  | Restart after change in file node_modules/.bin
...</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164715Z" creationid="makenowjust" creationdate="20200413T164715Z">
        <seg>$ docker-compose up
...
gitbook_1  | Starting server ...
gitbook_1  | Serving book on http://localhost:4000
gitbook_1  | Restart after change in file node_modules/.bin
...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ echo 'puts "Hello #{ARGV[0]?}!"' &gt; hello_world.cr
$ crystal build hello_world.cr
$ ./hello_world Crystal
Hello Crystal!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155131Z" creationid="makenowjust" creationdate="20200419T155131Z">
        <seg>$ echo 'puts "Hello #{ARGV[0]?}!"' &gt; hello_world.cr
$ crystal build hello_world.cr
$ ./hello_world Crystal
Hello Crystal!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ echo 'puts "Hello #{ARGV[0]?}!"' &gt; hello_world.cr
$ crystal run hello_world.cr -- Crystal
Hello Crystal!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154709Z" creationid="makenowjust" creationdate="20200419T154709Z">
        <seg>$ echo 'puts "Hello #{ARGV[0]?}!"' &gt; hello_world.cr
$ crystal run hello_world.cr -- Crystal
Hello Crystal!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ echo 'puts "Hello World!"' &gt; hello_world.cr
$ crystal run hello_world.cr
Hello World!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150249Z" creationid="makenowjust" creationdate="20200419T150249Z">
        <seg>$ echo 'puts "Hello World!"' &gt; hello_world.cr
$ crystal run hello_world.cr
Hello World!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ echo 'puts "Hello World"' | crystal eval
Hello World!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160058Z" creationid="makenowjust" creationdate="20200419T160058Z">
        <seg>$ echo 'puts "Hello World"' | crystal eval
Hello World!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ git add -A
$ git commit -am "First Commit"
[master (root-commit) 77bad84] First Commit
10 files changed, 102 insertions(+)
create mode 100644 .editorconfig
create mode 100644 .gitignore
create mode 100644 .travis.yml
create mode 100644 LICENSE
create mode 100644 README.md
create mode 100644 shard.yml
create mode 100644 spec/palindrome-example_spec.cr
create mode 100644 spec/spec_helper.cr
create mode 100644 src/palindrome-example.cr
create mode 100644 src/palindrome-example/version.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100022Z" creationid="makenowjust" creationdate="20210324T100022Z">
        <seg>$ git add -A
$ git commit -am "First Commit"
[master (root-commit) 77bad84] First Commit
10 files changed, 102 insertions(+)
create mode 100644 .editorconfig
create mode 100644 .gitignore
create mode 100644 .travis.yml
create mode 100644 LICENSE
create mode 100644 README.md
create mode 100644 shard.yml
create mode 100644 spec/palindrome-example_spec.cr
create mode 100644 spec/spec_helper.cr
create mode 100644 src/palindrome-example.cr
create mode 100644 src/palindrome-example/version.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ git clone https://github.com/crystal-lang/crystal-book
$ cd crystal-book</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T055630Z" creationid="makenowjust" creationdate="20201213T055630Z">
        <seg>$ git clone https://github.com/crystal-lang/crystal-book
$ cd crystal-book</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ git clone https://github.com/crystal-lang/crystal-book.git
$ cd crystal-book
$ npm install -g gitbook-cli@2.3.0
$ npm install
$ gitbook install
$ gitbook serve
Live reload server started on port: 35729
Press CTRL+C to quit ...

info: 8 plugins are installed
info: loading plugin "ga"...</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164543Z" creationid="makenowjust" creationdate="20200413T164543Z">
        <seg>$ git clone https://github.com/crystal-lang/crystal-book.git
$ cd crystal-book
$ npm install -g gitbook-cli@2.3.0
$ npm install
$ gitbook install
$ gitbook serve
Live reload server started on port: 35729
Press CTRL+C to quit ...

info: 8 plugins are installed
info: loading plugin "ga"...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ llvm-config --host-target
x86_64-unknown-linux-gnu

# so the flags are: x86_64, unknown, linux, gnu</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T022944Z" creationid="makenowjust" creationdate="20200511T022928Z">
        <seg>$ llvm-config --host-target
x86_64-unknown-linux-gnu

# よって、フラグは x86_64, unknown, linux, gnu となります</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ make build</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T055753Z" creationid="makenowjust" creationdate="20201213T055753Z">
        <seg>$ make build</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ make serve
INFO    -  Building documentation...</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T055714Z" creationid="makenowjust" creationdate="20201213T055714Z">
        <seg>$ make serve
INFO    -  Building documentation...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$errno : Int32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T084058Z" creationid="makenowjust" creationdate="20200512T084058Z">
        <seg>$errno : Int32
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$errno : Int32
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053758Z" creationid="hirofumiwakasugi" creationdate="20151007T053758Z">
        <seg>$errno : Int32
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>%(hello ("world")) # =&gt; "hello (\"world\")"
%[hello ["world"]] # =&gt; "hello [\"world\"]"
%{hello {"world"}} # =&gt; "hello {\"world\"}"
%&lt;hello &lt;"world"&gt;&gt; # =&gt; "hello &lt;\"world\"&gt;"
%|hello "world"|   # =&gt; "hello \"world\""</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T193502Z" creationid="makenowjust" creationdate="20200419T193502Z">
        <seg>%(hello ("world")) # =&gt; "hello (\"world\")"
%[hello ["world"]] # =&gt; "hello [\"world\"]"
%{hello {"world"}} # =&gt; "hello {\"world\"}"
%&lt;hello &lt;"world"&gt;&gt; # =&gt; "hello &lt;\"world\"&gt;"
%|hello "world"|   # =&gt; "hello \"world\""</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>%i(foo bar baz)  # =&gt; [:foo, :bar, :baz]
%i(foo\nbar baz) # =&gt; [:"foo\nbar", :baz]
%i(foo(bar) baz) # =&gt; [:"foo(bar)", :baz]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T172121Z" creationid="makenowjust" creationdate="20200420T172121Z">
        <seg>%i(foo bar baz)  # =&gt; [:foo, :bar, :baz]
%i(foo\nbar baz) # =&gt; [:"foo\nbar", :baz]
%i(foo(bar) baz) # =&gt; [:"foo(bar)", :baz]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>%i(foo\ bar baz) # =&gt; [:"foo bar", :baz]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T172244Z" creationid="makenowjust" creationdate="20200420T172244Z">
        <seg>%i(foo\ bar baz) # =&gt; [:"foo bar", :baz]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>%name{index} = {{index}}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T021008Z" creationid="hirofumiwakasugi" creationdate="20151002T021008Z">
        <seg>%name{index} = {{index}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>%r((/)) # =&gt; /(\/)/
%r[[/]] # =&gt; /[\/]/
%r{{/}} # =&gt; /{\/}/
%r&lt;&lt;/&gt;&gt; # =&gt; /&lt;\/&gt;/
%r|/|   # =&gt; /\//</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T042413Z" creationid="makenowjust" creationdate="20200421T042413Z">
        <seg>%r((/)) # =&gt; /(\/)/
%r[[/]] # =&gt; /[\/]/
%r{{/}} # =&gt; /{\/}/
%r&lt;&lt;/&gt;&gt; # =&gt; /&lt;\/&gt;/
%r|/|   # =&gt; /\//</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>%w(foo bar baz)  # =&gt; ["foo", "bar", "baz"]
%w(foo\nbar baz) # =&gt; ["foo\\nbar", "baz"]
%w(foo(bar) baz) # =&gt; ["foo(bar)", "baz"]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T193934Z" creationid="makenowjust" creationdate="20200419T193934Z">
        <seg>%w(foo bar baz)  # =&gt; ["foo", "bar", "baz"]
%w(foo\nbar baz) # =&gt; ["foo\\nbar", "baz"]
%w(foo(bar) baz) # =&gt; ["foo(bar)", "baz"]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>%w(foo\ bar baz) # =&gt; ["foo bar", "baz"]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194135Z" creationid="makenowjust" creationdate="20200419T194135Z">
        <seg>%w(foo\ bar baz) # =&gt; ["foo bar", "baz"]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>%w(one two three) # =&gt; ["one", "two", "three"]
%i(one two three) # =&gt; [:one, :two, :three]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173341Z" creationid="makenowjust" creationdate="20200420T173341Z">
        <seg>%w(one two three) # =&gt; ["one", "two", "three"]
%i(one two three) # =&gt; [:one, :two, :three]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>%x = 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T020012Z" creationid="hirofumiwakasugi" creationdate="20151002T020012Z">
        <seg>%x = 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&amp;&amp; (objects[1] = 2)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174929Z" creationid="makenowjust" creationdate="20200422T174929Z">
        <seg>&amp;&amp; (objects[1] = 2) と同じ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&amp;&amp; - Logical AND Operator</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101705Z" creationid="makenowjust" creationdate="20200424T101507Z">
        <seg>&amp;&amp; - 論理積 (かつ) 演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&amp;&amp; b)&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T095348Z" creationid="makenowjust" creationdate="20200502T095348Z">
        <seg>&amp;&amp; b)&lt;/g2&gt; に変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&amp;&amp; value2.odd?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093739Z" creationid="makenowjust" creationdate="20200424T093739Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>' link_text="Crystal Events Calendar" url=events_ical_url icon="today" %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T104832Z" creationid="makenowjust" creationdate="20200518T104832Z">
        <seg>'
   link_text='Crystal イベントカレンダー'
   url=events_ical_url
   icon='today' %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>'\''         # single quote
'\\'         # backslash
'\a'         # alert
'\b'         # backspace
'\e'         # escape
'\f'         # form feed
'\n'         # newline
'\r'         # carriage return
'\t'         # tab
'\v'         # vertical tab
'\uFFFF'     # hexadecimal unicode character
'\u{10FFFF}' # hexadecimal unicode character</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T190802Z" creationid="makenowjust" creationdate="20200419T185947Z">
        <seg>'\''         # シングルクォート
'\\'         # バックスラッシュ
'\a'         # アラート
'\b'         # バックスペース
'\e'         # エスケープ
'\f'         # フォームフィード (改ページ)
'\n'         # 改行
'\r'         # キャリッジリターン (復帰)
'\t'         # タブ文字
'\v'         # 垂直タブ
'\uFFFF'     # 16進数によるユニコード文字
'\u{10FFFF}' # 16進数によるユニコード文字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>'\u0041'    # =&gt; 'A'
'\u{41}'    # =&gt; 'A'
'\u{1F52E}' # =&gt; '&amp;#x1F52E;'</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T190630Z" creationid="makenowjust" creationdate="20200419T190547Z">
        <seg>'\u0041'    # =&gt; 'A'
'\u{41}'    # =&gt; 'A'
'\u{1F52E}' # =&gt; '🔮'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>'a'
'z'
'0'
'_'
'あ'</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T185803Z" creationid="makenowjust" creationdate="20200419T185803Z">
        <seg>'a'
'z'
'0'
'_'
'あ'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(0..5).to_a  # =&gt; [0, 1, 2, 3, 4, 5]
(0...5).to_a # =&gt; [0, 1, 2, 3, 4]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T034445Z" creationid="makenowjust" creationdate="20200421T034445Z">
        <seg>(0..5).to_a  # =&gt; [0, 1, 2, 3, 4, 5]
(0...5).to_a # =&gt; [0, 1, 2, 3, 4]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(If you wonder why we needed to specify that &lt;g1&gt;name&lt;/g1&gt; is a &lt;g2&gt;String&lt;/g2&gt; but we didn't need to do it for &lt;g3&gt;age&lt;/g3&gt;, check the &lt;g4&gt;global type inference algorithm&lt;/g4&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T120842Z" creationid="makenowjust" creationdate="20200427T120842Z">
        <seg>(&lt;g1&gt;name&lt;/g1&gt; には &lt;g2&gt;String&lt;/g2&gt; と指定しているのに &lt;g3&gt;age&lt;/g3&gt; に対してはそれが必要ないことを不思議に思う人もいるでしょう。これは &lt;g4&gt;グローバル型推論アルゴリズムの項&lt;/g4&gt;を参照してください。)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* C (the default)
* Fast
* Cold
* WebKit_JS
* AnyReg
* X86_StdCall
* X86_FastCall</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T074652Z" creationid="hirofumiwakasugi" creationdate="20150919T074652Z">
        <seg>* C (the default)
* Fast
* Cold
* WebKit_JS
* AnyReg
* X86_StdCall
* X86_FastCall</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Code blocks that have Crystal code can be surrounded with triple backticks or indented with four spaces.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140803Z" creationid="hirofumiwakasugi" creationdate="20151010T140539Z">
        <seg>* Crystal のコードブロックは3つのバックティック (バッククォート) で囲むか、スペース4つでインデントします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Code involving C bindings
* [Uninitialized variable declaration](declare_var.html)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012638Z" creationid="hirofumiwakasugi" creationdate="20151009T012627Z">
        <seg>* C バインディングを伴うコード
* [初期化しない変数宣言](declare_var.html)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Code involving raw pointers: the [Pointer](http://crystal-lang.org/api/Pointer.html) type and [pointerof](pointerof.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012550Z" creationid="hirofumiwakasugi" creationdate="20151009T012550Z">
        <seg>* 生のポインタを伴うコード: [ポインタ](http://crystal-lang.org/api/Pointer.html) 型と [pointerof](pointerof.html)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Documentation should be positioned right above definitions of classes, modules, and methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T033440Z" creationid="hirofumiwakasugi" creationdate="20151010T033309Z">
        <seg>* ドキュメンテーションコメントはクラス、モジュール、そしてメソッド定義のすぐ上に配置してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Found these USE flags for dev-lang/crystal-0.18.7:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111618Z" creationid="makenowjust" creationdate="20200518T111618Z">
        <seg>* Found these USE flags for dev-lang/crystal-0.18.7:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* If a directory named "filename" is found and it contains a file named "filename.cr" directly underneath it, it is required.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T154529Z" creationid="hirofumiwakasugi" creationdate="20150905T154453Z">
        <seg>* もし「ファイル名」のディレクトリが見つかり、そこに「ファイル名.cr」というファイルが含まれていれば、そのファイルをロードする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* If a file named "filename.cr" is found in the require path, it is required.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T154509Z" creationid="hirofumiwakasugi" creationdate="20150905T145635Z">
        <seg>* もし「ファイル名.cr」というファイルが require パスに見つかれば、そのファイルをロードする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* If a file named "filename.cr" is found relative to the current file, it is required.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T160157Z" creationid="hirofumiwakasugi" creationdate="20150905T160157Z">
        <seg>* もし「ファイル名.cr」というファイルが現在のファイルからの相対パスに見つかれば、そのファイルをロードする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* It has a type
* It can respond to some methods</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T024638Z" creationid="hirofumiwakasugi" creationdate="20150904T012858Z">
        <seg>* オブジェクトは型を持っている
* オブジェクトは何らかのメソッドに応答する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Otherwise a compile-time error is issued.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T160220Z" creationid="hirofumiwakasugi" creationdate="20150905T155117Z">
        <seg>* それ以外の場合はコンパイルエラーとなる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Parameter names should be *italicized* (surrounded with single asterisks `*` or underscores `_`):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140503Z" creationid="hirofumiwakasugi" creationdate="20151010T140503Z">
        <seg>* パラメータ名は「イタリック体」とします。1つのアスタリスク (`*`) またはアンダースコア(`_`) で囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Text blocks, for example to show program output, must be surrounded with triple backticks followed by the "text" keyword.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T141208Z" creationid="hirofumiwakasugi" creationdate="20151010T141009Z">
        <seg>* 例えばプログラムの出力を示すためのテキストのブロックは、「text」というキーワードをつけた3つのバックティック (バッククォート) で囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* The [allocate](new,_initialize_and_allocate.html) class method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012604Z" creationid="hirofumiwakasugi" creationdate="20151009T012604Z">
        <seg>* クラスメソッドの [allocate](new,_initialize_and_allocate.html)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* The documentation of a method is included into the method summary and the method details.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144125Z" creationid="hirofumiwakasugi" creationdate="20151010T135722Z">
        <seg>* メソッドのドキュメントは、メソッドの概要、およびメソッドの詳細の内容となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* The number of arguments
* The type restrictions applied to arguments
* Whether the method accepts a [block](blocks_and_procs.html) or not</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071320Z" creationid="hirofumiwakasugi" creationdate="20150906T071239Z">
        <seg>* 引数の数
* 引数に指定された型制約
* メソッドが[ブロック](blocks_and_procs.html)をとるかどうか</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* To automatically link to methods in other types, do `OtherType#method(arg1, arg2)` or just `OtherType#method`, and enclose it with single backticks.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T142300Z" creationid="hirofumiwakasugi" creationdate="20151010T142203Z">
        <seg>* 他の型のメソッドに対して自動的にリンクさせたい場合は、`OtherType#method(arg1, arg2)` のようにするか、または単純に `OtherType#method` として、1つのバックティック (バッククォート) で囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* To automatically link to methods of the currently documented type, use a hash like `#horns` or `#index(char)`, and enclose it with single backticks.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T142132Z" creationid="hirofumiwakasugi" creationdate="20151010T141309Z">
        <seg>* 現在の型のメソッドに対して自動的にリンクさせたい場合は、`#horns` や `#index(char)` のようにハッシュ記号をつけて、1つのバックティック (バッククォート) で囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* To automatically link to other types, enclose them with single backticks.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T141257Z" creationid="hirofumiwakasugi" creationdate="20151010T141257Z">
        <seg>* 自動的に他の型にリンクさせたい場合は、1つのバックティック (バッククォート) で囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* To show the value of an expression inside code blocks, use `#=&gt;`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T142407Z" creationid="hirofumiwakasugi" creationdate="20151010T142315Z">
        <seg>* コードブロックの中で式の値を示したい場合は、`#=&gt;` を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Use [standard coding style](coding_style.md) so your project will be navigable and readable to others.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T141823Z" creationid="hirofumiwakasugi" creationdate="20151009T141614Z">
        <seg>* [標準コーディングスタイル](coding_style.md) を利用してください。そうすれば、あなたのプロジェクトは他の人にとって追いかけやすく読みやすいものになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Use `:nodoc:` to hide public declarations from the generated documentation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T143928Z" creationid="hirofumiwakasugi" creationdate="20151010T143018Z">
        <seg>* public に定義されたものを生成されたドキュメント上では隠したい場合には、`:nodoc:` を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Use `ditto` to use the same comment as in the previous declaration.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T143013Z" creationid="hirofumiwakasugi" creationdate="20151010T142931Z">
        <seg>* 前の定義と同じコメントを使いたい場合は、`ditto` (同上の意味) を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Use the third person: `Returns the number of horns this unicorn has` instead of `Return the number of horns this unicorn has`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140318Z" creationid="hirofumiwakasugi" creationdate="20151010T140215Z">
        <seg>* 3人称を使ってください。つまり、`Return the number of horns this unicorn has` ではなく、`Returns the number of horns this unicorn has` とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* We create a `.o` file in the target system and from that file we create a compile.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T050437Z" creationid="hirofumiwakasugi" creationdate="20150909T050437Z">
        <seg>* 対象システム用の `.o` ファイルを生成し、それを使ってコンパイラを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Write [documentation](documenting_code.md) to express purpose of your code and support the `crystal doc` generator.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T141835Z" creationid="hirofumiwakasugi" creationdate="20151009T141619Z">
        <seg>* コードの目的を説明するための[ドキュメント](documenting_code.md)を書いてください。 そして、`crystal doc` ジェネレータをサポートしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* You can [require](../syntax_and_semantics/requiring_files.html) code defined in other files:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072604Z" creationid="hirofumiwakasugi" creationdate="20150901T072604Z">
        <seg>* [require](../syntax_and_semantics/requiring_files.html) で、他のファイルで定義されたコードを読み込むことができます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* You can easily create strings with embedded content, known as string interpolation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T105233Z" creationid="hirofumiwakasugi" creationdate="20150901T072651Z">
        <seg>* 文字列埋め込み (string interpolation) を使うと、簡単に文字列に式を埋め込むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* You can use code blocks, or simply [blocks](../syntax_and_semantics/blocks_and_procs.html), which are a very convenient way to reuse code and get some features from the functional world:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072639Z" creationid="hirofumiwakasugi" creationdate="20150901T072639Z">
        <seg>* [ブロック](../syntax_and_semantics/blocks_and_procs.html)を使うと簡単にコードを再利用することができ、また、関数型の世界にあるいくつかの機能を利用することが可能になります</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* You program by invoking [methods](../syntax_and_semantics/classes_and_methods.html) (or sending messages) to objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072629Z" creationid="hirofumiwakasugi" creationdate="20150901T072623Z">
        <seg>* オブジェクトに対して[メソッド](../syntax_and_semantics/classes_and_methods.html)を実行 (またはメッセージを送信) することでプログラムを構築します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [&amp;&amp;](syntax_and_semantics/and.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061610Z" creationid="hirofumiwakasugi" creationdate="20150904T061610Z">
        <seg>* [&amp;&amp;](syntax_and_semantics/and.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Array](syntax_and_semantics/literals/array.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T023035Z" creationid="hirofumiwakasugi" creationdate="20150902T023035Z">
        <seg>* [配列 (Array)](syntax_and_semantics/literals/array.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [As a suffix](syntax_and_semantics/as_a_suffix.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061640Z" creationid="hirofumiwakasugi" creationdate="20150904T061603Z">
        <seg>* [後置 if](syntax_and_semantics/as_a_suffix.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [As an expression](syntax_and_semantics/as_an_expression.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061646Z" creationid="hirofumiwakasugi" creationdate="20150904T061603Z">
        <seg>* [式としての if](syntax_and_semantics/as_an_expression.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Assignment](syntax_and_semantics/assignment.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060413Z" creationid="hirofumiwakasugi" creationdate="20150902T060413Z">
        <seg>* [代入](syntax_and_semantics/assignment.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Attributes](syntax_and_semantics/attributes.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T074900Z" creationid="hirofumiwakasugi" creationdate="20150919T074900Z">
        <seg>* [属性 (Attribute)](syntax_and_semantics/attributes.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Block forwarding](syntax_and_semantics/block_forwarding.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T060309Z" creationid="hirofumiwakasugi" creationdate="20150918T060309Z">
        <seg>* [ブロックのフォワーディング](syntax_and_semantics/block_forwarding.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Blocks and Procs](syntax_and_semantics/blocks_and_procs.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T033132Z" creationid="hirofumiwakasugi" creationdate="20150916T033132Z">
        <seg>* [ブロックと Proc](syntax_and_semantics/blocks_and_procs.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Bool](syntax_and_semantics/literals/bool.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022934Z" creationid="hirofumiwakasugi" creationdate="20150902T022934Z">
        <seg>* [真偽値 (Bool)](syntax_and_semantics/literals/bool.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [C bindings](syntax_and_semantics/c_bindings/README.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T045234Z" creationid="hirofumiwakasugi" creationdate="20151005T045209Z">
        <seg>* [C バインディング](syntax_and_semantics/c_bindings/README.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Callbacks](syntax_and_semantics/c_bindings/callbacks.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053631Z" creationid="hirofumiwakasugi" creationdate="20151008T053631Z">
        <seg>* [コールバック](syntax_and_semantics/c_bindings/callbacks.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Capturing blocks](syntax_and_semantics/capturing_blocks.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T060252Z" creationid="hirofumiwakasugi" creationdate="20150918T060252Z">
        <seg>* [ブロックの捕捉](syntax_and_semantics/capturing_blocks.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Char](syntax_and_semantics/literals/char.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T023007Z" creationid="hirofumiwakasugi" creationdate="20150902T023007Z">
        <seg>* [文字 (Char)](syntax_and_semantics/literals/char.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Class variables](syntax_and_semantics/class_variables.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T042247Z" creationid="hirofumiwakasugi" creationdate="20150910T042247Z">
        <seg>* [クラス変数](syntax_and_semantics/class_variables.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Classes and methods](syntax_and_semantics/classes_and_methods.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061829Z" creationid="hirofumiwakasugi" creationdate="20150904T061829Z">
        <seg>* [クラスとメソッド](syntax_and_semantics/classes_and_methods.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Closures](syntax_and_semantics/closures.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T060314Z" creationid="hirofumiwakasugi" creationdate="20150918T060314Z">
        <seg>* [クロージャ](syntax_and_semantics/closures.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Coding style](conventions/coding_style.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012327Z" creationid="hirofumiwakasugi" creationdate="20151010T012327Z">
        <seg>* [コーディングスタイル](conventions/coding_style.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Comments](syntax_and_semantics/comments.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T023640Z" creationid="hirofumiwakasugi" creationdate="20150901T073137Z">
        <seg>* [コメント](syntax_and_semantics/comments.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Compile-time flags](syntax_and_semantics/compile_time_flags.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T043914Z" creationid="hirofumiwakasugi" creationdate="20150909T024215Z">
        <seg>* [コンパイル時のフラグ](syntax_and_semantics/compile_time_flags.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Constants](syntax_and_semantics/c_bindings/constants.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053617Z" creationid="hirofumiwakasugi" creationdate="20151008T053617Z">
        <seg>* [定数](syntax_and_semantics/c_bindings/constants.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Constants](syntax_and_semantics/constants.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T060036Z" creationid="hirofumiwakasugi" creationdate="20150913T060036Z">
        <seg>* [定数](syntax_and_semantics/constants.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Control expressions](syntax_and_semantics/control_expressions.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T005059Z" creationid="hirofumiwakasugi" creationdate="20150903T005059Z">
        <seg>* [制御式](syntax_and_semantics/control_expressions.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Cross-compilation](syntax_and_semantics/cross-compilation.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T051154Z" creationid="hirofumiwakasugi" creationdate="20150909T051154Z">
        <seg>* [クロスコンパイル](syntax_and_semantics/cross-compilation.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Default and named arguments](syntax_and_semantics/default_and_named_arguments.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T114239Z" creationid="hirofumiwakasugi" creationdate="20150906T114239Z">
        <seg>* [デフォルト引数と名前付き引数](syntax_and_semantics/default_and_named_arguments.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Documenting code](conventions/documenting_code.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012337Z" creationid="hirofumiwakasugi" creationdate="20151010T012337Z">
        <seg>* [コードのドキュメント化](conventions/documenting_code.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Enums](syntax_and_semantics/enum.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T033120Z" creationid="hirofumiwakasugi" creationdate="20150916T033120Z">
        <seg>* [Enum](syntax_and_semantics/enum.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Everything is an object](syntax_and_semantics/everything_is_an_object.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061733Z" creationid="hirofumiwakasugi" creationdate="20150904T061733Z">
        <seg>* [すべてがオブジェクト](syntax_and_semantics/everything_is_an_object.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Exception handling](syntax_and_semantics/exception_handling.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T043904Z" creationid="hirofumiwakasugi" creationdate="20150909T043904Z">
        <seg>* [例外処理](syntax_and_semantics/exception_handling.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Floats](syntax_and_semantics/literals/floats.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022957Z" creationid="hirofumiwakasugi" creationdate="20150902T022957Z">
        <seg>* [浮動小数点数 (Float)](syntax_and_semantics/literals/floats.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Fresh variables](syntax_and_semantics/macros/fresh_variables.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T035243Z" creationid="hirofumiwakasugi" creationdate="20151005T045207Z">
        <seg>* [フレッシュな変数](syntax_and_semantics/macros/fresh_variables.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [From a tar.gz](installation/from_a_targz.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T011443Z" creationid="hirofumiwakasugi" creationdate="20150831T054750Z">
        <seg>* [tar.gz からインストール](installation/from_a_targz.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [From sources](installation/from_source_repository.md)
* [Using the compiler](using_the_compiler/README.md)
* [Overview and Examples](overview/README.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T073130Z" creationid="hirofumiwakasugi" creationdate="20150831T054826Z">
        <seg>* [ソースコードからインストール](installation/from_source_repository.md)
* [コンパイラを使用する](using_the_compiler/README.md)
* [概要とプログラム例](overview/README.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Generics](syntax_and_semantics/generics.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T062830Z" creationid="hirofumiwakasugi" creationdate="20150924T062830Z">
        <seg>* [ジェネリクス](syntax_and_semantics/generics.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Global variables](syntax_and_semantics/global_variables.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060405Z" creationid="hirofumiwakasugi" creationdate="20150902T060405Z">
        <seg>* [グローバル変数](syntax_and_semantics/global_variables.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [HTTP Server](overview/http_server.md)
* [Syntax and semantics](syntax_and_semantics/README.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T073145Z" creationid="hirofumiwakasugi" creationdate="20150901T073134Z">
        <seg>* [HTTP サーバー](overview/http_server.md)
* [シンタックスとセマンティクス](syntax_and_semantics/README.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Hash](syntax_and_semantics/literals/hash.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T023041Z" creationid="hirofumiwakasugi" creationdate="20150902T023041Z">
        <seg>* [ハッシュ (Hash)](syntax_and_semantics/literals/hash.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Hello World!](overview/hello_world.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T073131Z" creationid="hirofumiwakasugi" creationdate="20150901T073131Z">
        <seg>* [Hello World!](overview/hello_world.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Hooks](syntax_and_semantics/macros/hooks.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T045159Z" creationid="hirofumiwakasugi" creationdate="20151005T045159Z">
        <seg>* [フック](syntax_and_semantics/macros/hooks.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Inheritance](syntax_and_semantics/inheritance.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T042231Z" creationid="hirofumiwakasugi" creationdate="20150910T042231Z">
        <seg>* [継承](syntax_and_semantics/inheritance.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Instance variables type inference](syntax_and_semantics/instance_variables_type_inference.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T101106Z" creationid="hirofumiwakasugi" creationdate="20150905T101106Z">
        <seg>* [インスタンス変数と型推論](syntax_and_semantics/instance_variables_type_inference.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Integers](syntax_and_semantics/literals/integers.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022945Z" creationid="hirofumiwakasugi" creationdate="20150902T022945Z">
        <seg>* [整数 (Integer)](syntax_and_semantics/literals/integers.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Introduction](README.md)
* [Installation](installation/README.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T054642Z" creationid="hirofumiwakasugi" creationdate="20150831T054638Z">
        <seg>* [はじめに](README.md)
* [インストール](installation/README.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Literals](syntax_and_semantics/literals.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022927Z" creationid="hirofumiwakasugi" creationdate="20150902T022927Z">
        <seg>* [リテラル](syntax_and_semantics/literals.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Local variables](syntax_and_semantics/local_variables.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060356Z" creationid="hirofumiwakasugi" creationdate="20150902T060356Z">
        <seg>* [ローカル変数](syntax_and_semantics/local_variables.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Low-level primitives](syntax_and_semantics/low_level_primitives.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T040543Z" creationid="hirofumiwakasugi" creationdate="20150906T040543Z">
        <seg>* [ローレベルプリミティブ](syntax_and_semantics/low_level_primitives.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Macro methods](syntax_and_semantics/macros/macro_methods.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T045155Z" creationid="hirofumiwakasugi" creationdate="20151005T045155Z">
        <seg>* [マクロメソッド](syntax_and_semantics/macros/macro_methods.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Macros](syntax_and_semantics/macros.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T041824Z" creationid="hirofumiwakasugi" creationdate="20151001T041824Z">
        <seg>* [マクロ](syntax_and_semantics/macros.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Methods and instance variables](syntax_and_semantics/methods_and_instance_variables.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T101058Z" creationid="hirofumiwakasugi" creationdate="20150905T053111Z">
        <seg>* [メソッドとインスタンス変数](syntax_and_semantics/methods_and_instance_variables.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Modules](syntax_and_semantics/modules.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T150720Z" creationid="hirofumiwakasugi" creationdate="20150911T150720Z">
        <seg>* [モジュール](syntax_and_semantics/modules.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Multiple assignment](syntax_and_semantics/multiple_assignment.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060420Z" creationid="hirofumiwakasugi" creationdate="20150902T060420Z">
        <seg>* [多重代入](syntax_and_semantics/multiple_assignment.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Nil](syntax_and_semantics/literals/nil.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022928Z" creationid="hirofumiwakasugi" creationdate="20150902T022928Z">
        <seg>* [Nil](syntax_and_semantics/literals/nil.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [On Arch Linux](installation/on_arch_linux.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021849Z" creationid="hirofumiwakasugi" creationdate="20151009T021849Z">
        <seg>* [Arch Linux](installation/on_arch_linux.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [On Debian And Ubuntu](on_debian_and_ubuntu.html)
* [On RedHat And CentOS](on_redhat_and_centos.html)
* [On Arch Linux](on_arch_linux.html)
* [On Mac OSX using Homebrew](on_mac_osx_using_homebrew.html)
* [From a tar.gz](from_a_targz.html)
* [From sources](from_source_repository.html)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021750Z" creationid="hirofumiwakasugi" creationdate="20151009T021736Z">
        <seg>* [Debian や Ubuntu](on_debian_and_ubuntu.html)
* [RedHat や CentOS](on_redhat_and_centos.html)
* [Arch Linux](on_arch_linux.html)
* [Mac OS X (Homebrew を利用)](on_mac_osx_using_homebrew.html)
* [tar.gz からインストール](from_a_targz.html)
* [ソースコードからインストール](from_source_repository.html)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [On Debian And Ubuntu](on_debian_and_ubuntu.html)
* [On RedHat And CentOS](on_redhat_and_centos.html)
* [On Mac OSX using Homebrew](on_mac_osx_using_homebrew.html)
* [From a tar.gz](from_a_targz.html)
* [From sources](from_source_repository.html)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T054730Z" creationid="hirofumiwakasugi" creationdate="20150831T054027Z">
        <seg>* [Debian や Ubuntu](on_debian_and_ubuntu.html)
* [RedHat や CentOS](on_redhat_and_centos.html)
* [Mac OS X (Homebrew を利用)](on_mac_osx_using_homebrew.html)
* [tar.gz からインストール](from_a_targz.html)
* [ソースコードからインストール](from_source_repository.html)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [On Debian and Ubuntu](installation/on_debian_and_ubuntu.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T054650Z" creationid="hirofumiwakasugi" creationdate="20150831T054650Z">
        <seg>* [Debian や Ubuntu](installation/on_debian_and_ubuntu.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [On Mac OSX using Homebrew](installation/on_mac_osx_using_homebrew.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T054721Z" creationid="hirofumiwakasugi" creationdate="20150831T054702Z">
        <seg>* [Mac OS X (Homebrew を利用)](installation/on_mac_osx_using_homebrew.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [On RedHat and CentOS](installation/on_redhat_and_centos.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T054657Z" creationid="hirofumiwakasugi" creationdate="20150831T054657Z">
        <seg>* [RedHat や CentOS](installation/on_redhat_and_centos.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Operators](syntax_and_semantics/operators.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T042912Z" creationid="hirofumiwakasugi" creationdate="20150909T042912Z">
        <seg>* [演算子](syntax_and_semantics/operators.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Overloading](syntax_and_semantics/overloading.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T114231Z" creationid="hirofumiwakasugi" creationdate="20150905T101108Z">
        <seg>* [オーバーロード](syntax_and_semantics/overloading.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Proc literal](syntax_and_semantics/proc_literal.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T060257Z" creationid="hirofumiwakasugi" creationdate="20150918T060257Z">
        <seg>* [Proc リテラル](syntax_and_semantics/proc_literal.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Proc](syntax_and_semantics/literals/proc.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T023133Z" creationid="hirofumiwakasugi" creationdate="20150902T023133Z">
        <seg>* [Proc](syntax_and_semantics/literals/proc.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Range](syntax_and_semantics/literals/range.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T023101Z" creationid="hirofumiwakasugi" creationdate="20150902T023043Z">
        <seg>* [範囲 (Range)](syntax_and_semantics/literals/range.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Regex](syntax_and_semantics/literals/regex.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T023125Z" creationid="hirofumiwakasugi" creationdate="20150902T023113Z">
        <seg>* [正規表現 (Regex)](syntax_and_semantics/literals/regex.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Requiring files](syntax_and_semantics/requiring_files.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T162002Z" creationid="hirofumiwakasugi" creationdate="20150905T162002Z">
        <seg>* [ファイルの require](syntax_and_semantics/requiring_files.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Return types](syntax_and_semantics/return_types.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T042909Z" creationid="hirofumiwakasugi" creationdate="20150909T042909Z">
        <seg>* [戻り値の型](syntax_and_semantics/return_types.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Splats and tuples](syntax_and_semantics/splats_and_tuples.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T041212Z" creationid="hirofumiwakasugi" creationdate="20150908T041212Z">
        <seg>* [splat 展開とタプル](syntax_and_semantics/splats_and_tuples.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [String](syntax_and_semantics/literals/string.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T023018Z" creationid="hirofumiwakasugi" creationdate="20150902T023018Z">
        <seg>* [文字列 (String)](syntax_and_semantics/literals/string.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Structs](syntax_and_semantics/structs.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T060031Z" creationid="hirofumiwakasugi" creationdate="20150913T060031Z">
        <seg>* [構造体 (Struct)](syntax_and_semantics/structs.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Symbol](syntax_and_semantics/literals/symbol.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T023027Z" creationid="hirofumiwakasugi" creationdate="20150902T023027Z">
        <seg>* [シンボル (Symbol)](syntax_and_semantics/literals/symbol.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Ternary if](syntax_and_semantics/ternary_if.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061653Z" creationid="hirofumiwakasugi" creationdate="20150904T061603Z">
        <seg>* [3項演算子](syntax_and_semantics/ternary_if.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [The Program](syntax_and_semantics/the_program.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061801Z" creationid="hirofumiwakasugi" creationdate="20150904T061801Z">
        <seg>* [プログラム](syntax_and_semantics/the_program.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Truthy and falsey values](syntax_and_semantics/truthy_and_falsey_values.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061618Z" creationid="hirofumiwakasugi" creationdate="20150904T061602Z">
        <seg>* [真偽値](syntax_and_semantics/truthy_and_falsey_values.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Tuple](syntax_and_semantics/literals/tuple.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T023132Z" creationid="hirofumiwakasugi" creationdate="20150902T023114Z">
        <seg>* [タプル (Tuple)](syntax_and_semantics/literals/tuple.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Type grammar](syntax_and_semantics/type_grammar.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T013718Z" creationid="hirofumiwakasugi" creationdate="20151009T013718Z">
        <seg>* [型文法](syntax_and_semantics/type_grammar.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Type reflection](syntax_and_semantics/type_reflection.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063338Z" creationid="hirofumiwakasugi" creationdate="20150930T063338Z">
        <seg>* [型のリフレクション](syntax_and_semantics/type_reflection.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Type restrictions](syntax_and_semantics/type_restrictions.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T041219Z" creationid="hirofumiwakasugi" creationdate="20150908T041219Z">
        <seg>* [型制約](syntax_and_semantics/type_restrictions.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Types and methods](syntax_and_semantics/types_and_methods.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061724Z" creationid="hirofumiwakasugi" creationdate="20150904T061724Z">
        <seg>* [型とメソッド](syntax_and_semantics/types_and_methods.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Uninitialized variable declaration](syntax_and_semantics/declare_var.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T121104Z" creationid="hirofumiwakasugi" creationdate="20150906T121104Z">
        <seg>* [初期化しない変数宣言](syntax_and_semantics/declare_var.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Unsafe code](syntax_and_semantics/unsafe.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T013725Z" creationid="hirofumiwakasugi" creationdate="20151009T013725Z">
        <seg>* [安全でない (unsafe) コード](syntax_and_semantics/unsafe.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Unsafe code](syntax_and_semantics/unsafe.md)
* [Conventions](conventions/README.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012321Z" creationid="hirofumiwakasugi" creationdate="20151009T141204Z">
        <seg>* [安全でない (unsafe) コード](syntax_and_semantics/unsafe.md)
* [規約](conventions/README.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Variables](syntax_and_semantics/c_bindings/variables.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T054808Z" creationid="hirofumiwakasugi" creationdate="20151007T054757Z">
        <seg>* [変数](syntax_and_semantics/c_bindings/variables.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Virtual and abstract types](syntax_and_semantics/virtual_and_abstract_types.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T042240Z" creationid="hirofumiwakasugi" creationdate="20150910T042240Z">
        <seg>* [virtual 型と abstract 型](syntax_and_semantics/virtual_and_abstract_types.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Visibility](syntax_and_semantics/visibility.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T042924Z" creationid="hirofumiwakasugi" creationdate="20150909T042924Z">
        <seg>* [可視性](syntax_and_semantics/visibility.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [alias](syntax_and_semantics/alias.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T074915Z" creationid="hirofumiwakasugi" creationdate="20150919T074915Z">
        <seg>* [エイリアス](syntax_and_semantics/alias.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [alias](syntax_and_semantics/c_bindings/alias.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053626Z" creationid="hirofumiwakasugi" creationdate="20151008T053626Z">
        <seg>* [エイリアス (alias)](syntax_and_semantics/c_bindings/alias.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [as](syntax_and_semantics/as.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063340Z" creationid="hirofumiwakasugi" creationdate="20150930T063340Z">
        <seg>* [as](syntax_and_semantics/as.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [break](syntax_and_semantics/break.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061606Z" creationid="hirofumiwakasugi" creationdate="20150904T061606Z">
        <seg>* [break](syntax_and_semantics/break.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [case](syntax_and_semantics/case.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061605Z" creationid="hirofumiwakasugi" creationdate="20150904T061605Z">
        <seg>* [case](syntax_and_semantics/case.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [enum](syntax_and_semantics/c_bindings/enum.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T054756Z" creationid="hirofumiwakasugi" creationdate="20151007T054756Z">
        <seg>* [enum](syntax_and_semantics/c_bindings/enum.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [finalize](syntax_and_semantics/finalize.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T042248Z" creationid="hirofumiwakasugi" creationdate="20150910T042248Z">
        <seg>* [finalize](syntax_and_semantics/finalize.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [fun](syntax_and_semantics/c_bindings/fun.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T045235Z" creationid="hirofumiwakasugi" creationdate="20151005T045235Z">
        <seg>* [fun](syntax_and_semantics/c_bindings/fun.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [if var.is_a?(...)](syntax_and_semantics/if_varis_a.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061705Z" creationid="hirofumiwakasugi" creationdate="20150904T061604Z">
        <seg>* [if 変数.is_a?(...)](syntax_and_semantics/if_varis_a.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [if var.responds_to?(...)](syntax_and_semantics/if_varresponds_to.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061710Z" creationid="hirofumiwakasugi" creationdate="20150904T061604Z">
        <seg>* [if 変数.responds_to?(...)](syntax_and_semantics/if_varresponds_to.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [if var](syntax_and_semantics/if_var.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061702Z" creationid="hirofumiwakasugi" creationdate="20150904T061604Z">
        <seg>* [if 変数](syntax_and_semantics/if_var.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [if](syntax_and_semantics/if.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061602Z" creationid="hirofumiwakasugi" creationdate="20150904T061602Z">
        <seg>* [if](syntax_and_semantics/if.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [instance_sizeof](syntax_and_semantics/instance_sizeof.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T040546Z" creationid="hirofumiwakasugi" creationdate="20150906T040546Z">
        <seg>* [instance_sizeof](syntax_and_semantics/instance_sizeof.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [is_a?](syntax_and_semantics/is_a.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063339Z" creationid="hirofumiwakasugi" creationdate="20150930T063339Z">
        <seg>* [is_a?](syntax_and_semantics/is_a.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [lib](syntax_and_semantics/c_bindings/lib.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T045235Z" creationid="hirofumiwakasugi" creationdate="20151005T045235Z">
        <seg>* [lib](syntax_and_semantics/c_bindings/lib.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [new, initialize and allocate](syntax_and_semantics/new,_initialize_and_allocate.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061840Z" creationid="hirofumiwakasugi" creationdate="20150904T061840Z">
        <seg>* [new/initialize/allocate](syntax_and_semantics/new,_initialize_and_allocate.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [next](syntax_and_semantics/next.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061606Z" creationid="hirofumiwakasugi" creationdate="20150904T061606Z">
        <seg>* [next](syntax_and_semantics/next.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [out](syntax_and_semantics/c_bindings/out.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T045236Z" creationid="hirofumiwakasugi" creationdate="20151005T045236Z">
        <seg>* [out](syntax_and_semantics/c_bindings/out.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [pointerof](syntax_and_semantics/pointerof.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T040544Z" creationid="hirofumiwakasugi" creationdate="20150906T040544Z">
        <seg>* [pointerof](syntax_and_semantics/pointerof.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [responds_to?](syntax_and_semantics/responds_to.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063340Z" creationid="hirofumiwakasugi" creationdate="20150930T063340Z">
        <seg>* [responds_to?](syntax_and_semantics/responds_to.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [sizeof](syntax_and_semantics/sizeof.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T040545Z" creationid="hirofumiwakasugi" creationdate="20150906T040545Z">
        <seg>* [sizeof](syntax_and_semantics/sizeof.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [struct](syntax_and_semantics/c_bindings/struct.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053604Z" creationid="hirofumiwakasugi" creationdate="20151006T045226Z">
        <seg>* [構造体 (struct)](syntax_and_semantics/c_bindings/struct.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [to_unsafe](syntax_and_semantics/c_bindings/to_unsafe.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T045236Z" creationid="hirofumiwakasugi" creationdate="20151005T045236Z">
        <seg>* [to_unsafe](syntax_and_semantics/c_bindings/to_unsafe.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [type](syntax_and_semantics/c_bindings/type.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053618Z" creationid="hirofumiwakasugi" creationdate="20151008T053618Z">
        <seg>* [type](syntax_and_semantics/c_bindings/type.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [typeof](syntax_and_semantics/typeof.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063340Z" creationid="hirofumiwakasugi" creationdate="20150930T063340Z">
        <seg>* [typeof](syntax_and_semantics/typeof.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [union](syntax_and_semantics/c_bindings/union.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053611Z" creationid="hirofumiwakasugi" creationdate="20151007T054755Z">
        <seg>* [共用体 (union)](syntax_and_semantics/c_bindings/union.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [unless](syntax_and_semantics/unless.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061604Z" creationid="hirofumiwakasugi" creationdate="20150904T061604Z">
        <seg>* [unless](syntax_and_semantics/unless.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [until](syntax_and_semantics/until.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061606Z" creationid="hirofumiwakasugi" creationdate="20150904T061606Z">
        <seg>* [until](syntax_and_semantics/until.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [while](syntax_and_semantics/while.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061605Z" creationid="hirofumiwakasugi" creationdate="20150904T061605Z">
        <seg>* [while](syntax_and_semantics/while.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [||](syntax_and_semantics/or.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T011436Z" creationid="hirofumiwakasugi" creationdate="20150904T011436Z">
        <seg>* [||](syntax_and_semantics/or.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `--cross-compile`: the [compile-time flags](compile_time_flags.html) to use
* `--target`: the [LLVM Target Triple](http://llvm.org/docs/LangRef.html#target-triple) to use</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T043632Z" creationid="hirofumiwakasugi" creationdate="20150909T044718Z">
        <seg>* `--cross-compile`: [コンパイル時フラグ](compile_time_flags.html) を使用する
* `--target`: [LLVM Target Triple](http://llvm.org/docs/LangRef.html#target-triple) を使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `@[Link("pcre")]` will pass `-lpcre` to the linker, but the compiler will first try to use [pkg-config](http://en.wikipedia.org/wiki/Pkg-config).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T142734Z" creationid="hirofumiwakasugi" creationdate="20151003T142734Z">
        <seg>* `@[Link("pcre")]` は `-lpcre` をリンカに渡します。ただ、コンパイラはまず最初に [pkg-config](http://en.wikipedia.org/wiki/Pkg-config) の利用を試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `@[Link(framework: "Cocoa")]` will pass `-framework Cocoa` to the linker (only useful in Mac OS X).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T143437Z" creationid="hirofumiwakasugi" creationdate="20151003T143355Z">
        <seg>* `@[Link(framework: "Cocoa")]` は `-framework Cocoa` をリンカに渡します (Mac OS X の場合のみ有効) 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `@[Link(ldflags: "...")]` will pass those flags directly to the linker, without modification.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T143158Z" creationid="hirofumiwakasugi" creationdate="20151003T143114Z">
        <seg>* `@[Link(ldflags: "...")]` は指定したフラグをそのまま直接リンカに渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `MyBox.new(value)` delegates to `initialize(@value : T)`
* `T` doesn't exist, so it's used as a free var
* Because `MyBox` is actually `MyBox(T)`, and `T` is both a free variable and a type argument, `T` becomes the type of the passed value</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T071332Z" creationid="hirofumiwakasugi" creationdate="20150912T070952Z">
        <seg>* `MyBox.new(value)` は処理を `initialize(@value : T)` に委譲する
* `T` が存在しないため、自由変数として扱われる
* `MyBox` は実際は `MyBox(T)` であり、`T` は自由変数であり型引数でもあるため、`T` は渡された値の型になる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `NoReturn`: similar to `Void`, but the compiler understands that no code can be executed after that invocation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T042240Z" creationid="hirofumiwakasugi" creationdate="20151005T042240Z">
        <seg>* `NoReturn`: `Void` と似ているが、呼び出し後にコードを実行できないことをコンパイラが理解している</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `Void`: the absence of a return value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T042134Z" creationid="hirofumiwakasugi" creationdate="20151005T042020Z">
        <seg>* `Void`: 戻り値なし</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `extended` will be invoked at compile-time when a module is extended.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014423Z" creationid="hirofumiwakasugi" creationdate="20151002T014300Z">
        <seg>* `extended` は、コンパイル時にモジュールが extend されたときに実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `included` will be invoked at compile-time when a module is included.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014426Z" creationid="hirofumiwakasugi" creationdate="20151002T013422Z">
        <seg>* `included` は、コンパイル時にモジュールがインクルードされたときに実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `inherited` will be invoked at compile-time when a subclass is defined.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014430Z" creationid="hirofumiwakasugi" creationdate="20151002T012621Z">
        <seg>* `inherited` は、コンパイル時にサブクラスが定義されたときに実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `method_missing` will be invoked at compile-time when a method is not found.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T024628Z" creationid="hirofumiwakasugi" creationdate="20151002T014417Z">
        <seg>* `method_missing` は、コンパイル時にメソッドが見つからないときに実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `require "./foo/bar/baz"` will lookup "foo/bar/baz.cr" or "foo/bar/baz/baz.cr" relative to the current file.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T160805Z" creationid="hirofumiwakasugi" creationdate="20150905T160725Z">
        <seg>* `require "./foo/bar/baz"` は現在のファイルから相対的に「foo/bar/baz.cr」または「foo/bar/baz/baz.cr」を探す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `require "foo/*"` will require all ".cr" files below the "foo" directory, but not below directories inside "foo".</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T161339Z" creationid="hirofumiwakasugi" creationdate="20150905T161248Z">
        <seg>* `require "foo/*"` は「foo」デイレクトリにあるすべての「.cr」ファイルを require し、「foo」内のディレクトリの中は参照しない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `require "foo/**"` will require all ".cr" files below the "foo" directory, and below directories inside "foo", recursively.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T161417Z" creationid="hirofumiwakasugi" creationdate="20150905T161348Z">
        <seg>* `require "foo/**"` は「foo」デイレクトリにあるすべての「.cr」ファイルを require し、さらに「foo」以下のディレクトリを再帰的に参照する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `require "foo/bar/baz"` will lookup "foo/bar/baz.cr" or "foo/bar/baz/baz.cr" in the require path.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T160747Z" creationid="hirofumiwakasugi" creationdate="20150905T160533Z">
        <seg>* `require "foo/bar/baz"` は require パスの「foo/bar/baz.cr」または「foo/bar/baz/baz.cr」を探す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* as namespaces for defining other types, methods and constants
* as partial types that can be mixed in other types</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T130935Z" creationid="hirofumiwakasugi" creationdate="20150911T130339Z">
        <seg>* 型やメソッド、そして定数を他と区別して定義するための名前空間として使う
* 部分的な型として別の型に mixin して使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* i: ignore case (PCRE_CASELESS)
* m: multiline (PCRE_MULTILINE)
* x: extended (PCRE_EXTENDED)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T020133Z" creationid="hirofumiwakasugi" creationdate="20150902T020019Z">
        <seg>* i: 大小文字を区別しない (PCRE_CASELESS)
* m: 複数行のマッチング (PCRE_MULTILINE)
* x: 拡張 (PCRE_EXTENDED)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* specifying [type restrictions](type_restrictions.html)
* specifying [type arguments](generics.html)
* [declaring variables](declare_var.html)
* declaring [aliases](alias.html)
* declaring [typedefs](c_bindings/type.html)
* the argument of an [is_a?](is_a.html) pseudo-call
* the argument of an [as](as.html) expression
* the argument of a [sizeof](sizeof.html) expression
* the argument of an [instance_sizeof](instance_sizeof.html) expression
* a method's [return type](return_types.html)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T024452Z" creationid="hirofumiwakasugi" creationdate="20151102T024407Z">
        <seg>* [型制約](type_restrictions.html)の指定
* [型引数](generics.html)の指定
* [変数の宣言](declare_var.html)
* [エイリアス](alias.html)の宣言
* [typedef](c_bindings/type.html) の宣言
* 擬似呼び出し [is_a?](is_a.html) の引数
* [as](as.html) 式の引数
* [sizeof](sizeof.html) 式の引数
* [instance_sizeof](instance_sizeof.html) 式の引数
* メソッドの[戻り値の型](return_types.html)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* specifying [type restrictions](type_restrictions.html)
* specifying [type arguments](generics.html)
* [declaring variables](declare_var.html)
* declaring [aliases](alias.html)
* declaring [typedefs](type.html)
* the argument of an [is_a?](is_a.html) pseudo-call
* the argument of an [as](as.html) expression
* the argument of a [sizeof](sizeof.html) expression
* the argument of an [instance_sizeof](instance_sizeof.html) expression
* a method's [return type](return_types.html)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T014247Z" creationid="hirofumiwakasugi" creationdate="20151009T004709Z">
        <seg>* [型制約](type_restrictions.html)の指定
* [型引数](generics.html)の指定
* [変数の宣言](declare_var.html)
* [エイリアス](alias.html)の宣言
* [typedef](type.html) の宣言
* 擬似呼び出し [is_a?](is_a.html) の引数
* [as](as.html) 式の引数
* [sizeof](sizeof.html) 式の引数
* [instance_sizeof](instance_sizeof.html) 式の引数
* メソッドの[戻り値の型](return_types.html)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>**Note: ** you can't use &lt;g1&gt;as&lt;/g1&gt; to convert a type to an unrelated type: &lt;g2&gt;as&lt;/g2&gt; is not like a &lt;g3&gt;cast&lt;/g3&gt; in other languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T115021Z" creationid="makenowjust" creationdate="20200512T115017Z">
        <seg>**注意:** &lt;g2&gt;as&lt;/g2&gt; を使っても、関連のない型に変換することはできません。その点では他の言語の &lt;g3&gt;cast&lt;/g3&gt; と異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>**Note: ** you can't use `as` to convert a type to an unrelated type: `as` is not like a `cast` in other languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022139Z" creationid="hirofumiwakasugi" creationdate="20151009T022039Z">
        <seg>**注意: ** `as` を使っても、関連のない型に変換することはできません。`as` は他の言語の `cast` とは異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>**Note:** By default the generated executables **are not fully optimized**.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072104Z" creationid="hirofumiwakasugi" creationdate="20150901T072045Z">
        <seg>**注意:** デフォルトでは生成された実行ファイルは**完全に最適化**された状態ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>**Note:** The C `char` type is `UInt8` in Crystal, so a `char*` or a `const char*` is `UInt8*`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T042726Z" creationid="hirofumiwakasugi" creationdate="20151005T042618Z">
        <seg>**注意:** C の `char` 型は Crystal では `UInt8` です。したがって、`char*` や `const char*` は `UInt8*` となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>**Note:** conditionally defining fields of a C struct or union is not currently supported.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T043719Z" creationid="hirofumiwakasugi" creationdate="20150909T043719Z">
        <seg>**注意:** 現在のところ、C 言語の構造体や共用体のフィールドを条件に応じて定義することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>**Note:** the `finalize` method will only be invoked once the object has been fully initialized via the `initialize` method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041851Z" creationid="hirofumiwakasugi" creationdate="20150910T041703Z">
        <seg>**注意:** `finalize` が実行されるのは、オブジェクトが `initialize` メソッドによって完全に初期化されていた場合に限ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>**Note:** there currently isn't a way to add more compile-time flags and not do a cross-compile at the same time.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T051121Z" creationid="hirofumiwakasugi" creationdate="20150909T050814Z">
        <seg>**注意:** 現在のところ、他のコンパイル時のフラグを追加することができず、クロスコンパイル時に同時に指定することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>**options
)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T144528Z" creationid="makenowjust" creationdate="20200430T144528Z">
        <seg>**options
)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>*.haml</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075511Z" creationid="makenowjust" creationdate="20200516T075511Z">
        <seg>*.haml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>*.nix</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T055850Z" creationid="makenowjust" creationdate="20201213T055850Z">
        <seg>*.nix</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>*args,</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T144502Z" creationid="makenowjust" creationdate="20200430T144502Z">
        <seg>*args,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>+ + xml      : Use the dev-libs/libxml2 library to enable Crystal xml module</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111651Z" creationid="makenowjust" creationdate="20200518T111651Z">
        <seg>+ + xml      : Use the dev-libs/libxml2 library to enable Crystal xml module</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>+ - yaml     : Use the dev-libs/libyaml library to enable Crystal yaml module
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111652Z" creationid="makenowjust" creationdate="20200518T111652Z">
        <seg>+ - yaml     : Use the dev-libs/libyaml library to enable Crystal yaml module
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>+- class Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135143Z" creationid="hirofumiwakasugi" creationdate="20150904T135143Z">
        <seg>+- class Person</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>+- class Reference</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135124Z" creationid="hirofumiwakasugi" creationdate="20150904T135124Z">
        <seg>+- class Reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>+- generic class MyBox(Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063042Z" creationid="hirofumiwakasugi" creationdate="20150912T063042Z">
        <seg>+- generic class MyBox(Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>+- generic class MyBox(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063040Z" creationid="hirofumiwakasugi" creationdate="20150912T063040Z">
        <seg>+- generic class MyBox(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>+1.3     # Float64
-0.5     # Float64
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T074016Z" creationid="hirofumiwakasugi" creationdate="20150901T074016Z">
        <seg>+1.3     # Float64
-0.5     # Float64
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>+10    # Int32
-20    # Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052302Z" creationid="hirofumiwakasugi" creationdate="20150901T052302Z">
        <seg>+10    # Int32
-20    # Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- - doc      : Add extra documentation (API, Javadoc, etc).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111620Z" creationid="makenowjust" creationdate="20200518T111620Z">
        <seg>- - doc      : Add extra documentation (API, Javadoc, etc).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- - examples : Install examples, usually source code</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111648Z" creationid="makenowjust" creationdate="20200518T111648Z">
        <seg>- - examples : Install examples, usually source code</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- `/` contains a readme, any project configurations (eg, CI or editor configs), and any other project-level documentation (eg, changelog or contributing guide).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011343Z" creationid="hirofumiwakasugi" creationdate="20151010T011221Z">
        <seg>- `/` には、README、 (CI や editor config などの) プロジェクトの設定、そして、(changelog や contributing guide などの) プロジェクト全体のドキュメントを配置します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- `bin/` contains any executables.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011446Z" creationid="hirofumiwakasugi" creationdate="20151010T011446Z">
        <seg>- `bin/` には実行ファイルを配置します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- `spec/` contains the project's specs, which can be run with `crystal spec`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011431Z" creationid="hirofumiwakasugi" creationdate="20151010T011337Z">
        <seg>- `spec/` には、`crystal spec` によって起動するプロジェクトの spec を配置します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- `src/` contains the project's source code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011351Z" creationid="hirofumiwakasugi" creationdate="20151010T011331Z">
        <seg>- `src/` にはプロジェクトのソースコードを配置します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- bar</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155853Z" creationid="hirofumiwakasugi" creationdate="20150905T155853Z">
        <seg>- bar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- bar.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085636Z" creationid="makenowjust" creationdate="20200427T085636Z">
        <seg>- bar.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- class Object</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T110538Z" creationid="makenowjust" creationdate="20200504T110538Z">
        <seg>- class Object</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- file</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085326Z" creationid="makenowjust" creationdate="20200427T085326Z">
        <seg>- file</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- file.cr (requires "./*")</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085903Z" creationid="makenowjust" creationdate="20200427T085903Z">
        <seg>- file.cr (requires "./*")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- file.cr (requires "./file/*")</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085329Z" creationid="makenowjust" creationdate="20200427T085329Z">
        <seg>- file.cr (requires "./file/*")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155852Z" creationid="hirofumiwakasugi" creationdate="20150905T155852Z">
        <seg>- foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- foo.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085633Z" creationid="makenowjust" creationdate="20200427T085633Z">
        <seg>- foo.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- lib</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085630Z" creationid="makenowjust" creationdate="20200427T085630Z">
        <seg>- lib</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- libs</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155852Z" creationid="hirofumiwakasugi" creationdate="20150905T155852Z">
        <seg>- libs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- project</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085324Z" creationid="makenowjust" creationdate="20200427T085324Z">
        <seg>- project</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- project.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155854Z" creationid="hirofumiwakasugi" creationdate="20150905T155854Z">
        <seg>- project.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- project_spec.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085639Z" creationid="makenowjust" creationdate="20200427T085639Z">
        <seg>- project_spec.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- project_spec.cr
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155923Z" creationid="hirofumiwakasugi" creationdate="20150905T155923Z">
        <seg>- project_spec.cr
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- spec</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155854Z" creationid="hirofumiwakasugi" creationdate="20150905T155854Z">
        <seg>- spec</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- src</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155853Z" creationid="hirofumiwakasugi" creationdate="20150905T155853Z">
        <seg>- src</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- sub1.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085326Z" creationid="makenowjust" creationdate="20200427T085326Z">
        <seg>- sub1.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- sub2.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085327Z" creationid="makenowjust" creationdate="20200427T085327Z">
        <seg>- sub2.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>---</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20220525T092714Z" creationid="makenowjust" creationdate="20200516T102321Z">
        <seg>---

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>---
layout: post
title: Type inference (part 2)
author: bcardiff
---</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T023905Z" creationid="hirofumiwakasugi" creationdate="20151102T023905Z">
        <seg>---
layout: post
title: Type inference (part 2)
author: bcardiff
---</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>---
title: Install
description: You can install Crystal in different ways.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T105541Z" creationid="makenowjust" creationdate="20200518T105528Z">
        <seg>---
title: Install
description: Crystal はいくつかの方法でインストールできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--- layout: default ---</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T105824Z" creationid="makenowjust" creationdate="20200518T100647Z">
        <seg>---
layout: default
---
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--- title: Blog description: Here you can find detailed announcements for new releases, some interesting use cases, and the rationale behind some of the language's design decisions.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200520T135647Z" creationid="makenowjust" creationdate="20200516T081618Z">
        <seg>---
title: ブログ
description: 新しいリリースのアナウンス、興味深いユースケース、言語デザインの決定の背景の紹介など
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--- title: Community description: There are so many ways to get involved in Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T103511Z" creationid="makenowjust" creationdate="20200516T091304Z">
        <seg>---
title: コミュニティ
description: Crystal が成長する方法はたくさんあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--- title: Crystal description: A language for humans and computers custom_body_classes: - main ---</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211003Z" creationid="makenowjust" creationdate="20200413T210133Z">
        <seg>---
title: Crystal
description: A language for humans and computers
custom_body_classes:
  - main
---
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--- title: Crystal description: Livestreamed on 8 July 2021 custom_body_classes: - main ---</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T082605Z" creationid="makenowjust" creationdate="20211107T075645Z">
        <seg>---
title: Crystal
description: Livestreamed on 8 July 2021
custom_body_classes:
  - main
---
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--- title: Crystal description: Livestreamed on 8 July 2021 – 4pm–8pm UTC custom_body_classes: - main ---</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210504T123110Z" creationid="makenowjust" creationdate="20210504T120645Z">
        <seg>---
title: Crystal
description: Livestreamed on 8 July 2021 – 4pm–8pm UTC
custom_body_classes:
- main
---

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--- title: Crystal description: Livestreamed on 8 July 2021, 12:30pm – 9:30pm UTC custom_body_classes: - main ---</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T144021Z" creationid="makenowjust" creationdate="20210726T144021Z">
        <seg>---
title: Crystal
description: Livestreamed on 8 July 2021, 12:30pm – 9:30pm UTC
custom_body_classes:
- main
---
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--- title: Documentation description: permalink: /docs/ ---</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T114900Z" creationid="makenowjust" creationdate="20200413T202243Z">
        <seg>---
title: ドキュメント
description:
permalink: /docs/
---
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--- title: Install description: You can install Crystal in different ways.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T064459Z" creationid="makenowjust" creationdate="20200518T064154Z">
        <seg>---
title: インストール
description: Crystal はいくつかの方法でインストールできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--- title: Media description: As the language and the community continues to grow we think it is important to have basic rules of thumb about how and for what purposes the Crystal brand can be used.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T091307Z" creationid="makenowjust" creationdate="20200516T084517Z">
        <seg>---
title: メディア
description: 言語やコミュニティが育っていくにつれて、Crystal というブランドをどうやって、どんな目的でなら使ってよいのか基本的なルールを持つことが必要だと感じるようになりました。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--- title: Original Sponsors description: Thank you to everyone who backed our &lt;a0&gt;Bountysource fundraiser&lt;/a0&gt;!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084014Z" creationid="makenowjust" creationdate="20200516T083933Z">
        <seg>---
title: オリジナルのスポンサー
description: &lt;a0&gt;Bountysource での支援者のみなさん&lt;/a0&gt;に感謝します！
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--- title: Original Sponsors description: Thank you to everyone who backed our &lt;g1&gt;Bountysource fundraiser&lt;/g1&gt;!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093419Z" creationid="makenowjust" creationdate="20200518T093358Z">
        <seg>---
title: オリジナルのスポンサー
description: &lt;g1&gt;Bountysource での支援者のみなさん&lt;/g1&gt;に感謝します！
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--- title: Sponsors description: These are the companies and individuals contributing a monthly amount to help sustain Crystal's development.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T082544Z" creationid="makenowjust" creationdate="20200516T082540Z">
        <seg>---
title: スポンサー
description: これらの企業や個人は、Crystal の発展を維持するために、毎月一定の金額を寄付してくれています。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--cross-compile flags            cross-compile</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072225Z" creationid="hirofumiwakasugi" creationdate="20150901T072225Z">
        <seg>--cross-compile flags            cross-compile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--emit [asm|llvm-bc|llvm-ir|obj] Comma separated list of types of output for the compiler to emit</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072226Z" creationid="hirofumiwakasugi" creationdate="20150901T072226Z">
        <seg>--emit [asm|llvm-bc|llvm-ir|obj] Comma separated list of types of output for the compiler to emit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--help                   show this help</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072217Z" creationid="hirofumiwakasugi" creationdate="20150901T072217Z">
        <seg>--help                   show this help</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--help, -h               show this help</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140116Z" creationid="hirofumiwakasugi" creationdate="20151009T140116Z">
        <seg>--help, -h               show this help</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--link-flags FLAGS               Additional flags to pass to the linker</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072226Z" creationid="hirofumiwakasugi" creationdate="20150901T072226Z">
        <seg>--link-flags FLAGS               Additional flags to pass to the linker</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--ll                             Dump ll to .crystal directory</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072226Z" creationid="hirofumiwakasugi" creationdate="20150901T072226Z">
        <seg>--ll                             Dump ll to .crystal directory</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--mcpu CPU                       Target specific cpu type</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072227Z" creationid="hirofumiwakasugi" creationdate="20150901T072227Z">
        <seg>--mcpu CPU                       Target specific cpu type</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--no-build                       Disable build output</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072227Z" creationid="hirofumiwakasugi" creationdate="20150901T072227Z">
        <seg>--no-build                       Disable build output</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--no-codegen                     Don't do code generation</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140118Z" creationid="hirofumiwakasugi" creationdate="20151009T140118Z">
        <seg>--no-codegen                     Don't do code generation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--no-color                       Disable colored output</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072227Z" creationid="hirofumiwakasugi" creationdate="20150901T072227Z">
        <seg>--no-color                       Disable colored output</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--prelude                        Use given file as prelude</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072227Z" creationid="hirofumiwakasugi" creationdate="20150901T072227Z">
        <seg>--prelude                        Use given file as prelude</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--release                        Compile in release mode</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072227Z" creationid="hirofumiwakasugi" creationdate="20150901T072227Z">
        <seg>--release                        Compile in release mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--single-module                  Generate a single LLVM module</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072228Z" creationid="hirofumiwakasugi" creationdate="20150901T072228Z">
        <seg>--single-module                  Generate a single LLVM module</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--target TRIPLE                  Target triple</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072228Z" creationid="hirofumiwakasugi" creationdate="20150901T072228Z">
        <seg>--target TRIPLE                  Target triple</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--threads                        Maximum number of threads to use</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072228Z" creationid="hirofumiwakasugi" creationdate="20150901T072228Z">
        <seg>--threads                        Maximum number of threads to use</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--verbose                        Display executed commands
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072229Z" creationid="hirofumiwakasugi" creationdate="20150901T072229Z">
        <seg>--verbose                        Display executed commands
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--version                show version
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072217Z" creationid="hirofumiwakasugi" creationdate="20150901T072217Z">
        <seg>--version                show version
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--version, -v            show version
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140117Z" creationid="hirofumiwakasugi" creationdate="20151009T140117Z">
        <seg>--version, -v            show version
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213803Z" creationid="makenowjust" creationdate="20200412T213803Z">
        <seg>-1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-128</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182042Z" creationid="makenowjust" creationdate="20200419T182042Z">
        <seg>-128</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-3 : nil
result = value.as?(Int32) || 10

value.as?(Int32).try &amp;.abs</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T082828Z" creationid="makenowjust" creationdate="20200518T082828Z">
        <seg>-3 : nil
result = value.as?(Int32) || 10

value.as?(Int32).try &amp;.abs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-&gt;{ x += 1; x }
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T053729Z" creationid="hirofumiwakasugi" creationdate="20150918T053729Z">
        <seg>-&gt;{ x += 1; x }
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-&gt;{ x += 1; x }
end

proc = counter
proc.call # =&gt; 1
proc.call # =&gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T080513Z" creationid="makenowjust" creationdate="20200506T080513Z">
        <seg>-&gt;{ x += 1; x }
end

proc = counter
proc.call # =&gt; 1
proc.call # =&gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-D FLAG, --define FLAG           Define a compile-time flag</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072225Z" creationid="hirofumiwakasugi" creationdate="20150901T072225Z">
        <seg>-D FLAG, --define FLAG           Define a compile-time flag</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-d, --debug                      Add symbolic debug info</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072225Z" creationid="hirofumiwakasugi" creationdate="20150901T072225Z">
        <seg>-d, --debug                      Add symbolic debug info</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-h, --help                       Show help</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174332Z" creationid="makenowjust" creationdate="20200413T174332Z">
        <seg>-h, --help                       Show help</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-h, --help                       Show this message</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072226Z" creationid="hirofumiwakasugi" creationdate="20150901T072226Z">
        <seg>-h, --help                       Show this message</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-o                               Output filename</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072227Z" creationid="hirofumiwakasugi" creationdate="20150901T072227Z">
        <seg>-o                               Output filename</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-s, --stats                      Enable statistics output</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072227Z" creationid="hirofumiwakasugi" creationdate="20150901T072227Z">
        <seg>-s, --stats                      Enable statistics output</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-v, --version                    Show version</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174330Z" creationid="makenowjust" creationdate="20200413T174330Z">
        <seg>-v, --version                    Show version</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>...</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T064827Z" creationid="hirofumiwakasugi" creationdate="20150831T064827Z">
        <seg>...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>...
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162535Z" creationid="makenowjust" creationdate="20200413T162535Z">
        <seg>...
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>...and &lt;g1&gt;cd&lt;/g1&gt; into the directory:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T164104Z" creationid="makenowjust" creationdate="20200527T154759Z">
        <seg>こうしたら、&lt;g1&gt;cd&lt;/g1&gt; で作ったディレクトリに移動してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/2020/04/06/crystal-0.34.0-released.html</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210333Z" creationid="makenowjust" creationdate="20200413T210333Z">
        <seg>/2020/04/06/crystal-0.34.0-released.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/2020/06/09/crystal-0.35.0-released.html</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T010327Z" creationid="makenowjust" creationdate="20200610T010327Z">
        <seg>/2020/06/09/crystal-0.35.0-released.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/2020/06/19/crystal-0.35.1-released.html</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200620T122134Z" creationid="makenowjust" creationdate="20200620T122134Z">
        <seg>/2020/06/19/crystal-0.35.1-released.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/2021/01/26/crystal-0.36.0-released.html</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T091651Z" creationid="makenowjust" creationdate="20210130T091651Z">
        <seg>/2021/01/26/crystal-0.36.0-released.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/2021/03/22/crystal-1.0-what-to-expect.html</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T073628Z" creationid="makenowjust" creationdate="20210324T073628Z">
        <seg>/2021/03/22/crystal-1.0-what-to-expect.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/2021/07/16/1.1.0-released.html</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T144037Z" creationid="makenowjust" creationdate="20210726T144037Z">
        <seg>/2021/07/16/1.1.0-released.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/2021/07/27/1.1.1-released.html</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210803T010958Z" creationid="makenowjust" creationdate="20210803T010958Z">
        <seg>/2021/07/27/1.1.1-released.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/\//         # slash
/\\/         # backslash
/\b/         # backspace
/\e/         # escape
/\f/         # form feed
/\n/         # newline
/\r/         # carriage return
/\t/         # tab
/\v/         # vertical tab
/\NNN/       # octal ASCII character
/\xNN/       # hexadecimal ASCII character
/\x{FFFF}/   # hexadecimal unicode character
/\x{10FFFF}/ # hexadecimal unicode character</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T041155Z" creationid="makenowjust" creationdate="20200421T041155Z">
        <seg>/\//         # slash
/\\/         # backslash
/\b/         # backspace
/\e/         # escape
/\f/         # form feed
/\n/         # newline
/\r/         # carriage return
/\t/         # tab
/\v/         # vertical tab
/\NNN/       # octal ASCII character
/\xNN/       # hexadecimal ASCII character
/\x{FFFF}/   # hexadecimal unicode character
/\x{10FFFF}/ # hexadecimal unicode character</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/blog</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222644Z" creationid="makenowjust" creationdate="20200413T222644Z">
        <seg>/blog</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/blog#release_notes</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210346Z" creationid="makenowjust" creationdate="20200413T210346Z">
        <seg>/blog#release_notes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/community</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222857Z" creationid="makenowjust" creationdate="20200413T222857Z">
        <seg>/community</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/favicon.ico</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083839Z" creationid="makenowjust" creationdate="20200516T083839Z">
        <seg>/favicon.ico</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/favicon.png</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083839Z" creationid="makenowjust" creationdate="20200516T083839Z">
        <seg>/favicon.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/feed.xml</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083837Z" creationid="makenowjust" creationdate="20200516T083837Z">
        <seg>/feed.xml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/foo/i.match("FOO")         # =&gt; #&lt;Regex::MatchData "FOO"&gt;
/foo/m.match("bar\nfoo")    # =&gt; #&lt;Regex::MatchData "foo"&gt;
/foo /x.match("foo")        # =&gt; #&lt;Regex::MatchData "foo"&gt;
/foo /imx.match("bar\nFOO") # =&gt; #&lt;Regex::MatchData "FOO"&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T042200Z" creationid="makenowjust" creationdate="20200421T042200Z">
        <seg>/foo/i.match("FOO")         # =&gt; #&lt;Regex::MatchData "FOO"&gt;
/foo/m.match("bar\nfoo")    # =&gt; #&lt;Regex::MatchData "foo"&gt;
/foo /x.match("foo")        # =&gt; #&lt;Regex::MatchData "foo"&gt;
/foo /imx.match("bar\nFOO") # =&gt; #&lt;Regex::MatchData "FOO"&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/foo|bar/
/h(e+)llo/
/\d+/
/あ/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T040544Z" creationid="makenowjust" creationdate="20200421T040544Z">
        <seg>/foo|bar/
/h(e+)llo/
/\d+/
/あ/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/images/crystal-h.png</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075453Z" creationid="makenowjust" creationdate="20200516T075453Z">
        <seg>/images/crystal-h.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/images/icon.png</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075457Z" creationid="makenowjust" creationdate="20200516T075457Z">
        <seg>/images/icon.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/install</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T100704Z" creationid="makenowjust" creationdate="20200518T100704Z">
        <seg>/install</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/install/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210504T120630Z" creationid="makenowjust" creationdate="20210504T120630Z">
        <seg>/install/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/install/:basename/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075508Z" creationid="makenowjust" creationdate="20200516T075508Z">
        <seg>/install/:basename/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/install/from_sources</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071319Z" creationid="makenowjust" creationdate="20200518T071319Z">
        <seg>/install/from_sources</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/install/from_targz</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071321Z" creationid="makenowjust" creationdate="20200518T071321Z">
        <seg>/install/from_targz</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/install/on_alpine_linux</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071413Z" creationid="makenowjust" creationdate="20200518T071413Z">
        <seg>/install/on_alpine_linux</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/install/on_arch_linux</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071348Z" creationid="makenowjust" creationdate="20200518T071348Z">
        <seg>/install/on_arch_linux</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/install/on_centos</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071343Z" creationid="makenowjust" creationdate="20200518T071343Z">
        <seg>/install/on_centos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/install/on_debian</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071336Z" creationid="makenowjust" creationdate="20200518T071336Z">
        <seg>/install/on_debian</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/install/on_elementary_os</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071351Z" creationid="makenowjust" creationdate="20200518T071351Z">
        <seg>/install/on_elementary_os</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/install/on_fedora</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071400Z" creationid="makenowjust" creationdate="20200518T071400Z">
        <seg>/install/on_fedora</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/install/on_freebsd</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071416Z" creationid="makenowjust" creationdate="20200518T071416Z">
        <seg>/install/on_freebsd</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/install/on_gentoo_linux</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071410Z" creationid="makenowjust" creationdate="20200518T071410Z">
        <seg>/install/on_gentoo_linux</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/install/on_kde_neon</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071402Z" creationid="makenowjust" creationdate="20200518T071402Z">
        <seg>/install/on_kde_neon</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/install/on_kubuntu</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071334Z" creationid="makenowjust" creationdate="20200518T071334Z">
        <seg>/install/on_kubuntu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/install/on_linux_mint</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071409Z" creationid="makenowjust" creationdate="20200518T071409Z">
        <seg>/install/on_linux_mint</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/install/on_mac_os</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071328Z" creationid="makenowjust" creationdate="20200518T071328Z">
        <seg>/install/on_mac_os</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/install/on_manjaro</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071404Z" creationid="makenowjust" creationdate="20200518T071404Z">
        <seg>/install/on_manjaro</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/install/on_opensuse</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071345Z" creationid="makenowjust" creationdate="20200518T071345Z">
        <seg>/install/on_opensuse</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/install/on_redhat</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071340Z" creationid="makenowjust" creationdate="20200518T071340Z">
        <seg>/install/on_redhat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/install/on_ubuntu</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071332Z" creationid="makenowjust" creationdate="20200518T071332Z">
        <seg>/install/on_ubuntu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/install/on_wsl</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071418Z" creationid="makenowjust" creationdate="20200518T071418Z">
        <seg>/install/on_wsl</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/media/crystal-media-kit-6e57ec7.zip</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084839Z" creationid="makenowjust" creationdate="20200516T084839Z">
        <seg>/media/crystal-media-kit-6e57ec7.zip</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/sponsors</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221959Z" creationid="makenowjust" creationdate="20200413T221959Z">
        <seg>/sponsors</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/sponsors/original-sponsors.html</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T082826Z" creationid="makenowjust" creationdate="20200516T082826Z">
        <seg>/sponsors/original-sponsors.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/stylesheets/fullcalendar.css</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T103304Z" creationid="makenowjust" creationdate="20200516T103304Z">
        <seg>/stylesheets/fullcalendar.css</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/team</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T144245Z" creationid="makenowjust" creationdate="20210726T144245Z">
        <seg>/team</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/{{site.latest_release.date | date: '%Y/%m/%d'}}/{{site.latest_release.version}}-released.html</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T075722Z" creationid="makenowjust" creationdate="20211107T075722Z">
        <seg>/{{site.latest_release.date | date: '%Y/%m/%d'}}/{{site.latest_release.version}}-released.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>0</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182102Z" creationid="makenowjust" creationdate="20200419T182102Z">
        <seg>0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>0b1101 # == 13</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182611Z" creationid="makenowjust" creationdate="20200419T182611Z">
        <seg>0b1101 # == 13</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>0o123 # == 83</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182627Z" creationid="makenowjust" creationdate="20200419T182627Z">
        <seg>0o123 # == 83</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>0s0pa4k3fov71e4itn79atlmeg@group.calendar.google.com</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075526Z" creationid="makenowjust" creationdate="20200516T075526Z">
        <seg>0s0pa4k3fov71e4itn79atlmeg@group.calendar.google.com</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>0xFE012D # == 16646445
0xfe012d # == 16646445</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182642Z" creationid="makenowjust" creationdate="20200419T182642Z">
        <seg>0xFE012D # == 16646445
0xfe012d # == 16646445</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142554Z" creationid="hirofumiwakasugi" creationdate="20150911T142554Z">
        <seg>1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022049Z" creationid="hirofumiwakasugi" creationdate="20150902T022049Z">
        <seg>1
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1
end

def foo(*elements, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T154620Z" creationid="makenowjust" creationdate="20200429T154620Z">
        <seg>1
end

def foo(*elements, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1
end

proc = -&gt;one
proc.call # =&gt; 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172020Z" creationid="makenowjust" creationdate="20200422T172020Z">
        <seg>1
end

proc = -&gt;one
proc.call # =&gt; 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073144Z" creationid="hirofumiwakasugi" creationdate="20150919T073144Z">
        <seg>1
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1      # Int32

1_i8   # Int8
1_i16  # Int16
1_i32  # Int32
1_i64  # Int64

1_u8   # UInt8
1_u16  # UInt16
1_u32  # UInt32
1_u64  # UInt64

+10    # Int32
-20    # Int32

2147483648          # Int64
9223372036854775808 # UInt64</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182510Z" creationid="makenowjust" creationdate="20200419T182510Z">
        <seg>1      # Int32

1_i8   # Int8
1_i16  # Int16
1_i32  # Int32
1_i64  # Int64

1_u8   # UInt8
1_u16  # UInt16
1_u32  # UInt32
1_u64  # UInt64

+10    # Int32
-20    # Int32

2147483648          # Int64
9223372036854775808 # UInt64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1 + 2
end

some_method # =&gt; nil</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T141327Z" creationid="makenowjust" creationdate="20200430T141327Z">
        <seg>1 + 2
end

some_method # =&gt; nil</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1 + 2             # =&gt; 3
Unicorn.new.speak # =&gt; "I'm a unicorn"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212608Z" creationid="makenowjust" creationdate="20200412T212608Z">
        <seg>1 + 2             # =&gt; 3
Unicorn.new.speak # =&gt; "I'm a unicorn"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1 : "hello"
# a : Int32 | String

if a.is_a?(Number)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T084321Z" creationid="makenowjust" creationdate="20200424T084321Z">
        <seg>1 : "hello"
# a : Int32 | String

if a.is_a?(Number)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1 : "hello"
# a : Int32 | String

if a.responds_to?(:abs)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T084009Z" creationid="makenowjust" creationdate="20200424T084009Z">
        <seg>1 : "hello"
# a : Int32 | String

if a.responds_to?(:abs)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1 : "x"
if !b.is_a?(Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085855Z" creationid="makenowjust" creationdate="20200424T085855Z">
        <seg>1 : "x"
if !b.is_a?(Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1 : 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T143442Z" creationid="makenowjust" creationdate="20200427T143442Z">
        <seg>1 : 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1) Myapp works</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165159Z" creationid="makenowjust" creationdate="20200419T165159Z">
        <seg>1) Myapp works</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1, 2,</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T145241Z" creationid="makenowjust" creationdate="20200430T145241Z">
        <seg>1, 2,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T024431Z" creationid="hirofumiwakasugi" creationdate="20150909T024431Z">
        <seg>1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1.0      # Float64
1.0_f32  # Float32
1_f32    # Float32

1e10     # Float64
1.5e10   # Float64
1.5e-7   # Float64

+1.3     # Float64
-0.5     # Float64</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T183139Z" creationid="makenowjust" creationdate="20200419T183139Z">
        <seg>1.0      # Float64
1.0_f32  # Float32
1_f32    # Float32

1e10     # Float64
1.5e10   # Float64
1.5e-7   # Float64

+1.3     # Float64
-0.5     # Float64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1.as(String) # Compile-time error</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T114742Z" creationid="makenowjust" creationdate="20200512T114742Z">
        <seg>1.as(String) # コンパイル時のエラー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>10 : 30
end
person.age # =&gt; 28</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T150519Z" creationid="makenowjust" creationdate="20200429T150519Z">
        <seg>10 : 30
end
person.age # =&gt; 28</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>10.times do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081751Z" creationid="makenowjust" creationdate="20200518T081751Z">
        <seg>10.times do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>12</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092437Z" creationid="makenowjust" creationdate="20201217T092437Z">
        <seg>12</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>127</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182043Z" creationid="makenowjust" creationdate="20200419T182043Z">
        <seg>127</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>16</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182045Z" creationid="makenowjust" creationdate="20200419T182045Z">
        <seg>16</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>16 - 19</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T091618Z" creationid="makenowjust" creationdate="20210130T091618Z">
        <seg>16 - 19</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>16 or less</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092300Z" creationid="makenowjust" creationdate="20201217T092129Z">
        <seg>16以下</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>16-19</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092139Z" creationid="makenowjust" creationdate="20201217T092139Z">
        <seg>16-19</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>19</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200620T122151Z" creationid="makenowjust" creationdate="20200620T122151Z">
        <seg>19</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1_000_000 # better than 1000000</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182547Z" creationid="makenowjust" creationdate="20200419T182547Z">
        <seg>1_000_000 # better than 1000000</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1_000_000.111_111 # a lot more readable than 1000000.111111, yet functionally the same</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T183618Z" creationid="makenowjust" creationdate="20200419T183142Z">
        <seg>1_000_000.111_111 # 1000000.111111 を読みやすくしたものです</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1_i8   # Int8
1_i16  # Int16
1_i32  # Int32
1_i64  # Int64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052300Z" creationid="hirofumiwakasugi" creationdate="20150901T052300Z">
        <seg>1_i8   # Int8
1_i16  # Int16
1_i32  # Int32
1_i64  # Int64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1_u8   # UInt8
1_u16  # UInt16
1_u32  # UInt32
1_u64  # UInt64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052300Z" creationid="hirofumiwakasugi" creationdate="20150901T052300Z">
        <seg>1_u8   # UInt8
1_u16  # UInt16
1_u32  # UInt32
1_u64  # UInt64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1e10     # Float64
1.5e10   # Float64
1.5e-7   # Float64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T074015Z" creationid="hirofumiwakasugi" creationdate="20150901T074015Z">
        <seg>1e10     # Float64
1.5e10   # Float64
1.5e-7   # Float64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092323Z" creationid="makenowjust" creationdate="20201217T092323Z">
        <seg>2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2
end

foo x: "something" # =&gt; 1
foo y: "something" # =&gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T154621Z" creationid="makenowjust" creationdate="20200429T154621Z">
        <seg>2
end

foo x: "something" # =&gt; 1
foo y: "something" # =&gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2,147,483,647</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182051Z" creationid="makenowjust" creationdate="20200419T182051Z">
        <seg>2,147,483,647</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140008Z" creationid="hirofumiwakasugi" creationdate="20151010T140008Z">
        <seg>2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>20</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092325Z" creationid="makenowjust" creationdate="20201217T092325Z">
        <seg>20</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>20 - 24</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T091619Z" creationid="makenowjust" creationdate="20210130T091619Z">
        <seg>20 - 24</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>20-24</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092145Z" creationid="makenowjust" creationdate="20201217T092145Z">
        <seg>20-24</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2147483648          # Int64
9223372036854775808 # UInt64
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052303Z" creationid="hirofumiwakasugi" creationdate="20150901T052303Z">
        <seg>2147483648          # Int64
9223372036854775808 # UInt64
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>22</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T073637Z" creationid="makenowjust" creationdate="20210324T073637Z">
        <seg>22</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>25 - 34</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T091620Z" creationid="makenowjust" creationdate="20210130T091620Z">
        <seg>25 - 34</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>25-34</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092149Z" creationid="makenowjust" creationdate="20201217T092149Z">
        <seg>25-34</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>255</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182103Z" creationid="makenowjust" creationdate="20200419T182103Z">
        <seg>255</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>26</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T091658Z" creationid="makenowjust" creationdate="20210130T091658Z">
        <seg>26</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>27</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092149Z" creationid="makenowjust" creationdate="20201217T092149Z">
        <seg>27</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2&lt;x1/&gt;63&lt;x2/&gt; - 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182057Z" creationid="makenowjust" creationdate="20200419T182057Z">
        <seg>2&lt;x1/&gt;63&lt;x2/&gt; - 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2&lt;x1/&gt;64&lt;x2/&gt; - 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182113Z" creationid="makenowjust" creationdate="20200419T182113Z">
        <seg>2&lt;x1/&gt;64&lt;x2/&gt; - 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013157Z" creationid="hirofumiwakasugi" creationdate="20150903T013157Z">
        <seg>3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>3
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013515Z" creationid="hirofumiwakasugi" creationdate="20150903T013515Z">
        <seg>3
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>3
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013513Z" creationid="hirofumiwakasugi" creationdate="20150903T013513Z">
        <seg>3
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>3
end

# The above is the same as:
if 1 &gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080553Z" creationid="makenowjust" creationdate="20200424T080553Z">
        <seg>3
end

# 上記は以下に同じ
if 1 &gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>3
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013601Z" creationid="hirofumiwakasugi" creationdate="20150903T013601Z">
        <seg>3
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>3 : 4

# The above is the same as:
a = if 1 &gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080937Z" creationid="makenowjust" creationdate="20200424T080937Z">
        <seg>3 : 4

# 上記は以下と同じ
a = if 1 &gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>3.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T140413Z" creationid="makenowjust" creationdate="20200427T140413Z">
        <seg>3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>3.times do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T192053Z" creationid="makenowjust" creationdate="20200505T192053Z">
        <seg>3.times do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>32</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182049Z" creationid="makenowjust" creationdate="20200419T182049Z">
        <seg>32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>32,767</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182046Z" creationid="makenowjust" creationdate="20200419T182046Z">
        <seg>32,767</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>33</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092114Z" creationid="makenowjust" creationdate="20201217T092114Z">
        <seg>33</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>35 - 44</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T091621Z" creationid="makenowjust" creationdate="20210130T091621Z">
        <seg>35 - 44</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>4</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013158Z" creationid="hirofumiwakasugi" creationdate="20150903T013158Z">
        <seg>4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>4
end
# =&gt; Method added: generate_random_number</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224515Z" creationid="makenowjust" creationdate="20200509T224515Z">
        <seg>4
end
# =&gt; Method added: generate_random_number</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>4,294,967,295</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182110Z" creationid="makenowjust" creationdate="20200419T182110Z">
        <seg>4,294,967,295</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>4.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T141650Z" creationid="makenowjust" creationdate="20200427T141650Z">
        <seg>4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>45 - 54</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T091622Z" creationid="makenowjust" creationdate="20210130T091622Z">
        <seg>45 - 54</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>45-54</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092150Z" creationid="makenowjust" creationdate="20201217T092150Z">
        <seg>45-54</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>46</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092328Z" creationid="makenowjust" creationdate="20201217T092328Z">
        <seg>46</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>49</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092151Z" creationid="makenowjust" creationdate="20201217T092151Z">
        <seg>49</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>5</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092141Z" creationid="makenowjust" creationdate="20201217T092141Z">
        <seg>5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>5 | puts "The Beatles are singing: 🎵#{user_input.upper_case}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182453Z" creationid="makenowjust" creationdate="20200413T182453Z">
        <seg>5 | puts "The Beatles are singing: 🎵#{user_input.upper_case}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>5.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T142342Z" creationid="makenowjust" creationdate="20200427T142342Z">
        <seg>5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>50</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092108Z" creationid="makenowjust" creationdate="20201217T092108Z">
        <seg>50</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>55 or above</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092256Z" creationid="makenowjust" creationdate="20201217T092151Z">
        <seg>55以上</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>6</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092317Z" creationid="makenowjust" creationdate="20201217T092317Z">
        <seg>6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>6 + other</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135831Z" creationid="hirofumiwakasugi" creationdate="20151009T135831Z">
        <seg>6 + other</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>6 April 2020 - &lt;a0&gt;More release notes&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210358Z" creationid="makenowjust" creationdate="20200413T210358Z">
        <seg>6 April 2020 - &lt;a0&gt;詳しいリリースノートはこちら&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>6 April 2020 - &lt;g1&gt;More release notes&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T072544Z" creationid="makenowjust" creationdate="20200518T072544Z">
        <seg>6 April 2020 - &lt;g1&gt;詳しいリリースノートはこちら&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>6.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T142749Z" creationid="makenowjust" creationdate="20200427T142749Z">
        <seg>6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>64</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182053Z" creationid="makenowjust" creationdate="20200419T182053Z">
        <seg>64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>65,535</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182107Z" creationid="makenowjust" creationdate="20200419T182107Z">
        <seg>65,535</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>7</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092440Z" creationid="makenowjust" creationdate="20201217T092440Z">
        <seg>7</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>7.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T143007Z" creationid="makenowjust" creationdate="20200427T143007Z">
        <seg>7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>8</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182040Z" creationid="makenowjust" creationdate="20200419T182040Z">
        <seg>8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>9 June 2020 - &lt;g1&gt;More release notes&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T010359Z" creationid="makenowjust" creationdate="20200610T010355Z">
        <seg>9 June 2020 - &lt;g1&gt;その他のリリースノートはこちら&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>96</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092123Z" creationid="makenowjust" creationdate="20201217T092123Z">
        <seg>96</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>99.times do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091001Z" creationid="makenowjust" creationdate="20200506T091001Z">
        <seg>99.times do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:+
:-
:*
:/
:%
:&amp;
:|
:^
:**
:&gt;&gt;
:&lt;&lt;
:==
:!=
:&lt;
:&lt;=
:&gt;
:&gt;=
:&lt;=&gt;
:===
:[]
:[]?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171631Z" creationid="makenowjust" creationdate="20200420T171631Z">
        <seg>:+
:-
:*
:/
:%
:&amp;
:|
:^
:**
:&gt;&gt;
:&lt;&lt;
:==
:!=
:&lt;
:&lt;=
:&gt;
:&gt;=
:&lt;=&gt;
:===
:[]
:[]?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>::baz(4, 2) # =&gt; 6</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T100956Z" creationid="makenowjust" creationdate="20200427T100956Z">
        <seg>::baz(4, 2) # =&gt; 6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>::baz(4, 2) #=&gt; 6</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021413Z" creationid="hirofumiwakasugi" creationdate="20150904T021413Z">
        <seg>::baz(4, 2) #=&gt; 6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T092257Z" creationid="makenowjust" creationdate="20200502T092257Z">
        <seg>:&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:&lt;/g2&gt;)&lt;/g1&gt; is internally rewritten to
an &lt;g3&gt;if&lt;/g3&gt; expression by the compiler.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T092247Z" creationid="makenowjust" creationdate="20200502T092247Z">
        <seg>:&lt;/g2&gt;)&lt;/g1&gt; はコンパイラによって内部的には &lt;g3&gt;if&lt;/g3&gt; 式に変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:&lt;/g2&gt;)&lt;/g1&gt; is the only ternary
operator.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085107Z" creationid="makenowjust" creationdate="20200502T084449Z">
        <seg>: &lt;/g2&gt;)&lt;/g1&gt;が唯一の3項演算子です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:[]=
:!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171633Z" creationid="makenowjust" creationdate="20200420T171633Z">
        <seg>:[]=
:!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:exclamation!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171553Z" creationid="makenowjust" creationdate="20200420T171553Z">
        <seg>:exclamation!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:question?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171552Z" creationid="makenowjust" creationdate="20200420T171552Z">
        <seg>:question?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:unquoted_symbol
:"quoted symbol"
:"a" # identical to :a</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171102Z" creationid="makenowjust" creationdate="20200420T171050Z">
        <seg>:unquoted_symbol
:"quoted symbol"
:"a" # :a に等しい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:unquoted_symbol
:"quoted symbol"
:"a" # identical to :a
:あ</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200617T111840Z" creationid="makenowjust" creationdate="20200617T111840Z">
        <seg>:unquoted_symbol
:"quoted symbol"
:"a" # :a に等しい
:あ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:~
:!~
:=~</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171635Z" creationid="makenowjust" creationdate="20200420T171635Z">
        <seg>:~
:!~
:=~</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T105546Z" creationid="makenowjust" creationdate="20200518T105546Z">
        <seg>&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T105545Z" creationid="makenowjust" creationdate="20200518T105545Z">
        <seg>&lt;/g2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;&lt;-'HERE' # =&gt; "hello \\n \#{world}"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T034148Z" creationid="makenowjust" creationdate="20200420T034148Z">
        <seg>&lt;&lt;-'HERE' # =&gt; "hello \\n \#{world}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;&lt;-SOME.upcase # =&gt; "HELLO"
hello
SOME

def upcase(string)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T034037Z" creationid="makenowjust" creationdate="20200420T034037Z">
        <seg>&lt;&lt;-SOME.upcase # =&gt; "HELLO"
hello
SOME

def upcase(string)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;&lt;-STRING # =&gt; "Hello\n  world"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T033930Z" creationid="makenowjust" creationdate="20200420T033930Z">
        <seg>&lt;&lt;-STRING # =&gt; "Hello\n  world"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;&lt;-STRING.upcase # =&gt; "HELLO"
hello
STRING

def upcase(string)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T091255Z" creationid="makenowjust" creationdate="20210130T091255Z">
        <seg>&lt;&lt;-STRING.upcase # =&gt; "HELLO"
hello
STRING

def upcase(string)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;&lt;-XML
&lt;parent&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T033758Z" creationid="makenowjust" creationdate="20200420T033758Z">
        <seg>&lt;&lt;-XML
&lt;parent&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt; {% img manas-orange.svg %} &lt;s1&gt;Manas Technology Solutions&lt;/s1&gt; &lt;/a0&gt; &lt;a2&gt; {% img sponsors/84.png %} &lt;s3&gt;84 codes&lt;/s3&gt; &lt;/a2&gt; &lt;a4&gt; {% img sponsors/nikola_motor_company.png %} &lt;s5&gt;Nikola Motor Company&lt;/s5&gt; &lt;/a4&gt; &lt;a6&gt; {% img sponsors/fly_io_.png %} &lt;s7&gt;Fly.io&lt;/s7&gt; &lt;/a6&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222539Z" creationid="makenowjust" creationdate="20200413T222539Z">
        <seg>&lt;a0&gt; {% img manas-orange.svg %} &lt;s1&gt;Manas Technology Solutions&lt;/s1&gt; &lt;/a0&gt; &lt;a2&gt; {% img sponsors/84.png %} &lt;s3&gt;84 codes&lt;/s3&gt; &lt;/a2&gt; &lt;a4&gt; {% img sponsors/nikola_motor_company.png %} &lt;s5&gt;Nikola Motor Company&lt;/s5&gt; &lt;/a4&gt; &lt;a6&gt; {% img sponsors/fly_io_.png %} &lt;s7&gt;Fly.io&lt;/s7&gt; &lt;/a6&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Forum support&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T064543Z" creationid="makenowjust" creationdate="20200518T064543Z">
        <seg>&lt;a0&gt;フォーラムでのサポート&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;b1/&gt;Crystal's standard library is documented in the &lt;g2&gt;API docs&lt;/g2&gt;https://crystal-lang.org/api&lt;e3/&gt;.&lt;e1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093813Z" creationid="makenowjust" creationdate="20200518T082121Z">
        <seg>&lt;b1/&gt;Crystal の標準ライブラリのドキュメントは &lt;g2&gt;API ドキュメント&lt;/g2&gt;https://crystal-lang.org/api&lt;e3/&gt;にあります。&lt;e1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;br2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T092229Z" creationid="makenowjust" creationdate="20200516T092229Z">
        <seg>&lt;br2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;br6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T092436Z" creationid="makenowjust" creationdate="20200516T092436Z">
        <seg>&lt;br6/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;br9/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20220525T090338Z" creationid="makenowjust" creationdate="20220525T090338Z">
        <seg>&lt;br9/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;child /&gt;
&lt;/parent&gt;
XML</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T033759Z" creationid="makenowjust" creationdate="20200420T033759Z">
        <seg>&lt;child /&gt;
&lt;/parent&gt;
XML</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;child /&gt;
&lt;/parent&gt;
XML
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061832Z" creationid="hirofumiwakasugi" creationdate="20160204T061832Z">
        <seg>&lt;child /&gt;
&lt;/parent&gt;
XML
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T105543Z" creationid="makenowjust" creationdate="20200518T105543Z">
        <seg>&lt;g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt; &lt;g2&gt; &lt;x3/&gt; &lt;/g2&gt; {{item.caption}} &lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T072509Z" creationid="makenowjust" creationdate="20200518T072509Z">
        <seg>&lt;g1&gt; &lt;g2&gt; &lt;x3/&gt; &lt;/g2&gt; {{item.caption}} &lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt; &lt;g2&gt;&lt;/g2&gt; &lt;g3&gt;Get them from Google Fonts&lt;/g3&gt; &lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093657Z" creationid="makenowjust" creationdate="20200518T093657Z">
        <seg>&lt;g1&gt; &lt;g2&gt;&lt;/g2&gt; &lt;g3&gt;これらは Google Fonts から取得できます&lt;/g3&gt; &lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt; &lt;g2&gt;Chat room&lt;/g2&gt; &lt;g3&gt;&lt;/g3&gt; &lt;g4&gt;crystal-lang/crystal&lt;/g4&gt; &lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T072908Z" creationid="makenowjust" creationdate="20200518T072859Z">
        <seg>&lt;g1&gt; &lt;g2&gt;チャットルーム (英語)&lt;/g2&gt; &lt;g3&gt;&lt;/g3&gt; &lt;g4&gt;crystal-lang/crystal&lt;/g4&gt; &lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt; &lt;g2&gt;Code repository&lt;/g2&gt; &lt;g3&gt;&lt;/g3&gt; &lt;g4&gt;crystal-lang/crystal&lt;/g4&gt; &lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T072844Z" creationid="makenowjust" creationdate="20200518T072844Z">
        <seg>&lt;g1&gt; &lt;g2&gt;コードリポジトリ&lt;/g2&gt; &lt;g3&gt;&lt;/g3&gt; &lt;g4&gt;crystal-lang/crystal&lt;/g4&gt; &lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt; &lt;g2&gt;General announcements and events&lt;/g2&gt; &lt;g3&gt;&lt;/g3&gt; &lt;g4&gt;@CrystalLanguage&lt;/g4&gt; &lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T072936Z" creationid="makenowjust" creationdate="20200518T072906Z">
        <seg>&lt;g1&gt; &lt;g2&gt;総合的なアナウンス (英語)&lt;/g2&gt; &lt;g3&gt;&lt;/g3&gt; &lt;g4&gt;@CrystalLanguage&lt;/g4&gt; &lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt; &lt;g2&gt;General discussion&lt;/g2&gt; &lt;g3&gt;&lt;/g3&gt; &lt;g4&gt;crystal-lang&lt;/g4&gt; &lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T072854Z" creationid="makenowjust" creationdate="20200518T072854Z">
        <seg>&lt;g1&gt; &lt;g2&gt;広い議論の場 (英語)&lt;/g2&gt; &lt;g3&gt;&lt;/g3&gt; &lt;g4&gt;crystal-lang&lt;/g4&gt; &lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt; &lt;g2&gt;General discussion&lt;/g2&gt; &lt;g3&gt;forum&lt;/g3&gt; &lt;g4&gt;forum.crystal-lang.org&lt;/g4&gt; &lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200606T150718Z" creationid="makenowjust" creationdate="20200606T150106Z">
        <seg>&lt;g1&gt; &lt;g2&gt;広い議論の場 (英語)&lt;/g2&gt; &lt;g3&gt;forum&lt;/g3&gt; &lt;g4&gt;forum.crystal-lang.org&lt;/g4&gt; &lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt; &lt;g2&gt;file_download&lt;/g2&gt; &lt;g3&gt;Download all assets in a zip file&lt;/g3&gt; &lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093643Z" creationid="makenowjust" creationdate="20200518T093643Z">
        <seg>&lt;g1&gt; &lt;g2&gt;file_download&lt;/g2&gt; &lt;g3&gt;すべてのアセットを zip でダウンロードする&lt;/g3&gt; &lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt; &lt;x2/&gt; &lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T072532Z" creationid="makenowjust" creationdate="20200518T072532Z">
        <seg>&lt;g1&gt; &lt;x2/&gt; &lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt; &lt;x2/&gt; &lt;/g1&gt; &lt;g3&gt; or &lt;/g3&gt; &lt;g4&gt; &lt;x5/&gt; &lt;/g4&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T212048Z" creationid="makenowjust" creationdate="20200413T212048Z">
        <seg>&lt;g1&gt; &lt;x2/&gt; &lt;/g1&gt; &lt;g3&gt; または &lt;/g3&gt; &lt;g4&gt; &lt;x5/&gt; &lt;/g4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt; `echo foo` &lt;/g1&gt;, &lt;g2&gt;%x(echo foo)&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000506Z" creationid="makenowjust" creationdate="20200414T000506Z">
        <seg>&lt;g1&gt; `echo foo` &lt;/g1&gt;, &lt;g2&gt;%x(echo foo)&lt;/g2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt; {% img manas-orange.svg %} &lt;g2&gt;Manas Technology Solutions&lt;/g2&gt; &lt;/g1&gt; &lt;g3&gt; {% img sponsors/84.png %} &lt;g4&gt;84 codes&lt;/g4&gt; &lt;/g3&gt; &lt;g5&gt; {% img sponsors/nikola_motor_company.png %} &lt;g6&gt;Nikola Motor Company&lt;/g6&gt; &lt;/g5&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T102208Z" creationid="makenowjust" creationdate="20200809T102208Z">
        <seg>&lt;g1&gt; {% img manas-orange.svg %} &lt;g2&gt;Manas Technology Solutions&lt;/g2&gt; &lt;/g1&gt; &lt;g3&gt; {% img sponsors/84.png %} &lt;g4&gt;84 codes&lt;/g4&gt; &lt;/g3&gt; &lt;g5&gt; {% img sponsors/nikola_motor_company.png %} &lt;g6&gt;Nikola Motor Company&lt;/g6&gt; &lt;/g5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt; {% img manas-orange.svg %} &lt;g2&gt;Manas Technology Solutions&lt;/g2&gt; &lt;/g1&gt; &lt;g3&gt; {% img sponsors/84.png %} &lt;g4&gt;84 codes&lt;/g4&gt; &lt;/g3&gt; &lt;g5&gt; {% img sponsors/nikola_motor_company.png %} &lt;g6&gt;Nikola Motor Company&lt;/g6&gt; &lt;/g5&gt; &lt;g7&gt; {% img sponsors/fly_io_.png %} &lt;g8&gt;Fly.io&lt;/g8&gt; &lt;/g7&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T072812Z" creationid="makenowjust" creationdate="20200518T072812Z">
        <seg>&lt;g1&gt; {% img manas-orange.svg %} &lt;g2&gt;Manas Technology Solutions&lt;/g2&gt; &lt;/g1&gt; &lt;g3&gt; {% img sponsors/84.png %} &lt;g4&gt;84 codes&lt;/g4&gt; &lt;/g3&gt; &lt;g5&gt; {% img sponsors/nikola_motor_company.png %} &lt;g6&gt;Nikola Motor Company&lt;/g6&gt; &lt;/g5&gt; &lt;g7&gt; {% img sponsors/fly_io_.png %} &lt;g8&gt;Fly.io&lt;/g8&gt; &lt;/g7&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt; {% img manas-orange.svg %} &lt;g2&gt;Manas Technology Solutions&lt;/g2&gt; &lt;/g1&gt; &lt;g3&gt; {% img sponsors/84.png %} &lt;g4&gt;84 codes&lt;/g4&gt; &lt;/g3&gt; &lt;g5&gt; {% img sponsors/nikola_motor_company.png %} &lt;g6&gt;Nikola Motor Company&lt;/g6&gt; &lt;/g5&gt; &lt;g7&gt; {% img sponsors/placeos.png %} &lt;g8&gt;PlaceOS&lt;/g8&gt; &lt;/g7&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T144111Z" creationid="makenowjust" creationdate="20210726T144111Z">
        <seg>&lt;g1&gt; {% img manas-orange.svg %} &lt;g2&gt;Manas Technology Solutions&lt;/g2&gt; &lt;/g1&gt; &lt;g3&gt; {% img sponsors/84.png %} &lt;g4&gt;84 codes&lt;/g4&gt; &lt;/g3&gt; &lt;g5&gt; {% img sponsors/nikola_motor_company.png %} &lt;g6&gt;Nikola Motor Company&lt;/g6&gt; &lt;/g5&gt; &lt;g7&gt; {% img sponsors/placeos.png %} &lt;g8&gt;PlaceOS&lt;/g8&gt; &lt;/g7&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt; {% img sponsors/woa.png %} &lt;g2&gt;Works on Arm&lt;/g2&gt; &lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T075755Z" creationid="makenowjust" creationdate="20211107T075755Z">
        <seg>&lt;g1&gt; {% img sponsors/woa.png %} &lt;g2&gt;Works on Arm&lt;/g2&gt; &lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt; {{ post.title }} &lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T072825Z" creationid="makenowjust" creationdate="20200518T072825Z">
        <seg>&lt;g1&gt; {{ post.title }} &lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;!&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090240Z" creationid="makenowjust" creationdate="20200502T090240Z">
        <seg>&lt;g1&gt;!&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;!=&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091307Z" creationid="makenowjust" creationdate="20200502T091307Z">
        <seg>&lt;g1&gt;!=&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;!true&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090224Z" creationid="makenowjust" creationdate="20200502T090224Z">
        <seg>&lt;g1&gt;!true&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;!~&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091322Z" creationid="makenowjust" creationdate="20200502T091322Z">
        <seg>&lt;g1&gt;!~&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;"foo" !~ /fo/&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091335Z" creationid="makenowjust" creationdate="20200502T091335Z">
        <seg>&lt;g1&gt;"foo" !~ /fo/&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;"foo" =~ /fo/&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091321Z" creationid="makenowjust" creationdate="20200502T091321Z">
        <seg>&lt;g1&gt;"foo" =~ /fo/&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;"foo\tbar"&lt;/g1&gt;, &lt;g2&gt;%("あ")&lt;/g2&gt;, &lt;g3&gt;%q(foo #{foo})&lt;/g3&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000431Z" creationid="makenowjust" creationdate="20200414T000431Z">
        <seg>&lt;g1&gt;"foo\tbar"&lt;/g1&gt;, &lt;g2&gt;%("あ")&lt;/g2&gt;, &lt;g3&gt;%q(foo #{foo})&lt;/g3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;#9054&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/9054&lt;e6/&gt;, &lt;g2&gt;#9062&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9062&lt;e7/&gt;, &lt;g3&gt;#9095&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9095&lt;e8/&gt;, &lt;g4&gt;#9106&lt;/g4&gt;https://github.com/crystal-lang/crystal/pull/9106&lt;e9/&gt;, &lt;g5&gt;#9307&lt;/g5&gt;https://github.com/crystal-lang/crystal/pull/9307&lt;e10/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T032251Z" creationid="makenowjust" creationdate="20200611T032251Z">
        <seg>&lt;g1&gt;#9054&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/9054&lt;e6/&gt;、 &lt;g2&gt;#9062&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9062&lt;e7/&gt;、 &lt;g3&gt;#9095&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9095&lt;e8/&gt;、 &lt;g4&gt;#9106&lt;/g4&gt;https://github.com/crystal-lang/crystal/pull/9106&lt;e9/&gt;、 &lt;g5&gt;#9307&lt;/g5&gt;https://github.com/crystal-lang/crystal/pull/9307&lt;e10/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;%&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085957Z" creationid="makenowjust" creationdate="20200502T085957Z">
        <seg>&lt;g1&gt;%&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;%=&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100627Z" creationid="makenowjust" creationdate="20200502T100627Z">
        <seg>&lt;g1&gt;%=&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&amp;&amp;&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170647Z" creationid="makenowjust" creationdate="20200413T170647Z">
        <seg>&lt;g1&gt;&amp;&amp;&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&amp;&amp;=&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T101106Z" creationid="makenowjust" creationdate="20200502T101106Z">
        <seg>&lt;g1&gt;&amp;&amp;=&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&amp;**&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085459Z" creationid="makenowjust" creationdate="20200502T085459Z">
        <seg>&lt;g1&gt;&amp;**&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&amp;*&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085557Z" creationid="makenowjust" creationdate="20200502T085557Z">
        <seg>&lt;g1&gt;&amp;*&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&amp;*=&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100505Z" creationid="makenowjust" creationdate="20200502T100505Z">
        <seg>&lt;g1&gt;&amp;*=&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&amp;+1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085254Z" creationid="makenowjust" creationdate="20200502T085254Z">
        <seg>&lt;g1&gt;&amp;+1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&amp;+&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085232Z" creationid="makenowjust" creationdate="20200502T085232Z">
        <seg>&lt;g1&gt;&amp;+&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&amp;+=&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100349Z" creationid="makenowjust" creationdate="20200502T100349Z">
        <seg>&lt;g1&gt;&amp;+=&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&amp;-1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085315Z" creationid="makenowjust" creationdate="20200502T085315Z">
        <seg>&lt;g1&gt;&amp;-1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&amp;-&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085304Z" creationid="makenowjust" creationdate="20200502T085304Z">
        <seg>&lt;g1&gt;&amp;-&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&amp;-=&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100432Z" creationid="makenowjust" creationdate="20200502T100432Z">
        <seg>&lt;g1&gt;&amp;-=&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&amp;&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084738Z" creationid="makenowjust" creationdate="20200502T084738Z">
        <seg>&lt;g1&gt;&amp;&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&amp;=&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100659Z" creationid="makenowjust" creationdate="20200502T100659Z">
        <seg>&lt;g1&gt;&amp;=&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;'a'&lt;/g1&gt;, &lt;g2&gt;'\n'&lt;/g2&gt;, &lt;g3&gt;'あ'&lt;/g3&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000429Z" creationid="makenowjust" creationdate="20200414T000429Z">
        <seg>&lt;g1&gt;'a'&lt;/g1&gt;, &lt;g2&gt;'\n'&lt;/g2&gt;, &lt;g3&gt;'あ'&lt;/g3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;**&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085453Z" creationid="makenowjust" creationdate="20200502T085453Z">
        <seg>&lt;g1&gt;**&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;**&lt;/g1&gt;, &lt;g2&gt;&amp;**&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085137Z" creationid="makenowjust" creationdate="20200502T085137Z">
        <seg>&lt;g1&gt;**&lt;/g1&gt;, &lt;g2&gt;&amp;**&lt;/g2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;**=&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100809Z" creationid="makenowjust" creationdate="20200502T100809Z">
        <seg>&lt;g1&gt;**=&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;**foo&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T092220Z" creationid="makenowjust" creationdate="20200502T092220Z">
        <seg>&lt;g1&gt;**foo&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;*&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085519Z" creationid="makenowjust" creationdate="20200502T085519Z">
        <seg>&lt;g1&gt;*&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;*&lt;/g1&gt;, &lt;g2&gt;&amp;*&lt;/g2&gt;, &lt;g3&gt;/&lt;/g3&gt;, &lt;g4&gt;//&lt;/g4&gt;, &lt;g5&gt;%&lt;/g5&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084714Z" creationid="makenowjust" creationdate="20200502T084714Z">
        <seg>&lt;g1&gt;*&lt;/g1&gt;, &lt;g2&gt;&amp;*&lt;/g2&gt;, &lt;g3&gt;/&lt;/g3&gt;, &lt;g4&gt;//&lt;/g4&gt;, &lt;g5&gt;%&lt;/g5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;*=&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100453Z" creationid="makenowjust" creationdate="20200502T100453Z">
        <seg>&lt;g1&gt;*=&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;*foo&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T092212Z" creationid="makenowjust" creationdate="20200502T092212Z">
        <seg>&lt;g1&gt;*foo&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;+1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085230Z" creationid="makenowjust" creationdate="20200502T085230Z">
        <seg>&lt;g1&gt;+1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;+&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085214Z" creationid="makenowjust" creationdate="20200502T085214Z">
        <seg>&lt;g1&gt;+&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;+&lt;/g1&gt;, &lt;g2&gt;&amp;+&lt;/g2&gt;, &lt;g3&gt;-&lt;/g3&gt;, &lt;g4&gt;&amp;-&lt;/g4&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084726Z" creationid="makenowjust" creationdate="20200502T084726Z">
        <seg>&lt;g1&gt;+&lt;/g1&gt;, &lt;g2&gt;&amp;+&lt;/g2&gt;, &lt;g3&gt;-&lt;/g3&gt;, &lt;g4&gt;&amp;-&lt;/g4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;+&lt;/g1&gt;, &lt;g2&gt;&amp;+&lt;/g2&gt;, &lt;g3&gt;-&lt;/g3&gt;, &lt;g4&gt;&amp;-&lt;/g4&gt;, &lt;g5&gt;!&lt;/g5&gt;, &lt;g6&gt;~&lt;/g6&gt;, &lt;g7&gt;*&lt;/g7&gt;, &lt;g8&gt;**&lt;/g8&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084701Z" creationid="makenowjust" creationdate="20200502T084701Z">
        <seg>&lt;g1&gt;+&lt;/g1&gt;, &lt;g2&gt;&amp;+&lt;/g2&gt;, &lt;g3&gt;-&lt;/g3&gt;, &lt;g4&gt;&amp;-&lt;/g4&gt;, &lt;g5&gt;!&lt;/g5&gt;, &lt;g6&gt;~&lt;/g6&gt;, &lt;g7&gt;*&lt;/g7&gt;, &lt;g8&gt;**&lt;/g8&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;+=&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100049Z" creationid="makenowjust" creationdate="20200502T100049Z">
        <seg>&lt;g1&gt;+=&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--canonical-base-url=URL, -b URL&lt;/g1&gt;: Set the &lt;g2&gt;canonical base url&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163036Z" creationid="makenowjust" creationdate="20200419T162834Z">
        <seg>&lt;g1&gt;--canonical-base-url=URL, -b URL&lt;/g1&gt;: &lt;g2&gt;canonicalなベースURL&lt;/g2&gt;を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--canonical-base-url=URL, -b URL&lt;/g1&gt;: Set the &lt;g2&gt;canonical base url&lt;/g2&gt;https://en.wikipedia.org/wiki/Canonical_link_element&lt;e3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T092923Z" creationid="makenowjust" creationdate="20200518T092923Z">
        <seg>&lt;g1&gt;--canonical-base-url=URL, -b URL&lt;/g1&gt;: &lt;g2&gt;canonical なベース URL&lt;/g2&gt;https://en.wikipedia.org/wiki/Canonical_link_element&lt;e3/&gt; を設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--channel&lt;/g1&gt; with &lt;g2&gt;stable&lt;/g2&gt;, &lt;g3&gt;unstable&lt;/g3&gt;, or &lt;g4&gt;nightly&lt;/g4&gt; value</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T092737Z" creationid="makenowjust" creationdate="20210130T092737Z">
        <seg>&lt;g1&gt;--channel&lt;/g1&gt; 引数では、&lt;g2&gt;stable&lt;/g2&gt;、&lt;g3&gt;unstable&lt;/g3&gt;、もしくは&lt;g4&gt;nightly&lt;/g4&gt; の値を指定できます、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--cross-compile&lt;/g1&gt;: Generate a .o file, and print the command to generate an executable to stdout.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155223Z" creationid="makenowjust" creationdate="20200419T155206Z">
        <seg>&lt;g1&gt;--cross-compile&lt;/g1&gt;: .o ファイルを生成して、実行可能ファイルを生成するためのコマンドを表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--cross-compile&lt;/g1&gt;: When given enables cross compilation mode</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T023626Z" creationid="makenowjust" creationdate="20200511T023626Z">
        <seg>&lt;g1&gt;--cross-compile&lt;/g1&gt;: クロスコンパイルモードを有効にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--crystal&lt;/g1&gt; with &lt;g2&gt;major.minor.patch&lt;/g2&gt;, &lt;g3&gt;major.minor&lt;/g3&gt;, or &lt;g4&gt;major.minor.patch-iteration&lt;/g4&gt; values</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T092709Z" creationid="makenowjust" creationdate="20210130T092657Z">
        <seg>&lt;g1&gt;--crystal&lt;/g1&gt; 引数に &lt;g2&gt;major.minor.patch&lt;/g2&gt;、&lt;g3&gt;major.minor&lt;/g3&gt; もしくは &lt;g4&gt;major.minor.patch-iteration&lt;/g4&gt; の形式でバージョンを指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--example &lt;name&gt;&lt;/g1&gt;: Runs examples whose full nested names include &lt;g2&gt;name&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164649Z" creationid="makenowjust" creationdate="20200419T164649Z">
        <seg>&lt;g1&gt;--example &lt;name&gt;&lt;/g1&gt;: &lt;g2&gt;name&lt;/g2&gt; を含むような spec を実行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--fail-fast&lt;/g1&gt;: Abort the spec run on first failure.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164440Z" creationid="makenowjust" creationdate="20200419T164440Z">
        <seg>&lt;g1&gt;--fail-fast&lt;/g1&gt;: どれか1つでも spec が失敗したら即座に中断する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--junit_output &lt;output_dir&gt;&lt;/g1&gt;: Generates JUnit XML output.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164451Z" creationid="makenowjust" creationdate="20200419T164451Z">
        <seg>&lt;g1&gt;--junit_output &lt;output_dir&gt;&lt;/g1&gt;: JUnit XML を生成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--line &lt;line&gt;&lt;/g1&gt;: Runs examples whose line matches &lt;g2&gt;line&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164704Z" creationid="makenowjust" creationdate="20200419T164704Z">
        <seg>&lt;g1&gt;--line &lt;line&gt;&lt;/g1&gt;: 行番号が &lt;g2&gt;line&lt;/g2&gt; に一致した spec を実行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--link-flags FLAGS&lt;/g1&gt;: Additional flags to pass to the linker.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T101942Z" creationid="makenowjust" creationdate="20200809T101942Z">
        <seg>&lt;g1&gt;--link-flags FLAGS&lt;/g1&gt;: リンカに渡す追加のフラグを指定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--link-flags FLAGS&lt;/g1&gt;: Additional flags to passs to the linker.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155358Z" creationid="makenowjust" creationdate="20200419T155358Z">
        <seg>&lt;g1&gt;--link-flags FLAGS&lt;/g1&gt;: リンカに渡す追加のフラグを指定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--location &lt;file&gt;:&lt;line&gt;&lt;/g1&gt;: Runs example(s) at &lt;g2&gt;line&lt;/g2&gt; in &lt;g3&gt;file&lt;/g3&gt; (multiple options allowed).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164745Z" creationid="makenowjust" creationdate="20200419T164745Z">
        <seg>&lt;g1&gt;--location &lt;file&gt;:&lt;line&gt;&lt;/g1&gt;: &lt;g3&gt;file&lt;/g3&gt; の &lt;g2&gt;line&lt;/g2&gt; にある spec を実行する (複数指定可能)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--lto=thin&lt;/g1&gt;: Use ThinLTO, improves performance.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160340Z" creationid="makenowjust" creationdate="20200419T160340Z">
        <seg>&lt;g1&gt;--lto=thin&lt;/g1&gt;: パフォーマンスを向上させるために ThinLTO を利用する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--lto=thin&lt;/g1&gt;: Use ThinLTO, improving performance on release builds.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155432Z" creationid="makenowjust" creationdate="20200419T155432Z">
        <seg>&lt;g1&gt;--lto=thin&lt;/g1&gt;: リリースビルドのパフォーマンスを向上させるために ThinLTO を利用する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--no-color&lt;/g1&gt;: Disabled colored output.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175720Z" creationid="makenowjust" creationdate="20200419T175720Z">
        <seg>&lt;g1&gt;--no-color&lt;/g1&gt;: 色付けされた出力を無効にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--no-debug&lt;/g1&gt;: Skip any symbolic debug info, reducing the output file size.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155505Z" creationid="makenowjust" creationdate="20200419T155505Z">
        <seg>&lt;g1&gt;--no-debug&lt;/g1&gt;: ファイルサイズを減らすためにデバッグシンボルの生成をしないようにする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--output=DIR, -o DIR&lt;/g1&gt;: Set the output directory (default: &lt;g2&gt;./docs&lt;/g2&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T162812Z" creationid="makenowjust" creationdate="20200419T162812Z">
        <seg>&lt;g1&gt;--output=DIR, -o DIR&lt;/g1&gt;: 出力先のディレクトリを指定する (デフォルト: &lt;g2&gt;./docs&lt;/g2&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--production&lt;/g1&gt;: Runs in release mode.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175817Z" creationid="makenowjust" creationdate="20200419T175729Z">
        <seg>&lt;g1&gt;--production&lt;/g1&gt;: リリースモードで実行する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--profile&lt;/g1&gt;: Prints the 10 slowest specs.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164420Z" creationid="makenowjust" creationdate="20200419T164416Z">
        <seg>&lt;g1&gt;--profile&lt;/g1&gt;: 実行に時間のかかった spec を10個まで表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--progress&lt;/g1&gt;: Show progress during compilation.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154839Z" creationid="makenowjust" creationdate="20200419T154839Z">
        <seg>&lt;g1&gt;--progress&lt;/g1&gt;: コンパイルの進捗を逐次表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--project-name=NAME&lt;/g1&gt;: Set the project name.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T162549Z" creationid="makenowjust" creationdate="20200419T162456Z">
        <seg>&lt;g1&gt;--project-name=NAME&lt;/g1&gt;: プロジェクト名を設定する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--project-version=VERSION&lt;/g1&gt;: Set the project version.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T162716Z" creationid="makenowjust" creationdate="20200419T162716Z">
        <seg>&lt;g1&gt;--project-version=VERSION&lt;/g1&gt;: プロジェクトのバージョンを指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--release&lt;/g1&gt;: Compile in release mode, doing extra work to apply optimizations to the generated code.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160305Z" creationid="makenowjust" creationdate="20200419T154817Z">
        <seg>&lt;g1&gt;--release&lt;/g1&gt;: リリースモードを有効にして、生成されるバイナリに最適化をしてコンパイルする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--static&lt;/g1&gt;: Link statically.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154845Z" creationid="makenowjust" creationdate="20200419T154845Z">
        <seg>&lt;g1&gt;--static&lt;/g1&gt;: 静的にリンクする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--tag &lt;tag&gt;&lt;/g1&gt;: Runs examples with the specified tag, or excludes examples by adding &lt;g2&gt;~&lt;/g2&gt; before the tag (multiple options allowed).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164925Z" creationid="makenowjust" creationdate="20200419T164826Z">
        <seg>&lt;g1&gt;--tag &lt;tag&gt;&lt;/g1&gt;: 指定されたタグを持つ spec を実行する、もしくは &lt;g2&gt;~&lt;/g2&gt; に続けたタグを持つ spec を実行する spec の一覧から除く。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--tag a --tag b&lt;/g1&gt; will include specs tagged with &lt;g2&gt;a&lt;/g2&gt; OR &lt;g3&gt;b&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165110Z" creationid="makenowjust" creationdate="20200419T165023Z">
        <seg>&lt;g1&gt;--tag a --tag b&lt;/g1&gt; という指定は、タグ &lt;g2&gt;a&lt;/g2&gt; もしくはタグ &lt;g3&gt;b&lt;/g3&gt; を持つ spec を含めることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--tag a --tag ~b&lt;/g1&gt; will include specs tagged with &lt;g2&gt;a&lt;/g2&gt;, but not tagged with &lt;g3&gt;b&lt;/g3&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165152Z" creationid="makenowjust" creationdate="20200419T165107Z">
        <seg>&lt;g1&gt;--tag a --tag ~b&lt;/g1&gt; という指定は、タグ &lt;g2&gt;a&lt;/g2&gt; を持つがタグ &lt;g3&gt;b&lt;/g3&gt; を持たないような spec を含めることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--tag ~a --tag ~b&lt;/g1&gt; will include specs not tagged with &lt;g2&gt;a&lt;/g2&gt; AND not tagged with &lt;g3&gt;b&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165057Z" creationid="makenowjust" creationdate="20200419T165057Z">
        <seg>&lt;g1&gt;--tag ~a --tag ~b&lt;/g1&gt; という指定は タグ&lt;g2&gt;a&lt;/g2&gt; もタグ&lt;g3&gt;b&lt;/g3&gt; も持たない spec を含めることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--target&lt;/g1&gt;: the &lt;g2&gt;LLVM Target Triple&lt;/g2&gt; to use and set the default &lt;g3&gt;compile-time flags&lt;/g3&gt; from</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T023717Z" creationid="makenowjust" creationdate="20200511T023717Z">
        <seg>&lt;g1&gt;--target&lt;/g1&gt;: ビルドに利用する&lt;g2&gt;LLVM ターゲットトリプル&lt;/g2&gt;を指定して、デフォルトの&lt;g3&gt;コンパイル時のフラグ&lt;/g3&gt;を設定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--target&lt;/g1&gt;: the &lt;g2&gt;LLVM Target Triple&lt;/g2&gt;http://llvm.org/docs/LangRef.html#target-triple&lt;e4/&gt; to use and set the default &lt;g3&gt;compile-time flags&lt;/g3&gt; from</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T084022Z" creationid="makenowjust" creationdate="20200518T084018Z">
        <seg>&lt;g1&gt;--target&lt;/g1&gt;: ビルドに使用する &lt;g2&gt;LLVM ターゲットトリプル&lt;/g2&gt;http://llvm.org/docs/LangRef.html#target-triple&lt;e4/&gt; を指定して、デフォルトの&lt;g3&gt;コンパイル時のフラグ&lt;/g3&gt;を設定する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--verbose&lt;/g1&gt;: Display executed commands.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155521Z" creationid="makenowjust" creationdate="20200419T155521Z">
        <seg>&lt;g1&gt;--verbose&lt;/g1&gt;: 内部的に実行したコマンドを表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--verbose&lt;/g1&gt;: Prints verbose output, including all example names.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164352Z" creationid="makenowjust" creationdate="20200419T164352Z">
        <seg>&lt;g1&gt;--verbose&lt;/g1&gt;: すべての spec 名を含むような詳細な出力をする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--version&lt;/g1&gt;: Prints the version of &lt;g2&gt;shards&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175552Z" creationid="makenowjust" creationdate="20200419T175552Z">
        <seg>&lt;g1&gt;--version&lt;/g1&gt;: &lt;g2&gt;shards&lt;/g2&gt;のバージョンを表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;-1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085302Z" creationid="makenowjust" creationdate="20200502T085302Z">
        <seg>&lt;g1&gt;-1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;-&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085256Z" creationid="makenowjust" creationdate="20200502T085256Z">
        <seg>&lt;g1&gt;-&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;-=&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100352Z" creationid="makenowjust" creationdate="20200502T100352Z">
        <seg>&lt;g1&gt;-=&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;-&gt;(x : Int32, y : Int32) { x + y }&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000505Z" creationid="makenowjust" creationdate="20200414T000505Z">
        <seg>&lt;g1&gt;-&gt;(x : Int32, y : Int32) { x + y }&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;-D FLAG, --define FLAG&lt;/g1&gt;: Define a compile-time flag.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155309Z" creationid="makenowjust" creationdate="20200419T155220Z">
        <seg>&lt;g1&gt;-D FLAG, --define FLAG&lt;/g1&gt;: コンパイル時フラグを指定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;-h, --help&lt;/g1&gt;: Prints usage synopsis.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175708Z" creationid="makenowjust" creationdate="20200419T175635Z">
        <seg>&lt;g1&gt;-h, --help&lt;/g1&gt;: 使用方法をおおざっぱに表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;-h&lt;/g1&gt; / &lt;g2&gt;--help&lt;/g2&gt;: it will display the application help.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172451Z" creationid="makenowjust" creationdate="20200413T172451Z">
        <seg>&lt;g1&gt;-h&lt;/g1&gt; / &lt;g2&gt;--help&lt;/g2&gt;: アプリケーションの利用方法を表示する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;-o &lt;output_file&gt;&lt;/g1&gt;: Define the name of the binary executable.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155332Z" creationid="makenowjust" creationdate="20200419T155306Z">
        <seg>&lt;g1&gt;-o &lt;output_file&gt;&lt;/g1&gt;: 出力されるバイナリのファイル名を指定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;-q, --quiet&lt;/g1&gt;: Decreases the log verbosity, printing only warnings and errors.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180012Z" creationid="makenowjust" creationdate="20200419T180012Z">
        <seg>&lt;g1&gt;-q, --quiet&lt;/g1&gt;: ログの冗長さを減らして、警告およびエラーのみを表示するようにする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;-v, --verbose&lt;/g1&gt;: Increases the log verbosity, printing all debug statements.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180040Z" creationid="makenowjust" creationdate="20200419T180040Z">
        <seg>&lt;g1&gt;-v, --verbose&lt;/g1&gt;: ログの冗長さを増して、すべてのデバッグ用のメッセージも表示するようにする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;-v&lt;/g1&gt; / &lt;g2&gt;--version&lt;/g2&gt;: it will display the application version.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172437Z" creationid="makenowjust" creationdate="20200413T172437Z">
        <seg>&lt;g1&gt;-v&lt;/g1&gt; / &lt;g2&gt;--version&lt;/g2&gt;: アプリケーションのバージョンを表示する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;...&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T092047Z" creationid="makenowjust" creationdate="20200502T092047Z">
        <seg>&lt;g1&gt;...&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;..&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T092003Z" creationid="makenowjust" creationdate="20200502T092003Z">
        <seg>&lt;g1&gt;..&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;..&lt;/g1&gt;, &lt;g2&gt;...&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085145Z" creationid="makenowjust" creationdate="20200502T085145Z">
        <seg>&lt;g1&gt;..&lt;/g1&gt;, &lt;g2&gt;...&lt;/g2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;/(foo)?bar/&lt;/g1&gt;, &lt;g2&gt;/foo #{foo}/imx&lt;/g2&gt;, &lt;g3&gt;%r(foo/)&lt;/g3&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000500Z" creationid="makenowjust" creationdate="20200414T000500Z">
        <seg>&lt;g1&gt;/(foo)?bar/&lt;/g1&gt;, &lt;g2&gt;/foo #{foo}/imx&lt;/g2&gt;, &lt;g3&gt;%r(foo/)&lt;/g3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;//&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085705Z" creationid="makenowjust" creationdate="20200502T085705Z">
        <seg>&lt;g1&gt;//&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;//=&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100537Z" creationid="makenowjust" creationdate="20200502T100537Z">
        <seg>&lt;g1&gt;//=&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;/&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085613Z" creationid="makenowjust" creationdate="20200502T085613Z">
        <seg>&lt;g1&gt;/&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;/&lt;/g1&gt; contains a readme, any project configurations (eg, CI or editor configs), and any other project-level documentation (eg, changelog or contributing guide).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T072056Z" creationid="makenowjust" creationdate="20200412T204441Z">
        <seg>&lt;g1&gt;/&lt;/g1&gt; には README や、 (CI や editor config などの) プロジェクトの設定、そして (CHANGELOG や CONTRIBUTING ガイドなどの) プロジェクト全体のドキュメントを配置します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;/=&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100520Z" creationid="makenowjust" creationdate="20200502T100520Z">
        <seg>&lt;g1&gt;/=&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;/foo/ === "foo"&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091350Z" creationid="makenowjust" creationdate="20200502T091350Z">
        <seg>&lt;g1&gt;/foo/ === "foo"&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;0..5.to_a&lt;/g1&gt; without parentheses would be semantically equivalent to &lt;g2&gt;0..(5.to_a)&lt;/g2&gt; because method calls and other operators have higher precedence than the range literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T064546Z" creationid="makenowjust" creationdate="20201213T064546Z">
        <seg>&lt;g1&gt;0..5.to_a&lt;/g1&gt; のように括弧で囲わなかった場合、範囲リテラルよりもメソッド呼び出しの方が優先度が高いため &lt;g2&gt;0..(5.to_a)&lt;/g2&gt; として解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;0&lt;/g1&gt;: Dependencies are satisfied.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180441Z" creationid="makenowjust" creationdate="20200419T180423Z">
        <seg>&lt;g1&gt;0&lt;/g1&gt;: 依存関係は充足されています</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1 != 2&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091315Z" creationid="makenowjust" creationdate="20200502T091315Z">
        <seg>&lt;g1&gt;1 != 2&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1 % 2&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085954Z" creationid="makenowjust" creationdate="20200502T085954Z">
        <seg>&lt;g1&gt;1 % 2&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1 &amp; 2&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090420Z" creationid="makenowjust" creationdate="20200502T090420Z">
        <seg>&lt;g1&gt;1 &amp; 2&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1 &amp;* 2&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085609Z" creationid="makenowjust" creationdate="20200502T085609Z">
        <seg>&lt;g1&gt;1 &amp;* 2&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1 &amp;** 2&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085518Z" creationid="makenowjust" creationdate="20200502T085518Z">
        <seg>&lt;g1&gt;1 &amp;** 2&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1 &amp;+ 2&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090014Z" creationid="makenowjust" creationdate="20200502T090014Z">
        <seg>&lt;g1&gt;1 &amp;+ 2&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1 &amp;- 2&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090209Z" creationid="makenowjust" creationdate="20200502T090209Z">
        <seg>&lt;g1&gt;1 &amp;- 2&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1 * 2&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085554Z" creationid="makenowjust" creationdate="20200502T085554Z">
        <seg>&lt;g1&gt;1 * 2&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1 ** 2&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085457Z" creationid="makenowjust" creationdate="20200502T085457Z">
        <seg>&lt;g1&gt;1 ** 2&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1 + 2&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090004Z" creationid="makenowjust" creationdate="20200502T090004Z">
        <seg>&lt;g1&gt;1 + 2&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1 - 2&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090021Z" creationid="makenowjust" creationdate="20200502T090021Z">
        <seg>&lt;g1&gt;1 - 2&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1 / 2&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085704Z" creationid="makenowjust" creationdate="20200502T085704Z">
        <seg>&lt;g1&gt;1 / 2&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1 // 2&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085956Z" creationid="makenowjust" creationdate="20200502T085956Z">
        <seg>&lt;g1&gt;1 // 2&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1 &lt; 2&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091830Z" creationid="makenowjust" creationdate="20200502T091830Z">
        <seg>&lt;g1&gt;1 &lt; 2&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1 &lt;&lt; 2&lt;/g1&gt;, &lt;g2&gt;STDOUT &lt;&lt; "foo"&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090403Z" creationid="makenowjust" creationdate="20200502T090403Z">
        <seg>&lt;g1&gt;1 &lt;&lt; 2&lt;/g1&gt;, &lt;g2&gt;STDOUT &lt;&lt; "foo"&lt;/g2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1 &lt;= 2&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091842Z" creationid="makenowjust" creationdate="20200502T091842Z">
        <seg>&lt;g1&gt;1 &lt;= 2&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1 &lt;=&gt; 2&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091916Z" creationid="makenowjust" creationdate="20200502T091916Z">
        <seg>&lt;g1&gt;1 &lt;=&gt; 2&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1 == 2&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091306Z" creationid="makenowjust" creationdate="20200502T091306Z">
        <seg>&lt;g1&gt;1 == 2&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1 &gt; 2&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091849Z" creationid="makenowjust" creationdate="20200502T091849Z">
        <seg>&lt;g1&gt;1 &gt; 2&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1 &gt;= 2&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091910Z" creationid="makenowjust" creationdate="20200502T091910Z">
        <seg>&lt;g1&gt;1 &gt;= 2&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1 &gt;&gt; 2&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090424Z" creationid="makenowjust" creationdate="20200502T090424Z">
        <seg>&lt;g1&gt;1 &gt;&gt; 2&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1 ^ 2&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090541Z" creationid="makenowjust" creationdate="20200502T090541Z">
        <seg>&lt;g1&gt;1 ^ 2&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1 | 2&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090534Z" creationid="makenowjust" creationdate="20200502T090534Z">
        <seg>&lt;g1&gt;1 | 2&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1...10&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T092048Z" creationid="makenowjust" creationdate="20200502T092048Z">
        <seg>&lt;g1&gt;1...10&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1..10&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T092006Z" creationid="makenowjust" creationdate="20200502T092006Z">
        <seg>&lt;g1&gt;1..10&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1..9&lt;/g1&gt;, &lt;g2&gt;1...10&lt;/g2&gt;, &lt;g3&gt;0..var&lt;/g3&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000458Z" creationid="makenowjust" creationdate="20200414T000458Z">
        <seg>&lt;g1&gt;1..9&lt;/g1&gt;, &lt;g2&gt;1...10&lt;/g2&gt;, &lt;g3&gt;0..var&lt;/g3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1.0&lt;/g1&gt;, &lt;g2&gt;1.0_f32&lt;/g2&gt;, &lt;g3&gt;1e10&lt;/g3&gt;, &lt;g4&gt;-0.5&lt;/g4&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000428Z" creationid="makenowjust" creationdate="20200414T000428Z">
        <seg>&lt;g1&gt;1.0&lt;/g1&gt;, &lt;g2&gt;1.0_f32&lt;/g2&gt;, &lt;g3&gt;1e10&lt;/g3&gt;, &lt;g4&gt;-0.5&lt;/g4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;18&lt;/g1&gt;, &lt;g2&gt;-12&lt;/g2&gt;, &lt;g3&gt;19_i64&lt;/g3&gt;, &lt;g4&gt;14_u32&lt;/g4&gt;,&lt;g5&gt;64_u8&lt;/g5&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000426Z" creationid="makenowjust" creationdate="20200414T000426Z">
        <seg>&lt;g1&gt;18&lt;/g1&gt;, &lt;g2&gt;-12&lt;/g2&gt;, &lt;g3&gt;19_i64&lt;/g3&gt;, &lt;g4&gt;14_u32&lt;/g4&gt;,&lt;g5&gt;64_u8&lt;/g5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1&lt;/g1&gt;: Dependencies are not satisfied.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180448Z" creationid="makenowjust" creationdate="20200419T180430Z">
        <seg>&lt;g1&gt;1&lt;/g1&gt;: 依存関係は充足されていません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;:symbol&lt;/g1&gt;, &lt;g2&gt;:"foo bar"&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000432Z" creationid="makenowjust" creationdate="20200414T000432Z">
        <seg>&lt;g1&gt;:symbol&lt;/g1&gt;, &lt;g2&gt;:"foo bar"&lt;/g2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T091945Z" creationid="makenowjust" creationdate="20201217T091945Z">
        <seg>&lt;g1&gt;&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091824Z" creationid="makenowjust" creationdate="20200502T091824Z">
        <seg>&lt;g1&gt;&lt;&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;&lt;/g1&gt;, &lt;g2&gt;&lt;=&lt;/g2&gt;, &lt;g3&gt;&gt;&lt;/g3&gt;, &lt;g4&gt;&gt;=&lt;/g4&gt;, &lt;g5&gt;&lt;=&gt;&lt;/g5&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084750Z" creationid="makenowjust" creationdate="20200502T084750Z">
        <seg>&lt;g1&gt;&lt;&lt;/g1&gt;, &lt;g2&gt;&lt;=&lt;/g2&gt;, &lt;g3&gt;&gt;&lt;/g3&gt;, &lt;g4&gt;&gt;=&lt;/g4&gt;, &lt;g5&gt;&lt;=&gt;&lt;/g5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;&lt;&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090237Z" creationid="makenowjust" creationdate="20200502T090237Z">
        <seg>&lt;g1&gt;&lt;&lt;&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;&lt;&lt;/g1&gt;, &lt;g2&gt;&gt;&gt;&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084732Z" creationid="makenowjust" creationdate="20200502T084732Z">
        <seg>&lt;g1&gt;&lt;&lt;&lt;/g1&gt;, &lt;g2&gt;&gt;&gt;&lt;/g2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;&lt;=&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100821Z" creationid="makenowjust" creationdate="20200502T100821Z">
        <seg>&lt;g1&gt;&lt;&lt;=&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;=&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091834Z" creationid="makenowjust" creationdate="20200502T091834Z">
        <seg>&lt;g1&gt;&lt;=&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;=&gt;&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091912Z" creationid="makenowjust" creationdate="20200502T091912Z">
        <seg>&lt;g1&gt;&lt;=&gt;&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;Process&lt;/g2&gt;&lt;/g1&gt; from the standard library offers a safe way to provide user input as command arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T173319Z" creationid="makenowjust" creationdate="20200422T173319Z">
        <seg>また標準ライブラリにある &lt;g1&gt;&lt;g2&gt;Process&lt;/g2&gt;&lt;/g1&gt; を使うとユーザーの入力を安全にコマンドの引数として渡すことができます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;Process&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Process.html&lt;e3/&gt; from the standard library offers a safe way to provide user input as command arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T085020Z" creationid="makenowjust" creationdate="20200518T085020Z">
        <seg>また、標準ライブラリにある &lt;g1&gt;&lt;g2&gt;Process&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Process.html&lt;e3/&gt; を使うとユーザーの入力を安全にコマンドの引数として渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal build&lt;/g2&gt;&lt;/g1&gt;: build an executable</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154037Z" creationid="makenowjust" creationdate="20200419T154033Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal build&lt;/g2&gt;&lt;/g1&gt;: 実行可能ファイルのビルド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal docs&lt;/g2&gt;&lt;/g1&gt;: generate documentation</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154044Z" creationid="makenowjust" creationdate="20200419T154044Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal docs&lt;/g2&gt;&lt;/g1&gt;: ドキュメントの生成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal env&lt;/g2&gt;&lt;/g1&gt;: print Crystal environment information</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154116Z" creationid="makenowjust" creationdate="20200419T154116Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal env&lt;/g2&gt;&lt;/g1&gt;: Crystal 環境の情報を表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal eval&lt;/g2&gt;&lt;/g1&gt;: eval code from args or standard input</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154138Z" creationid="makenowjust" creationdate="20200419T154138Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal eval&lt;/g2&gt;&lt;/g1&gt;: 引数や標準入力からコードを評価</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal init&lt;/g2&gt;&lt;/g1&gt;: generate a new project</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153908Z" creationid="makenowjust" creationdate="20200419T153908Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal init&lt;/g2&gt;&lt;/g1&gt;: 新規プロジェクトの生成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal play&lt;/g2&gt;&lt;/g1&gt;: starts crystal playground server</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154151Z" creationid="makenowjust" creationdate="20200419T154151Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal play&lt;/g2&gt;&lt;/g1&gt;: Crystal プレイグラウンドを起動</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal run&lt;/g2&gt;&lt;/g1&gt;: build and run program</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154203Z" creationid="makenowjust" creationdate="20200419T154203Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal run&lt;/g2&gt;&lt;/g1&gt;: プログラムをビルドして実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal spec&lt;/g2&gt;&lt;/g1&gt;: build and run specs</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154216Z" creationid="makenowjust" creationdate="20200419T154216Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal spec&lt;/g2&gt;&lt;/g1&gt;: spec をビルドして実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal tool format&lt;/g2&gt;&lt;/g1&gt;: Format Crystal files</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165645Z" creationid="makenowjust" creationdate="20200419T165645Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal tool format&lt;/g2&gt;&lt;/g1&gt;: Crystal ファイルのフォーマット</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal tool&lt;/g2&gt;&lt;/g1&gt;: run a compiler tool</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154228Z" creationid="makenowjust" creationdate="20200419T154228Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal tool&lt;/g2&gt;&lt;/g1&gt;: ツールの実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal version&lt;/g2&gt;&lt;/g1&gt;: show version</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155621Z" creationid="makenowjust" creationdate="20200419T155621Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal version&lt;/g2&gt;&lt;/g1&gt;: バージョンの表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;shards build&lt;/g2&gt;&lt;/g1&gt;: Builds an executable</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175040Z" creationid="makenowjust" creationdate="20200419T175040Z">
        <seg>&lt;g1&gt;&lt;g2&gt;shards build&lt;/g2&gt;&lt;/g1&gt;: 実行可能ファイルのビルド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;shards check&lt;/g2&gt;&lt;/g1&gt;: Verifies dependencies are installed</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175331Z" creationid="makenowjust" creationdate="20200419T175331Z">
        <seg>&lt;g1&gt;&lt;g2&gt;shards check&lt;/g2&gt;&lt;/g1&gt;: インストールされている依存関係の検証</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;shards init&lt;/g2&gt;&lt;/g1&gt;: Generates a new &lt;g3&gt;shard.yml&lt;/g3&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T095309Z" creationid="makenowjust" creationdate="20200419T175338Z">
        <seg>&lt;g1&gt;&lt;g2&gt;shards init&lt;/g2&gt;&lt;/g1&gt;: &lt;g3&gt;shard.yml&lt;/g3&gt; を新規に生成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;shards install&lt;/g2&gt;&lt;/g1&gt;: Resolves and installs dependencies</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175359Z" creationid="makenowjust" creationdate="20200419T175359Z">
        <seg>&lt;g1&gt;&lt;g2&gt;shards install&lt;/g2&gt;&lt;/g1&gt;: 依存関係の解決とインストール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;shards list&lt;/g2&gt;&lt;/g1&gt;: Lists installed dependencies</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175414Z" creationid="makenowjust" creationdate="20200419T175414Z">
        <seg>&lt;g1&gt;&lt;g2&gt;shards list&lt;/g2&gt;&lt;/g1&gt;: インストールされた依存関係の一覧を表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;shards prune&lt;/g2&gt;&lt;/g1&gt;: Removes unused dependencies</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175430Z" creationid="makenowjust" creationdate="20200419T175430Z">
        <seg>&lt;g1&gt;&lt;g2&gt;shards prune&lt;/g2&gt;&lt;/g1&gt;: 利用されていない依存関係の削除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;shards update&lt;/g2&gt;&lt;/g1&gt;: Resolves and updates dependencies</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175442Z" creationid="makenowjust" creationdate="20200419T175442Z">
        <seg>&lt;g1&gt;&lt;g2&gt;shards update&lt;/g2&gt;&lt;/g1&gt;: 依存関係の解決と更新</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;shards version&lt;/g2&gt;&lt;/g1&gt;: Shows version of a shard</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175501Z" creationid="makenowjust" creationdate="20200419T175456Z">
        <seg>&lt;g1&gt;&lt;g2&gt;shards version&lt;/g2&gt;&lt;/g1&gt;: shard のバージョンを表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;=&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T094452Z" creationid="makenowjust" creationdate="20200502T094452Z">
        <seg>&lt;g1&gt;=&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;=&lt;/g1&gt;, &lt;g2&gt;[]=&lt;/g2&gt;, &lt;g3&gt;+=&lt;/g3&gt;, &lt;g4&gt;&amp;+=&lt;/g4&gt;, &lt;g5&gt;-=&lt;/g5&gt;, &lt;g6&gt;&amp;-=&lt;/g6&gt;, &lt;g7&gt;*=&lt;/g7&gt;, &lt;g8&gt;&amp;*=&lt;/g8&gt;, &lt;g9&gt;/=&lt;/g9&gt;, &lt;g10&gt;//=&lt;/g10&gt;, &lt;g11&gt;%=&lt;/g11&gt;, &lt;g12&gt;|=&lt;/g12&gt;, &lt;g13&gt;&amp;=&lt;/g13&gt;,&lt;g14&gt;^=&lt;/g14&gt;,&lt;g15&gt;**=&lt;/g15&gt;,&lt;g16&gt;&lt;&lt;=&lt;/g16&gt;,&lt;g17&gt;&gt;&gt;=&lt;/g17&gt;, &lt;g18&gt;||=&lt;/g18&gt;, &lt;g19&gt;&amp;&amp;=&lt;/g19&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084810Z" creationid="makenowjust" creationdate="20200502T084810Z">
        <seg>&lt;g1&gt;=&lt;/g1&gt;, &lt;g2&gt;[]=&lt;/g2&gt;, &lt;g3&gt;+=&lt;/g3&gt;, &lt;g4&gt;&amp;+=&lt;/g4&gt;, &lt;g5&gt;-=&lt;/g5&gt;, &lt;g6&gt;&amp;-=&lt;/g6&gt;, &lt;g7&gt;*=&lt;/g7&gt;, &lt;g8&gt;&amp;*=&lt;/g8&gt;, &lt;g9&gt;/=&lt;/g9&gt;, &lt;g10&gt;//=&lt;/g10&gt;, &lt;g11&gt;%=&lt;/g11&gt;, &lt;g12&gt;|=&lt;/g12&gt;, &lt;g13&gt;&amp;=&lt;/g13&gt;,&lt;g14&gt;^=&lt;/g14&gt;,&lt;g15&gt;**=&lt;/g15&gt;,&lt;g16&gt;&lt;&lt;=&lt;/g16&gt;,&lt;g17&gt;&gt;&gt;=&lt;/g17&gt;, &lt;g18&gt;||=&lt;/g18&gt;, &lt;g19&gt;&amp;&amp;=&lt;/g19&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;==&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091305Z" creationid="makenowjust" creationdate="20200502T091305Z">
        <seg>&lt;g1&gt;==&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;==&lt;/g1&gt;, &lt;g2&gt;!=&lt;/g2&gt;, &lt;g3&gt;=~&lt;/g3&gt;, &lt;g4&gt;!~&lt;/g4&gt;, &lt;g5&gt;===&lt;/g5&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084747Z" creationid="makenowjust" creationdate="20200502T084747Z">
        <seg>&lt;g1&gt;==&lt;/g1&gt;, &lt;g2&gt;!=&lt;/g2&gt;, &lt;g3&gt;=~&lt;/g3&gt;, &lt;g4&gt;!~&lt;/g4&gt;, &lt;g5&gt;===&lt;/g5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;==&lt;/g1&gt;: Checks whether the values of the operands are equal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090628Z" creationid="makenowjust" creationdate="20200502T090628Z">
        <seg>&lt;g1&gt;==&lt;/g1&gt;: オペランドの値が等しいかどうか</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;===&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091338Z" creationid="makenowjust" creationdate="20200502T091338Z">
        <seg>&lt;g1&gt;===&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;===&lt;/g1&gt;: Checks whether the left hand operand matches the right hand operand in
&lt;g2&gt;case equality&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091038Z" creationid="makenowjust" creationdate="20200502T090846Z">
        <seg>&lt;g1&gt;===&lt;/g1&gt;: &lt;g2&gt;case 等価性&lt;/g2&gt;によって左のオペランドが右のオペランドにマッチするかどうか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;=~&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091316Z" creationid="makenowjust" creationdate="20200502T091316Z">
        <seg>&lt;g1&gt;=~&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;=~&lt;/g1&gt;: Checks whether the value of the first operand matches the value of the
second operand with pattern matching.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090847Z" creationid="makenowjust" creationdate="20200502T090644Z">
        <seg>&lt;g1&gt;=~&lt;/g1&gt;: 最初のオペランドが2番目のオペランドの値がパターンマッチするかどうか</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&gt;&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091845Z" creationid="makenowjust" creationdate="20200502T091845Z">
        <seg>&lt;g1&gt;&gt;&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&gt;=&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091851Z" creationid="makenowjust" creationdate="20200502T091851Z">
        <seg>&lt;g1&gt;&gt;=&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&gt;&gt;&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090404Z" creationid="makenowjust" creationdate="20200502T090404Z">
        <seg>&lt;g1&gt;&gt;&gt;&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&gt;&gt;=&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T101038Z" creationid="makenowjust" creationdate="20200502T101038Z">
        <seg>&lt;g1&gt;&gt;&gt;=&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T092249Z" creationid="makenowjust" creationdate="20200502T092248Z">
        <seg>&lt;g1&gt;? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;?:&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084808Z" creationid="makenowjust" creationdate="20200502T084808Z">
        <seg>&lt;g1&gt;?:&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;@[Link("pcre")]&lt;/g1&gt; will pass &lt;g2&gt;-lpcre&lt;/g2&gt; to the linker, but the compiler will first try to use &lt;g3&gt;pkg-config&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T030648Z" creationid="makenowjust" creationdate="20200511T030648Z">
        <seg>&lt;g1&gt;@[Link("pcre")]&lt;/g1&gt; は &lt;g2&gt;-lpcre&lt;/g2&gt; をリンカに渡します。ただし、コンパイラはまず最初に &lt;g3&gt;pkg-config&lt;/g3&gt; の利用を試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;@[Link("pcre")]&lt;/g1&gt; will pass &lt;g2&gt;-lpcre&lt;/g2&gt; to the linker, but the compiler will first try to use &lt;g3&gt;pkg-config&lt;/g3&gt;http://en.wikipedia.org/wiki/Pkg-config&lt;e4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T083524Z" creationid="makenowjust" creationdate="20200518T083524Z">
        <seg>&lt;g1&gt;@[Link("pcre")]&lt;/g1&gt; は &lt;g2&gt;-lpcre&lt;/g2&gt; をリンカに渡します。ただし、コンパイラはまず最初に &lt;g3&gt;pkg-config&lt;/g3&gt;http://en.wikipedia.org/wiki/Pkg-config&lt;e4/&gt; の利用を試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;@[Link(framework: "Cocoa")]&lt;/g1&gt; will pass &lt;g2&gt;-framework Cocoa&lt;/g2&gt; to the linker (only useful in macOS).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T030814Z" creationid="makenowjust" creationdate="20200511T030814Z">
        <seg>&lt;g1&gt;@[Link(framework: "Cocoa")]&lt;/g1&gt; は &lt;g2&gt;-framework Cocoa&lt;/g2&gt; をリンカに渡します (macOS でのみ用途があるでしょう)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;@[Link(ldflags: "...")]&lt;/g1&gt; will pass those flags directly to the linker, without modification.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T030704Z" creationid="makenowjust" creationdate="20200511T030704Z">
        <seg>&lt;g1&gt;@[Link(ldflags: "...")]&lt;/g1&gt; は指定したフラグをそのまま直接リンカに渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;A Command Line Application&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T081042Z" creationid="makenowjust" creationdate="20200516T081042Z">
        <seg>&lt;g1&gt;コマンドライアプリケーション&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;About this guide&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T064001Z" creationid="makenowjust" creationdate="20201213T064001Z">
        <seg>&lt;g1&gt;このガイドについて&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Adam Daniels&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093421Z" creationid="makenowjust" creationdate="20200518T093421Z">
        <seg>&lt;g1&gt;Adam Daniels&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;All required libraries&lt;/g1&gt;https://github.com/crystal-lang/crystal/wiki/All-required-libraries&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T153534Z" creationid="makenowjust" creationdate="20210726T153534Z">
        <seg>&lt;g1&gt;すべての要求ライブラリ&lt;/g1&gt;https://github.com/crystal-lang/crystal/wiki/All-required-libraries&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;AlwaysInline&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114553Z" creationid="makenowjust" creationdate="20200510T114553Z">
        <seg>&lt;g1&gt;AlwaysInline&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;An HTTP Server&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T081035Z" creationid="makenowjust" creationdate="20200516T081035Z">
        <seg>&lt;g1&gt;HTTP サーバー&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Annotations&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171228Z" creationid="makenowjust" creationdate="20200413T171228Z">
        <seg>&lt;g1&gt;アノテーション&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Array-like&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000444Z" creationid="makenowjust" creationdate="20200414T000444Z">
        <seg>&lt;g1&gt;配列ライク&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Array&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170217Z" creationid="makenowjust" creationdate="20200413T170217Z">
        <seg>&lt;g1&gt;配列 (Array)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Array&lt;/g1&gt; is passed by reference, so the reference to &lt;g2&gt;["str"]&lt;/g2&gt; is stored in the property of &lt;g3&gt;strukt&lt;/g3&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T173434Z" creationid="makenowjust" creationdate="20200505T173434Z">
        <seg>&lt;g1&gt;Array&lt;/g1&gt; は参照渡しされるので、&lt;g2&gt;["str"]&lt;/g2&gt; の参照が &lt;g3&gt;strukt&lt;/g3&gt; のフィールドに格納されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Array&lt;/g1&gt;, &lt;g2&gt;Hash&lt;/g2&gt;, &lt;g3&gt;Set&lt;/g3&gt; are generic types, as is &lt;g4&gt;Pointer&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T142751Z" creationid="makenowjust" creationdate="20200504T142751Z">
        <seg>&lt;g1&gt;Array&lt;/g1&gt;、&lt;g2&gt;Hash&lt;/g2&gt;、&lt;g3&gt;Set&lt;/g3&gt;や&lt;g4&gt;Pointer&lt;/g4&gt;などはジェネリック型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Arrays of strings&lt;/g1&gt; and &lt;g2&gt;arrays of symbols&lt;/g2&gt; can be created with percent array literals:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173340Z" creationid="makenowjust" creationdate="20200420T173340Z">
        <seg>&lt;g1&gt;文字列の配列&lt;/g1&gt;と&lt;g2&gt;シンボルの配列&lt;/g2&gt;をパーセント配列リテラルで生成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;As a suffix&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170529Z" creationid="makenowjust" creationdate="20200413T170529Z">
        <seg>&lt;g1&gt;後置 if&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;As an expression&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170557Z" creationid="makenowjust" creationdate="20200413T170557Z">
        <seg>&lt;g1&gt;式としての if&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Assignment&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170433Z" creationid="makenowjust" creationdate="20200413T170433Z">
        <seg>&lt;g1&gt;代入&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Awesome README&lt;/g1&gt;https://github.com/matiassingers/awesome-readme&lt;e2/&gt; is a nice curation of examples and resources on the topic.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T161042Z" creationid="makenowjust" creationdate="20200527T161042Z">
        <seg>&lt;g1&gt;Awesome README&lt;/g1&gt;https://github.com/matiassingers/awesome-readme&lt;e2/&gt; はこの話題の素晴らしい例やリソースのキュレーテッドリストになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Basics&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T155309Z" creationid="makenowjust" creationdate="20210726T150809Z">
        <seg>&lt;g1&gt;基本&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Block forwarding&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171111Z" creationid="makenowjust" creationdate="20200413T171111Z">
        <seg>&lt;g1&gt;ブロックのフォワーディング&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Blocks and Procs&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171025Z" creationid="makenowjust" creationdate="20200413T171025Z">
        <seg>&lt;g1&gt;ブロックと Proc&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Bo Jeanes&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093421Z" creationid="makenowjust" creationdate="20200518T093421Z">
        <seg>&lt;g1&gt;Bo Jeanes&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Bool&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165931Z" creationid="makenowjust" creationdate="20200413T165931Z">
        <seg>&lt;g1&gt;真偽値 (Bool)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Bool&lt;/g1&gt; has only two possible values: &lt;g2&gt;true&lt;/g2&gt; and &lt;g3&gt;false&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T001126Z" creationid="makenowjust" creationdate="20200414T001126Z">
        <seg>&lt;g1&gt;Bool&lt;/g1&gt;には&lt;g2&gt;true&lt;/g2&gt;と&lt;g3&gt;false&lt;/g3&gt;という2つの値だけが存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Bool&lt;/g1&gt;http://crystal-lang.org/api/Bool.html&lt;e4/&gt; has only two possible values: &lt;g2&gt;true&lt;/g2&gt; and &lt;g3&gt;false&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T084754Z" creationid="makenowjust" creationdate="20200518T084754Z">
        <seg>&lt;g1&gt;Bool&lt;/g1&gt;http://crystal-lang.org/api/Bool.html&lt;e4/&gt; には &lt;g2&gt;true&lt;/g2&gt; と &lt;g3&gt;false&lt;/g3&gt; という2つ値だけが存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Bool&lt;/g1&gt;https://crystal-lang.org/api/latest/Bool.html&lt;e4/&gt; has only two possible values: &lt;g2&gt;true&lt;/g2&gt; and &lt;g3&gt;false&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T084628Z" creationid="makenowjust" creationdate="20210324T084628Z">
        <seg>&lt;g1&gt;Bool&lt;/g1&gt;https://crystal-lang.org/api/latest/Bool.html&lt;e4/&gt; には &lt;g2&gt;true&lt;/g2&gt; と &lt;g3&gt;false&lt;/g3&gt; という2つの値だけが存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Bruno Antunes&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093422Z" creationid="makenowjust" creationdate="20200518T093422Z">
        <seg>&lt;g1&gt;Bruno Antunes&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Build the application&lt;/g1&gt; and then run it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174244Z" creationid="makenowjust" creationdate="20200413T174244Z">
        <seg>&lt;g1&gt;アプリケーションのビルド&lt;/g1&gt;をして、それを実行する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Built-in annotations&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171235Z" creationid="makenowjust" creationdate="20200413T171235Z">
        <seg>&lt;g1&gt;組み込みアノテーション&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;C bindings&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171406Z" creationid="makenowjust" creationdate="20200413T171406Z">
        <seg>&lt;g1&gt;C バインディング&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;CI Integrations&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T155348Z" creationid="makenowjust" creationdate="20210726T151432Z">
        <seg>&lt;g1&gt;CI 統合&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;CRYSTAL_CACHE_DIR&lt;/g1&gt;: Defines path where Crystal caches partial compilation results for faster subsequent builds.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T170752Z" creationid="makenowjust" creationdate="20200419T170328Z">
        <seg>&lt;g1&gt;CRYSTAL_CACHE_DIR&lt;/g1&gt;: 続くビルドを高速化するために Crystal がキャッシュしている部分的なコンパイルの結果を保存するパスを指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;CRYSTAL_LIBRARY_PATH&lt;/g1&gt;: The compiler uses the paths in this variable as a first lookup destination for static and dynamic libraries that are to be linked.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T170939Z" creationid="makenowjust" creationdate="20200419T170939Z">
        <seg>&lt;g1&gt;CRYSTAL_LIBRARY_PATH&lt;/g1&gt;: コンパイラはこの変数に指定されたパスを、静的もしくは動的にリンクするライブラリを最初に探索する場所として利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;CRYSTAL_PATH&lt;/g1&gt;: Defines paths where Crystal searches for required files.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T170747Z" creationid="makenowjust" creationdate="20200419T170747Z">
        <seg>&lt;g1&gt;CRYSTAL_PATH&lt;/g1&gt;: Crystal が require されたファイルを探索するパスを指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;CRYSTAL_VERSION&lt;/g1&gt; is only available as output of &lt;g2&gt;&lt;g3&gt;crystal env&lt;/g3&gt;&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T170808Z" creationid="makenowjust" creationdate="20200419T170808Z">
        <seg>&lt;g1&gt;CRYSTAL_VERSION&lt;/g1&gt; は&lt;g2&gt;&lt;g3&gt;crystal env&lt;/g3&gt;&lt;/g2&gt;の出力としてのみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;CallConvention&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114556Z" creationid="makenowjust" creationdate="20200510T114556Z">
        <seg>&lt;g1&gt;CallConvention&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Callbacks&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171442Z" creationid="makenowjust" creationdate="20200413T171442Z">
        <seg>&lt;g1&gt;コールバック&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Capturing blocks&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171038Z" creationid="makenowjust" creationdate="20200413T171038Z">
        <seg>&lt;g1&gt;ブロックの捕捉&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Char&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170118Z" creationid="makenowjust" creationdate="20200413T170118Z">
        <seg>&lt;g1&gt;文字 (Char)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;CircleCI&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T073508Z" creationid="makenowjust" creationdate="20210324T073508Z">
        <seg>&lt;g1&gt;CircleCI&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Class methods&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170920Z" creationid="makenowjust" creationdate="20200413T170920Z">
        <seg>&lt;g1&gt;クラスメソッド&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Class variables&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170928Z" creationid="makenowjust" creationdate="20200413T170928Z">
        <seg>&lt;g1&gt;クラス変数&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Classes and methods&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170730Z" creationid="makenowjust" creationdate="20200413T170730Z">
        <seg>&lt;g1&gt;クラスとメソッド&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Closures&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171114Z" creationid="makenowjust" creationdate="20200413T171114Z">
        <seg>&lt;g1&gt;クロージャ&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Code of Conduct&lt;/g1&gt;https://github.com/crystal-lang/crystal/blob/master/CODE_OF_CONDUCT.md&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T153204Z" creationid="makenowjust" creationdate="20210726T153204Z">
        <seg>&lt;g1&gt;行動規範&lt;/g1&gt;https://github.com/crystal-lang/crystal/blob/master/CODE_OF_CONDUCT.md&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Coding style&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171505Z" creationid="makenowjust" creationdate="20200413T171505Z">
        <seg>&lt;g1&gt;コーディングスタイル&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Command Line Application&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165813Z" creationid="makenowjust" creationdate="20200413T165808Z">
        <seg>&lt;g1&gt;コマンドラインアプリケーション&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Command&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170357Z" creationid="makenowjust" creationdate="20200413T170340Z">
        <seg>&lt;g1&gt;コマンド (Command)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Comments&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165911Z" creationid="makenowjust" creationdate="20200413T165911Z">
        <seg>&lt;g1&gt;コメント&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Common options:&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154731Z" creationid="makenowjust" creationdate="20200419T154731Z">
        <seg>&lt;g1&gt;よく使うオプション:&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Compile-time Flags&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000037Z" creationid="makenowjust" creationdate="20200414T000037Z">
        <seg>&lt;g1&gt;コンパイル時のフラグ&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Compile-time flags&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171357Z" creationid="makenowjust" creationdate="20200413T171357Z">
        <seg>&lt;g1&gt;コンパイル時のフラグ&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Compiler Manual&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T152235Z" creationid="makenowjust" creationdate="20210726T152235Z">
        <seg>&lt;g1&gt;コンパイラのマニュアル&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Compiler internals&lt;/g1&gt;https://github.com/crystal-lang/crystal/wiki/Compiler-internals&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T153544Z" creationid="makenowjust" creationdate="20210726T153544Z">
        <seg>&lt;g1&gt;コンパイラの内部構造&lt;/g1&gt;https://github.com/crystal-lang/crystal/wiki/Compiler-internals&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Concurrency&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171544Z" creationid="makenowjust" creationdate="20200413T171544Z">
        <seg>&lt;g1&gt;並列性&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Connection pool&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171527Z" creationid="makenowjust" creationdate="20200413T171527Z">
        <seg>&lt;g1&gt;コネクションプール&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Connection&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171521Z" creationid="makenowjust" creationdate="20200413T171521Z">
        <seg>&lt;g1&gt;接続&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Constants&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T040620Z" creationid="makenowjust" creationdate="20200413T171015Z">
        <seg>&lt;g1&gt;定数&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Constants&lt;/g1&gt; are screaming-cased.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T071917Z" creationid="makenowjust" creationdate="20200412T203754Z">
        <seg>&lt;g1&gt;定数&lt;/g1&gt; はすべて大文字とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Continuous Integration&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171627Z" creationid="makenowjust" creationdate="20200413T171627Z">
        <seg>&lt;g1&gt;継続的インテグレーション (CI)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Contributing Instructions&lt;/g1&gt;https://github.com/crystal-lang/crystal/blob/master/CONTRIBUTING.md&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T152934Z" creationid="makenowjust" creationdate="20210726T152934Z">
        <seg>&lt;g1&gt;貢献方法についての資料&lt;/g1&gt;https://github.com/crystal-lang/crystal/blob/master/CONTRIBUTING.md&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Control Expression&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T235907Z" creationid="makenowjust" creationdate="20200413T235907Z">
        <seg>&lt;g1&gt;制御式&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Control Flow&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T150832Z" creationid="makenowjust" creationdate="20210726T150832Z">
        <seg>&lt;g1&gt;制御構文&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Control expressions&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170449Z" creationid="makenowjust" creationdate="20200413T170449Z">
        <seg>&lt;g1&gt;制御式&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Conventions&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171459Z" creationid="makenowjust" creationdate="20200413T171459Z">
        <seg>&lt;g1&gt;規約&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Cross-compilation&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171401Z" creationid="makenowjust" creationdate="20200413T171401Z">
        <seg>&lt;g1&gt;クロスコンパイル&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Crystal 0.35.0&lt;/g1&gt;https://github.com/crystal-lang/crystal/releases/tag/0.35.0&lt;e2/&gt; has been released!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T121021Z" creationid="makenowjust" creationdate="20200610T121021Z">
        <seg>&lt;g1&gt;Crystal 0.35.0&lt;/g1&gt;https://github.com/crystal-lang/crystal/releases/tag/0.35.0&lt;e2/&gt; がリリースされました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Crystal 0.35.1&lt;/g1&gt;https://github.com/crystal-lang/crystal/releases/tag/0.35.1&lt;e2/&gt; has been released!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200621T072953Z" creationid="makenowjust" creationdate="20200621T072953Z">
        <seg>&lt;g1&gt;Crystal 0.35.1&lt;/g1&gt;https://github.com/crystal-lang/crystal/releases/tag/0.35.1&lt;e2/&gt; がリリースされました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Crystal Blog&lt;/g1&gt;https://crystal-lang.org/blog&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T152738Z" creationid="makenowjust" creationdate="20210726T152730Z">
        <seg>&lt;g1&gt;Crystal ブログ&lt;/g1&gt;https://ja.crystal-lang.org/blog&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Crystal's standard library is documented in the &lt;g2&gt;API docs&lt;/g2&gt;.&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T221715Z" creationid="makenowjust" creationdate="20200412T221715Z">
        <seg>&lt;g1&gt;Crystalの標準ライブラリのドキュメントは&lt;g2&gt;APIドキュメント&lt;/g2&gt;にあります。&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;DB.open&lt;/g1&gt; will allow you to easily connect to a database using a connection uri.</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T192316Z" creationid="daiki" creationdate="20200705T192201Z">
        <seg>&lt;g1&gt;DB.open&lt;/g1&gt; はコネクション uri を用いて容易なデータベースへの接続を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Database#query&lt;/g1&gt; returns a &lt;g2&gt;ResultSet&lt;/g2&gt; that needs to be closed.</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T235034Z" creationid="daiki" creationdate="20200705T235034Z">
        <seg>&lt;g1&gt;Database#query&lt;/g1&gt; はクローズする必要のある &lt;g2&gt;ResultSet&lt;/g2&gt; を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Database&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171518Z" creationid="makenowjust" creationdate="20200413T171518Z">
        <seg>&lt;g1&gt;データベース&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Default parameter values and named arguments&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T073502Z" creationid="makenowjust" creationdate="20210324T073502Z">
        <seg>&lt;g1&gt;デフォルト引数と名前付き引数&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Default values and named arguments&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170819Z" creationid="makenowjust" creationdate="20200413T170819Z">
        <seg>&lt;g1&gt;デフォルト引数と名前付き引数&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Discovering Shards&lt;/g1&gt;https://crystal-lang.org/community/#shards&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T152214Z" creationid="makenowjust" creationdate="20210726T152214Z">
        <seg>&lt;g1&gt;Shards の発見方法&lt;/g1&gt;https://crystal-lang.org/community/#shards&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Documenting code&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171514Z" creationid="makenowjust" creationdate="20200413T171514Z">
        <seg>&lt;g1&gt;コードのドキュメント化&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Donate&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T075937Z" creationid="makenowjust" creationdate="20200518T075937Z">
        <seg>&lt;g1&gt;寄付&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Enums&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T181700Z" creationid="makenowjust" creationdate="20200413T171018Z">
        <seg>&lt;g1&gt;列挙型 (Enum)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Everything is an object&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170716Z" creationid="makenowjust" creationdate="20200413T170716Z">
        <seg>&lt;g1&gt;すべてがオブジェクト&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Exception Handling&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000005Z" creationid="makenowjust" creationdate="20200414T000005Z">
        <seg>&lt;g1&gt;例外の処理&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Exception handling&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171138Z" creationid="makenowjust" creationdate="20200413T171138Z">
        <seg>&lt;g1&gt;例外の処理&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Extern&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114551Z" creationid="makenowjust" creationdate="20200510T114551Z">
        <seg>&lt;g1&gt;Extern&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;File&lt;/g1&gt; improvements &lt;g2&gt;#9015&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9015&lt;e6/&gt;, &lt;g3&gt;#9038&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9038&lt;e7/&gt;, &lt;g4&gt;#9037&lt;/g4&gt;https://github.com/crystal-lang/crystal/pull/9037&lt;e8/&gt;, &lt;g5&gt;#9257&lt;/g5&gt;https://github.com/crystal-lang/crystal/pull/9257&lt;e9/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T032105Z" creationid="makenowjust" creationdate="20200611T032105Z">
        <seg>&lt;g1&gt;File&lt;/g1&gt; の改善が&lt;g2&gt;#9015&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9015&lt;e6/&gt;、&lt;g3&gt;#9038&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9038&lt;e7/&gt;、&lt;g4&gt;#9037&lt;/g4&gt;https://github.com/crystal-lang/crystal/pull/9037&lt;e8/&gt;、&lt;g5&gt;#9257&lt;/g5&gt;https://github.com/crystal-lang/crystal/pull/9257&lt;e9/&gt;で行なわれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Flags&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114556Z" creationid="makenowjust" creationdate="20200510T114556Z">
        <seg>&lt;g1&gt;Flags&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Floats&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170111Z" creationid="makenowjust" creationdate="20200413T170111Z">
        <seg>&lt;g1&gt;浮動小数点数 (Float)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;For crystal package maintainers&lt;/g1&gt;, it is worth noticing that when building the compiler the &lt;g2&gt;CRYSTAL_CONFIG_PATH&lt;/g2&gt; only needs the path of the std-lib.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T134621Z" creationid="makenowjust" creationdate="20200610T134621Z">
        <seg>&lt;g1&gt;Crystal パッケージのメンテナにとって&lt;/g1&gt;、コンパイラをビルドする際に&lt;g2&gt;CRYSTAL_CONFIG_PATH&lt;/g2&gt; が標準ライブラリのパスのみを必要とするようになったという知らせは価値があるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Forum</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T105552Z" creationid="makenowjust" creationdate="20200518T105552Z">
        <seg>&lt;g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Forum support&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T072523Z" creationid="makenowjust" creationdate="20200518T072523Z">
        <seg>&lt;g1&gt;フォーラムでのサポート&lt;/g1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Fresh variables&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171219Z" creationid="makenowjust" creationdate="20200413T171219Z">
        <seg>&lt;g1&gt;フレッシュ変数&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Generics&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171005Z" creationid="makenowjust" creationdate="20200413T171005Z">
        <seg>&lt;g1&gt;ジェネリクス&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Getting started&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T155536Z" creationid="makenowjust" creationdate="20200516T081028Z">
        <seg>&lt;g1&gt;Getting Started&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;GitHub Actions&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T073506Z" creationid="makenowjust" creationdate="20210324T073506Z">
        <seg>&lt;g1&gt;GitHub Actions&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Governance document&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T150759Z" creationid="makenowjust" creationdate="20210726T150759Z">
        <seg>&lt;g1&gt;ガバナンス資料&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Guides&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T155545Z" creationid="makenowjust" creationdate="20200413T171535Z">
        <seg>&lt;g1&gt;ガイド&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;HTTP Server&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165754Z" creationid="makenowjust" creationdate="20200413T165754Z">
        <seg>&lt;g1&gt;HTTP サーバー&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Hash(K, V)#each&lt;/g1&gt; passes &lt;g2&gt;Tuple(K, V)&lt;/g2&gt; to the block so iterating key-value pairs works with auto-splatting:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T191907Z" creationid="makenowjust" creationdate="20200505T191808Z">
        <seg>例えば &lt;g1&gt;Hash(K, V)#each&lt;/g1&gt; はブロックに &lt;g2&gt;Tuple(K, V)&lt;/g2&gt; を渡すので、自動展開が上手く機能します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Hash(K, V)#each&lt;/g1&gt;http://crystal-lang.org/api/Hash.html#each(&amp;):Nil-instance-method&lt;e3/&gt; passes &lt;g2&gt;Tuple(K, V)&lt;/g2&gt; to the block so iterating key-value pairs works with auto-splatting:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T083223Z" creationid="makenowjust" creationdate="20200518T083223Z">
        <seg>例えば &lt;g1&gt;Hash(K, V)#each&lt;/g1&gt;http://crystal-lang.org/api/Hash.html#each(&amp;):Nil-instance-method&lt;e3/&gt; は &lt;g2&gt;Tuple(K, V)&lt;/g2&gt; を渡すので、自動展開が上手く機能します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Hash(K, V)#each&lt;/g1&gt;https://crystal-lang.org/api/latest/Hash.html#each(&amp;):Nil-instance-method&lt;e3/&gt; passes &lt;g2&gt;Tuple(K, V)&lt;/g2&gt; to the block so iterating key-value pairs works with auto-splatting:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094948Z" creationid="makenowjust" creationdate="20210324T094948Z">
        <seg>例えば &lt;g1&gt;Hash(K, V)#each&lt;/g1&gt;https://crystal-lang.org/api/latest/Hash.html#each(&amp;):Nil-instance-method&lt;e3/&gt; は &lt;g2&gt;Tuple(K, V)&lt;/g2&gt; を渡すので、自動展開が上手く機能します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Hash-like&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000452Z" creationid="makenowjust" creationdate="20200414T000452Z">
        <seg>&lt;g1&gt;Hashライク&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Hash&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170223Z" creationid="makenowjust" creationdate="20200413T170223Z">
        <seg>&lt;g1&gt;ハッシュ (Hash)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Hello World!&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170047Z" creationid="makenowjust" creationdate="20200413T170047Z">
        <seg>&lt;g1&gt;Hello World!&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Hello World&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T150813Z" creationid="makenowjust" creationdate="20210726T150813Z">
        <seg>&lt;g1&gt;Hello World&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Hirofumi Wakasugi&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093423Z" creationid="makenowjust" creationdate="20200518T093423Z">
        <seg>&lt;g1&gt;Hirofumi Wakasugi&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Home&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T150600Z" creationid="makenowjust" creationdate="20210726T150600Z">
        <seg>&lt;g1&gt;ホーム&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Hooks&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171212Z" creationid="makenowjust" creationdate="20200413T171212Z">
        <seg>&lt;g1&gt;フック&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Hosting on GitHub&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171608Z" creationid="makenowjust" creationdate="20200413T171608Z">
        <seg>&lt;g1&gt;GitHub でのホスト方法&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Hosting on GitLab&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171617Z" creationid="makenowjust" creationdate="20200413T171617Z">
        <seg>&lt;g1&gt;GitLab でのホスト方法&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;IDE Integrations&lt;/g1&gt;https://github.com/veelenga/awesome-crystal#editor-plugins&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T155335Z" creationid="makenowjust" creationdate="20210726T151426Z">
        <seg>&lt;g1&gt;IDE 統合&lt;/g1&gt;https://github.com/veelenga/awesome-crystal#editor-plugins&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;IO&lt;/g1&gt; behaviour was aligned in &lt;g2&gt;#9207&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9207&lt;e3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T032146Z" creationid="makenowjust" creationdate="20200611T032146Z">
        <seg>&lt;g1&gt;IO&lt;/g1&gt; の振舞いが&lt;g2&gt;#9207&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9207&lt;e3/&gt;でアラインメントされました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Inheritance&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170857Z" creationid="makenowjust" creationdate="20200413T170857Z">
        <seg>&lt;g1&gt;継承&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Install the latest Crystal release&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T064703Z" creationid="makenowjust" creationdate="20200518T064656Z">
        <seg>&lt;g1&gt;最新のリリースの Crystal をインストールしてください&lt;/g1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Install&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T110054Z" creationid="makenowjust" creationdate="20200518T110054Z">
        <seg>&lt;g1&gt;インストール&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Install&lt;/g1&gt; &lt;g2&gt;Learn&lt;/g2&gt; &lt;g3&gt;Try Online&lt;/g3&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210504T120648Z" creationid="makenowjust" creationdate="20210504T120648Z">
        <seg>&lt;g1&gt;Install&lt;/g1&gt; &lt;g2&gt;Learn&lt;/g2&gt; &lt;g3&gt;Try Online&lt;/g3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Int16&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182044Z" creationid="makenowjust" creationdate="20200419T182044Z">
        <seg>&lt;g1&gt;Int16&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Int16&lt;/g1&gt;http://crystal-lang.org/api/Int16.html&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T085433Z" creationid="makenowjust" creationdate="20200518T085433Z">
        <seg>&lt;g1&gt;Int16&lt;/g1&gt;http://crystal-lang.org/api/Int16.html&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Int16&lt;/g1&gt;https://crystal-lang.org/api/latest/Int16.html&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T082356Z" creationid="makenowjust" creationdate="20210324T082356Z">
        <seg>&lt;g1&gt;Int16&lt;/g1&gt;https://crystal-lang.org/api/latest/Int16.html&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Int32&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182048Z" creationid="makenowjust" creationdate="20200419T182048Z">
        <seg>&lt;g1&gt;Int32&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Int32&lt;/g1&gt;http://crystal-lang.org/api/Int32.html&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T085435Z" creationid="makenowjust" creationdate="20200518T085435Z">
        <seg>&lt;g1&gt;Int32&lt;/g1&gt;http://crystal-lang.org/api/Int32.html&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Int32&lt;/g1&gt;https://crystal-lang.org/api/latest/Int32.html&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T082358Z" creationid="makenowjust" creationdate="20210324T082358Z">
        <seg>&lt;g1&gt;Int32&lt;/g1&gt;https://crystal-lang.org/api/latest/Int32.html&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Int64&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182052Z" creationid="makenowjust" creationdate="20200419T182052Z">
        <seg>&lt;g1&gt;Int64&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Int64&lt;/g1&gt;http://crystal-lang.org/api/Int64.html&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T085436Z" creationid="makenowjust" creationdate="20200518T085436Z">
        <seg>&lt;g1&gt;Int64&lt;/g1&gt;http://crystal-lang.org/api/Int64.html&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Int64&lt;/g1&gt;https://crystal-lang.org/api/latest/Int64.html&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T082400Z" creationid="makenowjust" creationdate="20210324T082400Z">
        <seg>&lt;g1&gt;Int64&lt;/g1&gt;https://crystal-lang.org/api/latest/Int64.html&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Int8&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182036Z" creationid="makenowjust" creationdate="20200419T182036Z">
        <seg>&lt;g1&gt;Int8&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Int8&lt;/g1&gt;http://crystal-lang.org/api/Int8.html&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T085432Z" creationid="makenowjust" creationdate="20200518T085432Z">
        <seg>&lt;g1&gt;Int8&lt;/g1&gt;http://crystal-lang.org/api/Int8.html&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Int8&lt;/g1&gt;https://crystal-lang.org/api/latest/Int8.html&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T082355Z" creationid="makenowjust" creationdate="20210324T082355Z">
        <seg>&lt;g1&gt;Int8&lt;/g1&gt;https://crystal-lang.org/api/latest/Int8.html&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Integers&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170058Z" creationid="makenowjust" creationdate="20200413T170058Z">
        <seg>&lt;g1&gt;整数 (Integer)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Introduction&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165702Z" creationid="makenowjust" creationdate="20200413T165702Z">
        <seg>&lt;g1&gt;導入&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Jean-Baptiste Barth&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093424Z" creationid="makenowjust" creationdate="20200518T093424Z">
        <seg>&lt;g1&gt;Jean-Baptiste Barth&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Klass&lt;/g1&gt; is a class, so it is passed by reference to &lt;g2&gt;modify&lt;/g2&gt;, and &lt;g3&gt;object.array = ["new"]&lt;/g3&gt; saves the reference to the newly created array in the original &lt;g4&gt;klass&lt;/g4&gt; object, not in the copy as it was with the &lt;g5&gt;strukt&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T174634Z" creationid="makenowjust" creationdate="20200505T174634Z">
        <seg>&lt;g1&gt;Klass&lt;/g1&gt; はクラスのため &lt;g2&gt;modify&lt;/g2&gt; に参照渡しされ、&lt;g3&gt;object.array = ["new"]&lt;/g3&gt; の行で、元の &lt;g4&gt;klass&lt;/g4&gt; オブジェクトに新しい配列が保存されます。この点で、コピーしたものに格納していた、&lt;g5&gt;strukt&lt;/g5&gt; とは異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Kris Leech&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093425Z" creationid="makenowjust" creationdate="20200518T093425Z">
        <seg>&lt;g1&gt;Kris Leech&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Language Reference&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T151728Z" creationid="makenowjust" creationdate="20210726T151728Z">
        <seg>&lt;g1&gt;言語リファレンス&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Learn how to bind to C libraries&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T072746Z" creationid="makenowjust" creationdate="20200518T072746Z">
        <seg>&lt;g1&gt;C ライブラリのバインディング方法について学ぶ&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Learn&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T110100Z" creationid="makenowjust" creationdate="20200518T110100Z">
        <seg>&lt;g1&gt;学ぶ&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Lib&lt;/g1&gt; names are prefixed with &lt;g2&gt;Lib&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T072016Z" creationid="makenowjust" creationdate="20200412T204137Z">
        <seg>ライブラリ(&lt;g1&gt;Lib&lt;/g1&gt;)の名前は先頭に &lt;g2&gt;Lib&lt;/g2&gt; をつけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Link&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114550Z" creationid="makenowjust" creationdate="20200510T114550Z">
        <seg>&lt;g1&gt;Link&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Linuxbrew&lt;/g1&gt; is also available.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112527Z" creationid="makenowjust" creationdate="20200518T112527Z">
        <seg>&lt;g1&gt;Linuxbrew&lt;/g1&gt; も使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Literals&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165917Z" creationid="makenowjust" creationdate="20200413T165917Z">
        <seg>&lt;g1&gt;リテラル&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Local Variables&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T235903Z" creationid="makenowjust" creationdate="20200413T235903Z">
        <seg>&lt;g1&gt;ローカル変数&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Local variables&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170442Z" creationid="makenowjust" creationdate="20200413T170442Z">
        <seg>&lt;g1&gt;ローカル変数&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Low Level Primitives&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000026Z" creationid="makenowjust" creationdate="20200414T000026Z">
        <seg>&lt;g1&gt;低レベルプリミティブ&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Low-level primitives&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171329Z" creationid="makenowjust" creationdate="20200413T171329Z">
        <seg>&lt;g1&gt;低レベルプリミティブ&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Luis Lavena&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093426Z" creationid="makenowjust" creationdate="20200518T093426Z">
        <seg>&lt;g1&gt;Luis Lavena&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Macro methods&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171210Z" creationid="makenowjust" creationdate="20200413T171210Z">
        <seg>&lt;g1&gt;マクロメソッド&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Macros&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171206Z" creationid="makenowjust" creationdate="20200413T171206Z">
        <seg>&lt;g1&gt;マクロ&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Math&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T150821Z" creationid="makenowjust" creationdate="20210726T150821Z">
        <seg>&lt;g1&gt;数学関連&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Meet all&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200620T122216Z" creationid="makenowjust" creationdate="20200518T072806Z">
        <seg>&lt;g1&gt;一覧&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Merging PRs&lt;/g1&gt;https://github.com/crystal-lang/crystal/wiki/Merging-PRs&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T153555Z" creationid="makenowjust" creationdate="20210726T153555Z">
        <seg>&lt;g1&gt;PR のマージについて&lt;/g1&gt;https://github.com/crystal-lang/crystal/wiki/Merging-PRs&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Method arguments&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170847Z" creationid="makenowjust" creationdate="20200413T170847Z">
        <seg>&lt;g1&gt;メソッドの引数&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Method names&lt;/g1&gt; are underscore-cased.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T071911Z" creationid="makenowjust" creationdate="20200412T203648Z">
        <seg>&lt;g1&gt;メソッド名&lt;/g1&gt; はアンダースコア区切りとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Methods and instance variables&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170750Z" creationid="makenowjust" creationdate="20200413T170750Z">
        <seg>&lt;g1&gt;メソッドとインスタンス変数&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Methods&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T150834Z" creationid="makenowjust" creationdate="20210726T150834Z">
        <seg>&lt;g1&gt;メソッド&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Modules&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170957Z" creationid="makenowjust" creationdate="20200413T170957Z">
        <seg>&lt;g1&gt;モジュール&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;More articles&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T072822Z" creationid="makenowjust" creationdate="20200518T072822Z">
        <seg>&lt;g1&gt;さらに記事を見る&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;More release notes&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T072832Z" creationid="makenowjust" creationdate="20200518T072832Z">
        <seg>&lt;g1&gt;さらにリリースノートを見る&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;MyBox.new(value)&lt;/g1&gt; delegates to &lt;g2&gt;initialize(@value : T)&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T142908Z" creationid="makenowjust" creationdate="20200504T142908Z">
        <seg>&lt;g1&gt;MyBox.new(value)&lt;/g1&gt; は &lt;g2&gt;initialize(@value : T)&lt;/g2&gt; を呼び出す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;MyType{"foo" =&gt; "bar"}&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000456Z" creationid="makenowjust" creationdate="20200414T000456Z">
        <seg>&lt;g1&gt;MyType{"foo" =&gt; "bar"}&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;NOTE:&lt;/g1&gt; &lt;g2&gt;TypeNode.instance_vars&lt;/g2&gt; currently only works in the context of an instance/class method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T112325Z" creationid="makenowjust" creationdate="20200510T112314Z">
        <seg>&lt;g1&gt;注意:&lt;/g1&gt; &lt;g2&gt;TypeNode.instance_vars&lt;/g2&gt; は今のところ、インスタンス/クラスメソッドのコンテキストでのみ動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;NOTE:&lt;/g1&gt; Building fully statical linked executables is currently only supported on Alpine Linux.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153948Z" creationid="makenowjust" creationdate="20200419T152804Z">
        <seg>&lt;g1&gt;注意:&lt;/g1&gt; 静的リンクした実行可能ファイルのビルドは現在Alpine Linux上でのみサポートされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;NOTE:&lt;/g1&gt; If multiple annotations of the same type are applied, the &lt;g2&gt;.annotation&lt;/g2&gt; method will return the &lt;g3&gt;last&lt;/g3&gt; one.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T111908Z" creationid="makenowjust" creationdate="20200510T111836Z">
        <seg>&lt;g1&gt;注意:&lt;/g1&gt; もし複数の同じ型のアノテーションが適用されていた場合、&lt;g2&gt;.annotation&lt;/g2&gt; は&lt;g3&gt;最後&lt;/g3&gt;のものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;NOTE:&lt;/g1&gt; Inheriting documentation only works on &lt;g2&gt;instance&lt;/g2&gt;, non-constructor methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214227Z" creationid="makenowjust" creationdate="20200412T214227Z">
        <seg>&lt;g1&gt;NOTE:&lt;/g1&gt; ドキュメントの継承はコンストラクタメソッドではなく、&lt;g2&gt;インスタンスメソッド&lt;/g2&gt;でのみ機能します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;NOTE:&lt;/g1&gt; Range literals are often wrapped in parentheses, for example if it is meant to be used as the receiver of a call.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T034529Z" creationid="makenowjust" creationdate="20200421T034529Z">
        <seg>&lt;g1&gt;注意:&lt;/g1&gt; 範囲リテラルをレシーバにしてメソッド呼び出しを続けるような場合、範囲リテラルを括弧で囲う必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;NamedTuple&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170323Z" creationid="makenowjust" creationdate="20200413T170323Z">
        <seg>&lt;g1&gt;名前付きタプル (NamedTuple)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Nil&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170248Z" creationid="makenowjust" creationdate="20200413T170248Z">
        <seg>&lt;g1&gt;Nil&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;NoInline&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114554Z" creationid="makenowjust" creationdate="20200510T114554Z">
        <seg>&lt;g1&gt;NoInline&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;NoReturn&lt;/g1&gt; can be explicitly set as return type of a method or function definition but will usually be inferred by the compiler.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T084520Z" creationid="makenowjust" creationdate="20200430T143038Z">
        <seg>&lt;g1&gt;NoReturn&lt;/g1&gt; を明示的にメソッドもしくは関数の戻り値の型制約として指定することもできますが、通常はコンパイラによって推論されるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;NoReturn&lt;/g1&gt;: similar to &lt;g2&gt;Void&lt;/g2&gt;, but the compiler understands that no code can be executed after that invocation.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T032321Z" creationid="makenowjust" creationdate="20200511T032321Z">
        <seg>&lt;g1&gt;NoReturn&lt;/g1&gt;: &lt;g2&gt;Void&lt;/g2&gt; と似ているが、呼び出し後に続くコードを実行しないことをコンパイラが理解します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Note:&lt;/g1&gt; The C &lt;g2&gt;char&lt;/g2&gt; type is &lt;g3&gt;UInt8&lt;/g3&gt; in Crystal, so a &lt;g4&gt;char*&lt;/g4&gt; or a &lt;g5&gt;const char*&lt;/g5&gt; is &lt;g6&gt;UInt8*&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T032542Z" creationid="makenowjust" creationdate="20200511T032542Z">
        <seg>&lt;g1&gt;注意:&lt;/g1&gt; C の &lt;g2&gt;char&lt;/g2&gt; 型は Crystal では &lt;g3&gt;UInt8&lt;/g3&gt; です。なので、&lt;g4&gt;char*&lt;/g4&gt; や &lt;g5&gt;const char*&lt;/g5&gt; は &lt;g6&gt;UInt8*&lt;/g6&gt; になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Note:&lt;/g1&gt; The main routine is simply the program itself.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080855Z" creationid="makenowjust" creationdate="20200516T080855Z">
        <seg>&lt;g1&gt;注意:&lt;/g1&gt; メインの処理は単純にプログラム自身となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Note&lt;/g1&gt;: a &lt;g2&gt;new&lt;/g2&gt; method might be redefined by a type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T140127Z" creationid="makenowjust" creationdate="20200427T140127Z">
        <seg>&lt;g1&gt;注意&lt;/g1&gt;: &lt;g2&gt;new&lt;/g2&gt; メソッドが再定義されている場合もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Notes&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T140209Z" creationid="makenowjust" creationdate="20200504T140209Z">
        <seg>&lt;g1&gt;注意&lt;/g1&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Online Playgrounds&lt;/g1&gt;https://github.com/crystal-lang/crystal/wiki/Online-playgrounds&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T155334Z" creationid="makenowjust" creationdate="20210726T151416Z">
        <seg>&lt;g1&gt;オンラインのプレイグラウンド&lt;/g1&gt;https://github.com/crystal-lang/crystal/wiki/Online-playgrounds&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Operators&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170850Z" creationid="makenowjust" creationdate="20200413T170850Z">
        <seg>&lt;g1&gt;演算子&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Overloading&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170805Z" creationid="makenowjust" creationdate="20200413T170805Z">
        <seg>&lt;g1&gt;オーバーロード&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Overview and Examples&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165732Z" creationid="makenowjust" creationdate="20200413T165732Z">
        <seg>&lt;g1&gt;概要と例&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Packed&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114552Z" creationid="makenowjust" creationdate="20200510T114552Z">
        <seg>&lt;g1&gt;Packed&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Performance&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171541Z" creationid="makenowjust" creationdate="20200413T171541Z">
        <seg>&lt;g1&gt;パフォーマンス&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Platform Support&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T150615Z" creationid="makenowjust" creationdate="20210726T150615Z">
        <seg>&lt;g1&gt;プラットフォームサポート&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Proc literal&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171045Z" creationid="makenowjust" creationdate="20200413T171045Z">
        <seg>&lt;g1&gt;Proc リテラル&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Proc&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171652Z" creationid="makenowjust" creationdate="20200413T171652Z">
        <seg>&lt;g1&gt;Proc&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Process&lt;/g1&gt; was implemented &lt;g2&gt;#9047&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9047&lt;e8/&gt;, &lt;g3&gt;#9021&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9021&lt;e9/&gt;, &lt;g4&gt;#9122&lt;/g4&gt;https://github.com/crystal-lang/crystal/pull/9122&lt;e10/&gt;, &lt;g5&gt;#9112&lt;/g5&gt;https://github.com/crystal-lang/crystal/pull/9112&lt;e11/&gt;, &lt;g6&gt;#9149&lt;/g6&gt;https://github.com/crystal-lang/crystal/pull/9149&lt;e12/&gt;, &lt;g7&gt;#9310&lt;/g7&gt;https://github.com/crystal-lang/crystal/pull/9310&lt;e13/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T032201Z" creationid="makenowjust" creationdate="20200611T032201Z">
        <seg>&lt;g1&gt;Process&lt;/g1&gt; が&lt;g2&gt;#9047&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9047&lt;e8/&gt;と&lt;g3&gt;#9021&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9021&lt;e9/&gt;、&lt;g4&gt;#9122&lt;/g4&gt;https://github.com/crystal-lang/crystal/pull/9122&lt;e10/&gt;、&lt;g5&gt;#9112&lt;/g5&gt;https://github.com/crystal-lang/crystal/pull/9112&lt;e11/&gt;、&lt;g6&gt;#9149&lt;/g6&gt;https://github.com/crystal-lang/crystal/pull/9149&lt;e12/&gt;、&lt;g7&gt;#9310&lt;/g7&gt;https://github.com/crystal-lang/crystal/pull/9310&lt;e13/&gt;で実装されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Raises&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114555Z" creationid="makenowjust" creationdate="20200510T114555Z">
        <seg>&lt;g1&gt;Raises&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Range&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170229Z" creationid="makenowjust" creationdate="20200413T170229Z">
        <seg>&lt;g1&gt;範囲 (Range)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Read more about Crystal's concurrency model&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T072734Z" creationid="makenowjust" creationdate="20200518T072734Z">
        <seg>&lt;g1&gt;Crystal の並列モデルについてより詳しく見る&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Read more about Crystal's type system&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="nsfisis" changedate="20201127T203223Z" creationid="makenowjust" creationdate="20200518T072609Z">
        <seg>&lt;g1&gt;Crystal の型システムについて、より詳しく見る&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Read more about Shards in the repo&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T072757Z" creationid="makenowjust" creationdate="20200518T072757Z">
        <seg>&lt;g1&gt;Shards のリポジトリはこちら&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Read more about macros&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T072717Z" creationid="makenowjust" creationdate="20200518T072717Z">
        <seg>&lt;g1&gt;マクロについてより詳しく見る&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Regex&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170308Z" creationid="makenowjust" creationdate="20200413T170308Z">
        <seg>&lt;g1&gt;正規表現 (Regex)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Release Notes&lt;/g1&gt;https://crystal-lang.org/blog/#release_notes&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T152734Z" creationid="makenowjust" creationdate="20210726T152727Z">
        <seg>&lt;g1&gt;リリースノート&lt;/g1&gt;https://ja.crystal-lang.org/blog/#release_notes&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Requiring Files&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T235918Z" creationid="makenowjust" creationdate="20200413T235918Z">
        <seg>&lt;g1&gt;ファイルの require&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Requiring files&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T235950Z" creationid="makenowjust" creationdate="20200413T170658Z">
        <seg>&lt;g1&gt;ファイルの require&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Return types&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170839Z" creationid="makenowjust" creationdate="20200413T170839Z">
        <seg>&lt;g1&gt;戻り値の型&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;ReturnsTwice&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114554Z" creationid="makenowjust" creationdate="20200510T114554Z">
        <seg>&lt;g1&gt;ReturnsTwice&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Runner options:&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164144Z" creationid="makenowjust" creationdate="20200419T164144Z">
        <seg>&lt;g1&gt;spec ランナーに対するオプション:&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Scott Fleckenstein&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093427Z" creationid="makenowjust" creationdate="20200518T093427Z">
        <seg>&lt;g1&gt;Scott Fleckenstein&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Serdar Dogruyol&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093428Z" creationid="makenowjust" creationdate="20200518T093428Z">
        <seg>&lt;g1&gt;Serdar Dogruyol&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Sergey Kucher&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093428Z" creationid="makenowjust" creationdate="20200518T093428Z">
        <seg>&lt;g1&gt;Sergey Kucher&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Set{1, 2, 3}&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000446Z" creationid="makenowjust" creationdate="20200414T000446Z">
        <seg>&lt;g1&gt;Set{1, 2, 3}&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Shards 0.12.0&lt;/g1&gt;https://github.com/crystal-lang/shards/releases/tag/v0.12.0&lt;e2/&gt; has been released!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T103312Z" creationid="makenowjust" creationdate="20200809T103312Z">
        <seg>&lt;g1&gt;Shards 0.12.0&lt;/g1&gt;https://github.com/crystal-lang/shards/releases/tag/v0.12.0&lt;e2/&gt; がリリースされました！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Shards Manual&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T152226Z" creationid="makenowjust" creationdate="20210726T152226Z">
        <seg>&lt;g1&gt;Shards のマニュアル&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Show all&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T072837Z" creationid="makenowjust" creationdate="20200518T072837Z">
        <seg>&lt;g1&gt;すべて表示&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Simon George&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093429Z" creationid="makenowjust" creationdate="20200518T093429Z">
        <seg>&lt;g1&gt;Simon George&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Snapcraft&lt;/g1&gt; and &lt;g2&gt;Linuxbrew&lt;/g2&gt; are also available.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T101718Z" creationid="makenowjust" creationdate="20200518T101718Z">
        <seg>&lt;g1&gt;Snapcraft&lt;/g1&gt; や &lt;g2&gt;Linuxbrew&lt;/g2&gt; も使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Snapcraft&lt;/g1&gt; is also available.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112359Z" creationid="makenowjust" creationdate="20200518T112359Z">
        <seg>&lt;g1&gt;Snapcraft&lt;/g1&gt; も使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Specification&lt;/g1&gt;https://github.com/crystal-lang/shards/blob/master/docs/shard.yml.adoc&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T152219Z" creationid="makenowjust" creationdate="20210726T152219Z">
        <seg>&lt;g1&gt;仕様&lt;/g1&gt;https://github.com/crystal-lang/shards/blob/master/docs/shard.yml.adoc&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Splats and tuples&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T092157Z" creationid="makenowjust" creationdate="20200413T170828Z">
        <seg>&lt;g1&gt;スプラット展開とタプル&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Standard Library API&lt;/g1&gt;https://crystal-lang.org/api&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T151750Z" creationid="makenowjust" creationdate="20210726T151750Z">
        <seg>&lt;g1&gt;標準ライブラリの API ドキュメント&lt;/g1&gt;https://crystal-lang.org/api&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Start learning Crystal with the Language Reference&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T072601Z" creationid="makenowjust" creationdate="20200518T072601Z">
        <seg>&lt;g1&gt;言語リファレンスで Crystal の学習をはじめましょう&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Static Linking&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T073514Z" creationid="makenowjust" creationdate="20210324T073514Z">
        <seg>&lt;g1&gt;静的リンク&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;String&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170127Z" creationid="makenowjust" creationdate="20200413T170127Z">
        <seg>&lt;g1&gt;文字列 (String)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Strings&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T150825Z" creationid="makenowjust" creationdate="20210726T150825Z">
        <seg>&lt;g1&gt;文字列&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Structs&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171012Z" creationid="makenowjust" creationdate="20200413T171012Z">
        <seg>&lt;g1&gt;構造体 (Struct)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Symbol&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170139Z" creationid="makenowjust" creationdate="20200413T170139Z">
        <seg>&lt;g1&gt;シンボル (Symbol)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Syntax and semantics&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165907Z" creationid="makenowjust" creationdate="20200413T165907Z">
        <seg>&lt;g1&gt;構文とその意味&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;T&lt;/g1&gt; isn't bound to a type yet, so the compiler binds it to the type of the given argument</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T142946Z" creationid="makenowjust" creationdate="20200504T142946Z">
        <seg>&lt;g1&gt;T&lt;/g1&gt; の型はまだ設定されていないので、この引数の型に設定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Ternary if&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170605Z" creationid="makenowjust" creationdate="20200413T170605Z">
        <seg>&lt;g1&gt;3項演算子&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Testing&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171547Z" creationid="makenowjust" creationdate="20200413T171547Z">
        <seg>&lt;g1&gt;テスト&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;The Program&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170723Z" creationid="makenowjust" creationdate="20200413T170723Z">
        <seg>&lt;g1&gt;プログラム&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;The shards command&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165723Z" creationid="makenowjust" creationdate="20200413T165723Z">
        <seg>&lt;g1&gt;shards コマンド&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;The spec&lt;/g1&gt;https://github.com/crystal-lang/shards/blob/master/SPEC.md&lt;e2/&gt; is your rulebook.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T162307Z" creationid="makenowjust" creationdate="20200527T162307Z">
        <seg>&lt;g1&gt;仕様書&lt;/g1&gt;https://github.com/crystal-lang/shards/blob/master/SPEC.md&lt;e2/&gt;を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;The spec&lt;/g1&gt;https://github.com/crystal-lang/shards/blob/master/docs/shard.yml.adoc&lt;e2/&gt; is your rulebook.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100235Z" creationid="makenowjust" creationdate="20210324T100235Z">
        <seg>&lt;g1&gt;仕様書&lt;/g1&gt;https://github.com/crystal-lang/shards/blob/master/docs/shard.yml.adoc&lt;e2/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;ThreadLocal&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114551Z" creationid="makenowjust" creationdate="20200510T114551Z">
        <seg>&lt;g1&gt;ThreadLocal&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Transactions&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171531Z" creationid="makenowjust" creationdate="20200413T171531Z">
        <seg>&lt;g1&gt;トランザクション&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Travis CI&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T073507Z" creationid="makenowjust" creationdate="20210324T073507Z">
        <seg>&lt;g1&gt;Travis CI&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Truthy and falsey values&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170511Z" creationid="makenowjust" creationdate="20200413T170511Z">
        <seg>&lt;g1&gt;真になる値と偽になる値&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Tuple&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170314Z" creationid="makenowjust" creationdate="20200413T170314Z">
        <seg>&lt;g1&gt;タプル (Tuple)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Type Grammar&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000012Z" creationid="makenowjust" creationdate="20200414T000012Z">
        <seg>&lt;g1&gt;型の文法&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Type Reflection&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000018Z" creationid="makenowjust" creationdate="20200414T000018Z">
        <seg>&lt;g1&gt;型のリフレクション&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Type grammar&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171144Z" creationid="makenowjust" creationdate="20200413T171144Z">
        <seg>&lt;g1&gt;型の文法&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Type inference&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170755Z" creationid="makenowjust" creationdate="20200413T170755Z">
        <seg>&lt;g1&gt;型推論&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Type names&lt;/g1&gt; are camelcased.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T071901Z" creationid="makenowjust" creationdate="20200412T203618Z">
        <seg>&lt;g1&gt;型の名前&lt;/g1&gt; はキャメルケースとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Type reflection&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171151Z" creationid="makenowjust" creationdate="20200413T171151Z">
        <seg>&lt;g1&gt;型のリフレクション&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Type restrictions&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170833Z" creationid="makenowjust" creationdate="20200413T170833Z">
        <seg>&lt;g1&gt;型制約&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Types and methods&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170705Z" creationid="makenowjust" creationdate="20200413T170705Z">
        <seg>&lt;g1&gt;型とメソッド&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;UInt16&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182104Z" creationid="makenowjust" creationdate="20200419T182104Z">
        <seg>&lt;g1&gt;UInt16&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;UInt16&lt;/g1&gt;http://crystal-lang.org/api/UInt16.html&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T085439Z" creationid="makenowjust" creationdate="20200518T085439Z">
        <seg>&lt;g1&gt;UInt16&lt;/g1&gt;http://crystal-lang.org/api/UInt16.html&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;UInt16&lt;/g1&gt;https://crystal-lang.org/api/latest/UInt16.html&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T082408Z" creationid="makenowjust" creationdate="20210324T082408Z">
        <seg>&lt;g1&gt;UInt16&lt;/g1&gt;https://crystal-lang.org/api/latest/UInt16.html&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;UInt32&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182108Z" creationid="makenowjust" creationdate="20200419T182108Z">
        <seg>&lt;g1&gt;UInt32&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;UInt32&lt;/g1&gt;http://crystal-lang.org/api/UInt32.html&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T085442Z" creationid="makenowjust" creationdate="20200518T085442Z">
        <seg>&lt;g1&gt;UInt32&lt;/g1&gt;http://crystal-lang.org/api/UInt32.html&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;UInt32&lt;/g1&gt;https://crystal-lang.org/api/latest/UInt32.html&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T082406Z" creationid="makenowjust" creationdate="20210324T082406Z">
        <seg>&lt;g1&gt;UInt32&lt;/g1&gt;https://crystal-lang.org/api/latest/UInt32.html&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;UInt64&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182111Z" creationid="makenowjust" creationdate="20200419T182111Z">
        <seg>&lt;g1&gt;UInt64&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;UInt64&lt;/g1&gt;http://crystal-lang.org/api/UInt64.html&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T085443Z" creationid="makenowjust" creationdate="20200518T085443Z">
        <seg>&lt;g1&gt;UInt64&lt;/g1&gt;http://crystal-lang.org/api/UInt64.html&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;UInt64&lt;/g1&gt;https://crystal-lang.org/api/latest/UInt64.html&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T082410Z" creationid="makenowjust" creationdate="20210324T082410Z">
        <seg>&lt;g1&gt;UInt64&lt;/g1&gt;https://crystal-lang.org/api/latest/UInt64.html&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;UInt8&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182058Z" creationid="makenowjust" creationdate="20200419T182058Z">
        <seg>&lt;g1&gt;UInt8&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;UInt8&lt;/g1&gt;http://crystal-lang.org/api/UInt8.html&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T085437Z" creationid="makenowjust" creationdate="20200518T085437Z">
        <seg>&lt;g1&gt;UInt8&lt;/g1&gt;http://crystal-lang.org/api/UInt8.html&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;UInt8&lt;/g1&gt;https://crystal-lang.org/api/latest/UInt8.html&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T082402Z" creationid="makenowjust" creationdate="20210324T082402Z">
        <seg>&lt;g1&gt;UInt8&lt;/g1&gt;https://crystal-lang.org/api/latest/UInt8.html&lt;e2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Uninitialized variable declaration&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171351Z" creationid="makenowjust" creationdate="20200413T171345Z">
        <seg>&lt;g1&gt;初期化しない変数宣言&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Union types&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170800Z" creationid="makenowjust" creationdate="20200413T170800Z">
        <seg>&lt;g1&gt;ユニオン型&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Unsafe code&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171456Z" creationid="makenowjust" creationdate="20200413T171456Z">
        <seg>&lt;g1&gt;安全でない (unsafe) コード&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Using CircleCI&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171640Z" creationid="makenowjust" creationdate="20200413T171640Z">
        <seg>&lt;g1&gt;CircleCI の利用&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Using Travis CI&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171650Z" creationid="makenowjust" creationdate="20200413T171633Z">
        <seg>&lt;g1&gt;Travis CI の利用&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Using the compiler&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165957Z" creationid="makenowjust" creationdate="20200413T165715Z">
        <seg>&lt;g1&gt;コンパイラの使い方&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Variable names&lt;/g1&gt; are underscore-cased.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T071914Z" creationid="makenowjust" creationdate="20200412T203731Z">
        <seg>&lt;g1&gt;変数名&lt;/g1&gt; はアンダースコア区切りとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Variables&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171421Z" creationid="makenowjust" creationdate="20200413T171421Z">
        <seg>&lt;g1&gt;変数&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Virtual and abstract types&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170915Z" creationid="makenowjust" creationdate="20200413T170915Z">
        <seg>&lt;g1&gt;virtual 型と abstract 型&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Visibility&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170854Z" creationid="makenowjust" creationdate="20200413T170854Z">
        <seg>&lt;g1&gt;可視性&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Void&lt;/g1&gt;: the absence of a return value.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T032324Z" creationid="makenowjust" creationdate="20200511T032231Z">
        <seg>&lt;g1&gt;Void&lt;/g1&gt;: 戻り値がないことを意味します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;What's a Shard?&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200521T041525Z" creationid="makenowjust" creationdate="20200521T041432Z">
        <seg>&lt;g1&gt;shard とは？&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Writing Shards&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200521T041350Z" creationid="makenowjust" creationdate="20200413T171558Z">
        <seg>&lt;g1&gt;shard の作り方&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Yukihiro "Matz" Matsumoto&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093430Z" creationid="makenowjust" creationdate="20200518T093430Z">
        <seg>&lt;g1&gt;Yukihiro "Matz" Matsumoto&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;[1, 2, 3]&lt;/g1&gt;, &lt;g2&gt;[1, 2, 3] of Int32&lt;/g2&gt;, &lt;g3&gt;%w(one two three)&lt;/g3&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000434Z" creationid="makenowjust" creationdate="20200414T000434Z">
        <seg>&lt;g1&gt;[1, 2, 3]&lt;/g1&gt;, &lt;g2&gt;[1, 2, 3] of Int32&lt;/g2&gt;, &lt;g3&gt;%w(one two three)&lt;/g3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;[]&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T101328Z" creationid="makenowjust" creationdate="20200502T101328Z">
        <seg>&lt;g1&gt;[]&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;[]&lt;/g1&gt;, &lt;g2&gt;[]?&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084656Z" creationid="makenowjust" creationdate="20200502T084656Z">
        <seg>&lt;g1&gt;[]&lt;/g1&gt;, &lt;g2&gt;[]?&lt;/g2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;[]=&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T094510Z" creationid="makenowjust" creationdate="20200502T094510Z">
        <seg>&lt;g1&gt;[]=&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;[]?&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T101334Z" creationid="makenowjust" creationdate="20200502T101334Z">
        <seg>&lt;g1&gt;[]?&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;^&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090536Z" creationid="makenowjust" creationdate="20200502T090536Z">
        <seg>&lt;g1&gt;^&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;^=&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100744Z" creationid="makenowjust" creationdate="20200502T100744Z">
        <seg>&lt;g1&gt;^=&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;__DIR__&lt;/g1&gt; references the full path to the directory where the currently executing crystal file is located.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T180833Z" creationid="makenowjust" creationdate="20200505T180833Z">
        <seg>&lt;g1&gt;__DIR__&lt;/g1&gt; は現在処理しているソースコードのあるディレクトリの完全なパスを参照します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;__END_LINE__&lt;/g1&gt; is the line number of the &lt;g2&gt;end&lt;/g2&gt; of the calling block.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T180623Z" creationid="makenowjust" creationdate="20200505T180623Z">
        <seg>&lt;g1&gt;__END_LINE__&lt;/g1&gt; は呼び出しのブロックの &lt;g2&gt;end&lt;/g2&gt; のある行番号となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;__FILE__&lt;/g1&gt; references the full path to the currently executing crystal file.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T180814Z" creationid="makenowjust" creationdate="20200505T180721Z">
        <seg>&lt;g1&gt;__FILE__&lt;/g1&gt; は現在処理しているソースコードのファイル名の完全なパスを参照します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;__LINE__&lt;/g1&gt; is the current line number in the currently executing crystal file.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T180724Z" creationid="makenowjust" creationdate="20200505T180504Z">
        <seg>&lt;g1&gt;__LINE__&lt;/g1&gt; は現在処理しているソースコードの現在の行番号になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;a &amp;&amp;= b&lt;/g1&gt; transforms to &lt;g2&gt;a &amp;&amp; (a = b)&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T095145Z" creationid="makenowjust" creationdate="20200502T095145Z">
        <seg>&lt;g1&gt;a &amp;&amp;= b&lt;/g1&gt; は &lt;g2&gt;a &amp;&amp; (a = b)&lt;/g2&gt; と変換される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;a = 1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T094459Z" creationid="makenowjust" creationdate="20200502T094459Z">
        <seg>&lt;g1&gt;a = 1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;a == b ?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T092259Z" creationid="makenowjust" creationdate="20200502T092259Z">
        <seg>&lt;g1&gt;a == b ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;a ||= b&lt;/g1&gt; transforms to &lt;g2&gt;a || (a = b)&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T095138Z" creationid="makenowjust" creationdate="20200502T095138Z">
        <seg>&lt;g1&gt;a ||= b&lt;/g1&gt; は &lt;g2&gt;a || (a = b)&lt;/g2&gt; と変換される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;a.b = 1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T094509Z" creationid="makenowjust" creationdate="20200502T094509Z">
        <seg>&lt;g1&gt;a.b = 1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;a[0] = 1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T094515Z" creationid="makenowjust" creationdate="20200502T094515Z">
        <seg>&lt;g1&gt;a[0] = 1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;a[i] &amp;&amp;= b&lt;/g1&gt; transforms to &lt;g2&gt;a[i] = (a[i]?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T095344Z" creationid="makenowjust" creationdate="20200502T095344Z">
        <seg>&lt;g1&gt;a[i] &amp;&amp;= b&lt;/g1&gt; は &lt;g2&gt;a[i] = (a[i]? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;a[i] ||= b&lt;/g1&gt; transforms to &lt;g2&gt;a[i] = (a[i]?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T095331Z" creationid="makenowjust" creationdate="20200502T095331Z">
        <seg>&lt;g1&gt;a[i] ||= b&lt;/g1&gt; は &lt;g2&gt;a[i] = (a[i]? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;alias&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171127Z" creationid="makenowjust" creationdate="20200413T171117Z">
        <seg>&lt;g1&gt;型エイリアス (alias)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;ary[i]&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T101332Z" creationid="makenowjust" creationdate="20200502T101332Z">
        <seg>&lt;g1&gt;ary[i]&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;ary[i]?&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T101346Z" creationid="makenowjust" creationdate="20200502T101346Z">
        <seg>&lt;g1&gt;ary[i]?&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;as&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171159Z" creationid="makenowjust" creationdate="20200413T171159Z">
        <seg>&lt;g1&gt;as&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;as?&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171200Z" creationid="makenowjust" creationdate="20200413T171200Z">
        <seg>&lt;g1&gt;as?&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;bin/&lt;/g1&gt; contains any executables.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T204616Z" creationid="makenowjust" creationdate="20200412T204616Z">
        <seg>&lt;g1&gt;bin/&lt;/g1&gt;には実行可能ファイルを配置します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;break&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170639Z" creationid="makenowjust" creationdate="20200413T170639Z">
        <seg>&lt;g1&gt;break&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;break&lt;/g1&gt; and &lt;g2&gt;next&lt;/g2&gt; can also be used inside an &lt;g3&gt;until&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101120Z" creationid="makenowjust" creationdate="20200424T101120Z">
        <seg>&lt;g3&gt;until&lt;/g3&gt;の中でも&lt;g1&gt;break&lt;/g1&gt;と&lt;g2&gt;next&lt;/g2&gt;は利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;break&lt;/g1&gt; can also accept arguments: these become the method's return value.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190320Z" creationid="makenowjust" creationdate="20200505T190320Z">
        <seg>&lt;g1&gt;break&lt;/g1&gt; は引数を受け取ることも可能で、その場合にはそれがメソッドの戻り値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;break&lt;/g1&gt; can also take a parameter which will then be the value that gets returned:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T100858Z" creationid="makenowjust" creationdate="20200424T095659Z">
        <seg>&lt;g1&gt;break&lt;/g1&gt;は引数を受けとることも可能で、その場合にはそれがメソッドの戻り値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;break&lt;/g1&gt; can also take an argument which will then be the value that gets returned:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094142Z" creationid="makenowjust" creationdate="20210324T094142Z">
        <seg>&lt;g1&gt;break&lt;/g1&gt; は引数を受け取ることもでき、その場合にはそれがメソッドの戻り値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;case equality&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091349Z" creationid="makenowjust" creationdate="20200502T091349Z">
        <seg>&lt;g1&gt;case 等価性&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;case&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170636Z" creationid="makenowjust" creationdate="20200413T170636Z">
        <seg>&lt;g1&gt;case&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;class&lt;/g1&gt; is also useful for creating arrays and collections of class type:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T123125Z" creationid="makenowjust" creationdate="20200507T123125Z">
        <seg>&lt;g1&gt;class&lt;/g1&gt; はクラスの型を持つ配列やコレクションを作る場合にも有効に使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;class&lt;/g1&gt; is used to refer to a class type, instead of an instance type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T122854Z" creationid="makenowjust" creationdate="20200507T122854Z">
        <seg>&lt;g1&gt;class&lt;/g1&gt; はインスタンスの型ではなく、クラス自身の型を参照するために利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal build&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155002Z" creationid="makenowjust" creationdate="20200419T155002Z">
        <seg>&lt;g1&gt;crystal build&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal docs&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161515Z" creationid="makenowjust" creationdate="20200419T161515Z">
        <seg>&lt;g1&gt;crystal docs&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal env&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163140Z" creationid="makenowjust" creationdate="20200419T163140Z">
        <seg>&lt;g1&gt;crystal env&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal eval&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155649Z" creationid="makenowjust" creationdate="20200419T155649Z">
        <seg>&lt;g1&gt;crystal eval&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal help&lt;/g1&gt;: show help about commands and options</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154247Z" creationid="makenowjust" creationdate="20200419T154247Z">
        <seg>&lt;g1&gt;crystal help&lt;/g1&gt;: コマンドとオプションのヘルプの表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal init&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160802Z" creationid="makenowjust" creationdate="20200419T160802Z">
        <seg>&lt;g1&gt;crystal init&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal play&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165209Z" creationid="makenowjust" creationdate="20200419T165209Z">
        <seg>&lt;g1&gt;crystal play&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal run&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154427Z" creationid="makenowjust" creationdate="20200419T154427Z">
        <seg>&lt;g1&gt;crystal run&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal spec&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163403Z" creationid="makenowjust" creationdate="20200419T163403Z">
        <seg>&lt;g1&gt;crystal spec&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal spec&lt;/g1&gt; command deals with Windows paths in &lt;g2&gt;#9234&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9234&lt;e3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T032223Z" creationid="makenowjust" creationdate="20200611T032223Z">
        <seg>&lt;g1&gt;crystal spec&lt;/g1&gt; コマンドが Windows のパスで動作するように&lt;g2&gt;#9234&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9234&lt;e3/&gt;で修正されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal tool context&lt;/g1&gt;: Show context for given location</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165617Z" creationid="makenowjust" creationdate="20200419T165617Z">
        <seg>&lt;g1&gt;crystal tool context&lt;/g1&gt;: 与えられた位置でのコンテキストを表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal tool expand&lt;/g1&gt;: Show macro expansion for given location</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165636Z" creationid="makenowjust" creationdate="20200419T165636Z">
        <seg>&lt;g1&gt;crystal tool expand&lt;/g1&gt;: 与えられた位置のマクロを展開</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal tool format&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165741Z" creationid="makenowjust" creationdate="20200419T165741Z">
        <seg>&lt;g1&gt;crystal tool format&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal tool hierarchy&lt;/g1&gt;: Show type hierarchy</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165652Z" creationid="makenowjust" creationdate="20200419T165652Z">
        <seg>&lt;g1&gt;crystal tool hierarchy&lt;/g1&gt;: 型の階層を表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal tool implementations&lt;/g1&gt;: Show implementations for given call in location</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165726Z" creationid="makenowjust" creationdate="20200419T165726Z">
        <seg>&lt;g1&gt;crystal tool implementations&lt;/g1&gt;: 指定された位置で呼び出されているメソッドの実装がどこにあるかを表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal tool types&lt;/g1&gt;: Show types of main variables</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165739Z" creationid="makenowjust" creationdate="20200419T165739Z">
        <seg>&lt;g1&gt;crystal tool types&lt;/g1&gt;: 主要な変数の型を表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal tool&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165602Z" creationid="makenowjust" creationdate="20200419T165602Z">
        <seg>&lt;g1&gt;crystal tool&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal version&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160650Z" creationid="makenowjust" creationdate="20200419T160650Z">
        <seg>&lt;g1&gt;crystal version&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal-lang/crystal-mysql&lt;/g1&gt;https://github.com/crystal-lang/crystal-mysql&lt;e2/&gt; for mysql &amp; mariadb</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T190202Z" creationid="daiki" creationdate="20200705T190202Z">
        <seg>&lt;g1&gt;crystal-lang/crystal-mysql&lt;/g1&gt;https://github.com/crystal-lang/crystal-mysql&lt;e2/&gt; mysql と mariadb 用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal-lang/crystal-sqlite3&lt;/g1&gt;https://github.com/crystal-lang/crystal-sqlite3&lt;e2/&gt; for sqlite</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T190147Z" creationid="daiki" creationdate="20200705T190147Z">
        <seg>&lt;g1&gt;crystal-lang/crystal-sqlite3&lt;/g1&gt;https://github.com/crystal-lang/crystal-sqlite3&lt;e2/&gt; sqlite用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystalshards.xyz&lt;/g1&gt;https://crystalshards.xyz/&lt;e2/&gt; is currently the go-to place for Crystal libraries, so that's what we'll optimize for.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T162924Z" creationid="makenowjust" creationdate="20200527T162924Z">
        <seg>今のところ、&lt;g1&gt;crystalshards.xyz&lt;/g1&gt;https://crystalshards.xyz/&lt;e2/&gt; に Crystal のライブラリは集約されています。なので、ここに向けて最適化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;declaring variables&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T120155Z" creationid="makenowjust" creationdate="20200507T115815Z">
        <seg>&lt;g1&gt;変数の宣言&lt;/g1&gt;のとき</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;ensure&lt;/g1&gt; clauses are usually used for clean up, freeing resources, etc.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103852Z" creationid="makenowjust" creationdate="20200506T103852Z">
        <seg>通常、&lt;g1&gt;ensure&lt;/g1&gt; 節は処理の後始末やリソースの解放などに利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;enum&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171416Z" creationid="makenowjust" creationdate="20200413T171416Z">
        <seg>&lt;g1&gt;enum&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;extended&lt;/g1&gt; is invoked when a module is extended.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224311Z" creationid="makenowjust" creationdate="20200509T224311Z">
        <seg>&lt;g1&gt;extended&lt;/g1&gt; はモジュールが extend されたときに呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;finalize&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170950Z" creationid="makenowjust" creationdate="20200413T170950Z">
        <seg>&lt;g1&gt;finalize&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;finished&lt;/g1&gt; is called once a type has been completely defined - this includes extensions on that class.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T225118Z" creationid="makenowjust" creationdate="20200509T224915Z">
        <seg>&lt;g1&gt;finished&lt;/g1&gt; は型が完全に定義されたときに、つまりその型の拡張をすべて含めて、ちょうど一度呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;finished&lt;/g1&gt; is invoked after instance variable types for all classes are known.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224449Z" creationid="makenowjust" creationdate="20200509T224449Z">
        <seg>&lt;g1&gt;finished&lt;/g1&gt; はすべてのクラスのインスタンス変数が判明したあとのタイミングで呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;flag?&lt;/g1&gt; returns a boolean, so you can use it with &lt;g2&gt;&amp;&amp;&lt;/g2&gt; and &lt;g3&gt;||&lt;/g3&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T023141Z" creationid="makenowjust" creationdate="20200511T023141Z">
        <seg>&lt;g1&gt;flag?&lt;/g1&gt; は真偽値を返すので、&lt;g2&gt;&amp;&amp;&lt;/g2&gt; や&lt;g3&gt;||&lt;/g3&gt; を使うこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;fun&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171410Z" creationid="makenowjust" creationdate="20200413T171410Z">
        <seg>&lt;g1&gt;fun&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;gottlike&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093422Z" creationid="makenowjust" creationdate="20200518T093422Z">
        <seg>&lt;g1&gt;gottlike&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;i %= 1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100638Z" creationid="makenowjust" creationdate="20200502T100638Z">
        <seg>&lt;g1&gt;i %= 1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;i &amp;&amp;= true&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T101123Z" creationid="makenowjust" creationdate="20200502T101123Z">
        <seg>&lt;g1&gt;i &amp;&amp;= true&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;i &amp;*= 1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100520Z" creationid="makenowjust" creationdate="20200502T100520Z">
        <seg>&lt;g1&gt;i &amp;*= 1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;i &amp;+= 1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100350Z" creationid="makenowjust" creationdate="20200502T100350Z">
        <seg>&lt;g1&gt;i &amp;+= 1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;i &amp;-= 1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100451Z" creationid="makenowjust" creationdate="20200502T100451Z">
        <seg>&lt;g1&gt;i &amp;-= 1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;i &amp;= 1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100718Z" creationid="makenowjust" creationdate="20200502T100718Z">
        <seg>&lt;g1&gt;i &amp;= 1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;i **= 1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100820Z" creationid="makenowjust" creationdate="20200502T100820Z">
        <seg>&lt;g1&gt;i **= 1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;i *= 1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100504Z" creationid="makenowjust" creationdate="20200502T100504Z">
        <seg>&lt;g1&gt;i *= 1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;i += 1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100101Z" creationid="makenowjust" creationdate="20200502T100101Z">
        <seg>&lt;g1&gt;i += 1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;i -= 1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100430Z" creationid="makenowjust" creationdate="20200502T100430Z">
        <seg>&lt;g1&gt;i -= 1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;i //= 1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100626Z" creationid="makenowjust" creationdate="20200502T100626Z">
        <seg>&lt;g1&gt;i //= 1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;i /= 1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100534Z" creationid="makenowjust" creationdate="20200502T100534Z">
        <seg>&lt;g1&gt;i /= 1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;i &lt;&lt;= 1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T101037Z" creationid="makenowjust" creationdate="20200502T101037Z">
        <seg>&lt;g1&gt;i &lt;&lt;= 1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;i &gt;&gt;= 1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T101048Z" creationid="makenowjust" creationdate="20200502T101048Z">
        <seg>&lt;g1&gt;i &gt;&gt;= 1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;i ^= 1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100808Z" creationid="makenowjust" creationdate="20200502T100808Z">
        <seg>&lt;g1&gt;i ^= 1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;i |= 1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100658Z" creationid="makenowjust" creationdate="20200502T100658Z">
        <seg>&lt;g1&gt;i |= 1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;i ||= true&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T101105Z" creationid="makenowjust" creationdate="20200502T101105Z">
        <seg>&lt;g1&gt;i ||= true&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;i&lt;/g1&gt;: case-insensitive matching (&lt;g2&gt;PCRE_CASELESS&lt;/g2&gt;):  Unicode letters in the pattern match both upper and lower case letters in the subject string.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T041704Z" creationid="makenowjust" creationdate="20200421T041704Z">
        <seg>&lt;g1&gt;i&lt;/g1&gt;: 大文字と小文字を区別しないマッチを行う (&lt;g2&gt;PCRE_CASELESS&lt;/g2&gt;) 。ユニコード文字の大文字と小文字も区別しないようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;if !&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170629Z" creationid="makenowjust" creationdate="20200413T170629Z">
        <seg>&lt;g1&gt;if !&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;if var.is_a?(...)&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170621Z" creationid="makenowjust" creationdate="20200413T170621Z">
        <seg>&lt;g1&gt;if var.is_a?(...)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;if var.nil?&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170624Z" creationid="makenowjust" creationdate="20200413T170624Z">
        <seg>&lt;g1&gt;if var.nil?&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;if var.responds_to?(...)&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170623Z" creationid="makenowjust" creationdate="20200413T170623Z">
        <seg>&lt;g1&gt;if var.responds_to?(...)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;if var&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170617Z" creationid="makenowjust" creationdate="20200413T170617Z">
        <seg>&lt;g1&gt;if var&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;if&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170514Z" creationid="makenowjust" creationdate="20200413T170514Z">
        <seg>&lt;g1&gt;if&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;included&lt;/g1&gt; is invoked when a module is included.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224244Z" creationid="makenowjust" creationdate="20200509T224244Z">
        <seg>&lt;g1&gt;included&lt;/g1&gt; はモジュールがインクルードされたときに呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;inherited&lt;/g1&gt; is invoked when a subclass is defined.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224202Z" creationid="makenowjust" creationdate="20200509T224202Z">
        <seg>&lt;g1&gt;inherited&lt;/g1&gt; はサブクラスが定義された際に呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;input&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T163650Z" creationid="makenowjust" creationdate="20200413T163650Z">
        <seg>&lt;g1&gt;入力&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;instance_sizeof&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171334Z" creationid="makenowjust" creationdate="20200413T171334Z">
        <seg>&lt;g1&gt;instance_sizeof&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;is_a?&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171153Z" creationid="makenowjust" creationdate="20200413T171153Z">
        <seg>&lt;g1&gt;is_a?&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;lib&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171409Z" creationid="makenowjust" creationdate="20200413T171409Z">
        <seg>&lt;g1&gt;lib&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;logical AND&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091929Z" creationid="makenowjust" creationdate="20200502T091929Z">
        <seg>&lt;g1&gt;論理 AND&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;logical OR&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091936Z" creationid="makenowjust" creationdate="20200502T091936Z">
        <seg>&lt;g1&gt;論理 OR&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;m&lt;/g1&gt;: multiline matching (&lt;g2&gt;PCRE_MULTILINE&lt;/g2&gt;): The &lt;g3&gt;start of line&lt;/g3&gt; (&lt;g4&gt;^&lt;/g4&gt;) and &lt;g5&gt;end of line&lt;/g5&gt; (&lt;g6&gt;$&lt;/g6&gt;) metacharacters match immediately following or immediately before internal newlines in the subject string, respectively, as well as at the very start and end.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T041833Z" creationid="makenowjust" creationdate="20200421T041715Z">
        <seg>&lt;g1&gt;m&lt;/g1&gt;: 複数行マッチを行う (&lt;g2&gt;PCRE_MULTILINE&lt;/g2&gt;)。&lt;g3&gt;行の開始&lt;/g3&gt; (&lt;g4&gt;^&lt;/g4&gt;) と &lt;g5&gt;行の終わり&lt;/g5&gt; (&lt;g6&gt;$&lt;/g6&gt;) を表すメタ文字が、文字列の冒頭や末尾に加えて、改行の直前や直後にもマッチするようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;method_added&lt;/g1&gt; is invoked when a new method is defined in the current scope.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224412Z" creationid="makenowjust" creationdate="20200509T224412Z">
        <seg>&lt;g1&gt;method_added&lt;/g1&gt; は現在のスコープに新しいメソッドが定義されたときに呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;method_missing&lt;/g1&gt; is invoked when a method is not found.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224350Z" creationid="makenowjust" creationdate="20200509T224350Z">
        <seg>&lt;g1&gt;method_missing&lt;/g1&gt; はメソッドが見つからないときに呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;modify&lt;/g1&gt; returns the reference to this new array and its content is printed</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T174109Z" creationid="makenowjust" creationdate="20200505T174109Z">
        <seg>&lt;g1&gt;modify&lt;/g1&gt; はその新しい配列の参照を返して、そしてその内容が表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;mysql://user:password@server:port/database&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100751Z" creationid="makenowjust" creationdate="20210324T100751Z">
        <seg>&lt;g1&gt;mysql://user:password@server:port/database&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;new, initialize and allocate&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170738Z" creationid="makenowjust" creationdate="20200413T170738Z">
        <seg>&lt;g1&gt;new/initialize/allocate&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;next&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170640Z" creationid="makenowjust" creationdate="20200413T170640Z">
        <seg>&lt;g1&gt;next&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;next&lt;/g1&gt; can also be used to exit from a block, for example:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095951Z" creationid="makenowjust" creationdate="20200424T095951Z">
        <seg>&lt;g1&gt;next&lt;/g1&gt;はブロックを終了するためにも利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;nil&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000421Z" creationid="makenowjust" creationdate="20200414T000421Z">
        <seg>&lt;g1&gt;nil&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;nil?&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171156Z" creationid="makenowjust" creationdate="20200413T171156Z">
        <seg>&lt;g1&gt;nil?&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;object.array &lt;&lt; "bar"&lt;/g1&gt; appends to this newly created array</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T174032Z" creationid="makenowjust" creationdate="20200505T174032Z">
        <seg>&lt;g1&gt;object.array &lt;&lt; "bar"&lt;/g1&gt; は、その新しく作成した配列に要素を追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;object.array = ["new"]&lt;/g1&gt; replaces the reference in the &lt;g2&gt;copy&lt;/g2&gt; of &lt;g3&gt;strukt&lt;/g3&gt; with the reference to the new array</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T174005Z" creationid="makenowjust" creationdate="20200505T174005Z">
        <seg>&lt;g1&gt;object.array = ["new"]&lt;/g1&gt; は &lt;g3&gt;strukt&lt;/g3&gt; の&lt;g2&gt;コピー&lt;/g2&gt;の持っている配列への参照を、新しく確保したものに置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;offsetof&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171335Z" creationid="makenowjust" creationdate="20200413T171335Z">
        <seg>&lt;g1&gt;offsetof&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;options passed to the app&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T163923Z" creationid="makenowjust" creationdate="20200413T163923Z">
        <seg>&lt;g1&gt;アプリケーションに渡されたオプションの処理&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;out&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171412Z" creationid="makenowjust" creationdate="20200413T171412Z">
        <seg>&lt;g1&gt;out&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;output&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T163654Z" creationid="makenowjust" creationdate="20200413T163654Z">
        <seg>&lt;g1&gt;出力&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;path&lt;/g1&gt; can be a file or folder name and include all Crystal files in that folder tree.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165923Z" creationid="makenowjust" creationdate="20200419T165923Z">
        <seg>&lt;g1&gt;path&lt;/g1&gt; にはファイル名かフォルダ名が指定できて、フォルダ名の場合そのフォルダ中の Crystal ファイルを再帰的に辿ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;pointerof&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171331Z" creationid="makenowjust" creationdate="20200413T171331Z">
        <seg>&lt;g1&gt;pointerof&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;postgres://server:port/database&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100752Z" creationid="makenowjust" creationdate="20210324T100752Z">
        <seg>&lt;g1&gt;postgres://server:port/database&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;private&lt;/g1&gt; can be used with &lt;g2&gt;class&lt;/g2&gt;, &lt;g3&gt;module&lt;/g3&gt;, &lt;g4&gt;lib&lt;/g4&gt;, &lt;g5&gt;enum&lt;/g5&gt;, &lt;g6&gt;alias&lt;/g6&gt; and constants:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T110115Z" creationid="makenowjust" creationdate="20200502T110110Z">
        <seg>この場合の &lt;g1&gt;private&lt;/g1&gt; は &lt;g2&gt;class&lt;/g2&gt;、&lt;g3&gt;module&lt;/g3&gt;、&lt;g4&gt;lib&lt;/g4&gt;、&lt;g5&gt;enum&lt;/g5&gt;、そして&lt;g6&gt;alias&lt;/g6&gt;と定数に対して指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;request for user input&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T163938Z" creationid="makenowjust" creationdate="20200413T163938Z">
        <seg>&lt;g1&gt;ユーザーの入力の要求&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;require "./foo/bar/baz"&lt;/g1&gt; will lookup "foo/bar/baz.cr" or "foo/bar/baz/baz.cr" relative to the current file.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T091351Z" creationid="makenowjust" creationdate="20200427T091348Z">
        <seg>&lt;g1&gt;require "./foo/bar/baz"&lt;/g1&gt; は現在のファイルから相対的に "foo/bar/baz.cr" or "foo/bar/baz/baz.cr" を探します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;require "foo/*"&lt;/g1&gt; will require all ".cr" files below the "foo" directory, but not below directories inside "foo".</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T091703Z" creationid="makenowjust" creationdate="20200427T091620Z">
        <seg>&lt;g1&gt;require "foo/*"&lt;/g1&gt; は "foo" ディレクトリ中のすべての ".cr" ファイルを読み込むが、"foo" 中のディレクトリまでは読み込みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;require "foo/**"&lt;/g1&gt; will require all ".cr" files below the "foo" directory, and below directories inside "foo", recursively.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T091654Z" creationid="makenowjust" creationdate="20200427T091654Z">
        <seg>&lt;g1&gt;require "foo/**"&lt;/g1&gt; は "foo" ディレクトリ中のすべての ".cr" ファイルにくわえて、"foo" 中のディレクトリも再帰的に読み込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;require "foo/bar/baz"&lt;/g1&gt; will lookup "foo/bar/baz.cr", "foo/bar/baz/baz.cr", "foo/src/bar/baz.cr" or "foo/src/bar/baz/baz.cr" in the require path.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T091327Z" creationid="makenowjust" creationdate="20200427T090848Z">
        <seg>&lt;g1&gt;require "foo/bar/baz"&lt;/g1&gt; は require パスから "foo/bar/baz.cr" や "foo/bar/baz/baz.cr"、 "foo/src/bar/baz.cr"、 "foo/src/bar/baz/baz.cr" を探します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;responds_to?&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171158Z" creationid="makenowjust" creationdate="20200413T171158Z">
        <seg>&lt;g1&gt;responds_to?&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;return&lt;/g1&gt; and &lt;g2&gt;break&lt;/g2&gt; can't be used inside a captured block.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T073946Z" creationid="makenowjust" creationdate="20200506T073946Z">
        <seg>&lt;g1&gt;return&lt;/g1&gt; と &lt;g2&gt;break&lt;/g2&gt; を捕捉されたブロックの中で使用することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;runner_options&lt;/g1&gt; are provided to the compiled binary executable which runs the specs.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164228Z" creationid="makenowjust" creationdate="20200419T164228Z">
        <seg>&lt;g1&gt;runner_options&lt;/g1&gt; はコンパイルされた spec を実行する際に渡すオプションを表しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;self&lt;/g1&gt; can be used in the type grammar to denote a &lt;g2&gt;self&lt;/g2&gt; type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T122808Z" creationid="makenowjust" creationdate="20200507T122808Z">
        <seg>型の文法では &lt;g1&gt;self&lt;/g1&gt; は &lt;g2&gt;self&lt;/g2&gt; 型であることを示すために利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;shards build&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180042Z" creationid="makenowjust" creationdate="20200419T180042Z">
        <seg>&lt;g1&gt;shards build&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;shards check&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180330Z" creationid="makenowjust" creationdate="20200419T180330Z">
        <seg>&lt;g1&gt;shards check&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;shards init&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180450Z" creationid="makenowjust" creationdate="20200419T180450Z">
        <seg>&lt;g1&gt;shards init&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;shards install&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180512Z" creationid="makenowjust" creationdate="20200419T180512Z">
        <seg>&lt;g1&gt;shards install&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;shards list&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181022Z" creationid="makenowjust" creationdate="20200419T181022Z">
        <seg>&lt;g1&gt;shards list&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;shards prune&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181041Z" creationid="makenowjust" creationdate="20200419T181041Z">
        <seg>&lt;g1&gt;shards prune&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;shards update&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181103Z" creationid="makenowjust" creationdate="20200419T181103Z">
        <seg>&lt;g1&gt;shards update&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;shards version&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181247Z" creationid="makenowjust" creationdate="20200419T181247Z">
        <seg>&lt;g1&gt;shards version&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;shards&lt;/g1&gt; requires the presence of a &lt;g2&gt;shard.yml&lt;/g2&gt; file in the project folder (working directory).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T095119Z" creationid="makenowjust" creationdate="20200419T173630Z">
        <seg>&lt;g1&gt;shards&lt;/g1&gt; は &lt;g2&gt;shard.yml&lt;/g2&gt; がプロジェクトのフォルダ (現在のディレクトリ) に置いてあることを要求します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;sizeof&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171333Z" creationid="makenowjust" creationdate="20200413T171333Z">
        <seg>&lt;g1&gt;sizeof&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;spec/&lt;/g1&gt; contains the &lt;g2&gt;project's specs&lt;/g2&gt;, which can be run with &lt;g3&gt;crystal spec&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T072045Z" creationid="makenowjust" creationdate="20200412T204601Z">
        <seg>&lt;g1&gt;spec/&lt;/g1&gt; には &lt;g3&gt;crystal spec&lt;/g3&gt; によって実行できる、&lt;g2&gt;プロジェクトの spec&lt;/g2&gt; を配置します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;sqlite3:///path/to/data.db&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100750Z" creationid="makenowjust" creationdate="20210324T100750Z">
        <seg>&lt;g1&gt;sqlite3:///path/to/data.db&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;src/&lt;/g1&gt; contains the project's source code.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T072036Z" creationid="makenowjust" creationdate="20200412T204459Z">
        <seg>&lt;g1&gt;src/&lt;/g1&gt; にはプロジェクトのソースコードを配置します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;struct&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171414Z" creationid="makenowjust" creationdate="20200413T171414Z">
        <seg>&lt;g1&gt;struct&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;to_unsafe&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171413Z" creationid="makenowjust" creationdate="20200413T171413Z">
        <seg>&lt;g1&gt;to_unsafe&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;true &amp;&amp; false&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091931Z" creationid="makenowjust" creationdate="20200502T091931Z">
        <seg>&lt;g1&gt;true &amp;&amp; false&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;true || false&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091937Z" creationid="makenowjust" creationdate="20200502T091937Z">
        <seg>&lt;g1&gt;true || false&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;true&lt;/g1&gt;, &lt;g2&gt;false&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000424Z" creationid="makenowjust" creationdate="20200414T000424Z">
        <seg>&lt;g1&gt;true&lt;/g1&gt;, &lt;g2&gt;false&lt;/g2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;type&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171425Z" creationid="makenowjust" creationdate="20200413T171425Z">
        <seg>&lt;g1&gt;type&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;typeof&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171201Z" creationid="makenowjust" creationdate="20200413T171201Z">
        <seg>&lt;g1&gt;typeof&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;typeof&lt;/g1&gt; is allowed in the type grammar.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T123301Z" creationid="makenowjust" creationdate="20200507T123254Z">
        <seg>&lt;g1&gt;typeof&lt;/g1&gt; を型の文法で使うこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;union&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171415Z" creationid="makenowjust" creationdate="20200413T171415Z">
        <seg>&lt;g1&gt;union&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;unless&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170634Z" creationid="makenowjust" creationdate="20200413T170634Z">
        <seg>&lt;g1&gt;unless&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;until&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170642Z" creationid="makenowjust" creationdate="20200413T170642Z">
        <seg>&lt;g1&gt;until&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;while&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170637Z" creationid="makenowjust" creationdate="20200413T170637Z">
        <seg>&lt;g1&gt;while&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;will/crystal-pg&lt;/g1&gt;https://github.com/will/crystal-pg&lt;e2/&gt; for postgres</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T190213Z" creationid="daiki" creationdate="20200705T190213Z">
        <seg>&lt;g1&gt;will/crystal-pg&lt;/g1&gt;https://github.com/will/crystal-pg&lt;e2/&gt; postgres 用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;x...y&lt;/g1&gt;: Three dots denote an exclusive range, including &lt;g2&gt;x&lt;/g2&gt; and all values up to but not including &lt;g3&gt;y&lt;/g3&gt; (in mathematics: &lt;g4&gt;[x, y)&lt;/g4&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T035016Z" creationid="makenowjust" creationdate="20200421T034412Z">
        <seg>&lt;g1&gt;x...y&lt;/g1&gt;: 3つのドットは右の値を含まない範囲を表します。つまり&lt;g2&gt;x&lt;/g2&gt;と&lt;g3&gt;y&lt;/g3&gt;までの値すべてを含みます (数学的には左閉右開区間 &lt;g4&gt;[x, y)&lt;/g4&gt; です)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;x..y&lt;/g1&gt;: Two dots denote an inclusive range, including &lt;g2&gt;x&lt;/g2&gt; and &lt;g3&gt;y&lt;/g3&gt; and all values in between (in mathematics: &lt;g4&gt;[x, y]&lt;/g4&gt;) .</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T034309Z" creationid="makenowjust" creationdate="20200421T034309Z">
        <seg>&lt;g1&gt;x..y&lt;/g1&gt;: 2つのドットは右の値を含む範囲を表します。つまり&lt;g2&gt;x&lt;/g2&gt;と&lt;g3&gt;y&lt;/g3&gt;、およびその間のすべての値を含みます (数学的には閉区間 &lt;g4&gt;[x, y]&lt;/g4&gt; です)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;x&lt;/g1&gt;: extended whitespace matching (&lt;g2&gt;PCRE_EXTENDED&lt;/g2&gt;): Most white space characters in the pattern are totally ignored except when ignore or inside a character class.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T042105Z" creationid="makenowjust" creationdate="20200421T041946Z">
        <seg>&lt;g1&gt;x&lt;/g1&gt;: 空白文字を無視するようにします (&lt;g2&gt;PCRE_EXTENDED&lt;/g2&gt;)。文字クラスの内部を除くパターン中の空白文字を飛ばしてマッチを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;{"foo" =&gt; 2}&lt;/g1&gt;, &lt;g2&gt;{} of String =&gt; Int32&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000447Z" creationid="makenowjust" creationdate="20200414T000447Z">
        <seg>&lt;g1&gt;{"foo" =&gt; 2}&lt;/g1&gt;, &lt;g2&gt;{} of String =&gt; Int32&lt;/g2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;{1, "hello", 'x'}&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000502Z" creationid="makenowjust" creationdate="20200414T000502Z">
        <seg>&lt;g1&gt;{1, "hello", 'x'}&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;{name: "Crystal", year: 2011}&lt;/g1&gt;, &lt;g2&gt;{"this is a key": 1}&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000503Z" creationid="makenowjust" creationdate="20200414T000503Z">
        <seg>&lt;g1&gt;{name: "Crystal", year: 2011}&lt;/g1&gt;, &lt;g2&gt;{"this is a key": 1}&lt;/g2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;|&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090520Z" creationid="makenowjust" creationdate="20200502T090520Z">
        <seg>&lt;g1&gt;|&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;|&lt;/g1&gt;,&lt;g2&gt;^&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084743Z" creationid="makenowjust" creationdate="20200502T084743Z">
        <seg>&lt;g1&gt;|&lt;/g1&gt;,&lt;g2&gt;^&lt;/g2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;|=&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100638Z" creationid="makenowjust" creationdate="20200502T100638Z">
        <seg>&lt;g1&gt;|=&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;||&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170648Z" creationid="makenowjust" creationdate="20200413T170648Z">
        <seg>&lt;g1&gt;||&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;||=&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T101049Z" creationid="makenowjust" creationdate="20200502T101049Z">
        <seg>&lt;g1&gt;||=&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;~1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090230Z" creationid="makenowjust" creationdate="20200502T090230Z">
        <seg>&lt;g1&gt;~1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;~&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090227Z" creationid="makenowjust" creationdate="20200502T090227Z">
        <seg>&lt;g1&gt;~&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T105544Z" creationid="makenowjust" creationdate="20200518T105544Z">
        <seg>&lt;g2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g2&gt;0..5.to_a&lt;/g2&gt; without parentheses would be semantically equivalent to &lt;g3&gt;0..(5.to_a)&lt;/g3&gt; because method calls and other operators have higher precedence than the range literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T034628Z" creationid="makenowjust" creationdate="20200421T034628Z">
        <seg>&lt;g2&gt;0..5.to_a&lt;/g2&gt; のように括弧で囲わなかった場合、範囲リテラルよりもメソッド呼び出しの方が優先度が高いため &lt;g3&gt;0..(5.to_a)&lt;/g3&gt; として解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g2&gt;@type&lt;/g2&gt; is the extending type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224332Z" creationid="makenowjust" creationdate="20200509T224332Z">
        <seg>&lt;g2&gt;@type&lt;/g2&gt; は extend する側の型になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g2&gt;@type&lt;/g2&gt; is the including type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224255Z" creationid="makenowjust" creationdate="20200509T224255Z">
        <seg>&lt;g2&gt;@type&lt;/g2&gt; はインクルードする側の型となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g2&gt;@type&lt;/g2&gt; is the inheriting type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224226Z" creationid="makenowjust" creationdate="20200509T224226Z">
        <seg>&lt;g2&gt;@type&lt;/g2&gt; は継承されたサブクラスの型となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g2&gt;Int32 | String&lt;/g2&gt; is read "Int32 or String".</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T120411Z" creationid="makenowjust" creationdate="20200507T120411Z">
        <seg>&lt;g2&gt;Int32 | String&lt;/g2&gt; は「Int32 もしくは String」と読みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g2&gt;Linuxbrew&lt;/g2&gt; is also available.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T092211Z" creationid="makenowjust" creationdate="20210130T092211Z">
        <seg>&lt;g2&gt;Linuxbrew&lt;/g2&gt; も使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g2&gt;Now&lt;/g2&gt; we have two fabulous apps!!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T184624Z" creationid="makenowjust" creationdate="20200413T184624Z">
        <seg>&lt;g2&gt;今&lt;/g2&gt;、私たちは2つのファビュラスなアプリケーションを実装したのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g2&gt;Snapcraft&lt;/g2&gt; and &lt;g3&gt;Linuxbrew&lt;/g3&gt; are also available.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T092127Z" creationid="makenowjust" creationdate="20210130T092127Z">
        <seg>&lt;g2&gt;Snapcraft&lt;/g2&gt; や &lt;g3&gt;Linuxbrew&lt;/g3&gt; も使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g2&gt;sleep&lt;/g2&gt; is more useful when spawning more than one fiber.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T070717Z" creationid="akiji" creationdate="20200428T080001Z">
        <seg>&lt;g2&gt;sleep&lt;/g2&gt;は、複数のファイバを生成する場合にはさらに有用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g3&gt;:inherit:&lt;/g3&gt; can also be used to inject the parent's documentation into additional documentation on the child.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215149Z" creationid="makenowjust" creationdate="20200412T213743Z">
        <seg>&lt;g3&gt;:inherit:&lt;/g3&gt;を子クラスのドキュメントに親クラスのものを挿入するためにも利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g3&gt;NoReturn&lt;/g3&gt; does not show up in a union type because it would essentially be included in every expression's type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T142728Z" creationid="makenowjust" creationdate="20200430T142728Z">
        <seg>&lt;g3&gt;NoReturn&lt;/g3&gt; は他の全ての型に含まれるため、ユニオン型の中には現れません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g3&gt;Readline&lt;/g3&gt; has some great features: filename autocompletion out of the box; custom auto-completion method; keybinding, just to mention a few.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T091141Z" creationid="makenowjust" creationdate="20211107T091141Z">
        <seg>&lt;g3&gt;Readline&lt;/g3&gt; は素晴らしく強力な機能があります。ボックス外でのファイル名の自動補完、自動補完方法のカスタマイズ、キーバインド変更というのはほんの一例です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g3&gt;Readline&lt;/g3&gt; has some great features: filename autocompletion out of the box; custom autocompletion method; keybinding, just to mention a few.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T190259Z" creationid="makenowjust" creationdate="20200413T190259Z">
        <seg>&lt;g3&gt;Readline&lt;/g3&gt;は、ファイル名補完などの自動補完、キーバインディングのカスタマイズなど、様々な機能を持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g3&gt;Snapcraft&lt;/g3&gt; is also available.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T101625Z" creationid="makenowjust" creationdate="20200518T101625Z">
        <seg>&lt;g3&gt;Snapcraft&lt;/g3&gt; も使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g3&gt;crystal init app &lt;name&gt;&lt;/g3&gt; is used for an application,
&lt;g4&gt;crystal init lib &lt;name&gt;&lt;/g4&gt; for a library.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153525Z" creationid="makenowjust" creationdate="20200419T153525Z">
        <seg>&lt;g3&gt;crystal init app &lt;name&gt;&lt;/g3&gt;はアプリケーション向けで、
&lt;g4&gt;crystal init lib &lt;name&gt;&lt;/g4&gt;はライブラリ向けです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g3&gt;next&lt;/g3&gt; can be used and will exit and give the value of the captured block.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T074052Z" creationid="makenowjust" creationdate="20200506T074052Z">
        <seg>&lt;g3&gt;next&lt;/g3&gt; は捕捉されたブロックの中で使用することができて、ブロックを終了し与えられた値をブロックの呼び出し結果とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g4&gt;Log.warn { ... }&lt;/g4&gt; was, and still is, the way to emit a warning.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T153252Z" creationid="makenowjust" creationdate="20200610T153004Z">
        <seg>&lt;g4&gt;Log.warn { ... }&lt;/g4&gt; がありましたが、これはそのままで、警告を表します。。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g4&gt;OpenCollective&lt;/g4&gt;https://opencollective.com/crystal-lang&lt;e8/&gt; is available for that.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200621T084035Z" creationid="makenowjust" creationdate="20200621T084035Z">
        <seg>&lt;g4&gt;OpenCollective&lt;/g4&gt;https://opencollective.com/crystal-lang&lt;e8/&gt; で受け付けています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g4&gt;OpenCollective&lt;/g4&gt;https://opencollective.com/crystal-lang&lt;e9/&gt; and &lt;g5&gt;Bountysource&lt;/g5&gt;https://salt.bountysource.com/teams/crystal-lang&lt;e10/&gt; are two available channels for that.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200621T084156Z" creationid="makenowjust" creationdate="20200611T034405Z">
        <seg>&lt;g4&gt;OpenCollective&lt;/g4&gt;https://opencollective.com/crystal-lang&lt;e9/&gt; と &lt;g5&gt;Bountysource&lt;/g5&gt;https://salt.bountysource.com/teams/crystal-lang&lt;e10/&gt; の2箇所で受け付けています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g7&gt;Flate&lt;/g7&gt; was renamed to &lt;g8&gt;Compress::Deflate&lt;/g8&gt;, actually.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T145904Z" creationid="makenowjust" creationdate="20200610T145904Z">
        <seg>また、&lt;g7&gt;Flate&lt;/g7&gt; は &lt;g8&gt;Compress::Deflate&lt;/g8&gt; に名前が変更されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;i0&gt;file_download&lt;/i0&gt; &lt;s1&gt;Download all assets in a zip file&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084856Z" creationid="makenowjust" creationdate="20200516T084856Z">
        <seg>&lt;i0&gt;file_download&lt;/i0&gt; &lt;s1&gt;すべてのアセットを zip でダウンロードする&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;s0&gt;Chat room&lt;/s0&gt; &lt;i1&gt;&lt;/i1&gt; &lt;s2&gt;crystal-lang/crystal&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T223215Z" creationid="makenowjust" creationdate="20200413T223105Z">
        <seg>&lt;s0&gt;チャットルーム (英語)&lt;/s0&gt; &lt;i1&gt;&lt;/i1&gt; &lt;s2&gt;crystal-lang/crystal&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;s0&gt;Code repository&lt;/s0&gt; &lt;i1&gt;&lt;/i1&gt; &lt;s2&gt;crystal-lang/crystal&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222939Z" creationid="makenowjust" creationdate="20200413T222939Z">
        <seg>&lt;s0&gt;コードのリポジトリ&lt;/s0&gt; &lt;i1&gt;&lt;/i1&gt; &lt;s2&gt;crystal-lang/crystal&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;s0&gt;General announcements and events&lt;/s0&gt; &lt;i1&gt;&lt;/i1&gt; &lt;s2&gt;@CrystalLanguage&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T223200Z" creationid="makenowjust" creationdate="20200413T223200Z">
        <seg>&lt;s0&gt;Twitter アカウント (英語)&lt;/s0&gt; &lt;i1&gt;&lt;/i1&gt; &lt;s2&gt;@CrystalLanguage&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;s0&gt;General discussion&lt;/s0&gt; &lt;i1&gt;&lt;/i1&gt; &lt;s2&gt;crystal-lang&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T223045Z" creationid="makenowjust" creationdate="20200413T223045Z">
        <seg>&lt;s0&gt;広い議論の場 (英語)&lt;/s0&gt; &lt;i1&gt;&lt;/i1&gt; &lt;s2&gt;crystal-lang&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T072511Z" creationid="makenowjust" creationdate="20200518T072511Z">
        <seg>&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt;Screenshot of Crystal playground&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165337Z" creationid="makenowjust" creationdate="20200419T165337Z">
        <seg>&lt;x1/&gt;Crystal プレイグラウンドのスクリーンショット&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T105544Z" creationid="makenowjust" creationdate="20200518T105544Z">
        <seg>&lt;x3/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@@box : Pointer(Void)?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090419Z" creationid="makenowjust" creationdate="20200512T090419Z">
        <seg>@@box : Pointer(Void)?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@@box = boxed_data</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090741Z" creationid="makenowjust" creationdate="20200512T090741Z">
        <seg>@@box = boxed_data</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@@counter</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041159Z" creationid="hirofumiwakasugi" creationdate="20150910T041159Z">
        <seg>@@counter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@@counter = 0
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041158Z" creationid="hirofumiwakasugi" creationdate="20150910T041158Z">
        <seg>@@counter = 0
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@@default_greeting = "Hello world"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010357Z" creationid="hirofumiwakasugi" creationdate="20151010T010357Z">
        <seg>@@default_greeting = "Hello world"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@@instances</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040811Z" creationid="hirofumiwakasugi" creationdate="20150910T040811Z">
        <seg>@@instances</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@@instances += 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040810Z" creationid="hirofumiwakasugi" creationdate="20150910T040810Z">
        <seg>@@instances += 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@@instances = 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040809Z" creationid="hirofumiwakasugi" creationdate="20150910T040809Z">
        <seg>@@instances = 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@@numbers</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T134549Z" creationid="makenowjust" creationdate="20200504T134549Z">
        <seg>@@numbers</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@@numbers = [] of Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T134545Z" creationid="makenowjust" creationdate="20200504T134545Z">
        <seg>@@numbers = [] of Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@@values = [] of Int32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T115029Z" creationid="makenowjust" creationdate="20200510T115029Z">
        <seg>@@values = [] of Int32
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@[AlwaysInline]
def foo</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T115953Z" creationid="makenowjust" creationdate="20200510T115953Z">
        <seg>@[AlwaysInline]
def foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@[CallConvention("X86_StdCall")]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T074353Z" creationid="hirofumiwakasugi" creationdate="20150919T074353Z">
        <seg>@[CallConvention("X86_StdCall")]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@[Extern]
struct MyStruct
end

lib MyLib</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114655Z" creationid="makenowjust" creationdate="20200510T114655Z">
        <seg>@[Extern]
struct MyStruct
end

lib MyLib</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@[Flags]
enum IOMode</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182142Z" creationid="makenowjust" creationdate="20200505T182142Z">
        <seg>@[Flags]
enum IOMode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@[Link("pcre")]
lib LibPCRE
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T030348Z" creationid="makenowjust" creationdate="20200511T030348Z">
        <seg>@[Link("pcre")]
lib LibPCRE
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@[Link("pcre")]
lib PCRE</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T084323Z" creationid="makenowjust" creationdate="20200512T084323Z">
        <seg>@[Link("pcre")]
lib PCRE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@[MyIvar]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T112316Z" creationid="makenowjust" creationdate="20200510T112316Z">
        <seg>@[MyIvar]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@[NoInline]
def foo</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120037Z" creationid="makenowjust" creationdate="20200510T120037Z">
        <seg>@[NoInline]
def foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@[Raises]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053359Z" creationid="hirofumiwakasugi" creationdate="20151008T053359Z">
        <seg>@[Raises]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@[ThreadLocal]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053859Z" creationid="hirofumiwakasugi" creationdate="20151007T053859Z">
        <seg>@[ThreadLocal]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@a.try do |a|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083406Z" creationid="makenowjust" creationdate="20200424T083406Z">
        <seg>@a.try do |a|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@address</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T054209Z" creationid="hirofumiwakasugi" creationdate="20150905T054209Z">
        <seg>@address</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@address : String?
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T054237Z" creationid="hirofumiwakasugi" creationdate="20150905T054237Z">
        <seg>@address : String?
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@address = Address.new("somewhere")</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T135934Z" creationid="makenowjust" creationdate="20200427T135934Z">
        <seg>@address = Address.new("somewhere")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@address = Address.unknown</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T141859Z" creationid="makenowjust" creationdate="20200427T141859Z">
        <seg>@address = Address.unknown</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055613Z" creationid="hirofumiwakasugi" creationdate="20150904T055613Z">
        <seg>@age</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age  : Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135145Z" creationid="hirofumiwakasugi" creationdate="20150904T135145Z">
        <seg>@age  : Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age += 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122229Z" creationid="hirofumiwakasugi" creationdate="20150904T122229Z">
        <seg>@age += 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age += 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T123111Z" creationid="hirofumiwakasugi" creationdate="20150904T123111Z">
        <seg>@age += 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age += age</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072601Z" creationid="hirofumiwakasugi" creationdate="20150906T072601Z">
        <seg>@age += age</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age += age.to_i</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072846Z" creationid="hirofumiwakasugi" creationdate="20150906T072846Z">
        <seg>@age += age.to_i</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age += by</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T111217Z" creationid="hirofumiwakasugi" creationdate="20150906T111217Z">
        <seg>@age += by</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age += years</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T070843Z" creationid="hirofumiwakasugi" creationdate="20150906T070843Z">
        <seg>@age += years</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age += years.to_i</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071535Z" creationid="hirofumiwakasugi" creationdate="20150906T071535Z">
        <seg>@age += years.to_i</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age += yield @age</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071817Z" creationid="hirofumiwakasugi" creationdate="20150906T071817Z">
        <seg>@age += yield @age</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age : Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T054237Z" creationid="hirofumiwakasugi" creationdate="20150905T054237Z">
        <seg>@age : Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age :: Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T093730Z" creationid="hirofumiwakasugi" creationdate="20150905T093730Z">
        <seg>@age :: Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age = 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055612Z" creationid="hirofumiwakasugi" creationdate="20150904T055612Z">
        <seg>@age = 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age = LibPerson.compute_default_age</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T142959Z" creationid="makenowjust" creationdate="20200427T142959Z">
        <seg>@age = LibPerson.compute_default_age</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age = some_condition ?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T143445Z" creationid="makenowjust" creationdate="20200427T143440Z">
        <seg>@age = some_condition ? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@arr : Array(Foo)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T105255Z" creationid="makenowjust" creationdate="20200504T105255Z">
        <seg>@arr : Array(Foo)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@arr = [Bar.new]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T105256Z" creationid="makenowjust" creationdate="20200504T105256Z">
        <seg>@arr = [Bar.new]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@arr = [Bar.new] of Foo</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T105719Z" creationid="makenowjust" creationdate="20200504T105719Z">
        <seg>@arr = [Bar.new] of Foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@count += 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T172748Z" creationid="makenowjust" creationdate="20200505T172748Z">
        <seg>@count += 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@horns</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144053Z" creationid="hirofumiwakasugi" creationdate="20151010T144053Z">
        <seg>@horns</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@horns
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T211727Z" creationid="makenowjust" creationdate="20200412T211727Z">
        <seg>@horns
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@horns
end
``````</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140213Z" creationid="hirofumiwakasugi" creationdate="20151010T140213Z">
        <seg>@horns
end
``````</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@lucky_number = 42</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T135612Z" creationid="makenowjust" creationdate="20200427T135612Z">
        <seg>@lucky_number = 42</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@lucky_number ||= 42</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T143625Z" creationid="makenowjust" creationdate="20200427T143625Z">
        <seg>@lucky_number ||= 42</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@name</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055612Z" creationid="hirofumiwakasugi" creationdate="20150904T055612Z">
        <seg>@name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@name : (String | Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135600Z" creationid="hirofumiwakasugi" creationdate="20150904T135600Z">
        <seg>@name : (String | Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@name : Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135155Z" creationid="hirofumiwakasugi" creationdate="20150904T135155Z">
        <seg>@name : Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@name : String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135144Z" creationid="hirofumiwakasugi" creationdate="20150904T135144Z">
        <seg>@name : String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@name = "John Doe"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T135515Z" creationid="makenowjust" creationdate="20200427T135515Z">
        <seg>@name = "John Doe"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@name = name</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055611Z" creationid="hirofumiwakasugi" creationdate="20150904T055611Z">
        <seg>@name = name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@name = obj</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T140709Z" creationid="makenowjust" creationdate="20200427T140709Z">
        <seg>@name = obj</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@num : Int32 = 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T112317Z" creationid="makenowjust" creationdate="20200510T112317Z">
        <seg>@num : Int32 = 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@on_save_callback = block</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061908Z" creationid="hirofumiwakasugi" creationdate="20150918T061908Z">
        <seg>@on_save_callback = block</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@pet : Animal+</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T110541Z" creationid="makenowjust" creationdate="20200504T110541Z">
        <seg>@pet : Animal+</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@pet : Animal+
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T032248Z" creationid="hirofumiwakasugi" creationdate="20150910T032248Z">
        <seg>@pet : Animal+
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@value</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T055443Z" creationid="hirofumiwakasugi" creationdate="20150912T055443Z">
        <seg>@value</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@value : (Nil | String | Int32)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T060150Z" creationid="hirofumiwakasugi" creationdate="20150912T060150Z">
        <seg>@value : (Nil | String | Int32)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@value : Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T055708Z" creationid="hirofumiwakasugi" creationdate="20150912T055708Z">
        <seg>@value : Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@value = new_value</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T064933Z" creationid="hirofumiwakasugi" creationdate="20150912T064933Z">
        <seg>@value = new_value</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@values = Array(Int32).new</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T140102Z" creationid="makenowjust" creationdate="20200427T140102Z">
        <seg>@values = Array(Int32).new</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@x</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035032Z" creationid="hirofumiwakasugi" creationdate="20150906T035032Z">
        <seg>@x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@x = 0_i64</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T020256Z" creationid="makenowjust" creationdate="20200511T020256Z">
        <seg>@x = 0_i64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@y = 34_i32
end

offsetof(Foo, @y) # =&gt; 8</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T020256Z" creationid="makenowjust" creationdate="20200511T020256Z">
        <seg>@y = 34_i32
end

offsetof(Foo, @y) # =&gt; 8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A "heredoc" is written with `&lt;&lt;-IDENT`, where `IDENT` is an identifier, a sequence of letters and numbers that must start with a letter.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T062113Z" creationid="hirofumiwakasugi" creationdate="20160204T061927Z">
        <seg>ヒアドキュメントは `&lt;&lt;-IDENT` のように書きます。`IDENT` というのは識別子であり、文字と数字の並びによって構成されます。ただし、識別子の最初は文字で開始する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A *falsey* value is a value that is considered false in those places.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T045450Z" creationid="hirofumiwakasugi" creationdate="20150903T005539Z">
        <seg>一方、「偽 (falsey)」の値は、上記で偽 (false) となる値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A *truthy* value is a value that is considered true for an `if`, `unless`, `while` or `until` guard.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T045444Z" creationid="hirofumiwakasugi" creationdate="20150903T005435Z">
        <seg>「真 (truthy)」の値というのは、`if`、`unless`、`while`、そして `until` の条件で真 (true) となる値を指します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Char&lt;/g1&gt; represents a 32-bit &lt;g2&gt;Unicode&lt;/g2&gt; &lt;g3&gt;code point&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T185658Z" creationid="makenowjust" creationdate="20200419T185658Z">
        <seg>&lt;g1&gt;Char&lt;/g1&gt;は32 bitの&lt;g2&gt;Unicode&lt;/g2&gt;&lt;g3&gt;コードポイント&lt;/g3&gt;を表現します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Char&lt;/g1&gt;http://crystal-lang.org/api/Char.html&lt;e4/&gt; represents a 32-bit &lt;g2&gt;Unicode&lt;/g2&gt;http://en.wikipedia.org/wiki/Unicode&lt;e5/&gt; &lt;g3&gt;code point&lt;/g3&gt;http://en.wikipedia.org/wiki/Code_point&lt;e6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T084829Z" creationid="makenowjust" creationdate="20200518T084829Z">
        <seg>&lt;g1&gt;Char&lt;/g1&gt;http://crystal-lang.org/api/Char.html&lt;e4/&gt; は 32bit の &lt;g2&gt;Unicode&lt;/g2&gt;http://en.wikipedia.org/wiki/Unicode&lt;e5/&gt; &lt;g3&gt;コードポイント&lt;/g3&gt;http://en.wikipedia.org/wiki/Code_point&lt;e6/&gt;を表現します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Char&lt;/g1&gt;https://crystal-lang.org/api/latest/Char.html&lt;e4/&gt; represents a 32-bit &lt;g2&gt;Unicode&lt;/g2&gt;http://en.wikipedia.org/wiki/Unicode&lt;e5/&gt; &lt;g3&gt;code point&lt;/g3&gt;http://en.wikipedia.org/wiki/Code_point&lt;e6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T084504Z" creationid="makenowjust" creationdate="20210324T084504Z">
        <seg>&lt;g1&gt;Char&lt;/g1&gt;https://crystal-lang.org/api/latest/Char.html&lt;e4/&gt; は 32bit の &lt;g2&gt;Unicode&lt;/g2&gt;http://en.wikipedia.org/wiki/Unicode&lt;e5/&gt; &lt;g3&gt;コードポイント&lt;/g3&gt;http://en.wikipedia.org/wiki/Code_point&lt;e6/&gt; を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;GitHub&lt;/g1&gt;https://github.com&lt;e3/&gt; or &lt;g2&gt;GitLab&lt;/g2&gt;https://gitlab.com/&lt;e4/&gt; account</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T154430Z" creationid="makenowjust" creationdate="20200527T154430Z">
        <seg>&lt;g1&gt;GitHub&lt;/g1&gt;https://github.com&lt;e3/&gt; もしくは &lt;g2&gt;GitLab&lt;/g2&gt;https://gitlab.com/&lt;e4/&gt; のアカウント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Hash&lt;/g1&gt; is a generic collection of key-value pairs mapping keys of type &lt;g2&gt;K&lt;/g2&gt; to values of type &lt;g3&gt;V&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T174939Z" creationid="makenowjust" creationdate="20200420T174912Z">
        <seg>&lt;g1&gt;Hash&lt;/g1&gt;は&lt;g2&gt;K&lt;/g2&gt;型のキーと&lt;g3&gt;V&lt;/g3&gt;型の値のペアの対応付けからなるジェネリックなコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Hash&lt;/g1&gt;http://crystal-lang.org/api/Hash.html&lt;e4/&gt; is a generic collection of key-value pairs mapping keys of type &lt;g2&gt;K&lt;/g2&gt; to values of type &lt;g3&gt;V&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T085427Z" creationid="makenowjust" creationdate="20200518T085427Z">
        <seg>&lt;g1&gt;Hash&lt;/g1&gt;http://crystal-lang.org/api/Hash.html&lt;e4/&gt; は &lt;g2&gt;K&lt;/g2&gt; 型のキーと &lt;g3&gt;V&lt;/g3&gt; 型の値のペアの対応付けからなるジェネリックなコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Hash&lt;/g1&gt;https://crystal-lang.org/api/latest/Hash.html&lt;e4/&gt; is a generic collection of key-value pairs mapping keys of type &lt;g2&gt;K&lt;/g2&gt; to values of type &lt;g3&gt;V&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T082635Z" creationid="makenowjust" creationdate="20210324T082635Z">
        <seg>&lt;g1&gt;Hash&lt;/g1&gt;https://crystal-lang.org/api/latest/Hash.html&lt;e4/&gt; は &lt;g2&gt;K&lt;/g2&gt; 型のキーと &lt;g3&gt;V&lt;/g3&gt; 型の当たい のペアの対応付けからなるジェネリックなコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;NamedTuple&lt;/g1&gt; can be splat into a method call by using &lt;g2&gt;**&lt;/g2&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T155213Z" creationid="makenowjust" creationdate="20200429T155213Z">
        <seg>&lt;g1&gt;NamedTuple&lt;/g1&gt; はメソッド呼び出しで &lt;g2&gt;**&lt;/g2&gt; を使うことで引数に展開されて渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;NamedTuple&lt;/g1&gt; is typically created with a named tuple literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T165933Z" creationid="makenowjust" creationdate="20200422T165933Z">
        <seg>&lt;g1&gt;NamedTuple&lt;/g1&gt;は通常名前付きタプルリテラルによって生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;NamedTuple&lt;/g1&gt;http://crystal-lang.org/api/NamedTuple.html&lt;e2/&gt; is typically created with a named tuple literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T085514Z" creationid="makenowjust" creationdate="20200518T085511Z">
        <seg>&lt;g1&gt;NamedTuple&lt;/g1&gt;http://crystal-lang.org/api/NamedTuple.html&lt;e2/&gt; は通常名前付きタプルリテラルにより生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;NamedTuple&lt;/g1&gt;https://crystal-lang.org/api/latest/NamedTuple.html&lt;e2/&gt; is typically created with a named tuple literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T082351Z" creationid="makenowjust" creationdate="20210324T082351Z">
        <seg>&lt;g1&gt;NamedTuple&lt;/g1&gt;https://crystal-lang.org/api/latest/NamedTuple.html&lt;e2/&gt; は通常名前付きタプルリテラルにより生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Proc&lt;/g1&gt; represents a function pointer with an optional context (the closure data).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171059Z" creationid="makenowjust" creationdate="20200422T171059Z">
        <seg>&lt;g1&gt;Proc&lt;/g1&gt;は追加のコンテキスト (クロージャ) を持つ関数ポインタです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Proc&lt;/g1&gt;http://crystal-lang.org/api/Proc.html&lt;e2/&gt; represents a function pointer with an optional context (the closure data).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T085627Z" creationid="makenowjust" creationdate="20200518T085627Z">
        <seg>&lt;g1&gt;Proc&lt;/g1&gt;http://crystal-lang.org/api/Proc.html&lt;e2/&gt; は追加のコンテキスト (クロージャ) を持つ関数ポインタです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Proc&lt;/g1&gt;https://crystal-lang.org/api/latest/Proc.html&lt;e2/&gt; represents a function pointer with an optional context (the closure data).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T081631Z" creationid="makenowjust" creationdate="20210324T081631Z">
        <seg>&lt;g1&gt;Proc&lt;/g1&gt;https://crystal-lang.org/api/latest/Proc.html&lt;e2/&gt; は追加のコンテキスト (クロージャ) を持つ関数ポインタです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Range&lt;/g1&gt; represents an interval between two values.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T033759Z" creationid="makenowjust" creationdate="20200421T033759Z">
        <seg>&lt;g1&gt;Range&lt;/g1&gt;は2つ値の区間を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Range&lt;/g1&gt;http://crystal-lang.org/api/Range.html&lt;e2/&gt; represents an interval between two values.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T085831Z" creationid="makenowjust" creationdate="20200518T085831Z">
        <seg>&lt;g1&gt;Range&lt;/g1&gt;http://crystal-lang.org/api/Range.html&lt;e2/&gt; は2つの値の区間を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Range&lt;/g1&gt;https://crystal-lang.org/api/latest/Range.html&lt;e2/&gt; represents an interval between two values.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T081418Z" creationid="makenowjust" creationdate="20210324T081418Z">
        <seg>&lt;g1&gt;Range&lt;/g1&gt;https://crystal-lang.org/api/latest/Range.html&lt;e2/&gt; は2つの値による区間を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;String&lt;/g1&gt; represents an immutable sequence of UTF-8 characters.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T191432Z" creationid="makenowjust" creationdate="20200419T191432Z">
        <seg>&lt;g1&gt;String&lt;/g1&gt;はUTF-8文字のイミュータブルな列を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;String&lt;/g1&gt;http://crystal-lang.org/api/String.html&lt;e2/&gt; represents an immutable sequence of UTF-8 characters.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T090000Z" creationid="makenowjust" creationdate="20200518T090000Z">
        <seg>&lt;g1&gt;String&lt;/g1&gt;http://crystal-lang.org/api/String.html&lt;e2/&gt; は UTF-8 文字の不変な列を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;String&lt;/g1&gt;https://crystal-lang.org/api/latest/String.html&lt;e2/&gt; represents an immutable sequence of UTF-8 characters.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T081057Z" creationid="makenowjust" creationdate="20210324T081057Z">
        <seg>&lt;g1&gt;String&lt;/g1&gt;https://crystal-lang.org/api/latest/String.html&lt;e2/&gt; は UTF-8 文字の不変な列を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Symbol&lt;/g1&gt; represents a unique name inside the entire source code.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T170817Z" creationid="makenowjust" creationdate="20200420T170817Z">
        <seg>&lt;g1&gt;Symbol&lt;/g1&gt;はソースコード全体でユニークな名前を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Symbol&lt;/g1&gt;http://crystal-lang.org/api/Symbol.html&lt;e2/&gt; represents a unique name inside the entire source code.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T090036Z" creationid="makenowjust" creationdate="20200518T090036Z">
        <seg>&lt;g1&gt;Symbol&lt;/g1&gt;http://crystal-lang.org/api/Symbol.html&lt;e2/&gt; はソースコード全体で一意な名前を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Symbol&lt;/g1&gt;https://crystal-lang.org/api/latest/Symbol.html&lt;e2/&gt; represents a unique name inside the entire source code.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T081037Z" creationid="makenowjust" creationdate="20210324T081037Z">
        <seg>&lt;g1&gt;Symbol&lt;/g1&gt;https://crystal-lang.org/api/latest/Symbol.html&lt;e2/&gt; はソースコード全体で一意な名前を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Tuple&lt;/g1&gt; can be splat into a method call by using &lt;g2&gt;*&lt;/g2&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T154935Z" creationid="makenowjust" creationdate="20200429T154935Z">
        <seg>&lt;g1&gt;タプル&lt;/g1&gt; はメソッド呼び出しで &lt;g2&gt;*&lt;/g2&gt; を使うことで引数に展開されて渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Tuple&lt;/g1&gt; is typically created with a tuple literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T164921Z" creationid="makenowjust" creationdate="20200422T164921Z">
        <seg>&lt;g1&gt;Tuple&lt;/g1&gt;は通常タプルリテラルによって生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Tuple&lt;/g1&gt;http://crystal-lang.org/api/Tuple.html&lt;e2/&gt; is typically created with a tuple literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T090102Z" creationid="makenowjust" creationdate="20200518T090102Z">
        <seg>&lt;g1&gt;Tuple&lt;/g1&gt;http://crystal-lang.org/api/Tuple.html&lt;e2/&gt; は通常タプルリテラルにより生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Tuple&lt;/g1&gt;https://crystal-lang.org/api/latest/Tuple.html&lt;e2/&gt; is typically created with a tuple literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T080956Z" creationid="makenowjust" creationdate="20210324T080956Z">
        <seg>&lt;g1&gt;Tuple&lt;/g1&gt;https://crystal-lang.org/api/latest/Tuple.html&lt;e2/&gt; は通常タプルリテラルにより生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;break&lt;/g1&gt; expression inside a block exits early from the method:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190208Z" creationid="makenowjust" creationdate="20200505T190208Z">
        <seg>ブロックの中に &lt;g1&gt;break&lt;/g1&gt; 式があると、そこでメソッドを抜けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;case&lt;/g1&gt; is a control expression which functions a bit like pattern matching.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090838Z" creationid="makenowjust" creationdate="20200424T090838Z">
        <seg>&lt;g1&gt;case&lt;/g1&gt;はパターンマッチのような雰囲気の制御式です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;def&lt;/g1&gt; is implicitly considered a &lt;g2&gt;macro def&lt;/g2&gt; if it contains a macro expression which refers to &lt;g3&gt;@type&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T223529Z" creationid="makenowjust" creationdate="20200509T223529Z">
        <seg>&lt;g1&gt;def&lt;/g1&gt; は &lt;g3&gt;@type&lt;/g3&gt; を参照するマクロ式が含まれているときに &lt;g2&gt;macro def&lt;/g2&gt; として考慮されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;description&lt;/g1&gt; is a single line description used to search for and find your shard.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T162537Z" creationid="makenowjust" creationdate="20200527T162537Z">
        <seg>&lt;g1&gt;description&lt;/g1&gt; は1行の説明文で、検索の際に使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;fun&lt;/g1&gt; declaration inside a &lt;g2&gt;lib&lt;/g2&gt; binds to a C function.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T031011Z" creationid="makenowjust" creationdate="20200511T031011Z">
        <seg>&lt;g2&gt;lib&lt;/g2&gt; の中で &lt;g1&gt;fun&lt;/g1&gt; を宣言すると、C 関数へのバインディングとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;here document&lt;/g1&gt; or &lt;g2&gt;heredoc&lt;/g2&gt; can be useful for writing strings spanning over multiple lines.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T033420Z" creationid="makenowjust" creationdate="20200420T033420Z">
        <seg>&lt;g1&gt;ヒアドキュメント&lt;/g1&gt;ないし&lt;g2&gt;heredoc&lt;/g2&gt;は複数行にまたがる文字列の便利な書き方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;lib&lt;/g1&gt; declaration groups C functions and types that belong to a library.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T030347Z" creationid="makenowjust" creationdate="20200511T030347Z">
        <seg>&lt;g1&gt;lib&lt;/g1&gt; 宣言によって、C ライブラリの関数群や型をグループ化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;module&lt;/g1&gt; can include other modules, so when a method is not found in it it will be looked up in the included modules.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141605Z" creationid="makenowjust" creationdate="20200504T141605Z">
        <seg>&lt;g1&gt;module&lt;/g1&gt; が別のモジュールをインクルードすることも可能です。そのとき、モジュールにメソッドが見つからなかった場合は、インクルードされたモジュールの中を探します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;private&lt;/g1&gt; method can only be invoked without a receiver, that is, without something before the dot.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T105415Z" creationid="makenowjust" creationdate="20200502T105350Z">
        <seg>&lt;g1&gt;private&lt;/g1&gt; メソッドはレシーバのない形式でのみ呼び出すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;private&lt;/g1&gt; top-level method is only visible in the current file.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T112717Z" creationid="makenowjust" creationdate="20200502T112717Z">
        <seg>&lt;g1&gt;private&lt;/g1&gt; をトップレベルのメソッドにつけると、現在のファイルからのみ見えるものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;private&lt;/g1&gt; top-level type is only visible in the current file.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T113019Z" creationid="makenowjust" creationdate="20200502T113019Z">
        <seg>&lt;g1&gt;private&lt;/g1&gt; をトップレベルの型につけると、現在のファイルからのみ見えるものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;protected&lt;/g1&gt; method can only be invoked from the scope of its class or its descendants.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T112123Z" creationid="makenowjust" creationdate="20200502T112123Z">
        <seg>&lt;g1&gt;protected&lt;/g1&gt; メソッドは現在のスコープや、そのさらに下のスコープからのみ呼び出すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;protected&lt;/g1&gt; method can only be invoked on:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T110219Z" creationid="makenowjust" creationdate="20200502T110140Z">
        <seg>&lt;g1&gt;protected&lt;/g1&gt; メソッドは次のレシーバに対してのみ呼び出せるメソッドです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;struct&lt;/g1&gt; declaration inside a &lt;g2&gt;lib&lt;/g2&gt; declares a C struct.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T092024Z" creationid="makenowjust" creationdate="20200512T082652Z">
        <seg>&lt;g2&gt;lib&lt;/g2&gt; の内部で &lt;g1&gt;struct&lt;/g1&gt; を宣言することで、C の構造体を宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;truthy&lt;/g1&gt; value is a value that is considered true for an &lt;g2&gt;if&lt;/g2&gt;, &lt;g3&gt;unless&lt;/g3&gt;, &lt;g4&gt;while&lt;/g4&gt; or &lt;g5&gt;until&lt;/g5&gt; guard.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T060419Z" creationid="makenowjust" creationdate="20200424T060419Z">
        <seg>&lt;g1&gt;真になる&lt;/g1&gt;値というのは、&lt;g2&gt;if&lt;/g2&gt;、&lt;g3&gt;unless&lt;/g3&gt;、&lt;g4&gt;while&lt;/g4&gt;、そして&lt;g5&gt;until&lt;/g5&gt;の条件で真 (true) となる値を指します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;type&lt;/g1&gt; declaration inside a &lt;g2&gt;lib&lt;/g2&gt; declares a kind of C &lt;g3&gt;typedef&lt;/g3&gt;, but stronger:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T084504Z" creationid="makenowjust" creationdate="20200512T084452Z">
        <seg>&lt;g2&gt;lib&lt;/g2&gt; 宣言の内部で &lt;g1&gt;type&lt;/g1&gt; を宣言すると、C の `typedef` 宣言に近いことができます。ただし、より厳密に振舞います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;union&lt;/g1&gt; declaration inside a &lt;g2&gt;lib&lt;/g2&gt; declares a C union:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083323Z" creationid="makenowjust" creationdate="20200512T083323Z">
        <seg>&lt;g2&gt;lib&lt;/g2&gt; の内部で &lt;g1&gt;union&lt;/g1&gt; を宣言することで C の共用体を宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;while&lt;/g1&gt; executes its body as long as its condition is &lt;g2&gt;truthy&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095554Z" creationid="makenowjust" creationdate="20200424T094708Z">
        <seg>&lt;g1&gt;while&lt;/g1&gt;は条件式が&lt;g2&gt;真となる&lt;/g2&gt;間は繰り返して本体を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;while&lt;/g1&gt;'s type is always &lt;g2&gt;Nil&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094808Z" creationid="makenowjust" creationdate="20200424T094808Z">
        <seg>&lt;g1&gt;while&lt;/g1&gt;の型が常に&lt;g2&gt;Nil&lt;/g2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;yield&lt;/g1&gt; expression can be modified, using the &lt;g2&gt;with&lt;/g2&gt; keyword, to specify an object to use as the default receiver of method calls within the block:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T191439Z" creationid="makenowjust" creationdate="20200505T191439Z">
        <seg>&lt;g1&gt;yield&lt;/g1&gt; 式に &lt;g2&gt;with&lt;/g2&gt; キーワードを使うと、ブロック内でメソッドを実行する際にデフォルトのレシーバとなるオブジェクトを指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;yield&lt;/g1&gt; expression's value is mostly useful for transforming and filtering values.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185927Z" creationid="makenowjust" creationdate="20200505T185927Z">
        <seg>&lt;g1&gt;yield&lt;/g1&gt; 式の値は、主に値の変換やフィルタリングの際に有効に利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g2&gt;Person&lt;/g2&gt; has a name and an age.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T102634Z" creationid="makenowjust" creationdate="20200427T102634Z">
        <seg>&lt;g2&gt;Person&lt;/g2&gt; は名前 (name) と年齢 (age) を持つことにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g3&gt;lib&lt;/g3&gt; is a reusable library whereas &lt;g4&gt;app&lt;/g4&gt; describes
an application not intended to be used as a dependency.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161301Z" creationid="makenowjust" creationdate="20200419T161301Z">
        <seg>&lt;g3&gt;lib&lt;/g3&gt;は再利用可能なライブラリで、&lt;g4&gt;app&lt;/g4&gt;は依存関係に含めることのないアプリケーションであることを意図しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g6&gt;falsey&lt;/g6&gt; value is a value that is considered false in those places.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T060502Z" creationid="makenowjust" creationdate="20200424T060502Z">
        <seg>一方、&lt;g6&gt;偽になる&lt;/g6&gt;値は、上記で偽 (false) となる値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A = 1_u32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053221Z" creationid="hirofumiwakasugi" creationdate="20151007T053221Z">
        <seg>A = 1_u32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A C struct is passed by value (as a copy) to functions and methods, and also passed by value when it is returned from a method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T051836Z" creationid="hirofumiwakasugi" creationdate="20151007T051635Z">
        <seg>C の構造体は関数やメソッドに (コピーとして) 値渡しされます。また、メソッドから返るときも値で渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A C struct starts with all its fields set to "zero": integers and floats start at zero, pointers start with an address of zero, etc.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T050222Z" creationid="hirofumiwakasugi" creationdate="20151007T050017Z">
        <seg>C の構造体は、初期状態として、すべての値が「ゼロ」の状態になります。つまり、整数と浮動小数点数はゼロで、ポインタはゼロのアドレスを指している、などの状態です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A C union is passed by value (as a copy) to functions and methods, and also passed by value when it is returned from a method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052326Z" creationid="hirofumiwakasugi" creationdate="20151007T052326Z">
        <seg>C の共用体は関数やメソッドに (コピーとして) 値渡しされます。また、メソッドから返るときも値で渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A C union starts with all its fields set to "zero": integers and floats start at zero, pointers start with an address of zero, etc.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052256Z" creationid="hirofumiwakasugi" creationdate="20151007T052256Z">
        <seg>C の共用体は、初期状態として、すべての値が「ゼロ」の状態になります。つまり、整数と浮動小数点数はゼロで、ポインタはゼロのアドレスを指している、などの状態です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Complete Example</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215311Z" creationid="makenowjust" creationdate="20200412T215311Z">
        <seg>全体の例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Crystal program executes in a single operating system thread, except the Garbage Collector (GC) which implements a concurrent mark-and-sweep (currently &lt;g1&gt;Boehm GC&lt;/g1&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T113141Z" creationid="akiji" creationdate="20200428T054020Z">
        <seg>コンカレント・マーク＆スイープ方式で実装されたガベージコレクタ（GC）（現時点では&lt;g1&gt;Boehm GC&lt;/g1&gt;）を除いて、Crystalのプログラムは単一のOSスレッド上で実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Crystal program executes in a single operating system thread, except the Garbage Collector (GC) which implements a concurrent mark-and-sweep (currently &lt;g1&gt;Boehm GC&lt;/g1&gt;http://www.hboehm.info/gc/&lt;e2/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081419Z" creationid="makenowjust" creationdate="20200518T081419Z">
        <seg>コンカレント・マーク＆スイープ方式で実装されたガベージコレクタ（GC）（現時点では &lt;g1&gt;Boehm GC&lt;/g1&gt;http://www.hboehm.info/gc/&lt;e2/&gt;) を除いて、Crystal のプログラムは単一の OS スレッド上で実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Fiber</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T150538Z" creationid="akiji" creationdate="20200428T055816Z">
        <seg>ファイバ単体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Fiber is much more lightweight than a thread: even though it's assigned 8MB, it starts with a small stack of 4KB.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T062627Z" creationid="akiji" creationdate="20200428T062627Z">
        <seg>ファイバはスレッドと比べて軽量で、8MB割り当てられていてもその開始時には4KBという小さなスタック領域しか使用しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Foo array can hold both Foo's and Bar's, but an array of Bar can only hold Bar and its subclasses.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T104714Z" creationid="makenowjust" creationdate="20200504T104714Z">
        <seg>Foo の配列は Foo と Bar を持つことができますが、Bar の配列は Bar とそのサブクラスしか持つことができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Hash can have mixed types, both for the keys and values, meaning `K`/`V` will be union types, but these are determined when the hash is created, either by specifying `K` and `V` or by using a hash literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010300Z" creationid="hirofumiwakasugi" creationdate="20150901T141745Z">
        <seg>ハッシュは異なる型を持つことが可能です。これは `K`/`V` それぞれが複数の型の組み合わせ (ユニオン型) となることを意味しています。ただ、それらの型はハッシュが作られたときに決定されます。つまり、ハッシュの生成時に明示的に指定された `K` と `T` か、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Proc can be created from an existing method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022254Z" creationid="hirofumiwakasugi" creationdate="20150902T022048Z">
        <seg>既存のメソッドから Proc を作ることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Regex is typically created with a regex literal using &lt;g1&gt;PCRE&lt;/g1&gt; syntax.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T040449Z" creationid="makenowjust" creationdate="20200421T040449Z">
        <seg>正規表現には&lt;g1&gt;PCRE&lt;/g1&gt;の構文を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Regex is typically created with a regex literal using &lt;g1&gt;PCRE&lt;/g1&gt;http://pcre.org/pcre.txt&lt;e3/&gt; syntax.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T085914Z" creationid="makenowjust" creationdate="20200518T085914Z">
        <seg>正規表現には &lt;g1&gt;PCRE&lt;/g1&gt;http://pcre.org/pcre.txt&lt;e3/&gt; の構文を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A String is typically created with a string literal enclosing UTF-8 characters in double quotes (&lt;g1&gt;"&lt;/g1&gt;):</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T191537Z" creationid="makenowjust" creationdate="20200419T191537Z">
        <seg>通常、ダブルクォート (&lt;g1&gt;"&lt;/g1&gt;) で囲まれたUTF-8でエンコードされた文字の並びで文字列リテラルを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A String is typically created with a string literal, enclosing UTF-8 characters in double quotes:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T081024Z" creationid="hirofumiwakasugi" creationdate="20150901T081024Z">
        <seg>通常、ダブルクォートで囲んだ UTF-8 文字の並びで文字列リテラルを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A [Char](http://crystal-lang.org/api/Char.html) represents a [Unicode](http://en.wikipedia.org/wiki/Unicode) [code point](http://en.wikipedia.org/wiki/Code_point).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T080922Z" creationid="hirofumiwakasugi" creationdate="20150901T074147Z">
        <seg>文字 ([Char](http://crystal-lang.org/api/Char.html)) は [Unicode](http://en.wikipedia.org/wiki/Unicode) の[コードポイント](http://en.wikipedia.org/wiki/Code_point)を表したもので、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A [Hash](http://crystal-lang.org/api/Hash.html) representing a mapping of keys of a type `K` to values of a type `V`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140843Z" creationid="hirofumiwakasugi" creationdate="20150901T140718Z">
        <seg>ハッシュ ([Hash](http://crystal-lang.org/api/Hash.html)) は、`K` 型のキーと `V` 型の値のマッピングを表現するための型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A [Proc](http://crystal-lang.org/api/Proc.html) represents a function pointer with an optional context (the closure data).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021022Z" creationid="hirofumiwakasugi" creationdate="20150902T021022Z">
        <seg>[Proc](http://crystal-lang.org/api/Proc.html) は関数ポインタを表すオブジェクトで、追加のコンテキスト (クロージャ) を含むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A [Range](http://crystal-lang.org/api/Range.html) is typically constructed with a range literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T014408Z" creationid="hirofumiwakasugi" creationdate="20150902T014234Z">
        <seg>範囲 ([Range](http://crystal-lang.org/api/Range.html)) オブジェクトを作るには範囲リテラルを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A [String](http://crystal-lang.org/api/String.html) represents an immutable sequence of UTF-8 characters.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T080913Z" creationid="hirofumiwakasugi" creationdate="20150901T080913Z">
        <seg>文字列 ([String](http://crystal-lang.org/api/String.html)) は UTF-8 の文字の不変 (イミュータブル) なシーケンスを表したものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A [Symbol](http://crystal-lang.org/api/Symbol.html) is a constant that is identified by a name without you having to give it a numeric value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022842Z" creationid="hirofumiwakasugi" creationdate="20150901T131055Z">
        <seg>シンボル ([Symbol](http://crystal-lang.org/api/Symbol.html)) というのは、数値を与えることなく、その名前で識別することが可能な定数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A [Tuple](http://crystal-lang.org/api/Tuple.html) is typically created with a tuple literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T020837Z" creationid="hirofumiwakasugi" creationdate="20150902T020742Z">
        <seg>タプル ([Tuple](http://crystal-lang.org/api/Tuple.html)) を作るには、以下のタプルリテラルを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `Person` has a name and an age.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T022759Z" creationid="hirofumiwakasugi" creationdate="20150904T022754Z">
        <seg>`Person` は名前 (name) と年齢 (age) を持つことにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `break` expression inside a block exits early from the method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024338Z" creationid="hirofumiwakasugi" creationdate="20150916T024338Z">
        <seg>ブロックの中に `break` 式があるとそこでメソッドを抜けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `case` is a control expression that allows a sort of pattern matching.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T023256Z" creationid="hirofumiwakasugi" creationdate="20150903T022953Z">
        <seg>`case` を使うと、パターンマッチングを利用した条件によって制御を行うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `fun` declaration inside a `lib` binds to a C function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T143646Z" creationid="hirofumiwakasugi" creationdate="20151003T143615Z">
        <seg>`lib` の中で`fun` を宣言すると、C 関数へのバインディングとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `lib` declaration groups C functions and types that belong to a library.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T142255Z" creationid="hirofumiwakasugi" creationdate="20151003T142251Z">
        <seg>`lib` の宣言によって、C ライブラリの関数群や型をグループ化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `module` can include other modules, so when a method is not found in it it will be looked up in the included modules.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T140733Z" creationid="hirofumiwakasugi" creationdate="20150911T140703Z">
        <seg>`module` が別のモジュールをインクルードすることも可能です。したがって、モジュールにメソッドが見つからなかった場合は、インクルードされたモジュールの中を探します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `private` method can only be invoked without a receiver, that is, without something before the dot:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032643Z" creationid="hirofumiwakasugi" creationdate="20150909T032505Z">
        <seg>`private` メソッドはレシーバの指定なしでのみ実行可能です。つまり、ドットを使わない形でしか実行できないということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `private` top-level method is only visible in the current file.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T040817Z" creationid="hirofumiwakasugi" creationdate="20150909T040759Z">
        <seg>トップレベルに定義された `private` メソッドはそのファイルの中でのみ見えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `protected` class method can be invoked from an instance method and the other way around:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T042829Z" creationid="hirofumiwakasugi" creationdate="20150909T033751Z">
        <seg>`protected` のクラスメソッドはインスタンスメソッドから実行することが可能で、その反対の場合も同様です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `protected` method can only be invoked on instances of the same type as the current type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033248Z" creationid="hirofumiwakasugi" creationdate="20150909T032835Z">
        <seg>`protected` メソッドは、その型と同一の型のインスタンスに対してのみ実行可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `struct` declaration inside a `lib` declares a C struct.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052154Z" creationid="hirofumiwakasugi" creationdate="20151007T045546Z">
        <seg>`lib` の内部で `struct` を宣言することで C の構造体を宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `type` declaration inside a `lib` declares a kind of C `typedef`, but stronger:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023028Z" creationid="hirofumiwakasugi" creationdate="20151008T022202Z">
        <seg>`lib` 宣言の内部で `type` を宣言すると、C の `typedef` の宣言に近いことができます。ただし、より厳密です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `union` declaration inside a `lib` declares a C union:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052146Z" creationid="hirofumiwakasugi" creationdate="20151007T052108Z">
        <seg>`lib` の内部で `union` を宣言することで C の共用体を宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `while` executes its body as long as its condition is *truthy*.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052044Z" creationid="hirofumiwakasugi" creationdate="20150905T052044Z">
        <seg>`while` は、与えられた条件が「真」である間はずっと、その本体を繰り返し実行し続けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `while`'s type is always `Nil`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052107Z" creationid="hirofumiwakasugi" creationdate="20150905T052107Z">
        <seg>`while` の型は常に `Nil` です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `yield` expression can be modified, using the `with` keyword, to specify an object to use as the default receiver of method calls within the block:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030935Z" creationid="hirofumiwakasugi" creationdate="20150916T030444Z">
        <seg>`yield` 式に `with` キーワードを使うと、ブロック内でメソッドを実行する際にデフォルトのレシーバとなるオブジェクトを指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `yield` expression's value is mostly useful for transforming and filtering values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023657Z" creationid="hirofumiwakasugi" creationdate="20150916T023640Z">
        <seg>`yield` 式の値は、主に値の変換やフィルタリングの際に有効に利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A backslash can be used to denote some characters inside the string:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T081044Z" creationid="hirofumiwakasugi" creationdate="20150901T081044Z">
        <seg>文字列中のいくつかの文字はバックスラッシュを使って表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A backslash denotes a special character inside a string, which can either be a named escape sequence or a numerical representation of a unicode codepoint.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T191704Z" creationid="makenowjust" creationdate="20200419T191704Z">
        <seg>文字列中では、バックスラッシュによる名前つきのエスケープシーケンスやコードポイントの数値表現によって、特別な文字を記述できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A backslash denotes a special character, which can either be a named escape sequence or a numerical representation of a unicode codepoint.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T190155Z" creationid="makenowjust" creationdate="20200419T185928Z">
        <seg>バックスラッシュによる名前つきのエスケープスーケンスかコードポイントの数値表現で、特別な文字を記述できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A backslash followed by a &lt;g1&gt;u&lt;/g1&gt; denotes a unicode codepoint.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T190151Z" creationid="makenowjust" creationdate="20200419T190151Z">
        <seg>バックスラッシュに&lt;g1&gt;u&lt;/g1&gt;を続けることでユニコードのコードポイントを記述できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A backslash followed by at most three digits ranging from 0 to 7 denotes a code point written in octal:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192018Z" creationid="makenowjust" creationdate="20200419T192018Z">
        <seg>バックスラッシュに続く最大3つの0から7までの数値は、8進数によるコードポイントの記述となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A block argument can specify sub-arguments enclosed in parentheses:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T191522Z" creationid="makenowjust" creationdate="20200505T191522Z">
        <seg>括弧で囲むことで引数をブロック引数をアンパックできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A block can also specify more than the arguments yielded, and these will be `nil`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022920Z" creationid="hirofumiwakasugi" creationdate="20150916T022546Z">
        <seg>ブロックに指定するのが yield される引数の数より多い場合には、それらは `nil` になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A block can be captured and turned into a &lt;g1&gt;Proc&lt;/g1&gt;, which represents a block of code with an associated context: the closured data.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T193059Z" creationid="makenowjust" creationdate="20200505T193059Z">
        <seg>ブロックを捕捉して &lt;g1&gt;Proc&lt;/g1&gt; にすることができます。これはコンテキストに結び付いてコードブロック (クロージャ) を表すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A block can be captured and turned into a `Proc`, which represents a block of code with an associated context: the closured data.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061838Z" creationid="hirofumiwakasugi" creationdate="20150916T035735Z">
        <seg>ブロックを捕捉して `Proc` にすることができます (captured block) 。 これはコンテキストに結びついたコードブロック (クロージャ) を表現するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A block can specify fewer parameters than the arguments yielded:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094427Z" creationid="makenowjust" creationdate="20210324T094427Z">
        <seg>ブロックに指定するのが yield される引数の数より少なくても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A block can specify less than the arguments yielded:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022851Z" creationid="hirofumiwakasugi" creationdate="20150916T022441Z">
        <seg>ブロックに指定するのが yield される引数の数より少なくても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A block parameter can specify sub-parameters enclosed in parentheses:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094824Z" creationid="makenowjust" creationdate="20210324T094824Z">
        <seg>括弧で囲むことでブロック引数をアンパックできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A captured block is the same as declaring a &lt;g1&gt;Proc literal&lt;/g1&gt; and &lt;g2&gt;passing&lt;/g2&gt; it to the method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T074356Z" creationid="makenowjust" creationdate="20200506T074356Z">
        <seg>捕捉されたブロックは &lt;g1&gt;Proc リテラル&lt;/g1&gt;を宣言してメソッドに&lt;g2&gt;渡す&lt;/g2&gt;ことと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A captured block is the same as declaring a [Proc literal](literals/proc.html) and [passing](block_forwarding.html) it to the method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061637Z" creationid="hirofumiwakasugi" creationdate="20150917T022136Z">
        <seg>捕捉されたブロック (captured block) は、[Proc リテラル](literals/proc.html) を宣言してメソッドに[渡す](block_forwarding.html)ことと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class implicitly inherits from &lt;g3&gt;Reference&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T174717Z" creationid="makenowjust" creationdate="20200505T174717Z">
        <seg>一方、クラスは &lt;g3&gt;Reference&lt;/g3&gt; を継承しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class implicitly inherits from &lt;g3&gt;Reference&lt;/g3&gt;http://crystal-lang.org/api/Reference.html&lt;e6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T091714Z" creationid="makenowjust" creationdate="20200518T091714Z">
        <seg>一方クラスは &lt;g3&gt;Reference&lt;/g3&gt;http://crystal-lang.org/api/Reference.html&lt;e6/&gt; を継承しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class implicitly inherits from &lt;g3&gt;Reference&lt;/g3&gt;https://crystal-lang.org/api/latest/Reference.html&lt;e6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T074931Z" creationid="makenowjust" creationdate="20210324T074931Z">
        <seg>一方クラスは &lt;g3&gt;Reference&lt;/g3&gt;http://crystal-lang.org/api/latest/Reference.html&lt;e6/&gt; を継承しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class implicitly inherits from [Reference](http://crystal-lang.org/api/Reference.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T054141Z" creationid="hirofumiwakasugi" creationdate="20150913T053929Z">
        <seg>一方クラスは [Reference](http://crystal-lang.org/api/Reference.html) を継承する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class inherits all instance variables and all instance and class methods of a superclass, including its constructors (&lt;g1&gt;new&lt;/g1&gt; and &lt;g2&gt;initialize&lt;/g2&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T103653Z" creationid="makenowjust" creationdate="20200504T103653Z">
        <seg>クラスを継承したとき、すべてのインスタンス変数、およびインスタンスメソッドとクラスメソッドがスーパークラスから引き継がれます。その中にはコンストラクタ (&lt;g1&gt;new&lt;/g1&gt; と &lt;g2&gt;initialize&lt;/g2&gt;) も含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class inherits all instance variables and all instance and class methods of a superclass, including its constructors (`new` and `initialize`).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160119T161616Z" creationid="hirofumiwakasugi" creationdate="20150910T023523Z">
        <seg>クラスを継承したとき、すべてのインスタンス変数、およびインスタンスメソッドとクラスメソッドがスーパークラスから引き継がれます。その中にはコンストラクタ (`new` と `initialize`) も含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class is a blueprint from which individual objects are created.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021948Z" creationid="hirofumiwakasugi" creationdate="20150904T021838Z">
        <seg>クラスはオブジェクトの設計図であり、それを使って、それぞれの独立したオブジェクトを作ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class method can be called under the same name as it was defined (&lt;g1&gt;CaesarCipher.decrypt("HELLO")&lt;/g1&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T130637Z" creationid="makenowjust" creationdate="20200504T130508Z">
        <seg>クラスメソッドは定義したときと同じ形で呼び出すことができます (&lt;g1&gt;CaesarCipher.decrypt("HELLO")&lt;/g1&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A command literal is a string delimited by backticks &lt;g1&gt; ` &lt;/g1&gt; or a &lt;g2&gt;%x&lt;/g2&gt; percent literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172434Z" creationid="makenowjust" creationdate="20200422T172434Z">
        <seg>コマンドリテラルとは、バックティック &lt;g1&gt; ` &lt;/g1&gt; で囲まれた文字列、もしくは &lt;g2&gt;%x&lt;/g2&gt; パーセントリテラルのことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A comment using &lt;g1&gt;:&lt;/g1&gt; is used for showing the type of a variable.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162834Z" creationid="makenowjust" creationdate="20200413T162834Z">
        <seg>また、コメントの&lt;g1&gt;:&lt;/g1&gt;は変数の型を示すために利用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A comment using `::` is used for showing the type of a variable.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072402Z" creationid="hirofumiwakasugi" creationdate="20150901T072358Z">
        <seg>また、コメントの `::` は、変数の型を示すために利用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A comment using `:` is used for showing the type of a variable.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061331Z" creationid="hirofumiwakasugi" creationdate="20160204T061331Z">
        <seg>また、コメントの `:` は、変数の型を示すために利用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A common pattern for modules is &lt;g1&gt;extend self&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141736Z" creationid="makenowjust" creationdate="20200504T141736Z">
        <seg>モジュールでよく使われるパターンに &lt;g1&gt;extend self&lt;/g1&gt; というものがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A common pattern for modules is `extend self`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142630Z" creationid="hirofumiwakasugi" creationdate="20150911T142630Z">
        <seg>モジュールでよく使われるパターンに `extend self` というものがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A common technique is to use backticks to execute commands: &lt;g3&gt;@[Link(ldflags: "`pkg-config libpcre --libs`")]&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T030743Z" creationid="makenowjust" creationdate="20200511T030743Z">
        <seg>よく使われるテクニックとしてバックティック (バッククォート) を活用してコマンドを実行するものがあります。 &lt;g3&gt;@[Link(ldflags: "`pkg-config libpcre --libs`")]&lt;/g3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A common technique is to use backticks to execute commands: ``@[Link(ldflags: "`pkg-config libpcre --libs`")]``.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T143336Z" creationid="hirofumiwakasugi" creationdate="20151003T143336Z">
        <seg>よく使われるテクニックとして、バックティック (バッククォート) を活用してコマンドを実行するものがあります。``@[Link(ldflags: "`pkg-config libpcre --libs`")]``.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A compiled language with Ruby like syntax and type inference</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075446Z" creationid="makenowjust" creationdate="20200516T075446Z">
        <seg>Ruby のような構文で型推論のあるコンパイル言語</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A concurrent system is one that can be in charge of many tasks, although not necessarily it is executing them at the same time.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T145825Z" creationid="akiji" creationdate="20200428T053535Z">
        <seg>並行処理システム（concarrent system）はいくつものタスクを扱えるシステムの1種ではありますが、必ずしもそれらのタスクが同時に実行される必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant definition can invoke methods and have complex logic:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055806Z" creationid="hirofumiwakasugi" creationdate="20150913T055730Z">
        <seg>定数を定義する際にメソッドを実行したり、複雑なロジックを使って定義することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A curly braces notation is also available:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T021059Z" creationid="hirofumiwakasugi" creationdate="20150916T020754Z">
        <seg>波カッコを使った指定も可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A default file can be created by running &lt;g3&gt;&lt;g4&gt;shards init&lt;/g4&gt;&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T095126Z" creationid="makenowjust" creationdate="20200419T173723Z">
        <seg>デフォルトのファイルは &lt;g3&gt;&lt;g4&gt;shards init&lt;/g4&gt;&lt;/g3&gt; を実行することで生成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A description should be:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T162547Z" creationid="makenowjust" creationdate="20200527T162547Z">
        <seg>description は次のようにすべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A double splat (&lt;g1&gt;**&lt;/g1&gt;) captures named arguments that were not matched by other arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160639Z" creationid="makenowjust" creationdate="20200429T155036Z">
        <seg>二重スプラット展開 (&lt;g1&gt;**&lt;/g1&gt;) はその他の引数にマッチしなかったすべての名前付き引数をキャプチャします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A double splat (&lt;g1&gt;**&lt;/g1&gt;) captures named arguments that were not matched by other parameters.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T075413Z" creationid="makenowjust" creationdate="20210324T075401Z">
        <seg>二重スプラット展開 (&lt;g1&gt;**&lt;/g1&gt;) はその他の引数にマッチしなかったすべての名前付き引数をキャプチャします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A double-quoted identifier can contain any unicode character including white spaces and accepts the same escape sequences as a &lt;g1&gt;string literal&lt;/g1&gt;, yet no interpolation.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171238Z" creationid="makenowjust" creationdate="20200420T171238Z">
        <seg>ダブルクォートで囲まれた識別子は空白を含む任意のユニコード文字を含むことができて、&lt;g1&gt;文字列リテラル&lt;/g1&gt;で利用できるものと同じエスケープシーケンスを受け付けますが、補間はできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A dummy transformation method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024142Z" creationid="hirofumiwakasugi" creationdate="20150916T023809Z">
        <seg>1つ簡単な変換メソッドを例にあげます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A few applications for annotations:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T113455Z" creationid="makenowjust" creationdate="20200510T105055Z">
        <seg>アノテーションのいくつかの応用例:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A few operators are defined directly by the compiler and cannot be redefined
in user code.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T083128Z" creationid="makenowjust" creationdate="20200502T083128Z">
        <seg>いくつかの少数の演算子はコンパイラによって直接実装され、ユーザーが再定義することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A fiber is an execution unit that is more lightweight than a thread.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T055854Z" creationid="akiji" creationdate="20200428T055854Z">
        <seg>単一のファイバは、スレッドと比べるとより軽量な処理の実行単位です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A fiber is in a way similar to an operating system thread except that it's much more lightweight and its execution is managed internally by the process.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T064844Z" creationid="akiji" creationdate="20200428T054214Z">
        <seg>ファイバはOSスレッドとよく似ていますがより軽量で、その実行はプロセスによって内部的に管理されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A fiber must explicitly tell the Runtime Scheduler to switch to another fiber.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T065835Z" creationid="akiji" creationdate="20200428T062234Z">
        <seg>ファイバはラインタイムスケジューラに対して、明示的に「他のファイバへ処理を切り替えて良い」と伝える必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A filename can be suffixed by &lt;g4&gt;:&lt;/g4&gt;
and a line number, providing this location to the &lt;g5&gt;--location&lt;/g5&gt; runner option (see below).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164251Z" creationid="makenowjust" creationdate="20200419T164105Z">
        <seg>すべてのファイル名は&lt;g4&gt;:&lt;/g4&gt;と行番号をあとに続けることで、spec ランナーに対して &lt;g5&gt;--location&lt;/g5&gt; で指定する場合と同様の指定ができます (この後に詳細)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A floating point literal is an optional &lt;g1&gt;+&lt;/g1&gt; or &lt;g2&gt;-&lt;/g2&gt; sign, followed by
a sequence of numbers or underscores, followed by a dot,
followed by numbers or underscores, followed by an optional exponent suffix,
followed by an optional type suffix.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T183059Z" creationid="makenowjust" creationdate="20200419T183003Z">
        <seg>浮動小数点リテラルは &lt;g1&gt;+&lt;/g1&gt; (オプション) または &lt;g2&gt;-&lt;/g2&gt; 符号に続く数値とアンダースコアからなり、さらに指数部分と型を表わすサフィックスを続けることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A floating point literal is an optional `+` or `-` sign, followed by
a sequence of numbers or underscores, followed by a dot,
followed by numbers or underscores, followed by an optional exponent suffix,
followed by an optional type suffix.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T080637Z" creationid="hirofumiwakasugi" creationdate="20150901T073559Z">
        <seg>浮動小数点数リテラルは、`+` (オプション) または `-` 符号に続く数値とアンダースコア、そしてドット (`.`) と、またそれに続く数値とアンダースコアによって記述し、オプションで指数と型のサフィックスを与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A free variable can be used to extract the type argument of a generic type within a type restriction:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T074343Z" creationid="makenowjust" creationdate="20210324T074343Z">
        <seg>自由変数は、型制約の中のジェネリック型の、型パラメータを取り出すことにも使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A free variable can be used to extract the type parameter of a generic type within a type restriction:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T135753Z" creationid="hirofumiwakasugi" creationdate="20150908T035149Z">
        <seg>自由変数は、型制約の中のジェネリック型の、型パラメータを取り出すことにも使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A good README can make or break your project.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T160956Z" creationid="makenowjust" creationdate="20200527T160956Z">
        <seg>良い README があるかどうかはプロジェクトの成功を左右します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A guide on how to open issues and contribute code to the Crystal project.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T153147Z" creationid="makenowjust" creationdate="20210726T153147Z">
        <seg>Issue の開き方やCrystal にコードで貢献する方法についてのガイドです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A heredoc generally allows interpolation and escapes.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T034100Z" creationid="makenowjust" creationdate="20200420T034100Z">
        <seg>ヒアドキュメントの中では一般的に補間とエスケープが有効になっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A heredoc is denoted by &lt;g3&gt;&lt;&lt;-&lt;/g3&gt; followed by an heredoc identifier which is an alphanumeric sequence starting with a letter (and may include underscores).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T033737Z" creationid="makenowjust" creationdate="20200420T033523Z">
        <seg>ヒアドキュメントは&lt;g3&gt;&lt;&lt;-&lt;/g3&gt;とそれに続くアルファベットと数字 (アンダースコアも含めることができる) の並びの識別子によって記述されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A library doesn't have a &lt;g5&gt;shard.lock&lt;/g5&gt; file
in its repository and no build target in &lt;g6&gt;shard.yml&lt;/g6&gt;, but instructions for using it as a dependency.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161500Z" creationid="makenowjust" creationdate="20200419T161500Z">
        <seg>ライブラリは自身のリポジトリに&lt;g5&gt;shard.lock&lt;/g5&gt;を含めず、&lt;g6&gt;shard.yml&lt;/g6&gt;にビルド目標を持ちませんが、依存関係としてどのように利用するかの説明があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A literal denoted by &lt;g1&gt;%q&lt;/g1&gt; does not apply interpolation nor escapes while &lt;g2&gt;%Q&lt;/g2&gt; has the same meaning as &lt;g3&gt;%&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T193619Z" creationid="makenowjust" creationdate="20200419T193619Z">
        <seg>&lt;g1&gt;%q&lt;/g1&gt;で記述される文字列リテラルは、文字列の補間とエスケープを受け付けません。また&lt;g2&gt;%Q&lt;/g2&gt;は&lt;g3&gt;%&lt;/g3&gt;と同じ意味を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A macro can accept variadic arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040735Z" creationid="hirofumiwakasugi" creationdate="20151001T040735Z">
        <seg>マクロは可変長引数を受け取ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A macro's definition body looks like regular Crystal code with
extra syntax to manipulate the AST nodes.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T014910Z" creationid="hirofumiwakasugi" creationdate="20151001T014910Z">
        <seg>マクロ定義の本体はほぼ通常の Crystal コードですが、AST ノードを扱うための特別なシンタックスを利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A macro's definition body looks like regular Crystal code with extra syntax to manipulate the AST nodes.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T140325Z" creationid="makenowjust" creationdate="20200507T140325Z">
        <seg>マクロ定義の本体はほぼ通常の Crystal コードですが、AST ノードを扱うための拡張されたシンタックスを利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A memory allocation happens when you create an instance of a &lt;g1&gt;class&lt;/g1&gt;, which ends up allocating heap memory.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T090734Z" creationid="akiji" creationdate="20200430T084428Z">
        <seg>メモリの割り当ては&lt;g1&gt;クラス&lt;/g1&gt;のインスタンスを生成することで起き、結果としてヒープメモリが割り当てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A method call also has some parts:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T145232Z" creationid="makenowjust" creationdate="20200430T145232Z">
        <seg>メソッド呼び出しは次のパーツを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A method can receive a variable number of arguments by using a *splat* (`*`), which can appear only once and in any position:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042349Z" creationid="hirofumiwakasugi" creationdate="20150907T042024Z">
        <seg>メソッドは、「splat 展開 (`*`)」を使うことで複数の引数を一度に受け取ることができます。これは仮引数の中で1回だけしか指定できませんが、順序を問わずどの場所にでも指定可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A method can receive a variable number of arguments by using a &lt;g1&gt;splat parameter&lt;/g1&gt; (&lt;g2&gt;*&lt;/g2&gt;), which can appear only once and in any position:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T075101Z" creationid="makenowjust" creationdate="20210324T075101Z">
        <seg>メソッドは&lt;g1&gt;スプラット展開&lt;/g1&gt; (&lt;g2&gt;*&lt;/g2&gt;) を使うことで複数の引数を一度に受け取ることができます。これは仮引数の中で1回だけしか指定できませんが、順序を問わずにどの場所にでも指定可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A method can receive a variable number of arguments by using a &lt;g1&gt;splat&lt;/g1&gt; (&lt;g2&gt;*&lt;/g2&gt;), which can appear only once and in any position:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160558Z" creationid="makenowjust" creationdate="20200429T154004Z">
        <seg>メソッドは &lt;g1&gt;スプラット展開&lt;/g1&gt; (&lt;g2&gt;*&lt;/g2&gt;) を使うことで複数の引数を一度に受け取ることができます。これは仮引数の中で1回だけしか指定できませんが、順序を問わずにどの場所にでも指定可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A method can specify default values for the last arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T112805Z" creationid="hirofumiwakasugi" creationdate="20150906T073843Z">
        <seg>メソッドの引数にはデフォルト値を設定することができます。デフォルト値のある引数を複数指定することもできますが、「1. デフォルト値のない引数」そして「2. デフォルト値のある引数」の順序でのみ指定可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A method can specify default values for the last parameters:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T092527Z" creationid="makenowjust" creationdate="20210324T092449Z">
        <seg>メソッドの仮引数にはデフォルト値が設定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A method definition consists of:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T143851Z" creationid="makenowjust" creationdate="20200430T143851Z">
        <seg>メソッド定義は次のものから構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A method invocation that ends with &lt;g1&gt;=&lt;/g1&gt; has syntax sugar:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174431Z" creationid="makenowjust" creationdate="20200422T174431Z">
        <seg>メソッド名が &lt;g1&gt;=&lt;/g1&gt; で終わるメソッドの実行にもシンタックスシュガーがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A method invocation that ends with `=` has syntax sugar:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054634Z" creationid="hirofumiwakasugi" creationdate="20150902T054634Z">
        <seg>メソッド名が `=` で終わるメソッドの実行にもシンタックスシュガーがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A method's return type is always inferred by the compiler.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T024341Z" creationid="hirofumiwakasugi" creationdate="20150909T024246Z">
        <seg>メソッドの戻り値の型は、コンパイラの型推論によって決まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A method's value is the value of its last expression, there's no need for explicit `return` expressions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T024732Z" creationid="hirofumiwakasugi" creationdate="20150904T015217Z">
        <seg>メソッドでは、その最後の式の値がメソッドの値となります。したがって、明示的に `return` を書く必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A method's value is the value of its last expression; there's no need for explicit &lt;g1&gt;return&lt;/g1&gt; expressions.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T100046Z" creationid="makenowjust" creationdate="20200427T100046Z">
        <seg>メソッドでは、その最後の式の値がメソッドの値となります。したがって、明示的に&lt;g1&gt;return&lt;/g1&gt;を書く必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A module cannot be instantiated:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T150636Z" creationid="hirofumiwakasugi" creationdate="20150911T150636Z">
        <seg>モジュールをインスタンス化することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A named tuple key can also be a string literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T170054Z" creationid="makenowjust" creationdate="20200422T170054Z">
        <seg>名前付きタプルのキーには文字列リテラルを使うこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A number of &lt;g3&gt;built-in annotations&lt;/g3&gt; are provided by the compiler.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T104404Z" creationid="makenowjust" creationdate="20200510T104404Z">
        <seg>いくつかの&lt;g3&gt;組み込みアノテーション&lt;/g3&gt;はコンパイラによって提供されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A proc can optionally specify a receiver:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022250Z" creationid="hirofumiwakasugi" creationdate="20150902T022250Z">
        <seg>レシーバを指定することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A range that is both begin-less and end-less is valid and can be expressed as &lt;g1&gt;..&lt;/g1&gt; or &lt;g2&gt;...&lt;/g2&gt; but it's typically not very useful.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T035825Z" creationid="makenowjust" creationdate="20200421T035825Z">
        <seg>&lt;g1&gt;..&lt;/g1&gt; や &lt;g2&gt;...&lt;/g2&gt; のような begin-less かつ end-less な範囲もリテラルとして有効ですが、あまり使いどころはないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A real-world example of a recursive type is json:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071427Z" creationid="hirofumiwakasugi" creationdate="20150919T071400Z">
        <seg>再帰的な型として実際に扱うことになる例は JSON でしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A regular expression literal is delimited by `/` and uses [PCRE](http://pcre.org/pcre.txt) syntax.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T015819Z" creationid="hirofumiwakasugi" creationdate="20150902T015819Z">
        <seg>正規表現リテラルは `/` で区切られ、[PCRE](http://pcre.org/pcre.txt) の記法を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A short syntax exists for specifying a block that receives a single argument and invokes a method on it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153009Z" creationid="hirofumiwakasugi" creationdate="20160115T153009Z">
        <seg>ブロックが単一の引数を受け取り、それに対してメソッドを実行する場合には短縮記法を利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A simple example of this is waiting for data to come through a socket.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T065200Z" creationid="akiji" creationdate="20200428T055118Z">
        <seg>ソケット経由でのデータの受信操作などは、こうした時間がかかる処理の一例です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A simple way to match against one or more elements of any type is to use &lt;g1&gt;Object&lt;/g1&gt; as a restriction:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T084232Z" creationid="makenowjust" creationdate="20200429T162254Z">
        <seg>どんな型の1つ以上の引数に対してもマッチするようにしたい場合、&lt;g1&gt;Object&lt;/g1&gt; を型制約に指定することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A slightly more interesting example is an HTTP Server:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072545Z" creationid="hirofumiwakasugi" creationdate="20150901T072545Z">
        <seg>もう少し興味深いプログラムを見てみましょう。こちらは HTTP サーバーの例になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A source will be ambiguous, for example, if your application requires packages &lt;g1&gt;A&lt;/g1&gt; and &lt;g2&gt;B&lt;/g2&gt; that both require &lt;g3&gt;C&lt;/g3&gt; but they point to different forks.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T105940Z" creationid="makenowjust" creationdate="20200809T105940Z">
        <seg>フォーク元の依存関係が曖昧であるというのは、例えば、もしアプリケーションがパッケージ &lt;g1&gt;A&lt;/g1&gt; と &lt;g2&gt;B&lt;/g2&gt; を要求していて、2つが &lt;g3&gt;C&lt;/g3&gt; を要求しているにも関わらず、どちらも異なるフォークを参照している場合などがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A special &lt;g1&gt;new&lt;/g1&gt; method is provided too:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171400Z" creationid="makenowjust" creationdate="20200422T171314Z">
        <seg>また、&lt;g1&gt;new&lt;/g1&gt; を使って Proc を作ることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A special `new` method is provided too:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021805Z" creationid="hirofumiwakasugi" creationdate="20150902T021455Z">
        <seg>また、`new` メソッドを使って作ることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A special notation allows creating hashes with string keys:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T143006Z" creationid="hirofumiwakasugi" creationdate="20150901T143006Z">
        <seg>キーが文字列である場合は、以下の特別な記法を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A special notation allows creating hashes with symbol keys:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T142945Z" creationid="hirofumiwakasugi" creationdate="20150901T142743Z">
        <seg>キーがシンボルである場合は、以下の特別な記法を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A special type restriction is &lt;g1&gt;self&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T160852Z" creationid="makenowjust" creationdate="20200429T160852Z">
        <seg>&lt;g1&gt;self&lt;/g1&gt; という特別な型制約があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A special type restriction is `self`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T023324Z" creationid="hirofumiwakasugi" creationdate="20150908T022636Z">
        <seg>型制約には `self` を使った特別な指定方法があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A splat expands a &lt;g3&gt;Tuple&lt;/g3&gt; into positional arguments, while a double splat expands a &lt;g4&gt;NamedTuple&lt;/g4&gt; into named arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T145657Z" creationid="makenowjust" creationdate="20200430T145657Z">
        <seg>スプラット展開は &lt;g3&gt;Tuple&lt;/g3&gt; を位置指定の引数に展開して、二重スプラット展開は &lt;g4&gt;NamedTuple&lt;/g4&gt; を名前付き引数に展開します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string can span multiple lines:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T081302Z" creationid="hirofumiwakasugi" creationdate="20150901T081302Z">
        <seg>文字列は複数の行にまたがって記述することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string literal with interpolation allows to embed expressions into the string which will be expanded at runtime.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192334Z" creationid="makenowjust" creationdate="20200419T192334Z">
        <seg>補間を伴う文字列リテラルは、文字列に実行時に展開される式を埋め込むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A struct can also include modules and can be generic, just like a class.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T175912Z" creationid="makenowjust" creationdate="20200505T175912Z">
        <seg>また、クラスと同様に、構造体にモジュールをインクルードしたりジェネリック型にすることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A struct can be generic, just like a class.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T054242Z" creationid="hirofumiwakasugi" creationdate="20150913T054242Z">
        <seg>また、クラスと同様に、構造体をジェネリック型にすることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A struct can inherit from other structs and can also includes modules.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T054217Z" creationid="hirofumiwakasugi" creationdate="20150913T054217Z">
        <seg>構造体は他の構造体を継承することができ、モジュールをインクルードすることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A struct cannot inherit from a non-abstract struct.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T174734Z" creationid="makenowjust" creationdate="20200505T174734Z">
        <seg>構造体は abstract でない構造体を継承することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A struct implicitly inherits from &lt;g1&gt;Struct&lt;/g1&gt;, which inherits from &lt;g2&gt;Value&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T174706Z" creationid="makenowjust" creationdate="20200505T174706Z">
        <seg>構造体は暗黙に &lt;g1&gt;Struct&lt;/g1&gt; を継承しており、これは &lt;g2&gt;Value&lt;/g2&gt; を継承してます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A struct implicitly inherits from &lt;g1&gt;Struct&lt;/g1&gt;http://crystal-lang.org/api/Struct.html&lt;e4/&gt;, which inherits from &lt;g2&gt;Value&lt;/g2&gt;http://crystal-lang.org/api/Value.html&lt;e5/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T091702Z" creationid="makenowjust" creationdate="20200518T091702Z">
        <seg>構造体は暗黙に &lt;g1&gt;Struct&lt;/g1&gt;http://crystal-lang.org/api/Struct.html&lt;e4/&gt; を継承しており、これは &lt;g2&gt;Value&lt;/g2&gt;http://crystal-lang.org/api/Value.html&lt;e5/&gt; を継承しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A struct implicitly inherits from &lt;g1&gt;Struct&lt;/g1&gt;https://crystal-lang.org/api/latest/Struct.html&lt;e4/&gt;, which inherits from &lt;g2&gt;Value&lt;/g2&gt;https://crystal-lang.org/api/latest/Value.html&lt;e5/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T074919Z" creationid="makenowjust" creationdate="20210324T074919Z">
        <seg>構造体は暗黙に &lt;g1&gt;Struct&lt;/g1&gt;http://crystal-lang.org/api/latest/Struct.html&lt;e4/&gt; を継承しており、これは &lt;g2&gt;Value&lt;/g2&gt;http://crystal-lang.org/api/latest/Value.html&lt;e5/&gt; を継承しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A struct is &lt;g1&gt;always&lt;/g1&gt; passed by value, even when you return &lt;g2&gt;self&lt;/g2&gt; from the method of that struct:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T172744Z" creationid="makenowjust" creationdate="20200505T172744Z">
        <seg>構造体は&lt;g1&gt;常に&lt;/g1&gt;値渡しされます。その構造体のメソッドから&lt;g2&gt;self&lt;/g2&gt;を返した場合も例外ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A struct is mostly used for performance reasons to avoid lots of small memory allocations when passing small copies might be more efficient.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T054544Z" creationid="hirofumiwakasugi" creationdate="20150913T054332Z">
        <seg>構造体を使うのは主にパフォーマンス上の理由からです。小さいコピーを渡す方がより効率的である場合には、構造体を使うことで、わずかなメモリの割り当てが大量に発生することを避けられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A textual algorithm to tell if a word is spelled the same way forwards as it is backwards.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T163451Z" creationid="makenowjust" creationdate="20200527T163451Z">
        <seg>A textual algorithm to tell if a word is spelled the same way forwards as it is backwards.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A union can consist of an arbitrary large number of types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T144151Z" creationid="makenowjust" creationdate="20200429T144151Z">
        <seg>ユニオン型はいくらでもたくさんの型から構成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A variable can be marked as thread local with an attribute:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T084112Z" creationid="hirofumiwakasugi" creationdate="20151007T053828Z">
        <seg>変数はアノテーションを付与することでスレッドローカルにすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A working installation of &lt;g1&gt;Git&lt;/g1&gt;https://git-scm.com&lt;e2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T154417Z" creationid="makenowjust" creationdate="20200527T154417Z">
        <seg>&lt;g1&gt;Git&lt;/g1&gt;https://git-scm.com&lt;e2/&gt; が動作するようにインストールされていること</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A working installation of the &lt;g1&gt;Crystal compiler&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T154406Z" creationid="makenowjust" creationdate="20200527T154406Z">
        <seg>&lt;g1&gt;Crystal のコンパイラ&lt;/g1&gt;が動作するようにインストールされていること</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>AIzaSyCv-2Npqm0mwmwVCKX8xDPhwtP_8HwCWCE</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075525Z" creationid="makenowjust" creationdate="20200516T075525Z">
        <seg>AIzaSyCv-2Npqm0mwmwVCKX8xDPhwtP_8HwCWCE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Abstract methods can also be defined in modules, and the compiler will check that including types implement them.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T112700Z" creationid="makenowjust" creationdate="20200504T112700Z">
        <seg>abstract メソッドはモジュールで使うこともできて、その場合はコンパイラは、インクルード先のクラスでそれらが実装されているか検査します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Abstract methods can also be defined in modules.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040257Z" creationid="hirofumiwakasugi" creationdate="20150910T040131Z">
        <seg>モジュールにも abstract メソッドを定義することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Abstract structs, on the other hand, will have descendants, so it is expected that an array of them will account for the possibility of having multiple types inside it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T175824Z" creationid="makenowjust" creationdate="20200505T175824Z">
        <seg>一方、abstract な構造体は明らかに子孫を持つものなので、この型の配列が複数の型の値が追加されるために大きめにメモリを確保することも予想できる挙動です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Acronyms</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T203808Z" creationid="makenowjust" creationdate="20200412T203808Z">
        <seg>頭字語 (Acronyms)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adam Daniels</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084019Z" creationid="makenowjust" creationdate="20200516T084019Z">
        <seg>Adam Daniels</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add a &lt;g1&gt;description&lt;/g1&gt; to your &lt;g2&gt;shard.yml&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T162512Z" creationid="makenowjust" creationdate="20200527T162512Z">
        <seg>&lt;g1&gt;description&lt;/g1&gt; を &lt;g2&gt;shard.yml&lt;/g2&gt; に追加しましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add repo metadata signign key (shared bintray signing key)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T093233Z" creationid="makenowjust" creationdate="20210130T093153Z">
        <seg>リポジトリのメタデータの署名鍵 (bintray 共有の署名鍵) を追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add signing key</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210504T120422Z" creationid="makenowjust" creationdate="20210504T120422Z">
        <seg>署名用の鍵の追加</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adding a page</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165022Z" creationid="makenowjust" creationdate="20200413T164726Z">
        <seg>ページの追加方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, a call argument can have a splat (&lt;g1&gt;*&lt;/g1&gt;) or double splat (&lt;g2&gt;**&lt;/g2&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T145439Z" creationid="makenowjust" creationdate="20200430T145439Z">
        <seg>くわえてメソッドはスプラット展開 (&lt;g1&gt;*&lt;/g1&gt;) と二重スプラット展開 (&lt;g2&gt;**&lt;/g2&gt;) を持つことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, fresh variables with respect to some other AST node can be declared with &lt;g1&gt;%var{key1, key2, ..., keyN}&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T230051Z" creationid="makenowjust" creationdate="20200509T230037Z">
        <seg>また、&lt;g1&gt;%var{key1, key2, ..., keyN}&lt;/g1&gt; を使うことで、他の AST ノードに結びついたフレッシュ変数を宣言することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, if a program is compiled with &lt;g1&gt;--release&lt;/g1&gt;, the &lt;g2&gt;release&lt;/g2&gt; flag will be set.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T023034Z" creationid="makenowjust" creationdate="20200511T023034Z">
        <seg>また、&lt;g1&gt;--release&lt;/g1&gt; オプションをつけてプログラムをコンパイルqした場合には &lt;g2&gt;release&lt;/g2&gt; フラグが有効になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, if a program is compiled with `--release`, the `release` flag will be true.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043140Z" creationid="hirofumiwakasugi" creationdate="20150908T043118Z">
        <seg>また、`--release` オプションをつけてプログラムをコンパイルした場合には、`release` フラグが true になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, if the case expression is a variable or a variable assignment the type of the variable is restricted:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T091733Z" creationid="hirofumiwakasugi" creationdate="20151001T010025Z">
        <seg>そして、case 式が変数、もしくは変数への代入であるとき、その変数の型に対して制約が加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, if the compiler infers that an instance variable isn't always initialized, it will also include the &lt;g2&gt;Nil&lt;/g2&gt; type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T134038Z" creationid="makenowjust" creationdate="20200427T134034Z">
        <seg>さらに、コンパイラが型を推論した変数が初期化されていないとき、&lt;g2&gt;Nil&lt;/g2&gt; も型に加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, if your program reads a global variable before it was ever assigned a value it will also have the `Nil` type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053832Z" creationid="hirofumiwakasugi" creationdate="20150902T053832Z">
        <seg>また、それまでに何も代入されていないグローバル変数をプログラムが読み込んだとき、その値は常に `Nil` 型になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, in the &lt;g1&gt;else&lt;/g1&gt; branch the type of the variable is guaranteed to be restricted to the types that don’t respond to that method:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T084006Z" creationid="makenowjust" creationdate="20200424T084006Z">
        <seg>くわえて、&lt;g1&gt;else&lt;/g1&gt;節では変数がそのメソッドを持たないような型であることが保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, in the &lt;g1&gt;else&lt;/g1&gt; branch the type of the variable is guaranteed to not be restricted by that type:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T082956Z" creationid="makenowjust" creationdate="20200424T082956Z">
        <seg>くわえて、&lt;g1&gt;else&lt;/g1&gt;節では変数がそれ以外の型であることが保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, in the `else` branch the type of the variable is guaranteed to be restricted to the types that don’t respond to that method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030354Z" creationid="hirofumiwakasugi" creationdate="20150903T030354Z">
        <seg>一方このとき、`else` 節の中ではそのメソッドに応答「しない」型であることが保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, in the `else` branch the type of the variable is guaranteed to not be restricted by that type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T025926Z" creationid="hirofumiwakasugi" creationdate="20150903T021901Z">
        <seg>一方このとき、`else` 節の中ではチェックした型「ではない」ことが保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, it provides some conveniences like &lt;g1&gt;out&lt;/g1&gt; and &lt;g2&gt;to_unsafe&lt;/g2&gt; so writing bindings is as painless as possible.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T030219Z" creationid="makenowjust" creationdate="20200511T030219Z">
        <seg>さらに、&lt;g1&gt;out&lt;/g1&gt; や &lt;g2&gt;to_unsafe&lt;/g2&gt; といった便利なものを用意しているので、可能な限り楽にバインディングを書けるようになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, it provides some conveniences like `out` and `to_unsafe` so writing bindings is as painless as possible.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T164407Z" creationid="hirofumiwakasugi" creationdate="20151003T141859Z">
        <seg>さらに、`out` や `to_unsafe` といった便利なものを用意しているので、可能な限り楽にバインディングを書けるようになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, some &lt;g1&gt;Enum&lt;/g1&gt; methods check the &lt;g2&gt;@[Flags]&lt;/g2&gt; annotation.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T090738Z" creationid="makenowjust" creationdate="20210324T090716Z">
        <seg>さらに、&lt;g1&gt;Enum&lt;/g1&gt; のメソッドには &lt;g2&gt;@[Flags]&lt;/g2&gt; アノテーションを指定することで振る舞いを変えるものがいくつかあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, some &lt;g1&gt;Enum&lt;/g1&gt; methods check the &lt;g2&gt;@[Flags]&lt;/g2&gt; attribute.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182512Z" creationid="makenowjust" creationdate="20200505T182512Z">
        <seg>さらに、&lt;g1&gt;Enum&lt;/g1&gt; のメソッドには &lt;g2&gt;@[Flags]&lt;/g2&gt; 属性によって振る舞いを換えるものがいくつかあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, some `Enum` methods check the `@[Flags]` method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T010753Z" creationid="hirofumiwakasugi" creationdate="20150915T051626Z">
        <seg>さらに、`Enum` のメソッドには、`@[Flags]` によって振る舞いを変えるものがいくつかあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, the empty-tuple doesn't match any of the above cases.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T030129Z" creationid="hirofumiwakasugi" creationdate="20150908T030129Z">
        <seg>また、空のタプルは上記の例ではマッチしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, using &lt;g1&gt;*&lt;/g1&gt; when interpolating a &lt;g2&gt;&lt;g3&gt;TupleLiteral&lt;/g3&gt;&lt;/g2&gt;https://crystal-lang.org/api/latest/Crystal/Macros/TupleLiteral.html&lt;e4/&gt; interpolates the elements separated by commas:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T080732Z" creationid="makenowjust" creationdate="20210324T080732Z">
        <seg>さらに、&lt;g2&gt;&lt;g3&gt;TupleLiteral&lt;/g3&gt;&lt;/g2&gt;https://crystal-lang.org/api/latest/Crystal/Macros/TupleLiteral.html&lt;e4/&gt; を埋め込む際に &lt;g1&gt;*&lt;/g1&gt; を使うと、要素がカンマ区切りのものとして埋め込まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, using &lt;g1&gt;*&lt;/g1&gt; when interpolating an &lt;g2&gt;&lt;g3&gt;ArrayLiteral&lt;/g3&gt;&lt;/g2&gt; interpolates the elements separated by commas:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215510Z" creationid="makenowjust" creationdate="20200509T215439Z">
        <seg>さらに、&lt;g2&gt;&lt;g3&gt;ArrayLiteral&lt;/g3&gt;&lt;/g2&gt; を埋め込む際に &lt;g1&gt;*&lt;/g1&gt; を使うと、要素がカンマで分割されて埋め込まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, using &lt;g1&gt;*&lt;/g1&gt; when interpolating an &lt;g2&gt;&lt;g3&gt;ArrayLiteral&lt;/g3&gt;&lt;/g2&gt;https://crystal-lang.org/api/Crystal/Macros/ArrayLiteral.html&lt;e4/&gt; interpolates the elements separated by commas:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T090543Z" creationid="makenowjust" creationdate="20200518T090520Z">
        <seg>さらに、&lt;g2&gt;&lt;g3&gt;ArrayLiteral&lt;/g3&gt;&lt;/g2&gt;https://crystal-lang.org/api/Crystal/Macros/ArrayLiteral.html&lt;e4/&gt; を埋め込む際に &lt;g1&gt;*&lt;/g1&gt; を使うと、要素がカンマ区切りのものとして埋め込まれます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, you can declare fresh variables related to some other AST node using `%var{key1, key2, ..., keyN}`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044659Z" creationid="hirofumiwakasugi" creationdate="20151002T020202Z">
        <seg>また、`%var{key1, key2, ..., keyN}` を使うことで、他の AST ノードに結びついたフレッシュな変数を宣言することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionaly, using `*` when interpolating an `ArrayLiteral` interpolates the elements separated by commas:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040858Z" creationid="hirofumiwakasugi" creationdate="20151001T040740Z">
        <seg>さらに、`ArrayLiteral` を埋め込む際に `*` を使うと、要素がカンマで分割されて埋め込まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additive</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085542Z" creationid="makenowjust" creationdate="20200502T084718Z">
        <seg>加減法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After an &lt;g1&gt;if&lt;/g1&gt;, a variable’s type depends on the type of the expressions used in both branches.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T075832Z" creationid="makenowjust" creationdate="20200424T074558Z">
        <seg>ある変数が&lt;g1&gt;if&lt;/g1&gt;の分岐節の中で使われたとき、その後の変数の型は分岐節の中での使われ方に依存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After an `if`, a variable’s type depends on the type of the expressions used in both branches.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T025750Z" creationid="hirofumiwakasugi" creationdate="20150903T011247Z">
        <seg>ある変数が `if` の分岐節の中で使われたとき、その型は評価された式によって決まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After executing &lt;g3&gt;next&lt;/g3&gt;, the &lt;g4&gt;while&lt;/g4&gt;'s condition is checked and, if &lt;g5&gt;truthy&lt;/g5&gt;, the body will be executed.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095900Z" creationid="makenowjust" creationdate="20200424T095900Z">
        <seg>&lt;g3&gt;next&lt;/g3&gt;が実行されたあと、&lt;g4&gt;while&lt;/g4&gt;の条件がチェックされ、&lt;g5&gt;真となれば&lt;/g5&gt;本体が再度実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After executing `next`, the `while`'s condition is checked and, if *truthy*, the body will be executed.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052324Z" creationid="hirofumiwakasugi" creationdate="20150905T052324Z">
        <seg>`next` が実行された後、`while` の条件がチェックされ、もしそれが「真」であれば本体が再度実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After the block is executed, the parser will start consuming the arguments passed to the application, trying to match each one with the options defined by us.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T173418Z" creationid="makenowjust" creationdate="20200413T173418Z">
        <seg>ブロックが実行されたのち、オプションパーサーがアプリケーションに渡された引数を処理して、定義したオプションにマッチするかを確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After the heredoc identifier, and in that same line, anything that follows continues the original expression that came before the heredoc.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T090850Z" creationid="makenowjust" creationdate="20210130T090850Z">
        <seg>ヒアドキュメントの識別子のあとで同じ行の場合、ヒアドキュメントの内容の前に任意の式を続けることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Again, note that there are still some parts of the std-lib that are not ready to work on Windows.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T032327Z" creationid="makenowjust" creationdate="20200611T032327Z">
        <seg>ですが、まだ標準ライブラリのすべての部分が Windows で利用できるというというわけではないことには注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Again, the solution is to use a type restriction:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T065427Z" creationid="hirofumiwakasugi" creationdate="20150912T065427Z">
        <seg>対策はやはり型制約を利用することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Age</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092128Z" creationid="makenowjust" creationdate="20201217T092128Z">
        <seg>年齢</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ah!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182533Z" creationid="makenowjust" creationdate="20200413T182533Z">
        <seg>つまり、こういうことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Aliases are useful to avoid writing long type names, but also to be able to talk about recursive types:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071328Z" creationid="hirofumiwakasugi" creationdate="20150919T071303Z">
        <seg>エイリアスを使うと長い名前の型を書かずに済むので便利です。しかし、それだけではなく、再帰的な型を扱うときにも利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All &lt;g1&gt;Crystal operators&lt;/g1&gt; can be used as symbol names unquoted:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171630Z" creationid="makenowjust" creationdate="20200420T171630Z">
        <seg>すべての&lt;g1&gt;Crystal の演算子&lt;/g1&gt;もシンボルのダブルクォートで囲われていない識別子として有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All &lt;g1&gt;files&lt;/g1&gt; arguments are concatenated into a single Crystal source.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163823Z" creationid="makenowjust" creationdate="20200419T163823Z">
        <seg>&lt;g1&gt;files&lt;/g1&gt;引数で指定されたすべてのファイルは1つの Crystal ソースコードとして結合されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All &lt;g1&gt;literals&lt;/g1&gt; have an associated type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T135448Z" creationid="makenowjust" creationdate="20200427T135448Z">
        <seg>すべての&lt;g1&gt;リテラル&lt;/g1&gt;はそれに対応する型を持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All My CLI: The complete application!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T183447Z" creationid="makenowjust" creationdate="20200413T180300Z">
        <seg>All My CLI: 完成した CLI アプリケーション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All arguments can also be specified, in addition to their position, by their name.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T152550Z" creationid="makenowjust" creationdate="20200429T152550Z">
        <seg>引数は順番に指定していく他に、引数の名前によって指定することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All available methods to perform statements in a database are defined in &lt;g1&gt;DB::QueryMethods&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200706T000126Z" creationid="daiki" creationdate="20200706T000126Z">
        <seg>データベース内で文を実行するためのすべての利用可能なメソッドは &lt;g1&gt;DB::QueryMethods&lt;/g1&gt; で定義されています。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All enums inherit from &lt;g1&gt;Enum&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182107Z" creationid="makenowjust" creationdate="20200505T182107Z">
        <seg>すべての列挙型は &lt;g1&gt;Enum&lt;/g1&gt; を継承しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All enums inherit from &lt;g1&gt;Enum&lt;/g1&gt;http://crystal-lang.org/api/Enum.html&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T084235Z" creationid="makenowjust" creationdate="20200518T084235Z">
        <seg>すべての列挙型は &lt;g1&gt;Enum&lt;/g1&gt;http://crystal-lang.org/api/Enum.html&lt;e2/&gt; を継承しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All enums inherit from &lt;g1&gt;Enum&lt;/g1&gt;https://crystal-lang.org/api/latest/Enum.html&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T090548Z" creationid="makenowjust" creationdate="20210324T090548Z">
        <seg>すべての列挙型は &lt;g1&gt;Enum&lt;/g1&gt;https://crystal-lang.org/api/latest/Enum.html&lt;e2/&gt; を継承しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All enums inherit from [Enum](http://crystal-lang.org/api/Enum.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024729Z" creationid="hirofumiwakasugi" creationdate="20150914T024722Z">
        <seg>すべての Enum は [Enum](http://crystal-lang.org/api/Enum.html) を継承しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All files inside the root `src` directory will be considered.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144811Z" creationid="hirofumiwakasugi" creationdate="20151010T144503Z">
        <seg>対象となるのは、ルートの `src` ディレクトリ内に含まれるすべてのファイルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All following content up to the end of
the line is part of the comment.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T092857Z" creationid="makenowjust" creationdate="20210324T092857Z">
        <seg>その行のそれに続くすべての内容はコメントに含まれることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All of it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T155702Z" creationid="makenowjust" creationdate="20200527T155702Z">
        <seg>それがすべてです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All of these are equivalent:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T014845Z" creationid="hirofumiwakasugi" creationdate="20150916T014756Z">
        <seg>以下はすべて同等のコードです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All options following the command are delegated to &lt;g1&gt;crystal build&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T095238Z" creationid="makenowjust" creationdate="20200419T180329Z">
        <seg>コマンドに続くすべてのオプションは &lt;g1&gt;crystal build&lt;/g1&gt; に渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All the deprecated definitions will be removed for 1.0.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T034138Z" creationid="makenowjust" creationdate="20200611T034138Z">
        <seg>すべての非推奨にした定義は1.0では削除される予定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All time</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T082722Z" creationid="makenowjust" creationdate="20200516T082722Z">
        <seg>これまでの合計</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All transformations assume the receiver (&lt;g1&gt;a&lt;/g1&gt;) is a variable.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T095857Z" creationid="makenowjust" creationdate="20200502T095857Z">
        <seg>すべての変換ではレシーバ (&lt;g1&gt;a&lt;/g1&gt;) が変数であることを前提としています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All types are non-nilable in Crystal, and nilable variables are represented as a union between the type and nil.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211444Z" creationid="makenowjust" creationdate="20200413T211444Z">
        <seg>Crystal ではすべての型は nil を許容しません。そして nil を許容する変数は、その型と nil とのユニオン型となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allocating any new object instances during garbage-collection might result
in undefined behavior and most likely crashing your program.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T140842Z" creationid="makenowjust" creationdate="20200504T140650Z">
        <seg>ガベージコレクション中に新規に確保されたオブジェクトに対する挙動は未定義で、恐らくその場合プログラムはクラッシュします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allocating heap memory is slow, and it puts more pressure on the Garbage Collector (GC) as it will later have to free that memory.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T120345Z" creationid="akiji" creationdate="20200430T120345Z">
        <seg>ヒープメモリの割り当ては低速で、後々そのメモリを解放するガーベジコレクタ（GC）に負荷をかけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allow the &lt;g1&gt;case ... when&lt;/g1&gt; to be as before: there is an implicit &lt;g2&gt;else nil&lt;/g2&gt;, hence the conditions can be non-exhaustive.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T124647Z" creationid="makenowjust" creationdate="20200610T124647Z">
        <seg>&lt;g1&gt;case ... when&lt;/g1&gt; を前のように戻す。暗黙の &lt;g2&gt;else nil&lt;/g2&gt; があって、条件節は網羅的でなくてもよい。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allows marking a [C struct](c_bindings/struct.html) as packed, which makes the alignment of the struct to be one byte, and that there is no padding between the elements.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T072942Z" creationid="hirofumiwakasugi" creationdate="20150919T072853Z">
        <seg>[C の構造体](c_bindings/struct.html)をパックします。これによって、構造体のアラインメントが1バイトになり、要素間のパディングがなくなります。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alpine Linux</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071413Z" creationid="makenowjust" creationdate="20200518T071413Z">
        <seg>Alpine Linux</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alpine Linux includes the Crystal compiler in the community repository, starting from version Alpine 3.7.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T100940Z" creationid="makenowjust" creationdate="20200518T100940Z">
        <seg>Alpine Linux では、バージョン 3.7 から Crystal のコンパイラがコミュニティリポジトリに含まれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also note that the compiler doesn't check whether a method argument is reassigned a different value:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T065951Z" creationid="makenowjust" creationdate="20200427T141621Z">
        <seg>コンパイラはメソッドの引数が再代入された場合に、それを検出しないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also some drivers may offer additional functionality like postgres &lt;g1&gt;LISTEN&lt;/g1&gt;/&lt;g2&gt;NOTIFY&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T190718Z" creationid="daiki" creationdate="20200705T190533Z">
        <seg>また、いくつかのドライバーでは postgres の &lt;g1&gt;LISTEN&lt;/g1&gt;/&lt;g2&gt;NOTIFY&lt;/g2&gt;のように追加の機能を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also, it accepts a &lt;g2&gt;type&lt;/g2&gt; that must be known at compile-time as its argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T113232Z" creationid="makenowjust" creationdate="20200512T113232Z">
        <seg>また、コンパイル時に知っておく必要のある&lt;g2&gt;型&lt;/g2&gt;を引数として指定することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also, it accepts a [type](type_grammar.html) that must be known at compile-time as its argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T012529Z" creationid="hirofumiwakasugi" creationdate="20150930T011338Z">
        <seg>また、コンパイル時に知っておく必要のある[型](type_grammar.html)を引数として指定することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also, there were a lot of improvements on debugging, Windows support and stabilization on other platforms runtime.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T122358Z" creationid="makenowjust" creationdate="20200610T122207Z">
        <seg>他には、デバッグの改善や Windows のサポート、その他のプラットフォームでのランタイムの安定化などを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternative there are &lt;g1&gt;.tar.gz&lt;/g1&gt; and &lt;g2&gt;.pkg&lt;/g2&gt; files in each &lt;g3&gt;release&lt;/g3&gt;https://github.com/crystal-lang/crystal/releases&lt;e5/&gt; targeted for darwin.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112021Z" creationid="makenowjust" creationdate="20200518T112021Z">
        <seg>あるいは darwin 向けの &lt;g1&gt;.tar.gz&lt;/g1&gt; や &lt;g2&gt;.pkg&lt;/g2&gt; ファイルが各&lt;g3&gt;リリース&lt;/g3&gt;https://github.com/crystal-lang/crystal/releases&lt;e5/&gt;毎に用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternative ways to do error handling</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T104706Z" creationid="makenowjust" creationdate="20200506T104706Z">
        <seg>例外処理の他の方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternative you can use the `run` command:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072011Z" creationid="hirofumiwakasugi" creationdate="20150901T072011Z">
        <seg>また、`run` コマンドを使っても同様のことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively you can use a non yielding &lt;g1&gt;DB.open&lt;/g1&gt; method as long as &lt;g2&gt;Database#close&lt;/g2&gt; is called at the end.</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200706T094933Z" creationid="daiki" creationdate="20200705T193436Z">
        <seg>あるいは、最後に &lt;g2&gt;Database#close&lt;/g2&gt; が呼ばれるまで終了しない yield を用いない &lt;g1&gt;DB.open&lt;/g1&gt; を使うこともできます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, a backlash followed by a newline can be inserted inside the string literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104106Z" creationid="hirofumiwakasugi" creationdate="20150901T104106Z">
        <seg>また、改行の前のバックスラッシュは文字列リテラルの中に書くこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, a backslash followed by a newline can be inserted inside the string literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194758Z" creationid="makenowjust" creationdate="20200419T194758Z">
        <seg>もしくは、バックスラッシュに改行を続けたものを文字列中に追加する、という手段もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, a separate &lt;g1&gt;shards&lt;/g1&gt; package may be available for your system.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T173410Z" creationid="makenowjust" creationdate="20200419T173410Z">
        <seg>そうでなければ、分割された&lt;g1&gt;shards&lt;/g1&gt;パッケージがあなたのシステムでは有効かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, use a smart port builder like &lt;g1&gt;Synth&lt;/g1&gt;https://github.com/jrmarino/synth&lt;e2/&gt;, which automatically decides to download dependencies as binary packages when there's no reason to rebuild them.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111524Z" creationid="makenowjust" creationdate="20200518T111524Z">
        <seg>もしくは、&lt;g1&gt;Synth&lt;/g1&gt;https://github.com/jrmarino/synth&lt;e2/&gt; のような賢い port ビルダーを使うこともできます。これは再ビルドが必要ない場合に、自動的に依存関係のバイナリパッケージをダウンロードしてくれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, use pointer casts as explained below.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022402Z" creationid="hirofumiwakasugi" creationdate="20151009T022343Z">
        <seg>代替になるものとしては、以下で説明するポインタキャストを利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although exceptions are available as one of the mechanisms for handling errors, they are not your only choice.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T024552Z" creationid="hirofumiwakasugi" creationdate="20150907T023334Z">
        <seg>例外はエラーハンドリング機構の1つですが、必ずしも例外処理でしかエラーを扱うことができないわけではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although generic types are usually associated with containers, they can also be used to improve execution performance at the cost of a larger executable size.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T073111Z" creationid="hirofumiwakasugi" creationdate="20150912T072645Z">
        <seg>通常、ジェネリック型はコンテナに関連していることが多いですが、それだけではなく、実行ファイルのサイズが大きくなることと引き換えに、実行時のパフォーマンスを向上させるために利用することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although it is a breaking-change, &lt;g2&gt;in&lt;/g2&gt; was already used in the macro sublanguage as a keyword.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T125937Z" creationid="makenowjust" creationdate="20200610T125937Z">
        <seg>これは破壊的な変更ですが、&lt;g2&gt;in&lt;/g2&gt; はこれまでもマクロ中ではキーワードとして扱われていました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although it is obvious that &lt;g1&gt;a&lt;/g1&gt; will always be assigned a value, the compiler will still think &lt;g2&gt;a&lt;/g2&gt; might never had a chance to be initialized.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T104627Z" creationid="makenowjust" creationdate="20200506T104627Z">
        <seg>この場合、&lt;g1&gt;a&lt;/g1&gt; に常に値が代入されていることは明白なのですが、それでもコンパイラは &lt;g2&gt;a&lt;/g2&gt; が初期化されていない可能性があると解釈します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although it is obvious that `a` will always be assigned a value, the compiler will still think `a` might never had a chance to be initialized.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T022758Z" creationid="hirofumiwakasugi" creationdate="20150907T022321Z">
        <seg>この場合、`a` に常に値が代入されていることは明白なのですが、それでもコンパイラは `a` が初期化されていない可能性があると解釈します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although not enforced by the compiler, a &lt;g1&gt;lib&lt;/g1&gt;'s name usually starts with &lt;g2&gt;Lib&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T030617Z" creationid="makenowjust" creationdate="20200511T030617Z">
        <seg>なお、これはコンパイラが強制するものではありませんが、通常は &lt;g1&gt;lib&lt;/g1&gt; の名前は &lt;g2&gt;Lib&lt;/g2&gt; から始まるものにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although not enforced by the compiler, a `lib`'s name usually starts with `Lib`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T142526Z" creationid="hirofumiwakasugi" creationdate="20151003T142356Z">
        <seg>なお、これはコンパイラが強制するものではありませんが、通常、`lib` の名前は `Lib` から始まるものにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although not enforced by the compiler, constants are usually named with all capital letters and underscores to separate words.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055520Z" creationid="hirofumiwakasugi" creationdate="20150913T055520Z">
        <seg>また、これはコンパイラに強制されることではありませんが、一般的に定数名はすべて大文字とし、単語はアンダースコアで区切ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although, if you are new to the Crystal Language, we suggest that you continue reading the &lt;g1&gt;Getting started&lt;/g1&gt; section.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080247Z" creationid="makenowjust" creationdate="20200516T080206Z">
        <seg>ですが、もし Crystal をこれから始めるのであれば、&lt;g1&gt;Getting Started&lt;/g1&gt; の章をまず読むと良いでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Always append an object directly to an IO.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T120947Z" creationid="akiji" creationdate="20200430T120947Z">
        <seg>常にIOへ直接オブジェクトを追加するようにしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Always remember that it's not just the time that has improved: memory usage is also decreased.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T130818Z" creationid="akiji" creationdate="20200430T130818Z">
        <seg>常に忘れてならないのは、これが単に実行時間が短縮したというだけでなく、メモリ使用量の削減という面でも効果があると言うことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Always returns {{index}}.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221044Z" creationid="makenowjust" creationdate="20200509T221044Z">
        <seg>Always returns {{index}}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>AlwaysInline</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T115952Z" creationid="makenowjust" creationdate="20200510T115952Z">
        <seg>AlwaysInline</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;&amp;&amp;&lt;/g1&gt; (and) evaluates its left hand side.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101530Z" creationid="makenowjust" creationdate="20200424T101530Z">
        <seg>&lt;g1&gt;&amp;&amp;&lt;/g1&gt; (かつ) 演算子はまず左辺の式を評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;Array&lt;/g1&gt; is an ordered and integer-indexed generic collection of elements of a specific type &lt;g2&gt;T&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173906Z" creationid="makenowjust" creationdate="20200420T172810Z">
        <seg>&lt;g1&gt;Array&lt;/g1&gt;は順番に意味があり整数でインデックスされた、&lt;g2&gt;T&lt;/g2&gt;型の値を要素として持つジェネリックなコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;Array&lt;/g1&gt;http://crystal-lang.org/api/Array.html&lt;e3/&gt; is an ordered and integer-indexed generic collection of elements of a specific type &lt;g2&gt;T&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T084721Z" creationid="makenowjust" creationdate="20200518T084721Z">
        <seg>&lt;g1&gt;Array&lt;/g1&gt;http://crystal-lang.org/api/Array.html&lt;e3/&gt; は順番に意味があり整数でインデックスされた、&lt;g2&gt;T&lt;/g2&gt; 型の値を要素として持つジェネリックなコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;Array&lt;/g1&gt;https://crystal-lang.org/api/latest/Array.html&lt;e3/&gt; is an ordered and integer-indexed generic collection of elements of a specific type &lt;g2&gt;T&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T084702Z" creationid="makenowjust" creationdate="20210324T084702Z">
        <seg>&lt;g1&gt;Array&lt;/g1&gt;https://crystal-lang.org/api/latest/Array.html&lt;e3/&gt; は順番に意味があり整数でインデックスされた、&lt;g2&gt;T&lt;/g2&gt; 型の値を要素として持つジェネリックなコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;alias&lt;/g1&gt; declaration inside a &lt;g2&gt;lib&lt;/g2&gt; declares a C &lt;g3&gt;typedef&lt;/g3&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T085021Z" creationid="makenowjust" creationdate="20200512T085021Z">
        <seg>&lt;g2&gt;lib&lt;/g2&gt; の中で &lt;g1&gt;alias&lt;/g1&gt; を宣言することで C &lt;g3&gt;typedef&lt;/g3&gt; が宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;alias&lt;/g1&gt; is most useful to avoid writing long types over and over, but also to declare a type based on compile-time flags:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T085128Z" creationid="makenowjust" creationdate="20200512T085128Z">
        <seg>&lt;g1&gt;alias&lt;/g1&gt; が便利なのは、長い型名を何度も書かずに済むようにできることに限らず、コンパイル時のフラグに基づく型宣言にも利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;else&lt;/g1&gt; clause can only be specified if at least one &lt;g2&gt;rescue&lt;/g2&gt; clause is specified.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103645Z" creationid="makenowjust" creationdate="20200506T103645Z">
        <seg>&lt;g1&gt;else&lt;/g1&gt; 節を指定する場合、少なくとも1つの &lt;g2&gt;rescue&lt;/g2&gt; 節が指定されている必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;else&lt;/g1&gt; clause is executed only if no exceptions were rescued:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103549Z" creationid="makenowjust" creationdate="20200506T103549Z">
        <seg>&lt;g1&gt;else&lt;/g1&gt; 節は例外が発生しなかった場合にのみ実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;ensure&lt;/g1&gt; clause is executed at the end of a &lt;g2&gt;begin ... end&lt;/g2&gt; or &lt;g3&gt;begin ... rescue ... end&lt;/g3&gt; expression regardless of whether an exception was raised or not:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103730Z" creationid="makenowjust" creationdate="20200506T103730Z">
        <seg>&lt;g1&gt;ensure&lt;/g1&gt; 節は例外が発生したかどうかに関係なく、&lt;g2&gt;begin ... end&lt;/g2&gt; または &lt;g3&gt;begin ... rescue ... end&lt;/g3&gt; のあとで必ず実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;enum&lt;/g1&gt; declaration inside a &lt;g2&gt;lib&lt;/g2&gt; declares a C enum:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083708Z" creationid="makenowjust" creationdate="20200512T083708Z">
        <seg>&lt;g2&gt;lib&lt;/g2&gt; の中で &lt;g1&gt;enum&lt;/g1&gt; を宣言することで C の列挙型を宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;extend&lt;/g1&gt; makes a type include methods defined in that module as class methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141628Z" creationid="makenowjust" creationdate="20200504T141628Z">
        <seg>&lt;g1&gt;extend&lt;/g1&gt; はモジュールで定義されたメソッドをクラスメソッドとして利用できるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;if&lt;/g1&gt; can be written as an expression’s suffix:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080325Z" creationid="makenowjust" creationdate="20200424T080325Z">
        <seg>&lt;g1&gt;if&lt;/g1&gt;は式に後置して使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;if&lt;/g1&gt; evaluates the given branch if its condition is &lt;g2&gt;truthy&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074633Z" creationid="makenowjust" creationdate="20200424T074152Z">
        <seg>&lt;g1&gt;if&lt;/g1&gt;は与えられた条件式が&lt;g2&gt;真&lt;/g2&gt;である場合にthen節を評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;include&lt;/g1&gt; makes a type include methods defined in that module as instance methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141242Z" creationid="makenowjust" creationdate="20200504T141242Z">
        <seg>&lt;g1&gt;include&lt;/g1&gt; はモジュールで定義されたメソッドをインスタンスメソッドとして利用できるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;offsetof&lt;/g1&gt; expression returns the byte offset of an instance variable in a struct or class type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T020017Z" creationid="makenowjust" creationdate="20200511T020017Z">
        <seg>&lt;g1&gt;offsetof&lt;/g1&gt; はクラスや構造体のインスタンス変数のバイトオフセットを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;unless&lt;/g1&gt; evaluates the then branch if its condition is &lt;g2&gt;falsey&lt;/g2&gt;, and evaluates the &lt;g3&gt;else branch&lt;/g3&gt;, if there’s any, otherwise.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090448Z" creationid="makenowjust" creationdate="20200424T090448Z">
        <seg>&lt;g1&gt;unless&lt;/g1&gt;は条件式が&lt;g2&gt;偽となる&lt;/g2&gt;ときにthen節を評価して、そうでないときに&lt;g3&gt;else&lt;/g3&gt;節があれば評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;until&lt;/g1&gt; executes its body until its condition is &lt;g2&gt;truthy&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101002Z" creationid="makenowjust" creationdate="20200424T101002Z">
        <seg>&lt;g1&gt;until&lt;/g1&gt;は条件式が&lt;g2&gt;真となる&lt;/g2&gt;まで繰り返し本体を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;||&lt;/g1&gt; (or) evaluates its left hand side.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T102238Z" creationid="makenowjust" creationdate="20200424T101722Z">
        <seg>&lt;g1&gt;||&lt;/g1&gt; (または) 演算子はまず左辺を評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g3&gt;until&lt;/g3&gt; is just syntax sugar for a &lt;g4&gt;while&lt;/g4&gt; with the condition negated:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101247Z" creationid="makenowjust" creationdate="20200424T101046Z">
        <seg>&lt;g3&gt;until&lt;/g3&gt;は&lt;g4&gt;while&lt;/g4&gt;に条件式を否定したもの与えられた場合のシンタックスシュガーになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An Array can have mixed types, meaning `T` will be a union of types, but these are determined when the array is created, either by specifying T or by using an array literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010241Z" creationid="hirofumiwakasugi" creationdate="20150901T132140Z">
        <seg>配列には異なる型の要素を含めることが可能で、そのとき `T` は複数の型の組み合わせ (ユニオン型) となります。ただ、その型は配列が作られたときに決定されます。つまり、配列の生成時に明示的に指定された `T` か、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An [Array](http://crystal-lang.org/api/Array.html) is a generic type containing elements of a type `T`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T072425Z" creationid="hirofumiwakasugi" creationdate="20150901T131821Z">
        <seg>配列 ([Array](http://crystal-lang.org/api/Array.html)) は、その中に `T` 型の n 個の要素を含むことができるジェネリック型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `&amp;&amp;` (and) evaluates its left hand side.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052505Z" creationid="hirofumiwakasugi" creationdate="20150905T052505Z">
        <seg>`&amp;&amp;` (かつ/論理積) はまず左辺を評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `alias` declaration inside a `lib` declares a C `typedef`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023839Z" creationid="hirofumiwakasugi" creationdate="20151008T023740Z">
        <seg>`lib` の内部で `alias` を宣言することで C の typedef を宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `alias` is most useful to avoid writing long types over and over, but also to declare a type based on compile-time flags:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024031Z" creationid="hirofumiwakasugi" creationdate="20151008T024000Z">
        <seg>`alias` が最も便利なのは、長い型名を何度も何度も書かずに済むようにできることです。ただ、コンパイル時フラグに基づく型宣言でも非常に有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `else` clause can only be specified if at least one `rescue` clause is specified.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014036Z" creationid="hirofumiwakasugi" creationdate="20150907T014036Z">
        <seg>`else` 節を設定するためには、少なくとも1つの `rescue` 節が設定されている必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `else` clause is executed only if no exceptions were rescued:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013756Z" creationid="hirofumiwakasugi" creationdate="20150907T013756Z">
        <seg>`else` 節は、例外が発生しなかった場合にのみ実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `ensure` clause is executed at the end of a `begin ... end` or `begin ... rescue ... end` expression regardless of whether an exception was raised or not:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013355Z" creationid="hirofumiwakasugi" creationdate="20150907T013215Z">
        <seg>`ensure` 節は、例外が発生したかどうかに関係なく、`begin ... end` または `begin ... rescue ... end` の後で必ず実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `enum` declaration inside a `lib` declares a C enum:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052625Z" creationid="hirofumiwakasugi" creationdate="20151007T052625Z">
        <seg>`lib` の内部で `enum` を宣言することで C の enum (列挙型) を宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `extend` makes a type include methods defined in that module as class methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T141738Z" creationid="hirofumiwakasugi" creationdate="20150911T141535Z">
        <seg>一方、`extend` を使用すると、モジュールに定義されたメソッドをクラスメソッドとして利用できるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `if` can be written as an expression’s suffix:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012922Z" creationid="hirofumiwakasugi" creationdate="20150903T012824Z">
        <seg>`if` は式に後置して使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `if` evaluates the `then` branch if its condition is *truthy*, and evaluates the `else` branch, if there’s any, otherwise.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T025413Z" creationid="hirofumiwakasugi" creationdate="20150903T005946Z">
        <seg>`if` は、もし与えられた条件が「*真*」である場合には `then` 節を評価し、そうでない場合には `else` 節を (もしあれば) 評価するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `include` makes a type include methods defined in that module as instance methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T141722Z" creationid="hirofumiwakasugi" creationdate="20150911T133427Z">
        <seg>`include` を使用すると、モジュールに定義されたメソッドをインスタンスメソッドとして利用できるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `unless` evaluates the then branch if its condition is *falsey*, and evaluates the `else branch`, if there’s any, otherwise.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022747Z" creationid="hirofumiwakasugi" creationdate="20150903T022742Z">
        <seg>`unless` は、もし与えられた条件が「*偽*」である場合には `then` の分岐を評価し、そうでない場合には `else` の分岐を (もしあれば) 評価するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `until` executes its body until its condition is *truthy*.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052403Z" creationid="hirofumiwakasugi" creationdate="20150905T052403Z">
        <seg>`until` は、与えられた条件が「真」になるまでその本体を繰り返し実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `until` is just syntax sugar for a `while` with the condition negated:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052410Z" creationid="hirofumiwakasugi" creationdate="20150905T052410Z">
        <seg>実際には、`until` というのは `while` に否定の条件が与えられた場合のシンタックスシュガーになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `||` (or) evaluates its left hand side.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052644Z" creationid="hirofumiwakasugi" creationdate="20150905T052644Z">
        <seg>`||` (または/論理和) はまず左辺を評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An alternative syntax is provided:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T020206Z" creationid="hirofumiwakasugi" creationdate="20150902T020206Z">
        <seg>また、以下の記法を利用して書くことも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An annotation could be used to designate a property as an ORM column.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T105702Z" creationid="makenowjust" creationdate="20200510T105702Z">
        <seg>アノテーションを、プロパティをORMのカラムに指定するために使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An easy way to remember which one is inclusive and which one is exclusive it to think of the extra dot as if it pushes *y* further away, thus leaving it outside of the range.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T015144Z" creationid="hirofumiwakasugi" creationdate="20150902T014911Z">
        <seg>上記の「右側の値を含む/含まない」記法の簡単な覚え方を紹介します。ドットが1つ多くついているから、それだけ *y* が遠くに押し出されているのをイメージしてください。だからそのとき遠くの *y* は範囲に含まれない、というわけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An easy way to remember which one is inclusive and which one is exclusive it to think of the extra dot as if it pushes &lt;g1&gt;y&lt;/g1&gt; further away, thus leaving it outside of the range.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T035153Z" creationid="makenowjust" creationdate="20200421T035153Z">
        <seg>上記の「右の値を含む/含まない」記法の簡単な覚え方を紹介します。ドットが1つ多くついていると、それだけ&lt;g1&gt;y&lt;/g1&gt;が外に押し出されているのをイメージしてください。だから、そのとき範囲に&lt;g1&gt;y&lt;/g1&gt;は含まれないのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An enum can be created from an integer:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182543Z" creationid="hirofumiwakasugi" creationdate="20150916T010959Z">
        <seg>整数から列挙型を作ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An enum can be marked with the &lt;g1&gt;@[Flags]&lt;/g1&gt; annotation.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T090611Z" creationid="makenowjust" creationdate="20210324T090611Z">
        <seg>列挙型に &lt;g1&gt;@[Flags]&lt;/g1&gt; を指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An enum can be marked with the &lt;g1&gt;@[Flags]&lt;/g1&gt; attribute.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182140Z" creationid="makenowjust" creationdate="20200505T182140Z">
        <seg>列挙型に &lt;g1&gt;@[Flags]&lt;/g1&gt; という属性を指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An enum can be marked with the `@[Flags]` attribute.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T114600Z" creationid="hirofumiwakasugi" creationdate="20150914T114015Z">
        <seg>Enum には `@[Flags]` という属性を指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An enum is a set of integer values, where each value has an associated name.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T183507Z" creationid="hirofumiwakasugi" creationdate="20150914T024113Z">
        <seg>列挙型 (Enum) は整数の集合で、そのそれぞれの値が名前を持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An enum is defined with the &lt;g1&gt;enum&lt;/g1&gt; keyword, followed by its name.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T181819Z" creationid="makenowjust" creationdate="20200505T181736Z">
        <seg>&lt;g1&gt;enum&lt;/g1&gt; キーワードに続けてその名前を書くことで、列挙型を定義できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An enum is defined with the `enum` keyword, followed by its name.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024206Z" creationid="hirofumiwakasugi" creationdate="20150914T024201Z">
        <seg>Enum を定義するには `enum` キーワードに続けてその名前を書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An example of a module as a namespace:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T131043Z" creationid="hirofumiwakasugi" creationdate="20150911T131043Z">
        <seg>まず、名前空間としてモジュールを使用する例を見てみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An example of this is the C &lt;g2&gt;FILE&lt;/g2&gt; type, which you can obtain with &lt;g3&gt;fopen&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T084801Z" creationid="makenowjust" creationdate="20200512T084801Z">
        <seg>この例としては、&lt;g3&gt;fopen&lt;/g3&gt; によって得られる C の &lt;g2&gt;FILE&lt;/g2&gt; 型があげられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An example of this is the C `FILE` type, which you can obtain with `fopen`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023619Z" creationid="hirofumiwakasugi" creationdate="20151008T023619Z">
        <seg>この例としては、`fopen` によって得られる C の `FILE` 型をあげられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An example with `ensure`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014316Z" creationid="hirofumiwakasugi" creationdate="20150907T014307Z">
        <seg>`ensure` の例:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An example with a variable:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035023Z" creationid="hirofumiwakasugi" creationdate="20150906T035023Z">
        <seg>変数の例:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An example with an instance variable:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035030Z" creationid="hirofumiwakasugi" creationdate="20150906T035030Z">
        <seg>インスタンス変数の例:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An example:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031517Z" creationid="hirofumiwakasugi" creationdate="20150910T031454Z">
        <seg>例をあげましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An experimental feature is allowed to change, break, or disappear despite the semver guarantees.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T120042Z" creationid="makenowjust" creationdate="20200610T145506Z">
        <seg>実験的な (experimental) 機能は変更や破壊、もしくは削除を Semver の規約に関わらず行なっても良いものとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An explicit type can be specified by immediately following the closing bracket with &lt;g1&gt;of&lt;/g1&gt; and a type, each separated by whitespace.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173140Z" creationid="makenowjust" creationdate="20200420T173140Z">
        <seg>閉じ角括弧のあとに続けて&lt;g1&gt;of&lt;/g1&gt;と型を置くことで、明示的に型を指定することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An external &lt;g1&gt;.json&lt;/g1&gt; file will let you specify the current and past releases to populate the version picker.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T032701Z" creationid="makenowjust" creationdate="20200611T032701Z">
        <seg>外部に &lt;g1&gt;.json&lt;/g1&gt; ファイルを用意して、現在と過去のリリースを指定することでバージョンピッカーに反映できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An external name can be specified for a method argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T161037Z" creationid="makenowjust" creationdate="20200501T161032Z">
        <seg>メソッドの引数には外部名を指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An external name can be specified for a method parameter.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T092323Z" creationid="makenowjust" creationdate="20210324T092323Z">
        <seg>メソッドの仮引数には外部名を指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An integer literal is an optional &lt;g1&gt;+&lt;/g1&gt; or &lt;g2&gt;-&lt;/g2&gt; sign, followed by
a sequence of digits and underscores, optionally followed by a suffix.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T183112Z" creationid="makenowjust" creationdate="20200419T182341Z">
        <seg>整数リテラルは &lt;g1&gt;+&lt;/g1&gt; (オプション) または &lt;g2&gt;-&lt;/g2&gt; 符号に続く数値とアンダースコアからなり、さらに型を表わすサフィックスを続けることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An integer literal is an optional `+` or `-` sign, followed by
a sequence of digits and underscores, optionally followed by a suffix.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052055Z" creationid="hirofumiwakasugi" creationdate="20150901T051705Z">
        <seg>整数リテラルは、`+` (オプション) または `-` 符号に続く数値とアンダースコアによって記述し、オプションでサフィックスを与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object's internal state, if any, can only be queried by invoking methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T013755Z" creationid="hirofumiwakasugi" creationdate="20150904T013232Z">
        <seg>そして、オブジェクトに内部状態が存在する場合は、メソッドを実行することでその状態について問い合わせることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An optional trailing colon is preferred for readability.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215250Z" creationid="makenowjust" creationdate="20200412T214630Z">
        <seg>可読性のためにコロンを続けることが推奨されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An underscore is allowed in type restrictions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012105Z" creationid="hirofumiwakasugi" creationdate="20151009T012105Z">
        <seg>型制約でアンダースコアを使うことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And &lt;g7&gt;Array(Bar)&lt;/g7&gt; is &lt;g8&gt;not&lt;/g8&gt; assignable to an &lt;g9&gt;Array(Foo)&lt;/g9&gt; instance var.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T105607Z" creationid="makenowjust" creationdate="20200504T105607Z">
        <seg>そして &lt;g7&gt;Array(Bar)&lt;/g7&gt; は &lt;g9&gt;Array(Foo)&lt;/g9&gt; のインスタンス変数に代入することは&lt;g8&gt;できません&lt;/g8&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And C bindings are usually wrapped in safe wrappers that include null pointers and bounds checks.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T013204Z" creationid="hirofumiwakasugi" creationdate="20151009T012742Z">
        <seg>また、C バインディングは、普通は、NULL ポインタやバウンドチェックを含むより安全なラッパーで包みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And always be sure to profile your program to learn what its bottlenecks are.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T084212Z" creationid="akiji" creationdate="20200430T084212Z">
        <seg>そして、常に自分のプログラムをプロファイリングして、ボトルネックがどこにあるのかを確認するようにしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And fixed some &lt;g2&gt;HTTP::Server&lt;/g2&gt; sporadic failures during SSL handshake in &lt;g3&gt;#9177&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9177&lt;e5/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T152427Z" creationid="makenowjust" creationdate="20200610T152427Z">
        <seg>また、&lt;g2&gt;HTTP::Server&lt;/g2&gt; が SSL ハンドシェイク中に時折失敗する問題を&lt;g3&gt;#9177&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9177&lt;e5/&gt;で修正しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And from there we are one click away from the source code ... the actual proof that it is not magic!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175634Z" creationid="makenowjust" creationdate="20200413T173926Z">
        <seg>そして、そこから1クリックでソースコードを見ることができます。……これが魔法ではないということの証明です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And if the condition is a &lt;g7&gt;var.responds_to?(:method)&lt;/g7&gt;, &lt;g8&gt;var&lt;/g8&gt; is guaranteed to be of a type that responds to that method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095031Z" creationid="makenowjust" creationdate="20200424T094959Z">
        <seg>さらに、&lt;g7&gt;var.responds_to?(:method)&lt;/g7&gt;という形なら、本体では&lt;g8&gt;var&lt;/g8&gt;がそのメソッドを持つことが保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And if the condition is a `var.responds_to?(:method)`, `var` is guaranteed to be of a type that responds to that method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052139Z" creationid="hirofumiwakasugi" creationdate="20150905T052139Z">
        <seg>また、もし条件が `var.responds_to?(:method)` の判定であれば、本体の中で `var` がそのメソッドに応答することを保証することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And it is also available to &lt;g1&gt;index assignments&lt;/g1&gt; (&lt;g2&gt;[]=&lt;/g2&gt;):</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175652Z" creationid="makenowjust" creationdate="20200422T175652Z">
        <seg>そして、&lt;g1&gt;インデックス指定の代入&lt;/g1&gt; (&lt;g2&gt;[]=&lt;/g2&gt;) の場合にも同様に有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And it is also available to indexers (`[]=`):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060316Z" creationid="hirofumiwakasugi" creationdate="20150902T060316Z">
        <seg>インデックス指定の代入 (`[]=`) の場合にも同様に有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And operators can be invoked too:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153248Z" creationid="hirofumiwakasugi" creationdate="20160115T153236Z">
        <seg>演算子の場合も同様に実行することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And since it can't find a &lt;g4&gt;talk&lt;/g4&gt; method on it, it errors.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T111205Z" creationid="makenowjust" creationdate="20200504T111205Z">
        <seg>そして、&lt;g4&gt;talk&lt;/g4&gt; メソッドはそこにはありません。よってエラーとなりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And since it can't find a `talk` method on it, it errors.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T034605Z" creationid="hirofumiwakasugi" creationdate="20150910T034310Z">
        <seg>`Animal` には `talk` メソッドが存在しないためにエラーとなっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And so we have reached The End 😎🎶</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T190712Z" creationid="makenowjust" creationdate="20200413T190645Z">
        <seg>これでこの文章はおしまいです 😎🎶</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And the compiler is able to bootstrap itself on windows.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T032244Z" creationid="makenowjust" creationdate="20200611T032244Z">
        <seg>そして、コンパイラ自身を Windows 上でブートストラップできるようになりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And there will be a &lt;g3&gt;lib/.shards.info&lt;/g3&gt; file that will describe the installed dependencies.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T141144Z" creationid="makenowjust" creationdate="20200610T141144Z">
        <seg>そして、&lt;g3&gt;lib/.shards.info&lt;/g3&gt; ファイルがインストールした依存関係を説明するものとして追加されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And to access it, use a syntax similar to type restrictions:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012416Z" creationid="hirofumiwakasugi" creationdate="20150907T012416Z">
        <seg>型を指定して、かつその例外にアクセスしたいときは、型制約の場合と同じように書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And to accomplish this, we will be using the &lt;g1&gt;&lt;g2&gt;Colorize&lt;/g2&gt;&lt;/g1&gt; module.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T183215Z" creationid="makenowjust" creationdate="20200413T183215Z">
        <seg>これを達成するために&lt;g1&gt;&lt;g2&gt;Colorize&lt;/g2&gt;&lt;/g1&gt;モジュールを使いたいと思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And to accomplish this, we will be using the &lt;g1&gt;&lt;g2&gt;Colorize&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Colorize.html&lt;e3/&gt; module.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093915Z" creationid="makenowjust" creationdate="20200518T093915Z">
        <seg>これを達成するために &lt;g1&gt;&lt;g2&gt;Colorize&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Colorize.html&lt;e3/&gt; モジュールを使いたいと思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Animal.new # Error: can't instantiate abstract class Animal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T112709Z" creationid="makenowjust" creationdate="20200504T112709Z">
        <seg>Animal.new # Error: can't instantiate abstract class Animal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Annotations</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T104057Z" creationid="makenowjust" creationdate="20200510T104057Z">
        <seg>アノテーション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Annotations are best used to store metadata about a given instance variable, type, or method so that it can be read at compile time using macros.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T113422Z" creationid="makenowjust" creationdate="20200510T104732Z">
        <seg>アノテーションはインスタンス変数や型、メソッドにメタデータを与えるのに最適な機能です。そして、そうして与えたメタデータはコンパイル時にマクロを使って読み出すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Annotations can be read off of a &lt;g1&gt;&lt;g2&gt;TypeNode&lt;/g2&gt;&lt;/g1&gt;, &lt;g3&gt;&lt;g4&gt;Def&lt;/g4&gt;&lt;/g3&gt;, or &lt;g5&gt;&lt;g6&gt;MetaVar&lt;/g6&gt;&lt;/g5&gt; using the &lt;g7&gt;.annotation(type : TypeNode)&lt;/g7&gt; method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T111741Z" creationid="makenowjust" creationdate="20200510T111707Z">
        <seg>アノテーションは &lt;g1&gt;&lt;g2&gt;TypeNode&lt;/g2&gt;&lt;/g1&gt;、&lt;g3&gt;&lt;g4&gt;Def&lt;/g4&gt;&lt;/g3&gt; そして &lt;g5&gt;&lt;g6&gt;MetaVar&lt;/g6&gt;&lt;/g5&gt; から &lt;g7&gt;.annotation(type : TypeNode)&lt;/g7&gt; メソッドを使うことで読み出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Annotations can be read off of a &lt;g1&gt;&lt;g2&gt;TypeNode&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/Crystal/Macros/TypeNode.html&lt;e10/&gt;, &lt;g3&gt;&lt;g4&gt;Def&lt;/g4&gt;&lt;/g3&gt;https://crystal-lang.org/api/Crystal/Macros/Def.html&lt;e11/&gt;, or &lt;g5&gt;&lt;g6&gt;MetaVar&lt;/g6&gt;&lt;/g5&gt;https://crystal-lang.org/api/Crystal/Macros/MetaVar.html&lt;e12/&gt; using the &lt;g7&gt;.annotation(type : TypeNode)&lt;/g7&gt; method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T082651Z" creationid="makenowjust" creationdate="20200518T082651Z">
        <seg>アノテーションは &lt;g1&gt;&lt;g2&gt;TypeNode&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/Crystal/Macros/TypeNode.html&lt;e10/&gt;、&lt;g3&gt;&lt;g4&gt;Def&lt;/g4&gt;&lt;/g3&gt;https://crystal-lang.org/api/Crystal/Macros/Def.html&lt;e11/&gt;、そして &lt;g5&gt;&lt;g6&gt;MetaVar&lt;/g6&gt;&lt;/g5&gt;https://crystal-lang.org/api/Crystal/Macros/MetaVar.html&lt;e12/&gt; から &lt;g7&gt;.annotation(type : TypeNode)&lt;/g7&gt; メソッドを使うことで読み出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Annotations can be read off of a &lt;g1&gt;&lt;g2&gt;TypeNode&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Crystal/Macros/TypeNode.html&lt;e10/&gt;, &lt;g3&gt;&lt;g4&gt;Def&lt;/g4&gt;&lt;/g3&gt;https://crystal-lang.org/api/latest/Crystal/Macros/Def.html&lt;e11/&gt;, or &lt;g5&gt;&lt;g6&gt;MetaVar&lt;/g6&gt;&lt;/g5&gt;https://crystal-lang.org/api/latest/Crystal/Macros/MetaVar.html&lt;e12/&gt; using the &lt;g7&gt;.annotation(type : TypeNode)&lt;/g7&gt; method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T095913Z" creationid="makenowjust" creationdate="20210324T095913Z">
        <seg>アノテーションは &lt;g1&gt;&lt;g2&gt;TypeNode&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Crystal/Macros/TypeNode.html&lt;e10/&gt;、&lt;g3&gt;&lt;g4&gt;Def&lt;/g4&gt;&lt;/g3&gt;https://crystal-lang.org/api/latest/Crystal/Macros/Def.html&lt;e11/&gt;、そして &lt;g5&gt;&lt;g6&gt;MetaVar&lt;/g6&gt;&lt;/g5&gt;https://crystal-lang.org/api/latest/Crystal/Macros/MetaVar.html&lt;e12/&gt; から &lt;g7&gt;.annotation(type : TypeNode)&lt;/g7&gt; メソッドを使うことで読み出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Annotations can be used to add metadata to certain features in the source code.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T113319Z" creationid="makenowjust" creationdate="20200510T104235Z">
        <seg>アノテーションを使うとソースコードに特定の機能に関するメタデータを追加することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Announcements about the language development.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T152722Z" creationid="makenowjust" creationdate="20210726T152722Z">
        <seg>言語の開発についてのアナウンス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another breaking-change in &lt;g1&gt;IO&lt;/g1&gt; is that &lt;g2&gt;#skip&lt;/g2&gt;, &lt;g3&gt;#write&lt;/g3&gt;, &lt;g4&gt;#write_utf8&lt;/g4&gt;, &lt;g5&gt;#write_byte&lt;/g5&gt;, &lt;g6&gt;#write_bytes&lt;/g6&gt;, and &lt;g7&gt;#skip_to_end&lt;/g7&gt; return the number of bytes it skipped/written.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T144702Z" creationid="makenowjust" creationdate="20200610T144702Z">
        <seg>その他の &lt;g1&gt;IO&lt;/g1&gt; の破壊的な変更としては、&lt;g2&gt;#skip&lt;/g2&gt;、&lt;g3&gt;#write&lt;/g3&gt;、&lt;g4&gt;#write_utf8&lt;/g4&gt;、&lt;g5&gt;#write_byte&lt;/g5&gt;、&lt;g6&gt;#write_bytes&lt;/g6&gt;、や&lt;g7&gt;#skip_to_end&lt;/g7&gt; がスキップした/書き込んだバイト数の数値を返すようになったことがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another breaking-change use for some shell integrations is that &lt;g1&gt;crystal env&lt;/g1&gt; will now quote the values.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T131655Z" creationid="makenowjust" creationdate="20200610T131655Z">
        <seg>他の破壊的な変更としては、&lt;g1&gt;crystal env&lt;/g1&gt; がシェル向けにクオートをするようになりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another case is &lt;g1&gt;||&lt;/g1&gt; and &lt;g2&gt;||=&lt;/g2&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T143624Z" creationid="makenowjust" creationdate="20200427T143624Z">
        <seg>他にも &lt;g1&gt;||&lt;/g1&gt; や &lt;g2&gt;||=&lt;/g2&gt; の場合にも上手く動作することがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another change that can impact packages is that the &lt;g1&gt;SOURCE_DATE_EPOCH&lt;/g1&gt; environment variable can be used while building the compiler to advertise the source date.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T135124Z" creationid="makenowjust" creationdate="20200610T135012Z">
        <seg>その他の変更として、&lt;g1&gt;SOURCE_DATE_EPOCH&lt;/g1&gt; という環境変数を使うことでコンパイラをビルドする際にソースコードの時刻を伝えることができるようになりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another feature that was dropped is the &lt;g1&gt;parallel&lt;/g1&gt; macro in &lt;g2&gt;#9097&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9097&lt;e3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T031150Z" creationid="makenowjust" creationdate="20200611T031150Z">
        <seg>その他に&lt;g2&gt;#9097&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9097&lt;e3/&gt;で &lt;g1&gt;parallel&lt;/g1&gt; マクロが削除されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another option is to use &lt;g1&gt;&lt;g2&gt;Object#try&lt;/g2&gt;&lt;/g1&gt; found in the standard library which only executes the block if the value is not &lt;g3&gt;nil&lt;/g3&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T082201Z" creationid="makenowjust" creationdate="20200424T082201Z">
        <seg>他の手法として、標準ライブラリの&lt;g1&gt;&lt;g2&gt;Object#try&lt;/g2&gt;&lt;/g1&gt;メソッドを使うこともできます。これは&lt;g3&gt;nil&lt;/g3&gt;でない場合にのみブロックを実行する、というメソッドです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another option is to use &lt;g1&gt;&lt;g2&gt;Object#try&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/Object.html#try%28%26block%29-instance-method&lt;e4/&gt; found in the standard library which only executes the block if the value is not &lt;g3&gt;nil&lt;/g3&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T084616Z" creationid="makenowjust" creationdate="20200518T084616Z">
        <seg>他の手法として、標準ライブラリの &lt;g1&gt;&lt;g2&gt;Object#try&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/Object.html#try%28%26block%29-instance-method&lt;e4/&gt; を使うこともできます。これは &lt;g3&gt;nil&lt;/g3&gt; ではない場合にのみブロックを実行する、というメソッドです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another option is to use &lt;g1&gt;&lt;g2&gt;Object#try&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Object.html#try%28%26block%29-instance-method&lt;e4/&gt; found in the standard library which only executes the block if the value is not &lt;g3&gt;nil&lt;/g3&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T085541Z" creationid="makenowjust" creationdate="20210324T085541Z">
        <seg>他の手法として、標準ライブラリの &lt;g1&gt;&lt;g2&gt;Object#try&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Object.html#try%28%26block%29-instance-method&lt;e4/&gt; も使えます。これは &lt;g3&gt;nil&lt;/g3&gt; ではない場合にのみブロックを実行する、というメソッドです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another reason is that another thread could change that instance variable after checking the condition.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T015945Z" creationid="hirofumiwakasugi" creationdate="20150903T015447Z">
        <seg>また、もう1つの理由としては、条件式のチェックが行われた後で、他のスレッドがインスタンス変数を書き換える可能性もあるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another way is this:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T075255Z" creationid="akiji" creationdate="20200428T075255Z">
        <seg>他にはこんな方法もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another way to define a nested macro is by using the special &lt;g1&gt;verbatim&lt;/g1&gt; call.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220429Z" creationid="makenowjust" creationdate="20200509T220429Z">
        <seg>ネストしたマクロを定義する他の方法としては、&lt;g1&gt;verbatim&lt;/g1&gt; という特別なメソッドを使うものがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any expression may be placed inside the interpolated section, but it’s best to keep the expression small for readability.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192513Z" creationid="makenowjust" creationdate="20200419T192513Z">
        <seg>任意の式を文字列の補間として書くことができますが、可読性を高めるためそれらの式は小さなものに保ったほうが良いです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any method not starting with a letter or
underscore is an operator  method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T082013Z" creationid="makenowjust" creationdate="20200502T082013Z">
        <seg>小文字やアンダースコアからはじまらない名前のメソッドは演算子です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any name can be used for type arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T142813Z" creationid="makenowjust" creationdate="20200504T142813Z">
        <seg>型引数の名前にはどんな名前でも使うこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any name can be used for type parameters:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T085914Z" creationid="makenowjust" creationdate="20210324T085914Z">
        <seg>型引数の名前はどのような名前でも使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any other character following a backslash is interpreted as the character itself.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T191934Z" creationid="makenowjust" creationdate="20200419T191934Z">
        <seg>その他の文字がバックスラッシュに続いた場合、その文字自身を表すものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any other value is truthy.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T005754Z" creationid="hirofumiwakasugi" creationdate="20150903T005739Z">
        <seg>その他の値はすべて真となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any string literal can span multiple lines:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194210Z" creationid="makenowjust" creationdate="20200419T194210Z">
        <seg>任意の文字列リテラルは複数行にまたがって記述できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>AnyReg</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120237Z" creationid="makenowjust" creationdate="20200510T120237Z">
        <seg>AnyReg</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Apologies for the back and forth.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200621T082509Z" creationid="makenowjust" creationdate="20200621T073718Z">
        <seg>振り回してしまったことをお詫びします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Applications</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T104629Z" creationid="makenowjust" creationdate="20200510T104629Z">
        <seg>応用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arch Linux</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071349Z" creationid="makenowjust" creationdate="20200518T071349Z">
        <seg>Arch Linux</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arch Linux includes the Crystal compiler in the Community repository.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021531Z" creationid="hirofumiwakasugi" creationdate="20151009T021531Z">
        <seg>Arch Linux はコミュニティのリポジトリで Crystal コンパイラが提供されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arguments can be passed to `some_method` as well:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153137Z" creationid="hirofumiwakasugi" creationdate="20160115T153137Z">
        <seg>`some_method` に引数を渡すことも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arguments can be used with the short syntax argument as well:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185744Z" creationid="makenowjust" creationdate="20200505T185744Z">
        <seg>短縮記法に引数を渡すこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arguments past the splat argument can only be passed as named arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160606Z" creationid="makenowjust" creationdate="20200429T154312Z">
        <seg>仮引数でスプラット指定された引数のあとの引数は、名前付き引数としてのみ渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arguments past the splat method without a default value are required named arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160617Z" creationid="makenowjust" creationdate="20200429T154419Z">
        <seg>スプラット指定された引数のあとの引数でデフォルト値が無い場合は、名前付き引数として渡さなければいけない引数となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arguments past the splat parameter can only be passed as named arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T075141Z" creationid="makenowjust" creationdate="20210324T075141Z">
        <seg>仮引数でスプラット指定された引数のあとの引数は、名前付き引数としてのみ渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arguments past the star can also have default values.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160312Z" creationid="makenowjust" creationdate="20200501T160312Z">
        <seg>アスタリスク以降の引数はデフォルト値を持つこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arguments to the compiled binary can be separated with double dash &lt;g1&gt;--&lt;/g1&gt; from the compiler arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154609Z" creationid="makenowjust" creationdate="20200419T154600Z">
        <seg>コンパイルされたバイナリへの引数は、コンパイラへの引数のあとに2つのハイフン (&lt;g1&gt;--&lt;/g1&gt;) で区切って渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arithmetic operators</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084823Z" creationid="makenowjust" creationdate="20200502T084823Z">
        <seg>算術演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Array</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T172629Z" creationid="makenowjust" creationdate="20200420T172629Z">
        <seg>配列 (Array)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Array(T)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T040535Z" creationid="hirofumiwakasugi" creationdate="20150908T040535Z">
        <seg>Array(T)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Array(T)
end

foo(Int32)  # =&gt; Array(Int32)
foo(String) # =&gt; Array(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T135855Z" creationid="makenowjust" creationdate="20200430T135855Z">
        <seg>Array(T)
end

foo(Int32)  # =&gt; Array(Int32)
foo(String) # =&gt; Array(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Array(Type) |</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071434Z" creationid="hirofumiwakasugi" creationdate="20150919T071434Z">
        <seg>Array(Type) |</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Array-like Type Literal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173350Z" creationid="makenowjust" creationdate="20200420T173350Z">
        <seg>配列ライクな型のリテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays are typically created with an array literal denoted by square brackets (&lt;g1&gt;[]&lt;/g1&gt;) and individual elements separated by a comma (&lt;g2&gt;,&lt;/g2&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173936Z" creationid="makenowjust" creationdate="20200420T172858Z">
        <seg>配列は通常、角括弧 (&lt;g1&gt;[]&lt;/g1&gt;) とコンマ (&lt;g2&gt;,&lt;/g2&gt;) によって区切られた個々の要素による配列リテラルで生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays of strings can be created with a special syntax:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T142920Z" creationid="hirofumiwakasugi" creationdate="20150901T140047Z">
        <seg>文字列の配列は特別な記法を使って書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays of symbols can be created with a special syntax:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T142913Z" creationid="hirofumiwakasugi" creationdate="20150901T140104Z">
        <seg>シンボルの配列は特別な記法を使って書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Array{1, 2, 3}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173503Z" creationid="makenowjust" creationdate="20200420T173503Z">
        <seg>Array{1, 2, 3}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Articles</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T081655Z" creationid="makenowjust" creationdate="20200516T081640Z">
        <seg>記事 (一部未翻訳)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Articles from our blog</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T081430Z" creationid="makenowjust" creationdate="20200413T222558Z">
        <seg>ブログ記事 (一部未翻訳)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a code base grows, these issues gain more relevance: understanding a project becomes harder, and compile times become unbearable.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T132835Z" creationid="makenowjust" creationdate="20200427T132835Z">
        <seg>コードベースが育ってきたときにこれらの問題は顕著になります。プロジェクトの全容の把握は困難になり、コンパイル時間は耐え難いほど長くなるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a consequence, the compiler will automatically check for null references in compile time, helping prevent the dreadful &lt;a0&gt;billion-dollar mistake&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211636Z" creationid="makenowjust" creationdate="20200413T211636Z">
        <seg>要するに、コンパイラはコンパイル時に自動的に null 参照をチェックしてくれる、ということです。これは&lt;a0&gt;1億ドルの損失&lt;/a0&gt;から免れる助けになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a consequence, the compiler will automatically check for null references in compile time, helping prevent the dreadful &lt;g1&gt;billion-dollar mistake&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200616T120450Z" creationid="makenowjust" creationdate="20200518T072652Z">
        <seg>要するに、コンパイラはコンパイル時に自動的に null 参照をチェックしてくれる、ということです。これは&lt;g1&gt;10億ドルの失敗&lt;/g1&gt;から免れる助けになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a result of this, macros cannot be commented out.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221149Z" creationid="makenowjust" creationdate="20200509T221149Z">
        <seg>結果として、マクロをコメントアウトすることはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a side note, since &lt;g1&gt;Person&lt;/g1&gt; inherits &lt;g2&gt;Reference&lt;/g2&gt; the second definition of &lt;g3&gt;==&lt;/g3&gt; is not needed, since it's already defined in &lt;g4&gt;Reference&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T161214Z" creationid="makenowjust" creationdate="20200429T161214Z">
        <seg>また、これは補足ですが、&lt;g1&gt;Person&lt;/g1&gt; は &lt;g2&gt;Reference&lt;/g2&gt; を継承しているため、実際には2つ目の &lt;g3&gt;==&lt;/g3&gt; を定義する必要はありません。同様のメソッドが &lt;g4&gt;Reference&lt;/g4&gt; で定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a side note, since `Person` inherits `Reference` the second definition of `==` is not needed, since it's already defined in `Reference`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T024936Z" creationid="hirofumiwakasugi" creationdate="20150908T024647Z">
        <seg>また、これは補足ですが、`Person` は `Reference` を継承しているため、実際には2つ目の `==` を定義する必要はありません。 同様のメソッドが `Reference` で定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a side note, we can define &lt;g1&gt;become_older&lt;/g1&gt; inside the original &lt;g2&gt;Person&lt;/g2&gt; definition, or in a separate definition: Crystal combines all definitions into a single class.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T124736Z" creationid="makenowjust" creationdate="20200427T124736Z">
        <seg>少し捕捉をすると、上記のように &lt;g1&gt;become_older&lt;/g1&gt; メソッドを元々の &lt;g2&gt;Person&lt;/g2&gt; クラスのなか で定義するだけではなく、元々のクラスと別で改めて定義することも可能です。Crystal はそれらのすべての定義を1つのクラスにまとめます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a side note, we can define `become_older` inside the original `Person` definition, or in a separate definition: Crystal combines all definitions into a single class.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122906Z" creationid="hirofumiwakasugi" creationdate="20150904T122619Z">
        <seg>少し補足をすると、上記のように `become_older` メソッドを元々の `Person` クラスの中で定義するだけではなく、元々のクラスと別で改めて定義することも可能です。Crystal はそれらのすべての定義を1つのクラスにまとめます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a suffix</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080313Z" creationid="makenowjust" creationdate="20200424T080313Z">
        <seg>後置 if</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As an example, consider a &lt;g1&gt;Person&lt;/g1&gt; class.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T102102Z" creationid="makenowjust" creationdate="20200427T101948Z">
        <seg>ここでは&lt;g1&gt;Person&lt;/g1&gt;というクラスを例として説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As an example, consider a `Person` class.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T022414Z" creationid="hirofumiwakasugi" creationdate="20150904T022016Z">
        <seg>このセクションでは、`Person` というクラスを例として説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As an expression</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080407Z" creationid="makenowjust" creationdate="20200424T080407Z">
        <seg>式としての if</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As explained in the &lt;g1&gt;proc literals&lt;/g1&gt; section, a Proc can also be created from existing methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T074427Z" creationid="makenowjust" creationdate="20200506T074427Z">
        <seg>&lt;g1&gt;Proc リテラル&lt;/g1&gt;のセクションで説明したように、既存のメソッドから Proc を作ることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As explained in the [proc literals](literals/proc.html) section, a Proc can also be created from existing methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061646Z" creationid="hirofumiwakasugi" creationdate="20150918T061646Z">
        <seg>[Proc リテラル](literals/proc.html)のセクションで説明したように、既存のメソッドから Proc を作ることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As in &lt;g3&gt;Database#open&lt;/g3&gt;, if called with a block, the &lt;g4&gt;ResultSet&lt;/g4&gt; will be closed implicitly.</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T235201Z" creationid="daiki" creationdate="20200705T235201Z">
        <seg>&lt;g3&gt;Database#open&lt;/g3&gt; のように、 ブロックとともに呼び出した場合は、 &lt;g4&gt;ResultSet&lt;/g4&gt; は暗黙のうちにクローズされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As in C, the first member of the enum has a value of zero and each successive value is incremented by one.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083920Z" creationid="hirofumiwakasugi" creationdate="20151007T052721Z">
        <seg>C と同じく、列挙型の最初の要素はゼロで、以降の要素はそれぞれ1ずつ増加した値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As its name implies, it is an improved version of the library named &lt;g3&gt;Curses&lt;/g3&gt;, which was developed to support a text-based dungeon-crawling adventure game called Rogue!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T190610Z" creationid="makenowjust" creationdate="20200413T190610Z">
        <seg>その名前が暗に示すように、これは&lt;g3&gt;Curses&lt;/g3&gt;というライブラリの改良版です。&lt;g3&gt;Curses&lt;/g3&gt; は Rouge というテキストベースのダンジョン探索アドベンチャーゲームのために開発されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As modules are included they are **prepended** to this list.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T140252Z" creationid="hirofumiwakasugi" creationdate="20150911T140211Z">
        <seg>モジュールがインクルードされると、そのモジュールはリストの「**先頭**」に追加されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As modules are included they are &lt;g3&gt;prepended&lt;/g3&gt; to this list.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141448Z" creationid="makenowjust" creationdate="20200504T141448Z">
        <seg>モジュールがインクルードされたとき、モジュールはそのリストの&lt;g3&gt;先頭に追加&lt;/g3&gt;されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As stated in the documentation for the &lt;g1&gt;GNU Readline Library&lt;/g1&gt;, &lt;g2&gt;Readline&lt;/g2&gt; is a library that provides a set of functions for use by applications that allow users to edit command lines as they are typed in.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T190155Z" creationid="makenowjust" creationdate="20200413T190015Z">
        <seg>&lt;g1&gt;GNU Readline Library&lt;/g1&gt;というドキュメントで述べられているように、&lt;g2&gt;Readline&lt;/g2&gt;はユーザーに対してコマンドライン編集機能を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As stated in the documentation for the &lt;g1&gt;GNU Readline Library&lt;/g1&gt;http://www.gnu.org/software/readline/&lt;e6/&gt;, &lt;g2&gt;Readline&lt;/g2&gt; is a library that provides a set of functions for use by applications that allow users to edit command lines as they are typed in.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T094032Z" creationid="makenowjust" creationdate="20200518T094032Z">
        <seg>&lt;g1&gt;GNU Readline Library&lt;/g1&gt;http://www.gnu.org/software/readline/&lt;e6/&gt; で述べられているように、&lt;g2&gt;Readline&lt;/g2&gt; はユーザーに対してコマンドライン編集機能を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As the developer of a shard I might use my working copy of it instead of checking out a new version.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T113614Z" creationid="makenowjust" creationdate="20200809T113540Z">
        <seg>ある shard の開発者が、新バージョンをリリースして使えるようにする代わりに、手元の開発版のコピーを使いたいとき。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As the language and the community continues to grow we think it is important to have basic rules of thumb about how and for what purposes you can use the Crystal brand.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084721Z" creationid="makenowjust" creationdate="20200516T084721Z">
        <seg>言語やコミュニティが育っていくにつれて、Crystal というブランドをどうやって、どんな目的でなら使ってよいのか基本的なルールを持つことが必要だと感じるようになりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As with any other application, at some point we would like to &lt;g1&gt;write tests&lt;/g1&gt; for the different features.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T185144Z" creationid="makenowjust" creationdate="20200413T185144Z">
        <seg>他の多くのアプリケーションがそうしているように、異なる機能ごとに&lt;g1&gt;テストを書きたい&lt;/g1&gt;ものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As with any other application, at some point, we would like to &lt;g1&gt;write tests&lt;/g1&gt; for the different features.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T091057Z" creationid="makenowjust" creationdate="20211107T091057Z">
        <seg>他のアプリケーションと同じように、ある時点で、さまざまな機能の&lt;g1&gt;テストを書き&lt;/g1&gt;たいと思うでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As with other keg-only formulas there are some caveats shown in &lt;g1&gt;brew info &lt;formula&gt;&lt;/g1&gt; that shows how to link &lt;g2&gt;pkg-config&lt;/g2&gt; with this library.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112255Z" creationid="makenowjust" creationdate="20200518T112255Z">
        <seg>その他の keg-only な formula については、&lt;g1&gt;brew info &lt;formula&gt;&lt;/g1&gt; を使うことで、どうやって &lt;g2&gt;pkg-config&lt;/g2&gt; に情報を伝えられるか確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you can imagine, there are already &lt;g4&gt;a couple of shards&lt;/g4&gt; in the ecosystem that will allow us to use &lt;g5&gt;NCurses&lt;/g5&gt; in Crystal!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T190807Z" creationid="makenowjust" creationdate="20200413T190633Z">
        <seg>&lt;g5&gt;NCurses&lt;/g5&gt; を Crystal から扱える &lt;g4&gt;shardは2つ&lt;/g4&gt;ほど存在しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you can imagine, there are already &lt;g4&gt;a couple of shards&lt;/g4&gt;https://crystalshards.org/?filter=ncurses&lt;e6/&gt; in the ecosystem that will allow us to use &lt;g5&gt;NCurses&lt;/g5&gt; in Crystal!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T094153Z" creationid="makenowjust" creationdate="20200518T094153Z">
        <seg>&lt;g5&gt;NCurses&lt;/g5&gt; を Crystal から扱える &lt;g4&gt;shaeds は2つ&lt;/g4&gt;https://crystalshards.org/?filter=ncurses&lt;e6/&gt;ほど存在しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you can imagine, there are already &lt;g4&gt;a couple of shards&lt;/g4&gt;https://crystalshards.org/shards/search?q=ncurses&lt;e6/&gt; in the ecosystem that will allow us to use &lt;g5&gt;NCurses&lt;/g5&gt; in Crystal!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100736Z" creationid="makenowjust" creationdate="20210324T100736Z">
        <seg>想像してみてください。&lt;g5&gt;NCurses&lt;/g5&gt; Crystal で使うには&lt;g4&gt;いくつもの shardls&lt;/g4&gt;https://crystalshards.org/shards/search?q=ncurses&lt;e6/&gt;がエコシステムには存在しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you can see, some basic math is allowed for a member value: &lt;g1&gt;+&lt;/g1&gt;, &lt;g2&gt;-&lt;/g2&gt;, &lt;g3&gt;*&lt;/g3&gt;, &lt;g4&gt;/&lt;/g4&gt;, &lt;g5&gt;&amp;&lt;/g5&gt;, &lt;g6&gt;|&lt;/g6&gt;, &lt;g7&gt;&lt;&lt;&lt;/g7&gt;, &lt;g8&gt;&gt;&gt;&lt;/g8&gt; and &lt;g9&gt;%&lt;/g9&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083803Z" creationid="makenowjust" creationdate="20200512T083803Z">
        <seg>上記のように、要素の値には &lt;g1&gt;+&lt;/g1&gt;、&lt;g2&gt;-&lt;/g2&gt;、&lt;g3&gt;*&lt;/g3&gt;、&lt;g4&gt;/&lt;/g4&gt;、&lt;g5&gt;&amp;&lt;/g5&gt;、 &lt;g6&gt;|&lt;/g6&gt;、&lt;g7&gt;&lt;&lt;&lt;/g7&gt;、&lt;g8&gt;&gt;&gt;&lt;/g8&gt;、&lt;g9&gt;%&lt;/g9&gt;といった基本的な計算を行うこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you can see, some basic math is allowed for a member value: `+`, `-`, `*`, `/`, `&amp;`, `|`, `&lt;&lt;`, `&gt;&gt;` and `%`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053055Z" creationid="hirofumiwakasugi" creationdate="20151007T053055Z">
        <seg>上記のように、要素の値には `+`/`-`/`*`/`/`/`&amp;`/`|`/`&lt;&lt;`/`&gt;&gt;`/`%` といった基本的な計算を使うこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ashley Towns</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084038Z" creationid="makenowjust" creationdate="20200516T084038Z">
        <seg>Ashley Towns</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Asia</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092054Z" creationid="makenowjust" creationdate="20201217T092054Z">
        <seg>アジア</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ask for help with your Crystal project there, or help other people solve theirs - learning &amp; sharing all the way through." link_text="crystal-lang" url="https://stackoverflow.com/questions/tagged/crystal-lang?sort=newest" icon="stack_overflow" custom_icon=true %} {% include community_row.html title="Crystal Shards, Tools and Tutorials" divId="shards" content="Following the awesome-lists tradition, the awesome-crystal GitHub repository contains a curated list of Crystal shards, tools and tutorials.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T103350Z" creationid="makenowjust" creationdate="20200516T100707Z">
        <seg>Crystal プロジェクトの助けを求めたり、他の人の解決を手伝ったりできます。'
   link_text='crystal-lang'
   url='https://stackoverflow.com/questions/tagged/crystal-lang?sort=newest'
   icon='stack_overflow'
   custom_icon=true %}

{% include community_row.html
   title='Crystal の shards、ツール、チュートリアル'
   divId='shards'
   content='awesome リストの伝統に従って、awesome-crystal という GitHub リポジトリが Crystal の shards やツール、チュートリアルのキュレーテッドリストになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Assets</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084526Z" creationid="makenowjust" creationdate="20200516T084526Z">
        <seg>アセット</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Assigning a literal value</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T135337Z" creationid="makenowjust" creationdate="20200427T135337Z">
        <seg>リテラルの代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Assigning a value to it has no effect and the underscore cannot be read from:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T095258Z" creationid="makenowjust" creationdate="20210324T095056Z">
        <seg>この代入には副作用がなく、代入した値を読み出すこともできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Assigning a variable that is a method argument with a default value</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T142418Z" creationid="makenowjust" creationdate="20200427T142414Z">
        <seg>デフォルト値のある引数の代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Assigning a variable that is a method argument with a type restriction</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T141715Z" creationid="makenowjust" creationdate="20200427T140546Z">
        <seg>型制約を持った引数の代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Assigning the result of a class method that has a return type restriction</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T141726Z" creationid="makenowjust" creationdate="20200427T141706Z">
        <seg>型制約のあるクラスメソッドの呼び出し結果の代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Assigning the result of invoking a &lt;g1&gt;lib&lt;/g1&gt; function</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T142801Z" creationid="makenowjust" creationdate="20200427T142801Z">
        <seg>&lt;g1&gt;lib&lt;/g1&gt; 関数の呼び出し結果の代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Assigning the result of invoking the class method &lt;g1&gt;new&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T135830Z" creationid="makenowjust" creationdate="20200427T135818Z">
        <seg>クラスメソッド &lt;g1&gt;new&lt;/g1&gt; の呼び出し結果の代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175715Z" creationid="makenowjust" creationdate="20200422T174153Z">
        <seg>代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Assignment is done using the equals sign (&lt;g1&gt;=&lt;/g1&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174210Z" creationid="makenowjust" creationdate="20200422T174210Z">
        <seg>代入にはイコール記号 (&lt;g1&gt;=&lt;/g1&gt;) を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Assignment is done with the equal (`=`) character.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053925Z" creationid="hirofumiwakasugi" creationdate="20150902T053925Z">
        <seg>代入にはイコール記号 (`=`) を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Assignments</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T092305Z" creationid="makenowjust" creationdate="20200502T092305Z">
        <seg>代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Async # 4
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182143Z" creationid="makenowjust" creationdate="20200505T182143Z">
        <seg>Async # 4
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Async # 4
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T114624Z" creationid="hirofumiwakasugi" creationdate="20150914T114624Z">
        <seg>Async # 4
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At runtime, &lt;g3&gt;a&lt;/g3&gt; will of course be of one type only.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T083106Z" creationid="makenowjust" creationdate="20200429T143837Z">
        <seg>実行時には &lt;g3&gt;a&lt;/g3&gt; はただ1つの型の値になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At start our CLI application will have two options:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172425Z" creationid="makenowjust" creationdate="20200413T172425Z">
        <seg>CLI アプリケーションの開発を始めるにあたって、まず次のオプションを持っていることにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the end of the if, &lt;g1&gt;a&lt;/g1&gt; will have the &lt;g2&gt;Int32 | String&lt;/g2&gt; type, read "the union of Int32 and String".</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T083055Z" creationid="makenowjust" creationdate="20200429T143800Z">
        <seg>if 式の終わりでは、&lt;g1&gt;a&lt;/g1&gt; は &lt;g2&gt;Int32 | String&lt;/g2&gt; という型になります。この型は「Int32 と String のユニオン型」を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the moment of this writing, Crystal has concurrency support but not parallelism: several tasks can be executed, and a bit of time will be spent on each of these, but two code paths are never executed at the same exact time.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T071836Z" creationid="akiji" creationdate="20200428T053912Z">
        <seg>これを書いている時点では，Crystal は「並行処理」をサポートしていますが、「並列処理」はサポートしていません。つまり、いくつものタスクを実行することができて、それぞれのタスクに少しずつ時間を割り当てることも可能ですが、完全に同じタイミングで2つのコードパスが実行されることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the same time, the flag &lt;g1&gt;--ignore-crystal-version&lt;/g1&gt; was added to opt-out this check.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T110235Z" creationid="makenowjust" creationdate="20200809T110235Z">
        <seg>同時に、&lt;g1&gt;--ignore-crystal-version&lt;/g1&gt; が追加され、このチェックを無視できるようにもなっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the start our CLI application has two options:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T085133Z" creationid="makenowjust" creationdate="20211107T085133Z">
        <seg>まずは次の2つのオプションを持つCLIアプリケーションです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the third &lt;g1&gt;receive&lt;/g1&gt; the main fiber blocks and execution goes to the other fiber, which sends more values, finishes, etc.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T071731Z" creationid="akiji" creationdate="20200429T145324Z">
        <seg>そのため、3回目の&lt;g1&gt;receive&lt;/g1&gt;はメインファイバをブロックされて他のファイバに処理が移り、さらに値が送信されたり、終了したりします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Atom 1.0</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083838Z" creationid="makenowjust" creationdate="20200516T083838Z">
        <seg>Atom 1.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Attributes are used to pass flags to the linker to find external libraries:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T142633Z" creationid="hirofumiwakasugi" creationdate="20151003T142357Z">
        <seg>また、属性はリンカにフラグを渡すために利用され、リンカはそれにしたがって外部のライブラリを探します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Attributes can be omitted if the library is implicitly linked, as in the case of libc.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T143523Z" creationid="hirofumiwakasugi" creationdate="20151003T143432Z">
        <seg>属性は、例えば libc のように、暗黙的にリンクされるライブラリの場合には不要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Audience</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T091924Z" creationid="makenowjust" creationdate="20201217T091921Z">
        <seg>オーディエンス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Australia</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092059Z" creationid="makenowjust" creationdate="20201217T092059Z">
        <seg>オーストラリア</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available escape sequences:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T190544Z" creationid="makenowjust" creationdate="20200419T185946Z">
        <seg>次のエスケープシーケンスが有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available operators are whitelisted in the compiler (see
&lt;g1&gt;List of Operators&lt;/g1&gt; below) which allows symbol-only method
names and treats them as operators, including their precedence rules.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T082428Z" creationid="makenowjust" creationdate="20200502T082428Z">
        <seg>有効な演算子名は記号のみのメソッド名を許可するコンパイラの中のホワイトリストにあるものに限られ (&lt;g1&gt;演算子の一覧&lt;/g1&gt;を参照) 、これらの名前は演算子として扱われ優先順位を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Avoid IO allocation for string building</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T131417Z" creationid="akiji" creationdate="20200430T131417Z">
        <seg>文字列の構築にIOの割り当てを避ける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Avoid creating temporary objects over and over</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T131504Z" creationid="akiji" creationdate="20200430T131504Z">
        <seg>何度も何度も一時的なオブジェクトを生成しない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Avoiding memory allocations</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T084325Z" creationid="akiji" creationdate="20200430T084325Z">
        <seg>メモリの割り当てを避ける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>BUG</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214451Z" creationid="makenowjust" creationdate="20200412T214451Z">
        <seg>BUG</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bar      # OK</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T110037Z" creationid="makenowjust" creationdate="20200502T110037Z">
        <seg>Bar      # OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base64.encode64 "hello" # =&gt; "aGVsbG8="</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141740Z" creationid="makenowjust" creationdate="20200504T141740Z">
        <seg>Base64.encode64 "hello" # =&gt; "aGVsbG8="</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Be able to call C code by writing bindings to it in Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T221444Z" creationid="makenowjust" creationdate="20200412T221444Z">
        <seg>Crystalでバインディングを書くことでC言語のコードを呼び出せる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Be aware that using this feature will cause an exception to be raised at runtime, if the resulting string results in an invalid regular expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T041445Z" creationid="makenowjust" creationdate="20200421T041445Z">
        <seg>この方法で正規表現を生成した場合、構文エラーなどはコンパイル時に検出できず実行時に起こる例外になるということに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Be statically type-checked, but without having to specify the type of variables or method arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T221404Z" creationid="makenowjust" creationdate="20200412T221404Z">
        <seg>静的に型チェックがされる。しかし変数やメソッドの引数に型を明示する必要はない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Be statically type-checked, but without having to specify the type of variables or method parameters.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T073404Z" creationid="makenowjust" creationdate="20210324T073349Z">
        <seg>静的に型チェックがされる。しかし変数やメソッドの引数に型を明示する必要はない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Be sure to mention it if you are tweeting about Crystal!" link_text="@CrystalLanguage" url="https://twitter.com/CrystalLanguage" icon="twitter" custom_icon=true %} {% include community_row.html title="Share Your Work" divId="reddit" content="The Crystal Programming subreddit contains announcements on new releases, interesting libraries, blog posts, and is in general a good place to share your work with the rest of the Crystal community." link_text="Crystal Programming" url="https://www.reddit.com/r/crystal_programming/" icon="reddit" custom_icon=true %} {% include community_row.html title="Ask For Help" divId="stackoverflow" content="Of course, there is a crystal-lang tag in StackOverflow.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T114057Z" creationid="makenowjust" creationdate="20200516T100111Z">
        <seg>Crystal についてツイートしたときは是非このアカウントにメンションをしてみてください。'
   link_text='@CrystalLanguage'
   url='https://twitter.com/CrystalLanguage'
   icon='twitter'
   custom_icon=true %}

{% include community_row.html
   title='作ったものを共有'
   divId='reddit'
   content='Crystal Programming サブ reddit は新しいリリースのアナウンスや興味深いライブラリ、ブログ記事があり、そしてあなたの作ったものを Crystal コミュニティに発信するのに最適な場所です。'
   link_text='Crystal Programming'
   url='https://www.reddit.com/r/crystal_programming/'
   icon='reddit'
   custom_icon=true %}

{% include community_row.html
   title='質問'
   divId='stackoverflow'
   content='もちろん、crystal-lang タグが StackOverflow に存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Be wise and choose good names.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T114202Z" creationid="hirofumiwakasugi" creationdate="20150906T114146Z">
        <seg>引数には良い名前をつけるよう心がけましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because &lt;g1&gt;pointerof&lt;/g1&gt; involves pointers, it is considered &lt;g2&gt;unsafe&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T015238Z" creationid="makenowjust" creationdate="20200511T015238Z">
        <seg>&lt;g1&gt;pointerof&lt;/g1&gt; はポインタを扱うため、&lt;g2&gt;安全でない&lt;/g2&gt;ことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because `pointerof` involves pointers, it is considered [unsafe](unsafe.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T120054Z" creationid="hirofumiwakasugi" creationdate="20150906T035120Z">
        <seg>`pointerof` はポインタを扱うため「安全でない ([unsafe](unsafe.html))」ことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because a &lt;g1&gt;lib function&lt;/g1&gt; must have explicit types, the compiler can use the &lt;g2&gt;out&lt;/g2&gt; argument's type, which should be a pointer type, and use the dereferenced type as a guess.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T143224Z" creationid="makenowjust" creationdate="20200427T143200Z">
        <seg>&lt;g1&gt;lib 関数&lt;/g1&gt; は明示的な型を持つため、ポインタ型の引数が期待される場所で &lt;g2&gt;out&lt;/g2&gt; 形式でインスタンス変数が渡されたとき、そのポインタ型をデリファレンスしたものとして予想します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because a &lt;g1&gt;lib function&lt;/g1&gt; must have explicit types, the compiler can use the return type when assigning it to an instance variable.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T143204Z" creationid="makenowjust" creationdate="20200427T142941Z">
        <seg>&lt;g1&gt;lib 関数&lt;/g1&gt; は明示的な型を持つため、それがインスタンス変数に代入されたとき、コンパイラは戻り値の型を予想できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because a non-captured block is always inlined, the above method invocation is **exactly the same** as writing this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T040200Z" creationid="hirofumiwakasugi" creationdate="20150916T032157Z">
        <seg>捕捉されないブロック (non-captured block) は常にインライン展開されます。したがって、上記したメソッドの実行は、以下のように書くことと**完全に同じ**です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because a non-captured block is always inlined, the above method invocation is &lt;g1&gt;exactly the same&lt;/g1&gt; as writing this:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T192238Z" creationid="makenowjust" creationdate="20200505T192231Z">
        <seg>補足されないブロック (non-captured block) は常にインライン展開されます。したがって、上記のメソッドの実行は、以下のように書くことと&lt;g1&gt;まったく同じ&lt;/g1&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because arguments (without a default value) after the splat method argument must be passed by name, two methods with different required named arguments overload:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160754Z" creationid="makenowjust" creationdate="20200501T160534Z">
        <seg>スプラット指定された引数のあとの引数は必ず名前付き引数として渡されるため、その名前によってメソッドのオーバロードをすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because at this moment there's only a single thread executing your code, accessing and modifying a class variable in different fibers will work just fine.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T150722Z" creationid="akiji" creationdate="20200428T063755Z">
        <seg>現時点ではシングルスレッドでしかコードを実行できなため、複数のファイバから同じクラス変数を参照や変更しても問題なく動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because in order to compile a Crystal compiler we need an older Crystal compiler, the only two ways to generate a compiler for a system where there isn't a compiler yet are:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T024321Z" creationid="makenowjust" creationdate="20200511T024321Z">
        <seg>Crystal のコンパイラをコンパイルするためには以前のバージョンの Crystal コンパイラが必要です。したがって、まだコンパイラが入手できないシステムでコンパイラを生成するには以下の2つの方法があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because in order to compile a Crystal compiler we need an older Crystal compiler, the only two ways to generate a compiler for a system where there isn't a compiler yet are:
* We checkout the latest version of the compiler written in Ruby, and from that compiler we compile the next versions until the current one.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T050509Z" creationid="hirofumiwakasugi" creationdate="20150909T050026Z">
        <seg>Crystal のコンパイラをコンパイルするためには、古い Crystal コンパイラが必要です。したがって、まだコンパイラが入手できないシステムでコンパイラを生成するには以下の2つの方法しかありません。

* Ruby で書かれた最新のコンパイラを入手してコンパイラをコンパイルし、それを現在のバージョンまで繰り返す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because method names in Crystal must start with a lowercase letter, `fun` names must also start with a lowercase letter.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T041348Z" creationid="hirofumiwakasugi" creationdate="20151005T041240Z">
        <seg>Crystal ではユーザー名は小文字で始まる必要があるため、`fun` の名前も同様に小文字で始まらなくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because of this, indexing a string with &lt;g1&gt;String#[]&lt;/g1&gt; is not an &lt;g2&gt;O(1)&lt;/g2&gt; operation, as the bytes need to be decoded each time to find the character at the given position.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T024613Z" creationid="akiji" creationdate="20200430T132356Z">
        <seg>そのため、&lt;g1&gt;String#[]&lt;/g1&gt;は、インデックスが示す場所の文字を見つけるために毎回バイトデータをデコードする必要があり、この処理は&lt;g2&gt;O(1)&lt;/g2&gt; オーダーではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because parameters (without a default value) after the splat parameter must be passed by name, two methods with different required named parameters overload:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T092200Z" creationid="makenowjust" creationdate="20210324T092157Z">
        <seg>スプラット展開指定された引数のあとの引数は必ず名前付き引数として渡されるため、その名前によるメソッドのオーバーロードが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because public is the default if there is no `public` keyword.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032346Z" creationid="hirofumiwakasugi" creationdate="20150909T032346Z">
        <seg>したがって、`public` というキーワードは存在しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the &lt;g1&gt;if&lt;/g1&gt; above (well, technically a ternary operator, but it's similar to an &lt;g2&gt;if&lt;/g2&gt;) has integer literals, &lt;g3&gt;@age&lt;/g3&gt; is successfully inferred to be &lt;g4&gt;Int32&lt;/g4&gt; without requiring a redundant type restriction.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T143608Z" creationid="makenowjust" creationdate="20200427T143514Z">
        <seg>上記の &lt;g1&gt;if&lt;/g1&gt;  (正確には参考演算子ですが &lt;g2&gt;if&lt;/g2&gt; と同様です) は整数リテラルを返すので、&lt;g3&gt;@age&lt;/g3&gt; は正しく &lt;g4&gt;Int32&lt;/g4&gt; と推論され、型制約は必要ありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before first receive
Before first send
1
Before second receive
Before second send
2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081804Z" creationid="makenowjust" creationdate="20200518T081804Z">
        <seg>Before first receive
Before first send
1
Before second receive
Before second send
2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before receive
Before send
After receive</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081757Z" creationid="makenowjust" creationdate="20200518T081757Z">
        <seg>Before receive
Before send
After receive</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before send 1
Before send 2
Before send 3
1
2
After send
3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081836Z" creationid="makenowjust" creationdate="20200518T081836Z">
        <seg>Before send 1
Before send 2
Before send 3
1
2
After send
3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before talking about control expressions we need to know what *truthy* and *falsey* values are.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023951Z" creationid="hirofumiwakasugi" creationdate="20151009T023945Z">
        <seg>制御式について説明する前に、まずは「真」と「偽」の値というものについて知る必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before talking about control expressions we need to know what &lt;g1&gt;truthy&lt;/g1&gt; and &lt;g2&gt;falsey&lt;/g2&gt; values are.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T051206Z" creationid="makenowjust" creationdate="20200424T051204Z">
        <seg>制御式について説明する前に、まずは&lt;g1&gt;真となる値&lt;/g1&gt;と&lt;g2&gt;偽となる値&lt;/g2&gt;について知る必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before yield
Before send
Before receive
1
After receive
After send
After yield</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081828Z" creationid="makenowjust" creationdate="20200518T081828Z">
        <seg>Before yield
Before send
Before receive
1
After receive
After send
After yield</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Begin by using &lt;g1&gt;the Crystal compiler&lt;/g1&gt;'s &lt;g2&gt;init lib&lt;/g2&gt; command to create a Crystal library with the standard directory structure.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T154723Z" creationid="makenowjust" creationdate="20200527T154723Z">
        <seg>&lt;g1&gt;Crystal のコンパイラ&lt;/g1&gt; の &lt;g2&gt;init lib&lt;/g2&gt; コマンドを使って、標準的なディレクトリ構造を持った Cryatal ライブラリのディレクトリを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ben Miller</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084039Z" creationid="makenowjust" creationdate="20200516T084039Z">
        <seg>Ben Miller</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Besides double-quotes strings, Crystal also supports string literals indicated by a percent sign (&lt;g1&gt;%&lt;/g1&gt;) and a pair of delimiters.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T193048Z" creationid="makenowjust" creationdate="20200419T193048Z">
        <seg>ダブルクォートによる文字列リテラルの他に、Crystalはパーセント記号 (&lt;g1&gt;%&lt;/g1&gt;) と区切り文字の組による文字列リテラルもサポートしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Besides slash-delimited literals, regular expressions may also be expressed as a percent literal indicated by &lt;g1&gt;%r&lt;/g1&gt; and a pair of delimiters.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T042321Z" creationid="makenowjust" creationdate="20200421T042321Z">
        <seg>スラッシュ区切りのリテラルの他に、正規表現リテラルは&lt;g1&gt;%r&lt;/g1&gt;と区切り文字の組からなるパーセントリテラルを使って表現することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Besides the single string literal, there is also a percent literal to create an &lt;g1&gt;Array&lt;/g1&gt; of strings.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171748Z" creationid="makenowjust" creationdate="20200419T193808Z">
        <seg>1つの文字列を表すリテラルの他に、文字列の&lt;g1&gt;配列&lt;/g1&gt;を表わすパーセントリテラルがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Besides the single string literal, there is also a percent literal to create an &lt;g1&gt;Array&lt;/g1&gt;https://crystal-lang.org/api/Array.html&lt;e4/&gt; of strings.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T094836Z" creationid="makenowjust" creationdate="20200518T094836Z">
        <seg>1つの文字列を表すリテラルの他に、文字列の&lt;g1&gt;配列&lt;/g1&gt;https://crystal-lang.org/api/Array.html&lt;e4/&gt;を表すパーセントリテラルがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Besides the single string literal, there is also a percent literal to create an &lt;g1&gt;Array&lt;/g1&gt;https://crystal-lang.org/api/latest/Array.html&lt;e4/&gt; of strings.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T081301Z" creationid="makenowjust" creationdate="20210324T081301Z">
        <seg>1つの文字列を表すリテラルの他に、文字列の&lt;g1&gt;配列&lt;/g1&gt;https://crystal-lang.org/api/latest/Array.html&lt;e4/&gt;を表すパーセントリテラルがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Besides the single symbol literal, there is also a percent literal to create an &lt;g1&gt;Array&lt;/g1&gt; of symbols.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T172446Z" creationid="makenowjust" creationdate="20200420T171732Z">
        <seg>1つのシンボルを表すリテラルの他に、シンボルの&lt;g1&gt;配列&lt;/g1&gt;を表すパーセントリテラルがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Besides the single symbol literal, there is also a percent literal to create an &lt;g1&gt;Array&lt;/g1&gt;https://crystal-lang.org/api/Array.html&lt;e8/&gt; of symbols.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T094906Z" creationid="makenowjust" creationdate="20200518T094906Z">
        <seg>1つのシンボルを表すリテラルの他に、シンボルの&lt;g1&gt;配列&lt;/g1&gt;https://crystal-lang.org/api/Array.html&lt;e8/&gt;を表すパーセントリテラルがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Beyond the improvements of existing features, probably one long awaited feature concerns improvements in Crystal’s debugging capabilities.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T133652Z" creationid="makenowjust" creationdate="20200610T132908Z">
        <seg>既存の機能の改善の背景には、Crystal のデバッグ機能の改善を待ち望まれていたことがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Big programs are better maintained and understood when split across different files.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T143757Z" creationid="hirofumiwakasugi" creationdate="20150905T143721Z">
        <seg>大きなプログラムの場合は、複数のファイルに分けることでメンテナンスが楽になり、また理解もしやすくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Binary</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090414Z" creationid="makenowjust" creationdate="20200502T090414Z">
        <seg>ビット演算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Binary AND</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084736Z" creationid="makenowjust" creationdate="20200502T084736Z">
        <seg>ビット AND</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Binary OR/XOR</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084743Z" creationid="makenowjust" creationdate="20200502T084743Z">
        <seg>ビット OR/XOR</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Binary numbers start with &lt;g1&gt;0b&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182610Z" creationid="makenowjust" creationdate="20200419T182610Z">
        <seg>先頭に&lt;g1&gt;0b&lt;/g1&gt;をつけると2進数になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Binary numbers start with `0b`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052521Z" creationid="hirofumiwakasugi" creationdate="20150901T052456Z">
        <seg>先頭に `0b` をつけると2進数になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Binary operators</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T083710Z" creationid="makenowjust" creationdate="20200502T083710Z">
        <seg>2項演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Binary operators have two operands.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T083738Z" creationid="makenowjust" creationdate="20200502T083738Z">
        <seg>2項の演算子は2つのオペランドを取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Block forwarding</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075302Z" creationid="makenowjust" creationdate="20200506T075302Z">
        <seg>ブロックのフォワーディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Blocks and Procs</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T183827Z" creationid="makenowjust" creationdate="20200505T183827Z">
        <seg>ブロックと Proc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Blue</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011445Z" creationid="hirofumiwakasugi" creationdate="20150916T011445Z">
        <seg>Blue</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Blue
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024637Z" creationid="hirofumiwakasugi" creationdate="20150914T024637Z">
        <seg>Blue
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Blue
end

Color::Red.value # :: UInt8</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182054Z" creationid="makenowjust" creationdate="20200505T182054Z">
        <seg>Blue
end

Color::Red.value # :: UInt8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Blue
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024115Z" creationid="hirofumiwakasugi" creationdate="20150914T024115Z">
        <seg>Blue
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Blue   = 5  # overwritten to 5</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024419Z" creationid="hirofumiwakasugi" creationdate="20150914T024419Z">
        <seg>Blue   = 5  # 5に上書きされる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Blue   = 5 # overwritten to 5</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T181854Z" creationid="makenowjust" creationdate="20200505T181854Z">
        <seg>Blue   = 5 # 5に上書きする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bo Jeanes</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084021Z" creationid="makenowjust" creationdate="20200516T084021Z">
        <seg>Bo Jeanes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bool</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T001218Z" creationid="makenowjust" creationdate="20200414T001052Z">
        <seg>真偽値 (Bool)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bool |</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071433Z" creationid="hirofumiwakasugi" creationdate="20150919T071433Z">
        <seg>Bool |</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both &lt;g1&gt;include&lt;/g1&gt; and &lt;g2&gt;extend&lt;/g2&gt; make constants defined in the module available to the including/extending type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141715Z" creationid="makenowjust" creationdate="20200504T141715Z">
        <seg>また、&lt;g1&gt;include&lt;/g1&gt; と &lt;g2&gt;extend&lt;/g2&gt; のどちらを使った場合も、モジュールで定義された定数を利用できるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both &lt;g1&gt;method_missing&lt;/g1&gt; and &lt;g2&gt;method_added&lt;/g2&gt; only apply to calls or methods in the same class that the macro is defined in, or only in the top level if the macro is defined outside of a class.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T225500Z" creationid="makenowjust" creationdate="20200509T224647Z">
        <seg>&lt;g1&gt;method_missing&lt;/g1&gt; と &lt;g2&gt;method_added&lt;/g2&gt; はマクロの定義されたクラスと同じクラスに対する呼び出し、もしくは定義に対して適用されます。あるいは、このマクロがクラスの外側で定義されていた場合は、トップレベルのものに適用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both `include` and `extend` make constants defined in the module available to the including/extending type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142230Z" creationid="hirofumiwakasugi" creationdate="20150911T141939Z">
        <seg>また、`include` と `extend` のどちらを使った場合も、モジュールに定義されている定数を利用できるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both of them can be used at the top level to avoid writing a namespace over and over (although the chances of name clashes increase):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142551Z" creationid="hirofumiwakasugi" creationdate="20150911T142441Z">
        <seg>トップレベルで `include`/`extend` することもできます。そうすると、何度も名前空間を書かなくても済むようになります (もちろん、その分だけ名前が衝突する可能性は高くなりますが) 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bruno Antunes</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084022Z" creationid="makenowjust" creationdate="20200516T084022Z">
        <seg>Bruno Antunes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Buffered channels</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103742Z" creationid="akiji" creationdate="20200429T143347Z">
        <seg>バッファ付きチャネル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Build into the &lt;g1&gt;site&lt;/g1&gt; directory (some functionality won't work if opening the files locally):</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T055752Z" creationid="makenowjust" creationdate="20201213T055752Z">
        <seg>&lt;g1&gt;site&lt;/g1&gt; ディレクトリにビルド (いくつかの機能はファイルをローカルで開いていると動作しません):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Building and Serving Locally</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165015Z" creationid="makenowjust" creationdate="20200413T165015Z">
        <seg>ローカルでのビルドとサーバーの起動方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Building in release mode should be used for production-ready executables and when performing benchmarks.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T152249Z" creationid="makenowjust" creationdate="20200419T152249Z">
        <seg>リリースモードでのビルドはプロダクションでの利用やベンチマークの測定の際に用いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Builds the specified targets in &lt;g1&gt;bin&lt;/g1&gt; path.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T095209Z" creationid="makenowjust" creationdate="20200419T180113Z">
        <seg>&lt;g1&gt;bin&lt;/g1&gt; にある指定したターゲットをビルドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Built in commands allow dependencies to be easily specified through a YAML file and fetched from their respective repositories.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222219Z" creationid="makenowjust" creationdate="20200413T221853Z">
        <seg>shards コマンドではYAMLファイルで依存関係を指定できて、さらにそれらを取得してこれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But Crystal can be used with the &lt;g2&gt;Windows Subsystem for Linux&lt;/g2&gt;https://msdn.microsoft.com/en-us/commandline/wsl/about&lt;e3/&gt;, a compatibility-layer for Linux executables running natively on Windows 10.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112712Z" creationid="makenowjust" creationdate="20200518T112712Z">
        <seg>ですが、Windows 10上で Linux のバイナリをネイティブに動作させる互換レイヤである&lt;g2&gt;Windows Subsystem for Linux&lt;/g2&gt;https://msdn.microsoft.com/en-us/commandline/wsl/about&lt;e3/&gt;の上では Crystal は動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But Crystal is written in Crystal itself!</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060207Z" creationid="hirofumiwakasugi" creationdate="20150831T060153Z">
        <seg>実は、Crystal は Crystal 自身によって書かれています！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But Crystal is written in Crystal itself! So you first need to use one of the previous described methods to have a running compiler.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T083214Z" creationid="hirofumiwakasugi" creationdate="20150831T083214Z">
        <seg>実は、Crystal は Crystal 自身によって書かれています！したがって、まずはこれまでに紹介した方法のいずれかを使ってコンパイラをインストールする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But also it can be included in the program and its methods can be invoked without a namespace:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T150223Z" creationid="hirofumiwakasugi" creationdate="20150911T145128Z">
        <seg>それだけではなく、プログラムにインクルードしたとき、名前空間の指定なしでメソッドを実行することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But because 32-bit machines are starting to become obsolete, we'll bet on the future and focus more on 64-bit machines.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103224Z" creationid="akiji" creationdate="20200428T062748Z">
        <seg>しかし、32ビットマシンはもはや使用されなくなりつつありますので、我々は将来を見据えて64ビットマシンにより注力しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But check this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T064823Z" creationid="hirofumiwakasugi" creationdate="20150912T064823Z">
        <seg>では、次のコードを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But even if a splat method argument has a name, arguments that follow it must be passed as named arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160134Z" creationid="makenowjust" creationdate="20200501T160134Z">
        <seg>しかし、スプラット指定された引数が名前を持っていた場合でも、以降の引数は名前付き引数として渡さなければいけないことは変わりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But even if a splat parameter has a name, parameters that follow it must be passed as named arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T091948Z" creationid="makenowjust" creationdate="20210324T091948Z">
        <seg>しかし、スプラット展開指定された引数が名前を持っていた場合でも、以降の引数は名前付き引数として渡さなければいけないことは変わりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But it is no longer a public API.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T031453Z" creationid="makenowjust" creationdate="20200611T031453Z">
        <seg>しかし、このメソッドはもはや公開された API ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But once you abstract that and operate on a higher level, and assume (after mathematical proof or thorough testing) that the lower grounds are safe, you can be confident that your entire codebase is safe.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T013651Z" creationid="hirofumiwakasugi" creationdate="20151009T013605Z">
        <seg>しかし、それらを抽象化し、より高いレベルでの操作を行い、さらに、(数学的な証明やテストを通して) 低いレベルの地盤が安全なことを確認すれば、自信を持ってコードベース全体が安全であると言えるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But what happen if the user doesn’t enter any value?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182132Z" creationid="makenowjust" creationdate="20200413T182132Z">
        <seg>しかし、ここでユーザーが何も入力しなかったらどうなるのでしょう？　</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But what happens if the user doesn’t enter any value?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T085952Z" creationid="makenowjust" creationdate="20211107T085952Z">
        <seg>しかし、ユーザーが何も入力しなかった場合はどうなるでしょうか？　</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But you are free to do what you want.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T012756Z" creationid="hirofumiwakasugi" creationdate="20150916T012637Z">
        <seg>ただし、最終的には各自が自由に判断できることなので、必ずそうしなければならないというわけではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But, &lt;g1&gt;what happens when we pass an option that is not declared?&lt;/g1&gt; For example -n</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175533Z" creationid="makenowjust" creationdate="20200413T175533Z">
        <seg>ですが、&lt;g1&gt;渡されたオプションを宣言していなかった場合、どうなるのでしょうか？&lt;/g1&gt;　例えば -n を渡してみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But, if we pass the option &lt;g1&gt;-t&lt;/g1&gt; / &lt;g2&gt;--twist&lt;/g2&gt; it will display the names in uppercase:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081150Z" creationid="makenowjust" creationdate="20200518T081150Z">
        <seg>しかし、&lt;g1&gt;-t&lt;/g1&gt; もしくは &lt;g2&gt;--twist&lt;/g2&gt; が渡されたときには、名前を大文字にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But, if we pass the option &lt;g2&gt;-t&lt;/g2&gt; / &lt;g3&gt;--twist&lt;/g3&gt; it will display the names in uppercase:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174745Z" creationid="makenowjust" creationdate="20200413T174738Z">
        <seg>しかし、&lt;g2&gt;-t&lt;/g2&gt;もしくは&lt;g3&gt;--twist&lt;/g3&gt;というオプションが与えられたときは、名前を大文字にすることにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But, in general, &lt;g3&gt;self&lt;/g3&gt; is the same as writing the type that will finally own that method, which, when modules are involved, becomes more useful.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T161119Z" creationid="makenowjust" creationdate="20200429T161119Z">
        <seg>しかし、&lt;g3&gt;self&lt;/g3&gt; と書くことは最終的にそのメソッドが呼び出される際の自身の型となるので、モジュールのメソッドなどの場合に便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But, in general, `self` is the same as writing the type that will finally own that method, which, when modules are involved, becomes more useful.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T024726Z" creationid="hirofumiwakasugi" creationdate="20150908T024107Z">
        <seg>しかし、`self` と書くことで自身の型を指定できることは、メソッドを定義したモジュールがインクルードされて、そのメソッドを持つのが最終的にインクルードした側の型になる場合により便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But, on the other hand, it makes sense: classes under the same hierarchy should behave in a similar way.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T034007Z" creationid="hirofumiwakasugi" creationdate="20150910T033731Z">
        <seg>しかし、それ以外にもこの仕様には意味があります。それは、同一階層下のクラスは同じように振る舞うべき、というものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default (i.e. no options given) the application will display the names of the Fab Four.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081129Z" creationid="makenowjust" creationdate="20200518T081124Z">
        <seg>デフォルトでは (オプションが与えられなかったときに) The Fab Four のメンバーを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default all classes in Crystal have at least one constructor called &lt;g2&gt;new&lt;/g2&gt;, but they may also define other constructors with different names.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T130801Z" creationid="makenowjust" creationdate="20200504T130801Z">
        <seg>デフォルトではCrystalのすべてのクラスは &lt;g2&gt;new&lt;/g2&gt; というコンストラクタを少なくとも1つは持ちます。しかし、異なる名前の異なるコンストラクタを定義することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default the require path is the location of the standard library that comes with the compiler, and the "lib" directory relative to the current working directory (given by &lt;g1&gt;pwd&lt;/g1&gt; in a Unix shell).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T084639Z" creationid="makenowjust" creationdate="20200427T084639Z">
        <seg>デフォルトの require パスは、コンパイラとあわせて提供される標準ライブラリと、カレントディレクトリ (UNIX シェルで言う &lt;g1&gt;pwd&lt;/g1&gt;) から相対的に指定される lib ディレクトリとなっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default the require path is the location of the standard library that comes with the compiler, and the "libs" directory relative to the current working directory (given by `pwd` in a unix shell).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T145524Z" creationid="hirofumiwakasugi" creationdate="20150905T144936Z">
        <seg>デフォルトの require パスは、コンパイラとあわせて提供される標準ライブラリと、カレントディレクトリ  (UNIX シェルで言う `pwd`) から相対的に指定される「libs」ディレクトリ となっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default this list starts with the superclass.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T140119Z" creationid="hirofumiwakasugi" creationdate="20150911T134003Z">
        <seg>最初の状態では、このリストはスーパークラスから始まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default this will create a &lt;g2&gt;docs&lt;/g2&gt; directory, with a &lt;g3&gt;docs/index.html&lt;/g3&gt; entry point.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213843Z" creationid="makenowjust" creationdate="20200412T211435Z">
        <seg>デフォルトでは&lt;g2&gt;docs&lt;/g2&gt;ディレクトリが生成され、&lt;g3&gt;docs/index.html&lt;/g3&gt;がエントリーポイントとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, all Crystal files in &lt;g1&gt;./src&lt;/g1&gt; will be appended (i.e. &lt;g2&gt;src/**/*.cr&lt;/g2&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T162251Z" creationid="makenowjust" creationdate="20200419T162243Z">
        <seg>デフォルトでは、&lt;g1&gt;./src&lt;/g1&gt; ディレクトリにあるすべてのファイルからドキュメント生成をします (つまり &lt;g2&gt;src/**/*.cr&lt;/g2&gt; が指定されたような挙動です)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, it prints information as a shell script.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163228Z" creationid="makenowjust" creationdate="20200419T163228Z">
        <seg>デフォルトではシェルスクリプトのように情報を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, the generated executables are not fully optimized.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150647Z" creationid="makenowjust" creationdate="20200419T150647Z">
        <seg>デフォルトでは、生成された実行可能ファイルは完全には最適化されていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By extension, all of the &lt;g2&gt;methods&lt;/g2&gt; on &lt;g3&gt;TupleLiteral&lt;/g3&gt; are available for use as well.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T111537Z" creationid="makenowjust" creationdate="20200510T111523Z">
        <seg>また、キー/値のときの延長で、&lt;g3&gt;TupleLiteral&lt;/g3&gt; の&lt;g2&gt;メソッド&lt;/g2&gt;を使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By extension, all of the &lt;g2&gt;methods&lt;/g2&gt;https://crystal-lang.org/api/Crystal/Macros/TupleLiteral.html&lt;e4/&gt; on &lt;g3&gt;TupleLiteral&lt;/g3&gt; are available for use as well.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T094344Z" creationid="makenowjust" creationdate="20200518T082611Z">
        <seg>また、キー/値のときの延長で、このメソッドは &lt;g3&gt;TupleLiteral&lt;/g3&gt; の&lt;g2&gt;メソッド&lt;/g2&gt;https://crystal-lang.org/api/Crystal/Macros/TupleLiteral.html&lt;e4/&gt;が使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By marking a method as &lt;g1&gt;abstract&lt;/g1&gt; the compiler will check that all subclasses implement this method, even if a program doesn't use them.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T112618Z" creationid="makenowjust" creationdate="20200504T112618Z">
        <seg>メソッドを &lt;g1&gt;abstract&lt;/g1&gt; と指定すると、仮に使われていなかったとしても、コンパイラはすべてのサブクラスでそのメソッドが実装されていることを検査します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bypass restrictions of intermediate packages that might be preventing me to use newer releases.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T113643Z" creationid="makenowjust" creationdate="20200809T113643Z">
        <seg>中間の依存関係が新しいバージョンの依存関係と衝突しているのを回避したいとき。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C (the default)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120752Z" creationid="makenowjust" creationdate="20200510T120235Z">
        <seg>C (デフォルト)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C bindings</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T030142Z" creationid="makenowjust" creationdate="20200511T030142Z">
        <seg>C バインディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C libraries, structs)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T140001Z" creationid="makenowjust" creationdate="20200504T140001Z">
        <seg>C ライブラリ、構造体)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C-bindings</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221410Z" creationid="makenowjust" creationdate="20200413T221410Z">
        <seg>C バインディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C.cos(1.5) # =&gt; 0.0707372</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T031042Z" creationid="makenowjust" creationdate="20200511T031042Z">
        <seg>C.cos(1.5) # =&gt; 0.0707372</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C.errno # =&gt; some value
C.errno = 0
C.errno # =&gt; 0</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T084059Z" creationid="makenowjust" creationdate="20200512T084059Z">
        <seg>C.errno # =&gt; some value
C.errno = 0
C.errno # =&gt; 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C.getch
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T040642Z" creationid="hirofumiwakasugi" creationdate="20151005T040642Z">
        <seg>C.getch
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C.srand(1_u32)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T040719Z" creationid="hirofumiwakasugi" creationdate="20151005T040719Z">
        <seg>C.srand(1_u32)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C.waitpid pid, out status_ptr, options
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043925Z" creationid="hirofumiwakasugi" creationdate="20151005T043925Z">
        <seg>C.waitpid pid, out status_ptr, options
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C.waitpid pid, pointerof(status_ptr), options
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043758Z" creationid="hirofumiwakasugi" creationdate="20151005T043758Z">
        <seg>C.waitpid pid, pointerof(status_ptr), options
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C.waitpid(pid, out status_ptr, options)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T082229Z" creationid="makenowjust" creationdate="20200512T082229Z">
        <seg>C.waitpid(pid, out status_ptr, options)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C.waitpid(pid, out status_ptr, options)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061447Z" creationid="hirofumiwakasugi" creationdate="20160204T061447Z">
        <seg>C.waitpid(pid, out status_ptr, options)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C.waitpid(pid, pointerof(status_ptr), options)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061441Z" creationid="hirofumiwakasugi" creationdate="20160204T061405Z">
        <seg>C.waitpid(pid, pointerof(status_ptr), options)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C/C++</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092317Z" creationid="makenowjust" creationdate="20201217T092317Z">
        <seg>C/C++</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>CURRENCIES = {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012155Z" creationid="hirofumiwakasugi" creationdate="20151010T012155Z">
        <seg>CURRENCIES = {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>CallConvention</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120217Z" creationid="makenowjust" creationdate="20200510T120217Z">
        <seg>CallConvention</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Callbacks</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T085439Z" creationid="makenowjust" creationdate="20200512T085439Z">
        <seg>コールバック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Can be written as this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153030Z" creationid="hirofumiwakasugi" creationdate="20160115T153030Z">
        <seg>上記は以下のように書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Can only be used as a default parameter value.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T092815Z" creationid="makenowjust" creationdate="20210324T092815Z">
        <seg>これはメソッドの引数のデフォルト値でのみ利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Can only be used as a default value to a method parameter.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T180706Z" creationid="makenowjust" creationdate="20200505T180706Z">
        <seg>これはメソッドの引数のデフォルト値でのみ利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Captured blocks and proc literals closure local variables and &lt;g1&gt;self&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T080507Z" creationid="makenowjust" creationdate="20200506T080507Z">
        <seg>捕捉されたブロックと Proc リテラルはローカル変数と &lt;g1&gt;self&lt;/g1&gt; をクロージャに格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Captured blocks and proc literals closure local variables and `self`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T053825Z" creationid="hirofumiwakasugi" creationdate="20150918T053614Z">
        <seg>捕捉されたブロックと proc リテラルはローカル変数と `self` を閉包 (クロージャ) します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Capturing blocks</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T193019Z" creationid="makenowjust" creationdate="20200505T193019Z">
        <seg>ブロックの捕捉</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Catch-all initialization</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T125104Z" creationid="makenowjust" creationdate="20200427T125104Z">
        <seg>キャッチオール初期化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Category</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084637Z" creationid="makenowjust" creationdate="20200502T084637Z">
        <seg>分類</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>CentOS</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071344Z" creationid="makenowjust" creationdate="20200518T071344Z">
        <seg>CentOS</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Chained assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174937Z" creationid="makenowjust" creationdate="20200422T174937Z">
        <seg>連続した代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Chained sequences of operator calls are restructured by the compiler in order
to implement &lt;g1&gt;operator precedence&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T081305Z" creationid="makenowjust" creationdate="20200502T081305Z">
        <seg>連続した演算子の呼び出しは&lt;g1&gt;演算子の優先順位&lt;/g1&gt;に応じてコンパイラによって適切に並べ替えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Change the expression so that it &lt;g1&gt;is&lt;/g1&gt; of the right type: &lt;g2&gt;Array(Foo)&lt;/g2&gt; (see example above).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T105717Z" creationid="makenowjust" creationdate="20200504T105717Z">
        <seg>&lt;g1&gt;式の型を&lt;/g1&gt;正しい型にしましょう。つまり &lt;g2&gt;Array(Foo)&lt;/g2&gt; のように (具体的な方法は以下で)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Change their colors, dimensions or add your own text.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T085652Z" creationid="makenowjust" creationdate="20200516T085649Z">
        <seg>色や縦横比の変更、独自のテキストの追加</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Channels</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T102700Z" creationid="akiji" creationdate="20200428T055134Z">
        <seg>チャネル（Channel）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Channels, to communicate data between fibers.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103702Z" creationid="akiji" creationdate="20200428T055724Z">
        <seg>ファイバ間でデータをやりとりする「チャネル」</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Char</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T190417Z" creationid="makenowjust" creationdate="20200419T190417Z">
        <seg>文字 (Char)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Check out our &lt;a1&gt;Team page&lt;/a1&gt; to meet the people.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20220525T093139Z" creationid="makenowjust" creationdate="20220525T085906Z">
        <seg>人々と会うために、私たちの&lt;a1&gt;チームのページ&lt;/a1&gt;を確認してください。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checking the condition at the end of a loop</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095147Z" creationid="makenowjust" creationdate="20200424T095147Z">
        <seg>条件によってループを抜ける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Child.counter #=&gt; nil
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041221Z" creationid="hirofumiwakasugi" creationdate="20150910T041221Z">
        <seg>Child.counter #=&gt; nil
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Child.new.child #=&gt; 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014446Z" creationid="hirofumiwakasugi" creationdate="20151002T014446Z">
        <seg>Child.new.child #=&gt; 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Choose the appropriate driver from the list above and add it as any shard to your application's &lt;g1&gt;shard.yml&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200706T000906Z" creationid="daiki" creationdate="20200705T191123Z">
        <seg>上のリストから適切なドライバを選択し、アプリケーションの &lt;g1&gt;shard.yml&lt;/g1&gt; に任意の shard を追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class methods</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T130016Z" creationid="makenowjust" creationdate="20200504T130016Z">
        <seg>クラスメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class methods are defined by prefixing the method name with the type name and a period.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T130117Z" creationid="makenowjust" creationdate="20200504T130117Z">
        <seg>クラスメソッドは型名とドットのあとに名前を続ける形式でも定義できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class methods are methods associated to a class or module instead of a specific instance.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T130043Z" creationid="makenowjust" creationdate="20200504T130043Z">
        <seg>クラスメソッドは、特定のインスタンスではなくクラスやモジュール自身に紐付いたメソッドです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class methods can also be defined by &lt;g1&gt;extending a &lt;g2&gt;Module&lt;/g2&gt;&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T131031Z" creationid="makenowjust" creationdate="20200504T130247Z">
        <seg>また、クラスメソッドは&lt;g1&gt;&lt;g2&gt;Module&lt;/g2&gt;を拡張 (extend)&lt;/g1&gt;することでも定義できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class names, and every type name, begin with a capital letter in Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T022107Z" creationid="hirofumiwakasugi" creationdate="20150904T022107Z">
        <seg>Crystal では、クラス名と、そして他のすべての型の名前は先頭が大文字となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class names, and indeed all type names, begin with a capital letter in Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T102226Z" creationid="makenowjust" creationdate="20200427T102032Z">
        <seg>Crystal ではクラス名を含め型の名前は大文字ではじめる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class variables</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T134345Z" creationid="makenowjust" creationdate="20200504T134345Z">
        <seg>クラス変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class variables are allowed, but instance variables are not.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182843Z" creationid="makenowjust" creationdate="20200505T182843Z">
        <seg>クラス変数を使うこともできますが、インスタンス変数を使うことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class variables are allowed, but instance variables not.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011606Z" creationid="hirofumiwakasugi" creationdate="20150916T011534Z">
        <seg>また、クラス変数は定義可能ですが、インスタンス変数を定義することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class variables are always associated to a single type and are not inherited:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041151Z" creationid="hirofumiwakasugi" creationdate="20150910T041151Z">
        <seg>クラス変数は常に単一の型に結びついており、継承されることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class variables are associated to classes instead of instances.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040654Z" creationid="hirofumiwakasugi" creationdate="20150910T040510Z">
        <seg>クラス変数は、インスタンスにではなくクラス自身に結びついているもので、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class variables are inherited by subclasses with this meaning: their type is the same, but each class has a different runtime value.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T134543Z" creationid="makenowjust" creationdate="20200504T134543Z">
        <seg>サブクラスでは、クラス変数も継承されます。このときクラス変数の型は同じですが、実行時の値は各サブクラスで別のものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class variables can also be associated to modules and structs.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041239Z" creationid="hirofumiwakasugi" creationdate="20150910T041239Z">
        <seg>クラス変数をモジュールや構造体に設定することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class variables can be read and written from class methods or instance methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040855Z" creationid="hirofumiwakasugi" creationdate="20150910T040852Z">
        <seg>クラス変数は、クラスメソッドかインスタンスメソッドから読み書きすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes and methods</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T101925Z" creationid="makenowjust" creationdate="20200427T101925Z">
        <seg>クラスとメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes as restrictions</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T161607Z" creationid="makenowjust" creationdate="20200429T161607Z">
        <seg>クラスによる制約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes, structs, enums, and modules</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T104624Z" creationid="makenowjust" creationdate="20200510T104624Z">
        <seg>クラス、構造体、列挙型、そしてモジュール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Clone the repository: &lt;g1&gt;git clone https://github.com/crystal-lang/crystal&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T065305Z" creationid="makenowjust" creationdate="20200518T065305Z">
        <seg>リポジトリをクローンしてください。 &lt;g1&gt;git clone https://github.com/crystal-lang/crystal&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Closures</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T080426Z" creationid="makenowjust" creationdate="20200506T080426Z">
        <seg>クロージャ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Code blocks that have Crystal code can be surrounded with triple backticks or indented with four spaces.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215011Z" creationid="makenowjust" creationdate="20200412T211959Z">
        <seg>Crystal のコードブロックは3つのバックティック (バッククォート) で囲むか、スペース4つでインデントします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Code involving C bindings</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T093458Z" creationid="makenowjust" creationdate="20200512T093458Z">
        <seg>C バインディングを呼び出すコード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Code involving raw pointers: the &lt;g1&gt;Pointer&lt;/g1&gt; type and &lt;g2&gt;pointerof&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T093442Z" creationid="makenowjust" creationdate="20200512T093442Z">
        <seg>名前のポインタを使うコード: &lt;g1&gt;Pointer&lt;/g1&gt; 型と &lt;g2&gt;pointerof&lt;/g2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Code involving raw pointers: the &lt;g1&gt;Pointer&lt;/g1&gt;http://crystal-lang.org/api/Pointer.html&lt;e3/&gt; type and &lt;g2&gt;pointerof&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T092631Z" creationid="makenowjust" creationdate="20200518T092631Z">
        <seg>生のポインタを使うコード: &lt;g1&gt;Pointer&lt;/g1&gt;http://crystal-lang.org/api/Pointer.html&lt;e3/&gt; 型と &lt;g2&gt;pointerof&lt;/g2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Code involving raw pointers: the &lt;g1&gt;Pointer&lt;/g1&gt;https://crystal-lang.org/api/latest/Pointer.html&lt;e3/&gt; type and &lt;g2&gt;pointerof&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T073931Z" creationid="makenowjust" creationdate="20210324T073931Z">
        <seg>生のポインタを使うコード: &lt;g1&gt;Pointer&lt;/g1&gt;https://crystal-lang.org/api/latest/Pointer.html&lt;e3/&gt; 型と &lt;g2&gt;pointerof&lt;/g2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Coding Style</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T202830Z" creationid="makenowjust" creationdate="20200412T202830Z">
        <seg>コーディングスタイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cold</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120236Z" creationid="makenowjust" creationdate="20200510T120236Z">
        <seg>Cold</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Color</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084858Z" creationid="makenowjust" creationdate="20200516T084858Z">
        <seg>色</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Color::Green.value # =&gt; 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182532Z" creationid="makenowjust" creationdate="20200505T182532Z">
        <seg>Color::Green.value # =&gt; 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Color::Red # :: Color</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T181924Z" creationid="makenowjust" creationdate="20200505T181924Z">
        <seg>Color::Red # :: Color</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Color::Red.red?  #=&gt; true
Color::Blue.red? #=&gt; false
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011446Z" creationid="hirofumiwakasugi" creationdate="20150916T011446Z">
        <seg>Color::Red.red?  #=&gt; true
Color::Blue.red? #=&gt; false
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Color::Red.value #:: UInt8
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024638Z" creationid="hirofumiwakasugi" creationdate="20150914T024638Z">
        <seg>Color::Red.value #:: UInt8
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Combined assignments</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T094521Z" creationid="makenowjust" creationdate="20200502T094521Z">
        <seg>複合代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Command Line Interface Application</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165626Z" creationid="makenowjust" creationdate="20200413T163121Z">
        <seg>CLI アプリケーション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Command literal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172340Z" creationid="makenowjust" creationdate="20200422T172340Z">
        <seg>コマンドリテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Command:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072215Z" creationid="hirofumiwakasugi" creationdate="20150901T072215Z">
        <seg>Command:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Commands will fail if dependencies in &lt;g2&gt;shard.yml&lt;/g2&gt; and &lt;g3&gt;shard.lock&lt;/g3&gt; are out of sync (used by &lt;g4&gt;install&lt;/g4&gt;, &lt;g5&gt;update&lt;/g5&gt;, &lt;g6&gt;check&lt;/g6&gt; and &lt;g7&gt;list&lt;/g7&gt; command)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T095259Z" creationid="makenowjust" creationdate="20200419T175918Z">
        <seg>&lt;g2&gt;shard.yml&lt;/g2&gt; と &lt;g3&gt;shard.lock&lt;/g3&gt; の依存関係の同期が取れていない場合にコマンドは失敗します (&lt;g4&gt;install&lt;/g4&gt;、&lt;g5&gt;update&lt;/g5&gt;、&lt;g6&gt;check&lt;/g6&gt; および &lt;g7&gt;list&lt;/g7&gt; の場合)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comments</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000146Z" creationid="makenowjust" creationdate="20200414T000146Z">
        <seg>コメント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comments may be on their own line or follow
after a Crystal expression (trailing comment).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T092937Z" creationid="makenowjust" creationdate="20210324T092937Z">
        <seg>コメントは Crystal の式のあとに続くようなこともあります (trailing comment)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comments start with the &lt;g1&gt;#&lt;/g1&gt; character.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000217Z" creationid="makenowjust" creationdate="20200414T000217Z">
        <seg>コメントは&lt;g1&gt;#&lt;/g1&gt;からはじまります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comments start with the sharp (`#`) character.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T050558Z" creationid="hirofumiwakasugi" creationdate="20150901T050506Z">
        <seg>「`#`」の文字があると、その行はそれ以降がコメントになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Communicating data</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T063712Z" creationid="akiji" creationdate="20200428T063712Z">
        <seg>データのやり取り</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Community channels</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222856Z" creationid="makenowjust" creationdate="20200413T222856Z">
        <seg>コミュニティチャンネル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparing against a type will perform an is_a?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094344Z" creationid="makenowjust" creationdate="20200424T093814Z">
        <seg>型に対しては is_a? で比較されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparison</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084750Z" creationid="makenowjust" creationdate="20200502T084750Z">
        <seg>比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compile and &lt;g1&gt;run the application&lt;/g1&gt;, all in one command.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175709Z" creationid="makenowjust" creationdate="20200413T174308Z">
        <seg>コンパイルと&lt;g1&gt;アプリケーションの実行&lt;/g1&gt;を、1度のコマンドでまとめて行う。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compile to efficient native code.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T221553Z" creationid="makenowjust" creationdate="20200412T221553Z">
        <seg>効率的なネイティブコードにコンパイルする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compile-time flags</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T022812Z" creationid="makenowjust" creationdate="20200511T022812Z">
        <seg>コンパイル時のフラグ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compiler</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T125940Z" creationid="makenowjust" creationdate="20200610T125940Z">
        <seg>コンパイラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compiler commands</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153856Z" creationid="makenowjust" creationdate="20200419T153856Z">
        <seg>コマンドの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compiling and running at once</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150204Z" creationid="makenowjust" creationdate="20200419T150204Z">
        <seg>コンパイルと同時に実行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compiling without release mode is much faster and the resulting binaries still offer pretty good performance.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150814Z" creationid="makenowjust" creationdate="20200419T150814Z">
        <seg>リリースモードでないコンパイルは十分に早く、また生成されるバイナリもそれなりのパフォーマンスではあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Components of a method call</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T144910Z" creationid="makenowjust" creationdate="20200430T144910Z">
        <seg>メソッド呼び出しのコンポーネント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Components of a method definition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T143838Z" creationid="makenowjust" creationdate="20200430T143838Z">
        <seg>メソッド定義のコンポーネント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Concurrency</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T053245Z" creationid="akiji" creationdate="20200428T053245Z">
        <seg>並行処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Concurrency Model</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221205Z" creationid="makenowjust" creationdate="20200413T221100Z">
        <seg>並列モデル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Concurrency vs. Parallelism</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T053306Z" creationid="akiji" creationdate="20200428T053306Z">
        <seg>並行処理（Concurrency） vs. 並列処理（Parallelism）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conditional</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084808Z" creationid="makenowjust" creationdate="20200502T084808Z">
        <seg>条件分岐</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conditionals</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215003Z" creationid="makenowjust" creationdate="20200509T215003Z">
        <seg>条件分岐</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Configuration</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111551Z" creationid="makenowjust" creationdate="20200518T111551Z">
        <seg>設定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Consider a Box type:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T142635Z" creationid="makenowjust" creationdate="20200504T142635Z">
        <seg>Box 型を考えてみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Consider a class definition like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T125827Z" creationid="makenowjust" creationdate="20200427T125827Z">
        <seg>このようなクラスの定義を考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Consider the &lt;g1&gt;waitpid&lt;/g1&gt; function:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T081901Z" creationid="makenowjust" creationdate="20200512T081845Z">
        <seg>&lt;g1&gt;waitpid&lt;/g1&gt; 関数について考えてみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Consider the &lt;g1&gt;waitpid&lt;/g1&gt;http://www.gnu.org/software/libc/manual/html_node/Process-Completion.html&lt;e2/&gt; function:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T083540Z" creationid="makenowjust" creationdate="20200518T083540Z">
        <seg>&lt;g1&gt;waitpid&lt;/g1&gt;http://www.gnu.org/software/libc/manual/html_node/Process-Completion.html&lt;e2/&gt; 関数を考えてみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Consider the [waitpid](http://www.gnu.org/software/libc/manual/html_node/Process-Completion.html) function:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043331Z" creationid="hirofumiwakasugi" creationdate="20151005T043331Z">
        <seg>[waitpid](http://www.gnu.org/software/libc/manual/html_node/Process-Completion.html) 関数について考えてみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Consider the following program:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224922Z" creationid="makenowjust" creationdate="20200509T224922Z">
        <seg>次のプログラムを考えてみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Consider this program:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T131525Z" creationid="akiji" creationdate="20200430T131525Z">
        <seg>以下のプログラムについて考えてみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constants</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T180243Z" creationid="makenowjust" creationdate="20200505T180243Z">
        <seg>定数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constants can be declared at the top level or inside other types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055233Z" creationid="hirofumiwakasugi" creationdate="20150913T055233Z">
        <seg>定数はトップレベル、もしくはある型の内部で宣言することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constants will also be followed, as it's pretty simple for the compiler (and a human) to do so.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T143821Z" creationid="makenowjust" creationdate="20200427T143821Z">
        <seg>これはコンパイラにとって (そして人間からしても) 容易な場合、定数を使った場合も上手く動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructors</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T130643Z" creationid="makenowjust" creationdate="20200504T130643Z">
        <seg>コンストラクタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructors are normal class methods which &lt;g1&gt;create a new instance of the class&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T130705Z" creationid="makenowjust" creationdate="20200504T130705Z">
        <seg>コンストラクタは&lt;g1&gt;クラスのインスタンスを作成する&lt;/g1&gt;通常のクラスメソッドです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Contribute</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T152743Z" creationid="makenowjust" creationdate="20210726T152743Z">
        <seg>貢献方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Contributing to the Language Reference</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164446Z" creationid="makenowjust" creationdate="20200412T221740Z">
        <seg>このリファレンスへの貢献方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control expressions</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T051111Z" creationid="makenowjust" creationdate="20200424T051111Z">
        <seg>制御式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conventions</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T220450Z" creationid="makenowjust" creationdate="20200412T220445Z">
        <seg>規約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conversion between pointer types and Reference types is also possible:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T020102Z" creationid="hirofumiwakasugi" creationdate="20150930T020010Z">
        <seg>ポインタ型と Reference 型を相互に変換することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converting between pointer types</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T115431Z" creationid="makenowjust" creationdate="20200512T115431Z">
        <seg>ポインタ型同士の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converting between pointer types and other types</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T115454Z" creationid="makenowjust" creationdate="20200512T115454Z">
        <seg>ポインタ型と他の型の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Count</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092052Z" creationid="makenowjust" creationdate="20201217T092052Z">
        <seg>数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Counter.increment # Error: undefined method '+' for Nil
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041103Z" creationid="hirofumiwakasugi" creationdate="20150910T041103Z">
        <seg>Counter.increment # Error: undefined method '+' for Nil
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Counter.instances #=&gt; 0
Counter.new
Counter.new
Counter.new
Counter.instances #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040812Z" creationid="hirofumiwakasugi" creationdate="20150910T040812Z">
        <seg>Counter.instances #=&gt; 0
Counter.new
Counter.new
Counter.new
Counter.instances #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Covariance and Contravariance</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T104008Z" creationid="makenowjust" creationdate="20200504T104008Z">
        <seg>共変性と反変性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a Crystal project</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153327Z" creationid="makenowjust" creationdate="20200419T153327Z">
        <seg>Crystal のプロジェクトの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a formatter from a block or proc is still an option, but check in some simplified ways to define a formatter from a string directly.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T030901Z" creationid="makenowjust" creationdate="20200610T171858Z">
        <seg>ブロックや Proc からフォーマッタを作る方法はまだ利用できますが、文字列から直接フォーマッタを定義するシンプルな方法を確認してみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a statically-linked executable</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T152639Z" creationid="makenowjust" creationdate="20200419T152542Z">
        <seg>静的リンクした実行可能ファイルの生成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating an executable</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150442Z" creationid="makenowjust" creationdate="20200419T150442Z">
        <seg>実行可能ファイルの生成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating an instance of a &lt;g2&gt;struct&lt;/g2&gt; uses stack memory and doesn't incur a performance penalty.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T090739Z" creationid="akiji" creationdate="20200430T084449Z">
        <seg>&lt;g2&gt;構造体&lt;/g2&gt;のインスタンスを使用する場合はスタックメモリ が使用されるので、パフォーマンス上のペナルティ発生しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating the Project</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T154437Z" creationid="makenowjust" creationdate="20200527T154437Z">
        <seg>プロジェクトの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cross-compilation</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T023549Z" creationid="makenowjust" creationdate="20200511T023549Z">
        <seg>クロスコンパイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cross-compiling can be done for other executables, but its main target is the compiler.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T050719Z" creationid="hirofumiwakasugi" creationdate="20150909T050719Z">
        <seg>クロスコンパイルは他の実行ファイルに対しても利用することが可能ですが、主な目的はコンパイラの生成です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092318Z" creationid="makenowjust" creationdate="20201217T092318Z">
        <seg>Crystal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal 0.35.0 released!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T121203Z" creationid="makenowjust" creationdate="20200610T120835Z">
        <seg>Crystal 0.35.0がリリースされました！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal 0.35.1 released!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200621T072936Z" creationid="makenowjust" creationdate="20200621T072936Z">
        <seg>Crystal 0.35.1がリリースされました！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal Book</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T150847Z" creationid="makenowjust" creationdate="20210726T150847Z">
        <seg>Crystal Book</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal Programming Language</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T220949Z" creationid="makenowjust" creationdate="20200412T220949Z">
        <seg>プログラミング言語 Crystal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal allows declaring uninitialized variables:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T115035Z" creationid="hirofumiwakasugi" creationdate="20150906T115035Z">
        <seg>Crystal では、初期化せず変数を宣言することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal allows you to bind to existing C libraries without writing a single line in C.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T032038Z" creationid="hirofumiwakasugi" creationdate="20151003T141857Z">
        <seg>Crystal では、既存の C ライブラリに対して、C を1行も書かずにバインディングすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal can generate documentation from comments using a subset of &lt;g1&gt;Markdown&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214859Z" creationid="makenowjust" creationdate="20200412T210253Z">
        <seg>Crystal は、&lt;g1&gt;Markdown&lt;/g1&gt;のサブセットのコメントからドキュメントを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal can generate documentation from comments using a subset of &lt;g1&gt;Markdown&lt;/g1&gt;https://daringfireball.net/projects/markdown/&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081225Z" creationid="makenowjust" creationdate="20200518T081225Z">
        <seg>Crystal のドキュメンテーションコメントは &lt;g1&gt;Markdown&lt;/g1&gt;https://daringfireball.net/projects/markdown/&lt;e2/&gt; のサブセットになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal documentation comments use a subset of [Markdown](https://daringfireball.net/projects/markdown/).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T033327Z" creationid="hirofumiwakasugi" creationdate="20151010T012259Z">
        <seg>Crystal のドキュメンテーションコメントは [Markdown](https://daringfireball.net/projects/markdown/) のサブセットになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal files end with the `.cr` extension.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072004Z" creationid="hirofumiwakasugi" creationdate="20150901T072004Z">
        <seg>Crystal のファイルには `.cr` という拡張子がつきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal has &lt;g1&gt;a built-in documentation generator&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T160132Z" creationid="makenowjust" creationdate="20200527T160132Z">
        <seg>Crystal は&lt;g1&gt;組み込みのドキュメントジェネレータ&lt;/g1&gt;を持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal has &lt;g1&gt;a built-in testing library&lt;/g1&gt;https://crystal-lang.org/api/Spec.html&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T160001Z" creationid="makenowjust" creationdate="20200527T160001Z">
        <seg>Crystal は&lt;g1&gt;ビルトインのテスト用ライブラリ&lt;/g1&gt;https://crystal-lang.org/api/Spec.html&lt;e2/&gt;を持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal has &lt;g1&gt;a built-in testing library&lt;/g1&gt;https://crystal-lang.org/api/latest/Spec.html&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100042Z" creationid="makenowjust" creationdate="20210324T100042Z">
        <seg>Crystal は&lt;g1&gt;ビルトインのテストライブラリ&lt;/g1&gt;https://crystal-lang.org/api/latest/Spec.html&lt;e2/&gt;を持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal has Channels inspired by &lt;g1&gt;CSP&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T102704Z" creationid="akiji" creationdate="20200428T055203Z">
        <seg>Crystalは&lt;g1&gt;CSP&lt;/g1&gt;を参考にしたチャネルを有しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal has Channels inspired by &lt;g1&gt;CSP&lt;/g1&gt;https://en.wikipedia.org/wiki/Communicating_sequential_processes&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081443Z" creationid="makenowjust" creationdate="20200518T081443Z">
        <seg>Crystal は &lt;g1&gt;CSP&lt;/g1&gt;https://en.wikipedia.org/wiki/Communicating_sequential_processes&lt;e2/&gt; を参考にしたチャネルを有しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal has a dedicated syntax to easily call native libraries, eliminating the need to reimplement low-level tasks.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222234Z" creationid="makenowjust" creationdate="20200413T221525Z">
        <seg>Crystal ではネイティブのライブラリを呼ぶため構文を持っており、低レベルのタスクの再実装は必要ありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal has a new development release.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T103300Z" creationid="makenowjust" creationdate="20200610T121003Z">
        <seg>Crystal は新バージョンのリリースをしました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal help</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080616Z" creationid="makenowjust" creationdate="20200516T080616Z">
        <seg>Crystal のヘルプ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal is a language for humans and computers.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T150929Z" creationid="makenowjust" creationdate="20210726T150929Z">
        <seg>Crystal は人間とコンピューター双方のための言語です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal is a programming language that resembles Ruby but compiles to native code and tries to be much more efficient, at the cost of disallowing certain dynamic aspects of Ruby.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T031516Z" creationid="hirofumiwakasugi" creationdate="20150831T050601Z">
        <seg>Crystal は Ruby とよく似たプログラミング言語ですが、ネイティブコードにコンパイルされ、Ruby よりずっと効率的に動作するものを目指しています。一方で、そのために Ruby が持っている動的な機能についてはいくらか制限されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal is a programming language with the following goals:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T221028Z" creationid="makenowjust" creationdate="20200412T221028Z">
        <seg>Crystal は次の目標を掲げるプログラミング言語です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal is available as a compiled package.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T110956Z" creationid="makenowjust" creationdate="20200518T110956Z">
        <seg>Crystal はコンパイル済みのパッケージとして有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal is statically type checked, so any type errors will be caught early by the compiler rather than fail on runtime.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211921Z" creationid="makenowjust" creationdate="20200413T211113Z">
        <seg>Crystal は静的に型チェックされるプログラミング言語です。そのため、実行時にエラーを起こすのではなく、コンパイラが早期に型エラーを発見するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal is typically accompanied by Shards, its dependency manager.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T173104Z" creationid="makenowjust" creationdate="20200419T173104Z">
        <seg>Crystal には通常、依存関係管理ツールとして Shards が付随しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal libraries are packed as Shards, and distributed via Git without needing a centralised repository.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221638Z" creationid="makenowjust" creationdate="20200413T221638Z">
        <seg>Crystal のライブラリは Shards と呼ばれ、中央集権的なリポジトリを持たず Git で配布されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal provides a few pseudo-constants which provide reflective data about the source code being executed.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T180423Z" creationid="makenowjust" creationdate="20200505T180423Z">
        <seg>Crystal にはいくつかの疑似定数があり、ソースコードの位置に関する情報を取得することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal provides basic methods to do type reflection, casting and introspection.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T004656Z" creationid="hirofumiwakasugi" creationdate="20150930T004607Z">
        <seg>Crystal は型のリフレクションやキャスト、そしてイントロスペクションのための基本的なメソッドを提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal provides several literals for creating values of some basic types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000352Z" creationid="makenowjust" creationdate="20200414T000352Z">
        <seg>Crystal には、数多くの基本的な型に対応したリテラルが用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal structs marked with the &lt;g1&gt;@[Extern]&lt;/g1&gt; annotation</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T093618Z" creationid="makenowjust" creationdate="20210324T093618Z">
        <seg>&lt;g1&gt;@[Extern]&lt;/g1&gt; アノテーションの指定された Crystal の構造体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal structs marked with the &lt;g1&gt;@[Extern]&lt;/g1&gt; attribute</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T032348Z" creationid="makenowjust" creationdate="20200511T032348Z">
        <seg>&lt;g1&gt;@[Extern]&lt;/g1&gt; 属性の指定された Crystal の構造体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal supports a basic form of &lt;g1&gt;cross compilation&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T023609Z" creationid="makenowjust" creationdate="20200511T023609Z">
        <seg>Crystal は基本的な&lt;g1&gt;クロスコンパイル&lt;/g1&gt;をサポートしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal supports a basic form of &lt;g1&gt;cross compilation&lt;/g1&gt;http://en.wikipedia.org/wiki/Cross_compiler&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T083940Z" creationid="makenowjust" creationdate="20200518T083940Z">
        <seg>Crystal は基本的な&lt;g1&gt;クロスコンパイル&lt;/g1&gt;http://en.wikipedia.org/wiki/Cross_compiler&lt;e2/&gt;をサポートしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal supports a basic form of [cross compilation](http://en.wikipedia.org/wiki/Cross_compiler).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T044528Z" creationid="hirofumiwakasugi" creationdate="20150909T044528Z">
        <seg>Crystal は基本的な[クロスコンパイル](http://en.wikipedia.org/wiki/Cross_compiler)をサポートしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal supports a number of operators, with one, two or three operands.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T084718Z" creationid="makenowjust" creationdate="20200502T080917Z">
        <seg>Crystal には単項、2項、3項の演算子があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal supports an additional literal for arrays and array-like types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173411Z" creationid="makenowjust" creationdate="20200420T173411Z">
        <seg>Crystal はさらに、配列ライクな型のためのリテラルをサポートしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal supports an additional literal for hashes and hash-like types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T175914Z" creationid="makenowjust" creationdate="20200420T175914Z">
        <seg>Crystal はさらにハッシュライクな型のためのリテラルをサポートしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal top sponsors</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221957Z" creationid="makenowjust" creationdate="20200413T221957Z">
        <seg>Crystal のトップスポンサー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal uses green threads, called fibers, to achieve concurrency.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221214Z" creationid="makenowjust" creationdate="20200413T221201Z">
        <seg>Crystal はファイバーと呼ばれる軽量スレッドを用いて、並列性を獲得しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal version</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080452Z" creationid="makenowjust" creationdate="20200516T080452Z">
        <seg>Crystal のバージョン</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal's &lt;g1&gt;&lt;g2&gt;JSON::Serializable&lt;/g2&gt;&lt;/g1&gt; and &lt;g3&gt;&lt;g4&gt;YAML::Serializable&lt;/g4&gt;&lt;/g3&gt; are examples of this.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T105236Z" creationid="makenowjust" creationdate="20200510T105236Z">
        <seg>Crystal の &lt;g1&gt;&lt;g2&gt;JSON::Serializable&lt;/g2&gt;&lt;/g1&gt; と &lt;g3&gt;&lt;g4&gt;YAML::Serializable&lt;/g4&gt;&lt;/g3&gt; はそのようなアノテーションの例です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal's &lt;g1&gt;&lt;g2&gt;JSON::Serializable&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/JSON/Serializable.html&lt;e5/&gt; and &lt;g3&gt;&lt;g4&gt;YAML::Serializable&lt;/g4&gt;&lt;/g3&gt;https://crystal-lang.org/api/YAML/Serializable.html&lt;e6/&gt; are examples of this.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T082752Z" creationid="makenowjust" creationdate="20200518T082752Z">
        <seg>Crystal の &lt;g1&gt;&lt;g2&gt;JSON::Serializable&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/JSON/Serializable.html&lt;e5/&gt; と &lt;g3&gt;&lt;g4&gt;YAML::Serializable&lt;/g4&gt;&lt;/g3&gt;https://crystal-lang.org/api/YAML/Serializable.html&lt;e6/&gt; はそのようなアノテーションの例です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal's &lt;g1&gt;&lt;g2&gt;JSON::Serializable&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/JSON/Serializable.html&lt;e5/&gt; and &lt;g3&gt;&lt;g4&gt;YAML::Serializable&lt;/g4&gt;&lt;/g3&gt;https://crystal-lang.org/api/latest/YAML/Serializable.html&lt;e6/&gt; are examples of this.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T095641Z" creationid="makenowjust" creationdate="20210324T095641Z">
        <seg>Crystal の &lt;g1&gt;&lt;g2&gt;JSON::Serializable&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/JSON/Serializable.html&lt;e5/&gt; と &lt;g3&gt;&lt;g4&gt;YAML::Serializable&lt;/g4&gt;&lt;/g3&gt;https://crystal-lang.org/api/latest/YAML/Serializable.html&lt;e6/&gt; はそのようなアノテーションの例です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal's built-in code formatter can be used not just to format your code,
but also to format code samples included in documentation blocks.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215457Z" creationid="makenowjust" creationdate="20200412T215457Z">
        <seg>Crystal に組み込みのコードフォーマッタはコードのフォーマットのためだけでなく、ドキュメンテーションコメント中のコードブロックもフォーマットのためにも利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal's core-team help maintain that formula.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111949Z" creationid="makenowjust" creationdate="20200518T111949Z">
        <seg>Crystal のコアチームが formula をメンテナンスしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal's philosophy is to require as few type restrictions as possible.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T125745Z" creationid="makenowjust" creationdate="20200427T125745Z">
        <seg>Crystal の哲学は型制約をなるべく減らすことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal's way to do error handling is by raising and rescuing exceptions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012658Z" creationid="hirofumiwakasugi" creationdate="20150907T010624Z">
        <seg>Crystal では、例外を発生 (raise) させ、それを捕捉 (rescue) することによってエラーハンドリングを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>CrystalLanguage</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075510Z" creationid="makenowjust" creationdate="20200516T075510Z">
        <seg>CrystalLanguage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal’s answer to metaprogramming is a powerful macro system, which ranges from basic templating and AST inspection, to types inspection and running arbitrary external programs.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221023Z" creationid="makenowjust" creationdate="20200413T221001Z">
        <seg>Crystal はメタプログラミングに対する答えとして、強力なマクロシステムを備えています。この力は基本的なテンプレート処理から AST の分析や型の分析、さらには外部コマンドの実行までに及びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal’s syntax is heavily inspired by Ruby’s, so it feels natural to read and easy to write, and has the added benefit of a lower learning curve for experienced Ruby devs.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210741Z" creationid="makenowjust" creationdate="20200413T210741Z">
        <seg>Crystal の構文は Ruby の影響をつよく受けています。そのため自然に読めて、簡単に書けます。そして、 Ruby 開発の経験があれば習得は容易でしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Currently, it is only available for &lt;g1&gt;aarch64&lt;/g1&gt; and &lt;g2&gt;amd64&lt;/g2&gt; platforms.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T110817Z" creationid="makenowjust" creationdate="20200518T110817Z">
        <seg>今のところは、&lt;g1&gt;aarch64&lt;/g1&gt; と &lt;g2&gt;amd64&lt;/g2&gt; のプラットフォームでのみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Currently, the package is only available for &lt;g1&gt;aarch64&lt;/g1&gt; and &lt;g2&gt;x86_64&lt;/g2&gt; platforms.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T100958Z" creationid="makenowjust" creationdate="20200518T100958Z">
        <seg>今のところはパッケージは &lt;g1&gt;aarch64&lt;/g1&gt; と &lt;g2&gt;x86_64&lt;/g2&gt; のプラットフォームでのみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Curses::Window.new
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T131046Z" creationid="hirofumiwakasugi" creationdate="20150911T131046Z">
        <seg>Curses::Window.new
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>DEFAULT_LUCKY_NUMBER = 42</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T143822Z" creationid="makenowjust" creationdate="20200427T143822Z">
        <seg>DEFAULT_LUCKY_NUMBER = 42</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>DEPRECATED</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214452Z" creationid="makenowjust" creationdate="20200412T214452Z">
        <seg>DEPRECATED</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Data can be stored within an annotation.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T110014Z" creationid="makenowjust" creationdate="20200510T110014Z">
        <seg>アノテーションにデータを格納することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Database</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T185005Z" creationid="daiki" creationdate="20200705T185005Z">
        <seg>データベース</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Debian</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071337Z" creationid="makenowjust" creationdate="20200518T071337Z">
        <seg>Debian</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Default parameter values</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T092513Z" creationid="makenowjust" creationdate="20210324T092435Z">
        <seg>デフォルト引数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Default value is the first directory that either exists or can be created of &lt;g6&gt;${XDG_CACHE_HOME}/crystal&lt;/g6&gt; (if &lt;g7&gt;XDG_CACHE_HOME&lt;/g7&gt; is defined), &lt;g8&gt;${HOME}/.cache/crystal&lt;/g8&gt;, &lt;g9&gt;${HOME}/.crystal&lt;/g9&gt;, &lt;g10&gt;./.crystal&lt;/g10&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T170637Z" creationid="makenowjust" creationdate="20200419T170637Z">
        <seg>デフォルト値は次に上げるディレクトリのうち最初に見つかったか作成可能だったものになります: &lt;g6&gt;${XDG_CACHE_HOME}/crystal&lt;/g6&gt; (&lt;g7&gt;XDG_CACHE_HOME&lt;/g7&gt;がある場合)、&lt;g8&gt;${HOME}/.cache/crystal&lt;/g8&gt;、&lt;g9&gt;${HOME}/.crystal&lt;/g9&gt;、もしくは&lt;g10&gt;./.crystal&lt;/g10&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Default values</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T155510Z" creationid="makenowjust" creationdate="20200429T152437Z">
        <seg>デフォルト引数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Defining custom exceptions</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103400Z" creationid="makenowjust" creationdate="20200506T103400Z">
        <seg>独自の例外を定義する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Defining operator methods</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T082837Z" creationid="makenowjust" creationdate="20200502T082837Z">
        <seg>演算子メソッドの定義</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dependencies</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221554Z" creationid="makenowjust" creationdate="20200413T221554Z">
        <seg>依存関係の管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Description</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091526Z" creationid="makenowjust" creationdate="20200502T085206Z">
        <seg>説明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Description copied from class `Animal`

Returns the name of `self`.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213317Z" creationid="makenowjust" creationdate="20200412T213317Z">
        <seg>Description copied from class `Animal`

Returns the name of `self`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Detailed examples for practical applications.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T151401Z" creationid="makenowjust" creationdate="20210726T151401Z">
        <seg>実践的なアプリケーションによる詳細な例です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Developer News</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T152418Z" creationid="makenowjust" creationdate="20210726T152418Z">
        <seg>開発者向けの情報</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Developer resources</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T153527Z" creationid="makenowjust" creationdate="20210726T153527Z">
        <seg>開発者向けリソース</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Development dependencies won't be installed and only locked dependencies will be installed.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175813Z" creationid="makenowjust" creationdate="20200419T175813Z">
        <seg>開発用の依存関係は実行されずロックされた依存関係のみがインストールされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Did you notice that in all of the previous examples we never said the types of a `Person`'s `@name` and `@age`? This is because the compiler inferred them for us.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T053528Z" creationid="hirofumiwakasugi" creationdate="20150904T130628Z">
        <seg>これまでの例の中で、`Person` の `@name` と `@age` に対して特に型の指定をしていなかったことに気づいたでしょうか。その理由は、コンパイラには自動的に型を推論する機能があるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Directory and File Names</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T204201Z" creationid="makenowjust" creationdate="20200412T204201Z">
        <seg>ディレクトリとファイル名</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Discover the ecosystem of Crystal libraries.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T152130Z" creationid="makenowjust" creationdate="20210726T152130Z">
        <seg>Crystal のライブラリのエコシステムの探訪。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Discoverable</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T162615Z" creationid="makenowjust" creationdate="20200527T162615Z">
        <seg>発見可能なものにする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do you consider yourself a helpful person?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165126Z" creationid="makenowjust" creationdate="20200412T221958Z">
        <seg>助けを求める人のことを考えていますか？　</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Document your code with comments.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T160100Z" creationid="makenowjust" creationdate="20200527T160100Z">
        <seg>コメントでコードをドキュメント化してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Documentation</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T160012Z" creationid="makenowjust" creationdate="20200527T160012Z">
        <seg>ドキュメント化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Documentation of the standard library.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T151757Z" creationid="makenowjust" creationdate="20210726T151757Z">
        <seg>標準ライブラリのドキュメント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Documentation should be positioned right above definitions of classes, modules, and methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T211629Z" creationid="makenowjust" creationdate="20200412T211624Z">
        <seg>ドキュメンテーションコメントはクラス、モジュール、そしてメソッド定義のすぐ上に配置してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Documenting code</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T210059Z" creationid="makenowjust" creationdate="20200412T210059Z">
        <seg>コードのドキュメント化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Documenting that the method's return value is of no interest</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T084507Z" creationid="makenowjust" creationdate="20200430T141637Z">
        <seg>戻り値に意味がないということをドキュメントに表示できる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don't create intermediate strings when writing to an IO</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T120503Z" creationid="akiji" creationdate="20200430T120503Z">
        <seg>IOに書き込む際に中間的な文字列を生成しない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don't miss out on the rest of the &lt;g1&gt;release changelog&lt;/g1&gt;https://github.com/crystal-lang/crystal/releases/tag/0.35.0&lt;e2/&gt; which has a lot of valuable information.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T124444Z" creationid="makenowjust" creationdate="20200610T123937Z">
        <seg>ですが、&lt;g1&gt;リリースのチェンジログ&lt;/g1&gt;https://github.com/crystal-lang/crystal/releases/tag/0.35.0&lt;e2/&gt;にもたくさんの価値ある情報があることを忘れないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don't miss out on the rest of the &lt;g1&gt;release changelog&lt;/g1&gt;https://github.com/crystal-lang/crystal/releases/tag/0.35.1&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200621T073337Z" creationid="makenowjust" creationdate="20200621T073337Z">
        <seg>ですが、&lt;g1&gt;リリースのチェンジログ&lt;/g1&gt;https://github.com/crystal-lang/crystal/releases/tag/0.35.1&lt;e2/&gt;にもたくさんの価値ある情報があることを忘れないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don't miss out on the rest of the &lt;g1&gt;release changelog&lt;/g1&gt;https://github.com/crystal-lang/shards/releases/tag/v0.12.0&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T104907Z" creationid="makenowjust" creationdate="20200809T104907Z">
        <seg>&lt;g1&gt;リリースのチェンジログ&lt;/g1&gt;https://github.com/crystal-lang/shards/releases/tag/v0.12.0&lt;e2/&gt;にも目を通してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Donald Knuth once said:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T084030Z" creationid="akiji" creationdate="20200430T084030Z">
        <seg>かつてドナルド・クヌースは言いました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Donate</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083242Z" creationid="makenowjust" creationdate="20200516T083242Z">
        <seg>寄付</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Done installing?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T100729Z" creationid="makenowjust" creationdate="20200518T100712Z">
        <seg>インストールできましたか？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don’t do these things with the Crystal logos and brand:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T085601Z" creationid="makenowjust" creationdate="20200516T085544Z">
        <seg>Crystal のロゴやブランドに対して次のことはしてはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don’t hesitate to contact us if:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T090238Z" creationid="makenowjust" creationdate="20200516T090238Z">
        <seg>このような場合はためらわず連絡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dor Kalev</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084040Z" creationid="makenowjust" creationdate="20200516T084040Z">
        <seg>Dor Kalev</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double splats and named tuples</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160632Z" creationid="makenowjust" creationdate="20200429T154952Z">
        <seg>二重スプラット展開と名前付きタプル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double splatting a named tuple</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160651Z" creationid="makenowjust" creationdate="20200429T155148Z">
        <seg>名前付きタプルの二重スプラット</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Download the file for your platform and uncompress it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055747Z" creationid="hirofumiwakasugi" creationdate="20150831T055747Z">
        <seg>それぞれのプラットフォームに合わせて適切なファイルをダウンロードして展開してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Download the file for your platform and uncompress it. Inside it you will have a `bin/crystal` executable.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T082936Z" creationid="hirofumiwakasugi" creationdate="20150831T082936Z">
        <seg>それぞれのプラットフォームに合わせて適切なファイルをダウンロードして展開してください。その中に、`bin/crystal` という実行ファイルが含まれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>During development you might need to switch the source or fork of a dependency.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T105409Z" creationid="makenowjust" creationdate="20200809T105334Z">
        <seg>開発の際、依存関係をフォークしたものに切り替えることがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>During the day we had up to 160 concurrent viewers, and every talk had at least 30 people.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T091832Z" creationid="makenowjust" creationdate="20201217T091832Z">
        <seg>当日は最大 160 人の閲覧者がいて、各発表には最低でも 30 人は参加していました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>During the development of a major crystal release with potential breaking-changes (from 0.x to 1.x, and 1.x to 2.x) it is reasonable to run projects’ CIs against nightly with &lt;g1&gt;--ignore-crystal-version&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T111033Z" creationid="makenowjust" creationdate="20200809T111010Z">
        <seg>破壊的変更の起こりうる Crystal のバージョン (0.x から 1.x や 1.x から 2.x など) が開発されている間は、プロジェクトの CI でナイトリー版を使い &lt;g1&gt;--ignore-crystal-version&lt;/g1&gt; を指定するのは合理的でしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>During the event, we used Zoom polls to ask some questions.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092018Z" creationid="makenowjust" creationdate="20201217T092018Z">
        <seg>イベントの最中に、Zoom の投票機能を使っていくつかの質問を行いました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>During this guide &lt;g1&gt;crystal-lang/crystal-mysql&lt;/g1&gt; will be used.</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T191935Z" creationid="daiki" creationdate="20200705T191935Z">
        <seg>このガイドを通して &lt;g1&gt;crystal-lang/crystal-mysql&lt;/g1&gt; を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dynamic assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T181119Z" creationid="makenowjust" creationdate="20200505T181119Z">
        <seg>動的な代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dynamically assigning values to constants using the &lt;g1&gt;chained assignment&lt;/g1&gt; or the &lt;g2&gt;multiple assignment&lt;/g2&gt; is not supported and results in a syntax error.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T181225Z" creationid="makenowjust" creationdate="20200505T181225Z">
        <seg>&lt;g1&gt;連続した代入&lt;/g1&gt;や&lt;g2&gt;多重代入&lt;/g2&gt;は定数に対してはサポートされておらず、構文エラーとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each block parameter has the type of every yield expression in that position.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094512Z" creationid="makenowjust" creationdate="20210324T094512Z">
        <seg>ブロックの引数はすべての yield 式に応じた型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each block variable has the type of every yield expression in that position.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023224Z" creationid="hirofumiwakasugi" creationdate="20150916T022816Z">
        <seg>ブロックの変数はすべての yield 式に応じた型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each constant in the enum has the type of the enum:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T181922Z" creationid="hirofumiwakasugi" creationdate="20150914T024431Z">
        <seg>列挙型のそれぞれの定数はその列挙型を型として持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each entry could already have context information that is grabbed from the running fiber.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T154552Z" creationid="makenowjust" creationdate="20200610T153756Z">
        <seg>各エントリはこれまでより、現在実行しているファイバーから取得したコンテキストの情報を持っていました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each of the above kinds of variables will be explained later on.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054307Z" creationid="hirofumiwakasugi" creationdate="20150902T054307Z">
        <seg>上記のそれぞれの変数の種類については改めて説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each of them will always set up the binding fully between sources and backends.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T141846Z" creationid="makenowjust" creationdate="20200610T153414Z">
        <seg>これらのメソッドは常にソースとバックエンドの間のバインディングを完全に設定するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each one of them is optional, so a method can do without the double splat, without the splat, without keyword arguments and without positional arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T144859Z" creationid="makenowjust" creationdate="20200430T144859Z">
        <seg>これらを指定するかどうかは、それぞれ任意です。なのでスプラット、二重スプラット、キーワード引数、位置指定の引数を持たないようなメソッドを定義することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each one of them is optional, so a method can do without the double splat, without the splat, without named parameters and without positional parameters.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T091045Z" creationid="makenowjust" creationdate="20210324T091045Z">
        <seg>これらを指定するかどうかは、それぞれ任意です。なのでスプラット、二重スプラット、キーワード引数、位置指定の引数を持たないようなメソッドを定義することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Easy, peasy!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180825Z" creationid="makenowjust" creationdate="20200413T180825Z">
        <seg>簡単です！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Elementary OS</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071351Z" creationid="makenowjust" creationdate="20200518T071351Z">
        <seg>Elementary OS</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Employee.new "John", "Acme" # OK
Employee.new "Peter" # Error: wrong number of arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T023917Z" creationid="hirofumiwakasugi" creationdate="20150910T023843Z">
        <seg>Employee.new "John", "Acme" # OK
Employee.new "Peter" # 'Employee:Class#new' (1 for 2) を実行すると</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Empty array literals always need a type specification:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173302Z" creationid="makenowjust" creationdate="20200420T173302Z">
        <seg>空の配列リテラルは常に型を指定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Empty hash literals always need type specifications:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T175829Z" creationid="makenowjust" creationdate="20200420T175829Z">
        <seg>空のハッシュリテラルは常に型を指定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enforcing operator precedence makes sure that an expression such as
&lt;g2&gt;1 * 2 + 3 * 4&lt;/g2&gt; is parsed as &lt;g3&gt;(1 * 2) + (2 * 3)&lt;/g3&gt; to honour regular math rules.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T082451Z" creationid="makenowjust" creationdate="20200502T081839Z">
        <seg>演算子の優先順位を適用することで、&lt;g2&gt;1 * 2 + 3 * 4&lt;/g2&gt; は通常のマッチ規則に従って &lt;g3&gt;(1 * 2) + (2 * 3)&lt;/g3&gt; のようにパースされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enums</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T181714Z" creationid="makenowjust" creationdate="20200505T181714Z">
        <seg>列挙型 (Enum)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enums are a type-safe alternative to &lt;g1&gt;Symbol&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182953Z" creationid="makenowjust" creationdate="20200505T182953Z">
        <seg>列挙型は &lt;g1&gt;Symbol&lt;/g1&gt; の型安全の代替物として利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enums are a type-safe alternative to &lt;g1&gt;Symbol&lt;/g1&gt;http://crystal-lang.org/api/Symbol.html&lt;e3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T084221Z" creationid="makenowjust" creationdate="20200518T084221Z">
        <seg>列挙型は &lt;g1&gt;Symbol&lt;/g1&gt;http://crystal-lang.org/api/Symbol.html&lt;e3/&gt; の型安全な代替物として利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enums are a type-safe alternative to &lt;g1&gt;Symbol&lt;/g1&gt;https://crystal-lang.org/api/latest/Symbol.html&lt;e3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T090533Z" creationid="makenowjust" creationdate="20210324T090533Z">
        <seg>列挙型は &lt;g1&gt;Symbol&lt;/g1&gt;https://crystal-lang.org/api/latest/Symbol.html&lt;e3/&gt; の型安全な代替物として利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enums are a type-safe alternative to [Symbol](http://crystal-lang.org/api/Symbol.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T012004Z" creationid="hirofumiwakasugi" creationdate="20150916T011713Z">
        <seg>Enum は、型安全な[シンボル](http://crystal-lang.org/api/Symbol.html)の代替物として利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enums from integers</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182528Z" creationid="makenowjust" creationdate="20200505T182528Z">
        <seg>整数から列挙型を作る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Environment variables</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165947Z" creationid="makenowjust" creationdate="20200419T165947Z">
        <seg>環境変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Equality</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084746Z" creationid="makenowjust" creationdate="20200502T084746Z">
        <seg>等価性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Error in foo.cr:6: instantiating 'add(Bool, Bool)'

add true, false
^~~

in foo.cr:2: undefined method '+' for Bool</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T160120Z" creationid="makenowjust" creationdate="20200429T160120Z">
        <seg>Error in foo.cr:6: instantiating 'add(Bool, Bool)'

add true, false
^~~

in foo.cr:2: undefined method '+' for Bool</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Error: missing case String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T125854Z" creationid="makenowjust" creationdate="20200610T125854Z">
        <seg>Error: missing case String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Escaping</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T191546Z" creationid="makenowjust" creationdate="20200419T191546Z">
        <seg>エスケープ文字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Especially &lt;g3&gt;#double_splat&lt;/g3&gt; which makes it easy to pass annotation arguments to methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T110752Z" creationid="makenowjust" creationdate="20200510T110701Z">
        <seg>特に &lt;g3&gt;#double_splat&lt;/g3&gt; を使うと、アノテーションの引数をメソッドに渡すのは容易になるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Europe</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092107Z" creationid="makenowjust" creationdate="20201217T092104Z">
        <seg>ヨーロッパ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Even between minor releases.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T125037Z" creationid="makenowjust" creationdate="20200610T125037Z">
        <seg>たとえマイナーリリースの間でも、その変更は行なわれる可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Even the private methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T160114Z" creationid="makenowjust" creationdate="20200527T160114Z">
        <seg>private なメソッドでもドキュメントを書きましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Even though the instance has two &lt;g1&gt;Int32&lt;/g1&gt; fields, the compiler always includes an extra &lt;g2&gt;Int32&lt;/g2&gt; field for the type id of the object.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T015849Z" creationid="makenowjust" creationdate="20200511T015849Z">
        <seg>上記では、インスタンスは2つの &lt;g1&gt;Int32&lt;/g1&gt; のフィールドを持っています。ただし、オブジェクトの型 ID のために、コンパイラによって常に &lt;g2&gt;Int32&lt;/g2&gt; フィールドが追加されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Even though the instance has two `Int32` fields, the compiler always includes an extra `Int32` field for the type id of the object.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T121004Z" creationid="hirofumiwakasugi" creationdate="20150906T120905Z">
        <seg>上記では、インスタンスは2つの `Int32` のフィールドを持っています。ただし、オブジェクトの型 ID のために、コンパイラによって常に `Int32` フィールドが追加されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Even though this logic might improve in the future, right now it forces you to keep your exception handlers to their necessary minimum, making the code's intention more clear:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T023041Z" creationid="hirofumiwakasugi" creationdate="20150907T022721Z">
        <seg>このロジックは将来的には改定されるかもしれません。ただ、現時点では例外処理の中で行うことは必要最小限に留め、コードの意図を明確にして書くことが求められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Event loop</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T054358Z" creationid="akiji" creationdate="20200428T054358Z">
        <seg>イベントループ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Eventually generates a
new &lt;g2&gt;shard.lock&lt;/g2&gt; file.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T095337Z" creationid="makenowjust" creationdate="20200419T181247Z">
        <seg>最終的には新たな &lt;g2&gt;shard.lock&lt;/g2&gt; を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every class except &lt;g1&gt;Object&lt;/g1&gt;, the hierarchy root, inherits from another class (its superclass).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T103536Z" creationid="makenowjust" creationdate="20200504T103536Z">
        <seg>クラス階層の頂点である&lt;g1&gt;Object&lt;/g1&gt;を覗き、すべてのクラスは他のクラス (スーパークラス) を継承しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every class except `Object`, the hierarchy root, inherits from another class (its superclass).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T023224Z" creationid="hirofumiwakasugi" creationdate="20150910T023224Z">
        <seg>クラス階層のルートクラスである `Object` を除き、すべてのクラスは他のクラス (スーパークラス) を継承しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every dollar counts!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083236Z" creationid="makenowjust" creationdate="20200516T083236Z">
        <seg>どんな金額でも構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every expression whose code paths all result in &lt;g1&gt;NoReturn&lt;/g1&gt; will be &lt;g2&gt;NoReturn&lt;/g2&gt; as well.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T142633Z" creationid="makenowjust" creationdate="20200430T142633Z">
        <seg>どのように分岐しても &lt;g1&gt;NoReturn&lt;/g1&gt; になる場合は、結果の型も &lt;g2&gt;NoReturn&lt;/g2&gt; になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every time you use an alias the compiler replaces it with the type it refers to.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T070921Z" creationid="hirofumiwakasugi" creationdate="20150919T070916Z">
        <seg>エイリアスはコンパイラによって、それらが参照している型に置き変えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Everything is an object</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T095430Z" creationid="makenowjust" creationdate="20200427T095430Z">
        <seg>すべてがオブジェクト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Example</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085207Z" creationid="makenowjust" creationdate="20200502T085207Z">
        <seg>例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Example of &lt;g1&gt;inherited&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224454Z" creationid="makenowjust" creationdate="20200509T224454Z">
        <seg>&lt;g1&gt;inherited&lt;/g1&gt; の例です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Example of &lt;g1&gt;method_added&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224512Z" creationid="makenowjust" creationdate="20200509T224507Z">
        <seg>&lt;g1&gt;method_added&lt;/g1&gt; の例です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Example of &lt;g1&gt;method_missing&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224504Z" creationid="makenowjust" creationdate="20200509T224504Z">
        <seg>&lt;g1&gt;method_missing&lt;/g1&gt; の例です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Example of `inherited`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014442Z" creationid="hirofumiwakasugi" creationdate="20151002T014434Z">
        <seg>`inherited` の例:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Example of `method_missing`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014452Z" creationid="hirofumiwakasugi" creationdate="20151002T014452Z">
        <seg>`method_missing` の例:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Example:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163400Z" creationid="makenowjust" creationdate="20200419T154707Z">
        <seg>例:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Example: &lt;g1&gt;overview/hello_world.md&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T040606Z" creationid="makenowjust" creationdate="20200413T164825Z">
        <seg>例: &lt;g1&gt;overview/hello_world.md&lt;/g1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Examples for this are the inversion operator &lt;g1&gt;!&lt;/g1&gt;, the assignment
operator &lt;g2&gt;=&lt;/g2&gt;, &lt;g3&gt;combined assignment operators&lt;/g3&gt; such as
&lt;g4&gt;||=&lt;/g4&gt; and &lt;g5&gt;range operators&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T083240Z" creationid="makenowjust" creationdate="20200502T083240Z">
        <seg>例えば論理反転演算子 &lt;g1&gt;!&lt;/g1&gt; や、代入演算子 &lt;g2&gt;=&lt;/g2&gt;、&lt;g4&gt;||=&lt;/g4&gt;のような&lt;g3&gt;複合代入演算子&lt;/g3&gt;、そして&lt;g5&gt;範囲演算子&lt;/g5&gt;などがそれに当てはまります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Examples of this can be found in &lt;g1&gt;&lt;g2&gt;IO::FileDescriptor#finalize&lt;/g2&gt;&lt;/g1&gt;
or &lt;g3&gt;&lt;g4&gt;OpenSSL::Digest#finalize&lt;/g4&gt;&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T085256Z" creationid="makenowjust" creationdate="20200504T140202Z">
        <seg>例えば&lt;g1&gt;&lt;g2&gt;IO::FileDescriptor#finalize&lt;/g2&gt;&lt;/g1&gt;
や&lt;g3&gt;&lt;g4&gt;OpenSSL::Digest#finalize&lt;/g4&gt;&lt;/g3&gt;などで実際に利用されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Examples of this can be found in &lt;g1&gt;&lt;g2&gt;IO::FileDescriptor#finalize&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/IO/FileDescriptor.html#finalize-instance-method&lt;e5/&gt;
or &lt;g3&gt;&lt;g4&gt;OpenSSL::Digest#finalize&lt;/g4&gt;&lt;/g3&gt;https://crystal-lang.org/api/OpenSSL/Digest.html#finalize-instance-method&lt;e6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T084519Z" creationid="makenowjust" creationdate="20200518T084519Z">
        <seg>例えば &lt;g1&gt;&lt;g2&gt;IO::FileDescriptor#finalize&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/IO/FileDescriptor.html#finalize-instance-method&lt;e5/&gt; や &lt;g3&gt;&lt;g4&gt;OpenSSL::Digest#finalize&lt;/g4&gt;&lt;/g3&gt;https://crystal-lang.org/api/OpenSSL/Digest.html#finalize-instance-method&lt;e6/&gt; で実際に利用されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Examples of this can be found in &lt;g1&gt;&lt;g2&gt;IO::FileDescriptor#finalize&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/IO/FileDescriptor.html#finalize-instance-method&lt;e5/&gt;
or &lt;g3&gt;&lt;g4&gt;OpenSSL::Digest#finalize&lt;/g4&gt;&lt;/g3&gt;https://crystal-lang.org/api/latest/OpenSSL/Digest.html#finalize-instance-method&lt;e6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T085939Z" creationid="makenowjust" creationdate="20210324T085939Z">
        <seg>例えば &lt;g1&gt;&lt;g2&gt;IO::FileDescriptor#finalize&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/IO/FileDescriptor.html#finalize-instance-method&lt;e5/&gt;
や &lt;g3&gt;&lt;g4&gt;OpenSSL::Digest#finalize&lt;/g4&gt;&lt;/g3&gt;https://crystal-lang.org/api/latest/OpenSSL/Digest.html#finalize-instance-method&lt;e6/&gt; で実際に利用されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Except for the pipes, all delimiters can be nested meaning a start delimiter inside the string escapes the next end delimiter.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T193305Z" creationid="makenowjust" creationdate="20200419T193305Z">
        <seg>パイプ文字を除いて、すべての区切り文字はネストに応じて適切に処理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Except for the pipes, all delimiters can be nested; meaning a start delimiter inside the literal escapes the next end delimiter.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T042334Z" creationid="makenowjust" creationdate="20200421T042334Z">
        <seg>パイプ文字を除いて、すべての区切り文字はネストに応じて適切に処理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Except for the pipes, all delimiters can be nested; meaning a start delimiter inside the string escapes the next end delimiter.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T172119Z" creationid="makenowjust" creationdate="20200420T172119Z">
        <seg>パイプ文字を除いて、すべての区切り文字はネストに応じて適切に処理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exception handling</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103116Z" creationid="makenowjust" creationdate="20200506T103116Z">
        <seg>例外の処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exception handling has a short syntax form: assume a method definition is an implicit `begin ... end` expression, then specify `rescue`, `ensure` and `else` clauses:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014221Z" creationid="hirofumiwakasugi" creationdate="20150907T014221Z">
        <seg>例外処理には短縮記法が用意されています。それは、メソッドの定義は暗黙的に `begin ... end` 構文であるとして `rescue`/`ensure`/`else` を使用できるというものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exception handling has a short syntax form: assume a method or block definition is an implicit &lt;g1&gt;begin ... end&lt;/g1&gt; expression, then specify &lt;g2&gt;rescue&lt;/g2&gt;, &lt;g3&gt;else&lt;/g3&gt;, and &lt;g4&gt;ensure&lt;/g4&gt; clauses:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103944Z" creationid="makenowjust" creationdate="20200506T103944Z">
        <seg>例外処理には短縮記法が用意されています。それは、メソッドの定義は暗黙的に &lt;g1&gt;begin ... end&lt;/g1&gt; 構文であるとして、&lt;g2&gt;rescue&lt;/g2&gt;や&lt;g3&gt;else&lt;/g3&gt;、&lt;g4&gt;ensure&lt;/g4&gt; 節を指定できるというものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exceptions to the general expansion formula are the logical operators:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T095130Z" creationid="makenowjust" creationdate="20200502T095130Z">
        <seg>例外として、論理演算子に対する複合代入は次のように変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exec</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T193551Z" creationid="daiki" creationdate="20200705T193551Z">
        <seg>実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Execution of a program</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T072511Z" creationid="akiji" creationdate="20200428T055342Z">
        <seg>プログラムの実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exhaustive Case (take 2)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T124455Z" creationid="makenowjust" creationdate="20200610T124455Z">
        <seg>網羅性チェック (テイク2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exit status:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180413Z" creationid="makenowjust" creationdate="20200419T180413Z">
        <seg>終了コード:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Expected: true</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165202Z" creationid="makenowjust" creationdate="20200419T165202Z">
        <seg>Expected: true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Experimental means that it’s subject to change based on feedback.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T125016Z" creationid="makenowjust" creationdate="20200610T125016Z">
        <seg>実験的というのはフォードバックを元に変更される可能性がある、ということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Explicit array literals in loops is one way to create temporary objects, but these can also be created via method calls.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T024314Z" creationid="akiji" creationdate="20200430T131908Z">
        <seg>ループ内での明示的に配列リテラルを使うことは、一時的なオブジェクトが生成される状況の1つのですが、一時的なオブジェクトはメソッド呼び出しによっても生成される場合があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Explicit types can be specified by immediately following the closing bracket with &lt;g1&gt;of&lt;/g1&gt; (separated by whitespace), a key type (&lt;g2&gt;K&lt;/g2&gt;) followed by &lt;g3&gt;=&gt;&lt;/g3&gt; as delimiter and a value type (&lt;g4&gt;V&lt;/g4&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T175704Z" creationid="makenowjust" creationdate="20200420T175704Z">
        <seg>閉じひげ括弧のあとに続けて&lt;g1&gt;of&lt;/g1&gt;とキーの型 (&lt;g2&gt;K&lt;/g2&gt;)、さらに &lt;g3&gt;=&gt;&lt;/g3&gt; に続けて値の型 (&lt;g4&gt;V&lt;/g4&gt;) を置くことで、明示的に型を指定することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exponential</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084724Z" creationid="makenowjust" creationdate="20200502T084708Z">
        <seg>指数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Extern</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114613Z" creationid="makenowjust" creationdate="20200510T114613Z">
        <seg>Extern</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>External names</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T161017Z" creationid="makenowjust" creationdate="20200501T161017Z">
        <seg>外部名</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Extra named arguments are placed in the double splat method argument, as a &lt;g1&gt;NamedTuple&lt;/g1&gt;, if it exists, otherwise it's an error.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T155852Z" creationid="makenowjust" creationdate="20200501T155852Z">
        <seg>その他の名前付き引数は二重スプラット指定の引数があればそちらに &lt;g1&gt;NamedTuple&lt;/g1&gt; として配置されます。二重スプラット指定の引数がなければエラーが起こります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Extra named arguments are placed in the double splat method parameter, as a &lt;g1&gt;NamedTuple&lt;/g1&gt;, if it exists, otherwise it's an error.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T091839Z" creationid="makenowjust" creationdate="20210324T091839Z">
        <seg>その他の名前付き引数は二重スプラット指定の引数があればそちらに &lt;g1&gt;NamedTuple&lt;/g1&gt; として配置されます。二重スプラット指定の引数がなければエラーとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>FAQ</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083246Z" creationid="makenowjust" creationdate="20200516T083246Z">
        <seg>FAQ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>FIRST</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T091347Z" creationid="makenowjust" creationdate="20210130T091347Z">
        <seg>FIRST</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>FIXME</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214454Z" creationid="makenowjust" creationdate="20200412T214454Z">
        <seg>FIXME</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Failure/Error: false.should eq(true)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165201Z" creationid="makenowjust" creationdate="20200419T165201Z">
        <seg>Failure/Error: false.should eq(true)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fast</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120236Z" creationid="makenowjust" creationdate="20200510T120236Z">
        <seg>Fast</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fedora</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071401Z" creationid="makenowjust" creationdate="20200518T071401Z">
        <seg>Fedora</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Feel free to ask a question, share your project with others, ask for guidance and best practices, offer your help contributing to a project, or anything else Crystal-related." link_text="forum.crystal-lang.org" url="https://forum.crystal-lang.org" icon="forum" %} {% include community_row.html title="New Releases, Use Cases and more" divId="blog" content="In the official Crystal blog you can find the detailed announcements for new releases, some interesting use cases, the rationale behind some of the language's design decisions and things the team write around the code they usually write.&lt;br5/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T092822Z" creationid="makenowjust" creationdate="20200516T092435Z">
        <seg>気軽に質問してください。あなたのプロジェクトの紹介、ベストプラクティスの質問、どうやってプロジェクトに貢献したらよいか、その他 Crystal に関わることなら何でも OK です。"
  link_text="forum.crystal-lang.org"
  url="https://forum.crystal-lang.org"
  icon="forum" %}

{% include community_row.html
   title="新しいリリースやユースケースの紹介"
   divId="blog"
   content="Crystal 公式ブログでは、新しいリリースの詳細なアナウンス、興味深いユースケース、言語デザインの決定の背景、Crystal の開発チームの普段書いているコードについてなどが見れます。&lt;br5/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Feel free to ask a question, share your project with others, ask for guidance and best practices, offer your help contributing to a project, or anything else Crystal-related." link_text="forum.crystal-lang.org" url="https://forum.crystal-lang.org" icon="forum" %} {% include community_row.html title="New Releases, Use Cases and more" divId="blog" content="In the official Crystal blog you can find the detailed announcements for new releases, some interesting use cases, the rationale behind some of the language's design decisions and things the team write around the code they usually write.&lt;x6/&gt;&lt;x7/&gt; We also accept posts from guest writers, so if you have something awesome you have built with Crystal, &lt;g8&gt;contact us&lt;/g8&gt; and we'll be happy to have you featured on the blog." link_text="Crystal Blog" url="/blog" icon="chat_bubble_outline" internal_link="true" %} {% include community_row.html title="Chat Room" divId="chat" content="The Gitter room is the official chat room for Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T103950Z" creationid="makenowjust" creationdate="20200518T075702Z">
        <seg>気軽に質問してください。あなたのプロジェクトの紹介、ベストプラクティスの質問、どうやってプロジェクトに貢献したらよいか、その他 Crystal に関わることなら何でも OK です。'
  link_text='forum.crystal-lang.org'
  url='https://forum.crystal-lang.org'
  icon='forum' %}

{% include community_row.html
   title='新しいリリースやユースケースの紹介'
   divId='blog'
   content='Crystal 公式ブログでは、新しいリリースの詳細なアナウンス、興味深いユースケース、言語デザインの決定の背景、Crystal の開発チームの普段書いているコードについてなどが見れます。&lt;x6/&gt;&lt;x7/&gt;ゲストからの投稿も受け付けています。もし Crystal で何か驚くものを作った場合は、&lt;g8&gt;私たちに連絡してみて&lt;/g8&gt;ください。あなたのことをブログで取り上げられることを楽しみにしています。'
  link_text='Crystal ブログ'
  url='/blog'
  icon='chat_bubble_outline'
  internal_link='true' %}

{% include community_row.html
   title='チャットルーム (英語)'
   divId='chat'
   content='Gitter が Crystal 公式のチャットルームです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Feel free to ask a question, share your project with others, ask for guidance and best practices, offer your help contributing to a project, or anything else Crystal-related." link_text="forum.crystal-lang.org" url="https://forum.crystal-lang.org" icon="forum" %} {% include community_row.html title="New Releases, Use Cases and more" divId="blog" content='In the official Crystal blog you can find the detailed announcements for new releases, some interesting use cases, the rationale behind some of the language's design decisions and things the team write around the code they usually write.&lt;br8/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20220525T091655Z" creationid="makenowjust" creationdate="20220525T090312Z">
        <seg>気軽に質問してください。あなたのプロジェクトの紹介、ベストプラクティスの質問、どうやってプロジェクトに貢献したらよいか、その他 Crystal に関わることなら何でも OK です。'
  link_text="forum.crystal-lang.org"
  url="https://forum.crystal-lang.org"
  icon="forum" %}

{% include community_row.html
   title="新しいリリースやユースケースの紹介"
   divId="blog"
   content='Crystal 公式ブログでは、新しいリリースの詳細なアナウンス、興味深いユースケース、言語デザインの決定の背景、Crystal の開発チームの普段書いているコードについてなどが見れます。&lt;br8/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Feel free to ask a question, share your project with others, ask for guidance and best practices, offer your help contributing to a project, or anything else Crystal-related." link_text="forum.crystal-lang.org" url="https://forum.crystal-lang.org" icon="forum" %} {% include community_row.html title="New Releases, Use Cases and more" divId="blog" content='In the official Crystal blog you can find the detailed announcements for new releases, some interesting use cases, the rationale behind some of the language's design decisions and things the team write around the code they usually write.&lt;x6/&gt;&lt;x7/&gt; We also accept posts from guest writers, so if you have something awesome you have built with Crystal, &lt;g8&gt;contact us&lt;/g8&gt; and we'll be happy to have you featured on the blog.' link_text="Crystal Blog" url="/blog" icon="chat_bubble_outline" internal_link="true" %} {% include community_row.html title="Chat Room" divId="chat" content="The Gitter room is the official chat room for Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T104746Z" creationid="makenowjust" creationdate="20200518T104746Z">
        <seg>気軽に質問してください。あなたのプロジェクトの紹介、ベストプラクティスの質問、どうやってプロジェクトに貢献したらよいか、その他 Crystal に関わることなら何でも OK です。'
  link_text='forum.crystal-lang.org'
  url='https://forum.crystal-lang.org'
  icon='forum' %}

{% include community_row.html
   title='新しいリリースやユースケースの紹介'
   divId='blog'
   content='Crystal 公式ブログでは、新しいリリースの詳細なアナウンス、興味深いユースケース、言語デザインの決定の背景、Crystal の開発チームの普段書いているコードについてなどが見れます。&lt;x6/&gt;&lt;x7/&gt;ゲストからの投稿も受け付けています。もし Crystal で何か驚くものを作った場合は、&lt;g8&gt;私たちに連絡してみて&lt;/g8&gt;ください。あなたのことをブログで取り上げられることを楽しみにしています。'
  link_text='Crystal ブログ'
  url='/blog'
  icon='chat_bubble_outline'
  internal_link='true' %}

{% include community_row.html
   title='チャットルーム (英語)'
   divId='chat'
   content='Gitter が Crystal 公式のチャットルームです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Feel free to ask a question, share your project with others, ask for guidance and best practices, offer your help contributing to a project, or anything else Crystal-related." link_text="forum.crystal-lang.org" url="https://forum.crystal-lang.org" icon="forum" %} {% include community_row.html title="New Releases, Use Cases and more" divId="blog" content='In the official Crystal blog you can find the detailed announcements for new releases, some interesting use cases, the rationale behind some of the language's design decisions and things the team write around the code they usually write.&lt;x9/&gt;&lt;x10/&gt; We also accept posts from guest writers, so if you have something awesome you have built with Crystal, &lt;g11&gt;contact us&lt;/g11&gt; and we'll be happy to have you featured on the blog.' link_text="Crystal Blog" url="/blog" icon="chat_bubble_outline" internal_link="true" %} {% include community_row.html title="Chat Room" divId="chat" content="The Gitter room is the official chat room for Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200617T111529Z" creationid="makenowjust" creationdate="20200617T111529Z">
        <seg>気軽に質問してください。あなたのプロジェクトの紹介、ベストプラクティスの質問、どうやってプロジェクトに貢献したらよいか、その他 Crystal に関わることなら何でも OK です。'
  link_text='forum.crystal-lang.org'
  url='https://forum.crystal-lang.org'
  icon='forum' %}

{% include community_row.html
   title='新しいリリースやユースケースの紹介'
   divId='blog'
   content='Crystal 公式ブログでは、新しいリリースの詳細なアナウンス、興味深いユースケース、言語デザインの決定の背景、Crystal の開発チームの普段書いているコードについてなどが見れます。&lt;x6/&gt;&lt;x7/&gt;ゲストからの投稿も受け付けています。もし Crystal で何か驚くものを作った場合は、&lt;g11&gt;私たちに連絡してみて&lt;/g11&gt;ください。あなたのことをブログで取り上げられることを楽しみにしています。'
  link_text='Crystal ブログ'
  url='/blog'
  icon='chat_bubble_outline'
  internal_link='true' %}

{% include community_row.html
   title='チャットルーム (英語)'
   divId='chat'
   content='Gitter が Crystal 公式のチャットルームです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Feel free to ask a question, share your project with others, ask for guidance and best practices, offer your help contributing to a project, or anything else Crystal-related." link_text="forum.crystal-lang.org" url="https://forum.crystal-lang.org" icon="forum" %} {% include community_row.html title="New Releases, Use Cases and more" divId="blog" content='In the official Crystal blog you can find the detailed announcements for new releases, some interesting use cases, the rationale behind some of the language's design decisions and things the team write around the code they usually write.&lt;x9/&gt;&lt;x10/&gt; We also accept posts from guest writers, so if you have something awesome you have built with Crystal, &lt;g11&gt;contact us&lt;/g11&gt; and we'll be happy to have you featured on the blog.' link_text="Crystal Blog" url="/blog" icon="chat_bubble_outline" internal_link="true" %} {% include community_row.html title="Chat Rooms" divId="chat" content="The Gitter room is the official chat room for Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T080709Z" creationid="makenowjust" creationdate="20211107T080709Z">
        <seg>あなたのプロジェクトの紹介、ガイダンスやベストプラクティスに関する質問、プロジェクトへの貢献の募集や、その他 Crystal に関わることであれば何でも気軽に尋ねてください。'
  link_text='forum.crystal-lang.org'
  url='https://forum.crystal-lang.org'
  icon='forum' %}

{% include community_row.html
  title='新しいリリースやユースケースの紹介'
  divId='blog'
  content='Crystal 公式ブログには、新しいリリースの詳細なアナウンス、興味深いユースケース、言語デザインの決定の背景、Crystal の開発チームの普段書いているコードについて、などの記事があります。&lt;x9/&gt;&lt;x10/&gt;ゲストからの投稿も受け付けていて、もし Crystal で何か驚くべきものを作った場合は&lt;g11&gt;私たちに連絡してみて&lt;/g11&gt;ください。あなたのことをブログで取り上げられることを楽しみにしています。'
  link_text='Crystal Blog'
  url='/blog'
  icon='chat_bubble_outline'
  internal_link='true' %}

{% include community_row.html
  title='チャットルーム (英語)'
  divId='chat'
  content='Gitter の部屋が Crystal 公式のチャットルームです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fibers</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T054108Z" creationid="akiji" creationdate="20200428T054040Z">
        <seg>ファイバ（Fiber）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fibers communicate with each other using channels, as in Go or Clojure, without having to turn to shared memory or locks.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221339Z" creationid="makenowjust" creationdate="20200413T221339Z">
        <seg>ファイバー同士は Go や Clojure のようなチャネルを用いて協調します。共有メモリやロックは用いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fibers ready to be executed: for example when you spawn a fiber, it's ready to be executed.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T062959Z" creationid="akiji" creationdate="20200428T062959Z">
        <seg>実行可能なファイバ（例えば，新しく生成されたファイバは実行可能な状態です）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fibers that voluntarily asked to wait: this is done with &lt;g1&gt;Fiber.yield&lt;/g1&gt;, which means "I can continue executing, but I'll give you some time to execute other fibers if you want".</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T150712Z" creationid="akiji" creationdate="20200428T063643Z">
        <seg>自主的に待機しているファイバ（&lt;g1&gt;Fiber.yield&lt;/g1&gt;によって「続けて実行できるけれど、他に実行したいファイバがあれば、そっちを実行してていいよ」と宣言したもの）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fibers, unlike threads, are cooperative.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T062111Z" creationid="akiji" creationdate="20200428T062111Z">
        <seg>ファイバはスレッドと違って協調的に動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fields</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T105914Z" creationid="makenowjust" creationdate="20200510T105914Z">
        <seg>フィールド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>File paths match the namespace of their contents.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011646Z" creationid="hirofumiwakasugi" creationdate="20151010T011629Z">
        <seg>ファイルパスは、そのファイルの内容の名前空間と一致するようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Files are named after the class or namespace they define, with &lt;g1&gt;underscore-case&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T072140Z" creationid="makenowjust" creationdate="20200412T204717Z">
        <seg>ファイル名は、そこで定義されるクラス名や名前空間にしたがって、 &lt;g1&gt;アンダースコア区切り&lt;/g1&gt; で命名します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Files are named after the class or namespace they define, with _underscore-case_.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011806Z" creationid="hirofumiwakasugi" creationdate="20151010T011643Z">
        <seg>ファイル名は、そこで定義されるクラスや名前空間にしたがって、「アンダースコア区切り」で命名します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally a new feature is that dependencies allow you to express intersections like &lt;g1&gt;version: &gt;= 1.0.0, &lt; 2.0&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T141254Z" creationid="makenowjust" creationdate="20200610T141254Z">
        <seg>最後に、依存関係のバージョン指定で &lt;g1&gt;version: &gt;= 1.0.0, &lt; 2.0&lt;/g1&gt; のように複数の指定を交差させられるようになったことを紹介します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, you can omit the &lt;g1&gt;case&lt;/g1&gt;'s value:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093314Z" creationid="makenowjust" creationdate="20200424T093314Z">
        <seg>そして、&lt;g1&gt;case&lt;/g1&gt;の値を部分を省略することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, you can ommit the `case`'s value:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010125Z" creationid="hirofumiwakasugi" creationdate="20151001T010125Z">
        <seg>`case` の値を省略することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Find further information at &lt;x1/&gt;Crystal's snapcraft page&lt;x2/&gt;({{ snapcraft_url }})</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200520T141234Z" creationid="makenowjust" creationdate="20200518T113549Z">
        <seg>より詳しい情報は &lt;x1/&gt;Crystal の snapcraft のページ&lt;x2/&gt;({{ snapcraft_url }})を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First add the signing key:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112411Z" creationid="makenowjust" creationdate="20200518T112411Z">
        <seg>まず、署名用のキーを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First let's make sure to &lt;g1&gt;install the compiler&lt;/g1&gt; correctly so that we may try all the examples listed in this book.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080405Z" creationid="makenowjust" creationdate="20200516T080405Z">
        <seg>はじめに&lt;g1&gt;コンパイラのインストール&lt;/g1&gt;をして、それから以降の例に臨んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First let's make sure to &lt;g1&gt;install the compiler&lt;/g1&gt;https://crystal-lang.org/install/&lt;e2/&gt; correctly so that we may try all the examples listed in this book.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081324Z" creationid="makenowjust" creationdate="20200518T081324Z">
        <seg>はじめに&lt;g1&gt;コンパイラをインストール&lt;/g1&gt;https://ja.crystal-lang.org/install/&lt;e2/&gt;して、それから以降の例に臨んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First let's make sure to &lt;g1&gt;install the compiler&lt;/g1&gt;https://crystal-lang.org/install/&lt;e2/&gt; so that we may try all the examples listed in this book.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100456Z" creationid="makenowjust" creationdate="20210324T100456Z">
        <seg>はじめに、正しく&lt;g1&gt;コンパイラをインストール&lt;/g1&gt;https://ja.crystal-lang.org/install/&lt;e2/&gt;して、それから以降の例に臨んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First of all, huge thanks for all the feedback and early adopters of the new logging module introduced in &lt;g1&gt;0.34.0&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T152656Z" creationid="makenowjust" creationdate="20200610T152656Z">
        <seg>まず初めに、&lt;g1&gt;0.34.0&lt;/g1&gt;で導入した新しいログモジールを早期に試してフィードバックを送ってくださった皆様に感謝いたします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First positional arguments are matched with positional method arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T154622Z" creationid="makenowjust" creationdate="20200501T154622Z">
        <seg>まず、位置指定の引数が対応する位置指定の引数にマッチします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First positional call arguments are matched with positional method parameters.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T091424Z" creationid="makenowjust" creationdate="20210324T091424Z">
        <seg>まず、位置指定の引数が対応する位置指定の仮引数にマッチします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First you have to add the repository to your APT configuration.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T102817Z" creationid="hirofumiwakasugi" creationdate="20150831T052657Z">
        <seg>まずは、公式の Crystal リポジトリを追加するために Apt を設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First you have to add the repository to your YUM configuration.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T071623Z" creationid="hirofumiwakasugi" creationdate="20150831T055100Z">
        <seg>まずは、公式の Crystal リポジトリを追加するために Yum を構成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, note the &lt;g1&gt;self.new&lt;/g1&gt; notation.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T121054Z" creationid="makenowjust" creationdate="20200427T121054Z">
        <seg>まず、&lt;g1&gt;self.new&lt;/g1&gt; と書いていることに注目してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, note the `self.new` notation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060206Z" creationid="hirofumiwakasugi" creationdate="20150904T060206Z">
        <seg>まず、`self.new` と書いていることに注目してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, the program spawns a fiber but doesn't execute it yet.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T081036Z" creationid="akiji" creationdate="20200428T081036Z">
        <seg>まず、プログラムはファイバを生成しますが、まだそのファイバは実行されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fixing edge cases, bugs and even a considerable refactor in &lt;g1&gt;#9208&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/9208&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T132229Z" creationid="makenowjust" creationdate="20200610T132035Z">
        <seg>エッジケースの修正や、そこそこのリファクタリングが&lt;g1&gt;#9208&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/9208&lt;e2/&gt;でされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Flag keywords must be the first word in their respective line and must be in all caps.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215234Z" creationid="makenowjust" creationdate="20200412T214613Z">
        <seg>フラグ付けのキーワードはそれぞれの行の最初の単語であり、かつすべて大文字でなければいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Flagging Classes, Modules, and Methods</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214256Z" creationid="makenowjust" creationdate="20200412T214256Z">
        <seg>クラス、モジュール、そしてメソッドに対するフラグ付け</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Flags</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120254Z" creationid="makenowjust" creationdate="20200510T120254Z">
        <seg>Flags</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Flags enums</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182120Z" creationid="makenowjust" creationdate="20200505T182120Z">
        <seg>フラグ列挙型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Float64 |</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071434Z" creationid="hirofumiwakasugi" creationdate="20150919T071434Z">
        <seg>Float64 |</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Floats</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T190701Z" creationid="makenowjust" creationdate="20200419T185611Z">
        <seg>浮動小数点数 (Float)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Follow it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T162313Z" creationid="makenowjust" creationdate="20200527T162313Z">
        <seg>これに従いましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Follow these conventions so your code will be more accessible to other developers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T141816Z" creationid="hirofumiwakasugi" creationdate="20151009T141444Z">
        <seg>他の開発者が利用しやすいように、以下の規約に沿ってコードを書くようにしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Follow these tips to get the best out of your programs, both in speed and memory terms.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T083404Z" creationid="akiji" creationdate="20200430T083404Z">
        <seg>これらのTipsに従って、あなたのプログラムを速度とメモリ使用の両面で最高のものにしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Font</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084901Z" creationid="makenowjust" creationdate="20200516T084901Z">
        <seg>フォント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Foo.new
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041701Z" creationid="hirofumiwakasugi" creationdate="20150910T041701Z">
        <seg>Foo.new
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Foo.new.foo</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T112015Z" creationid="makenowjust" creationdate="20200502T112015Z">
        <seg>Foo.new.foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Foo.new.yield_with_self { emphasize(10) } #=&gt; "***10***"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T020425Z" creationid="hirofumiwakasugi" creationdate="20151001T020425Z">
        <seg>Foo.new.yield_with_self { emphasize(10) } #=&gt; "***10***"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Foo.new.yield_with_self { one } # =&gt; 1
Foo.new.yield_normally { one }  # =&gt; "one"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030945Z" creationid="hirofumiwakasugi" creationdate="20150916T030945Z">
        <seg>Foo.new.yield_with_self { one } # =&gt; 1
Foo.new.yield_normally { one }  # =&gt; "one"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Foo::Bar # Error
end

Foo::Bar # Error</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T110035Z" creationid="makenowjust" creationdate="20200502T110035Z">
        <seg>Foo::Bar # Error
end

Foo::Bar # Error</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For &lt;g1&gt;Reference&lt;/g1&gt; types, the size is the same as the size of a pointer:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T015434Z" creationid="makenowjust" creationdate="20200511T015434Z">
        <seg>&lt;g1&gt;Reference&lt;/g1&gt; 型である場合は、そのサイズはポインタのサイズと同じになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For &lt;g1&gt;Reference&lt;/g1&gt;http://crystal-lang.org/api/Reference.html&lt;e2/&gt; types, the size is the same as the size of a pointer:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T091410Z" creationid="makenowjust" creationdate="20200518T091410Z">
        <seg>&lt;g1&gt;Reference&lt;/g1&gt;http://crystal-lang.org/api/Reference.html&lt;e2/&gt; 型の場合は、そのサイズはポインタのサイズと等しくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For &lt;g1&gt;Reference&lt;/g1&gt;https://crystal-lang.org/api/latest/Reference.html&lt;e2/&gt; types, the size is the same as the size of a pointer:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T075518Z" creationid="makenowjust" creationdate="20210324T075518Z">
        <seg>&lt;g1&gt;Reference&lt;/g1&gt;https://crystal-lang.org/api/latest/Reference.html&lt;e2/&gt; 型の場合は、そのサイズはポインタのサイズと等しくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For &lt;g1&gt;Tuple&lt;/g1&gt; arguments you can take advantage of auto-splatting and do not need parentheses:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T191730Z" creationid="makenowjust" creationdate="20200505T191730Z">
        <seg>また、&lt;g1&gt;Tuple&lt;/g1&gt; の引数であれば、括弧が無くても自動で展開されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For &lt;g1&gt;Tuple&lt;/g1&gt;http://crystal-lang.org/api/Tuple.html&lt;e2/&gt; arguments you can take advantage of auto-splatting and do not need parentheses:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T083202Z" creationid="makenowjust" creationdate="20200518T083202Z">
        <seg>また、引数が &lt;g1&gt;Tuple&lt;/g1&gt;http://crystal-lang.org/api/Tuple.html&lt;e2/&gt; のみであれば、括弧が無くても自動で展開されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For &lt;g1&gt;Tuple&lt;/g1&gt;https://crystal-lang.org/api/latest/Tuple.html&lt;e2/&gt; parameters you can take advantage of auto-splatting and do not need parentheses:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094919Z" creationid="makenowjust" creationdate="20210324T094919Z">
        <seg>また、引数が &lt;g1&gt;Tuple&lt;/g1&gt;https://crystal-lang.org/api/latest/Tuple.html&lt;e2/&gt;  のみであれば、括弧がなくても自動で展開されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For BSD users, we added support for DragonFly(BSD) in &lt;g1&gt;#9178&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/9178&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T035618Z" creationid="makenowjust" creationdate="20200611T031715Z">
        <seg>BSD のユーザーヘ、DragonFly(BSD) のサポートを&lt;g1&gt;#9178&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/9178&lt;e2/&gt;で追加しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For Windows users, well, lots of stuff.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T031854Z" creationid="makenowjust" creationdate="20200611T031854Z">
        <seg>Windows ユーザーへはたくさんのお知らせがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For [Reference](http://crystal-lang.org/api/Reference.html) types, the size is the same as the size of a pointer:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035907Z" creationid="hirofumiwakasugi" creationdate="20150906T035438Z">
        <seg>[Reference](http://crystal-lang.org/api/Reference.html) 型である場合は、そのサイズはポインタのサイズと同じになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a comprehensive list of changes in this shards version you can check its &lt;g1&gt;changelog&lt;/g1&gt;https://github.com/crystal-lang/shards/releases/tag/v0.11.0&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T141321Z" creationid="makenowjust" creationdate="20200610T141321Z">
        <seg>このバージョンでの shards の完全な変更のリストは&lt;g1&gt;チェンジログ&lt;/g1&gt;https://github.com/crystal-lang/shards/releases/tag/v0.11.0&lt;e2/&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a generic type like &lt;g1&gt;Set&lt;/g1&gt;, the generic type &lt;g2&gt;T&lt;/g2&gt; is inferred from the types of the elements in the same way as with the array literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T174630Z" creationid="makenowjust" creationdate="20200420T173722Z">
        <seg>ジェネリック型である&lt;g1&gt;Set&lt;/g1&gt;に対しては、ジェネリック型 &lt;g2&gt;T&lt;/g2&gt; が配列リテラルと同様の方法で要素の型から推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a generic type, the generic types are inferred from the types of the keys and values in the same way as with the hash literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180533Z" creationid="makenowjust" creationdate="20200420T180533Z">
        <seg>ジェネリック型の場合、型引数はハッシュリテラルと同様の方法でキーと値の型から推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a given instance/class variable, when a rule can be applied and a type can be guessed, the type is added to a set.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T133852Z" creationid="makenowjust" creationdate="20200427T133812Z">
        <seg>あるインスタンス変数・クラス変数について、その規則が適用されて型が予想できたとき、その型は一旦記憶されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a non-generic type like &lt;g1&gt;HTTP::Headers&lt;/g1&gt;, this is equivalent to:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180255Z" creationid="makenowjust" creationdate="20200420T180255Z">
        <seg>ジェネリック型でない型&lt;g1&gt;HTTP::Headers&lt;/g1&gt;に対しては、上の例は以下と等しいものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a non-generic type like &lt;g1&gt;IO::Memory&lt;/g1&gt;, this is equivalent to:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173623Z" creationid="makenowjust" creationdate="20200420T173623Z">
        <seg>ジェネリック型ではない型&lt;g1&gt;IO::Memory&lt;/g1&gt;に対しては、上の例は以下と等しいものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For an unquoted identifier the same naming rules apply as for methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171342Z" creationid="makenowjust" creationdate="20200420T171342Z">
        <seg>ダブルクォートで囲まれていない識別子の場合は、メソッド名として受け入れられるものと同じ規則の名前が受け入れられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For both Linux and OS X, you can detect most hotspots by running your program within a debugger then hitting "ctrl+c" to interrupt it occasionally and issuing a gdb &lt;g5&gt;backtrace&lt;/g5&gt; command to look for patterns in backtraces (or use the &lt;g6&gt;gdb poor man's profiler&lt;/g6&gt;https://poormansprofiler.org/&lt;e12/&gt; which does the same thing for you, or OS X &lt;g7&gt;sample&lt;/g7&gt; command.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T073108Z" creationid="makenowjust" creationdate="20201213T073108Z">
        <seg>Linux と macOS のどちらにしても、デバッガーでプログラムを実行している最中に "ctrl+c" で割り込んで、 gdb の  &lt;g5&gt;backtrace&lt;/g5&gt; コマンドを使ってもっともよく出現するところがホットスポットだと考えられます。(もしくは、 &lt;g6&gt;gdb poor man's profiler&lt;/g6&gt;https://poormansprofiler.org/&lt;e12/&gt; を使って同様のことをしたり、macOS では &lt;g7&gt;sample&lt;/g7&gt; コマンドが使えます)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For building Crystal yourself, the required installation is available in the ports tree.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111247Z" creationid="makenowjust" creationdate="20200518T111247Z">
        <seg>Crystal を自身でビルドする場合は、ports ツリーによるインストールが有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For comparing an expression against a &lt;g1&gt;case&lt;/g1&gt;'s value the &lt;g2&gt;case equality operator&lt;/g2&gt; &lt;g3&gt;===&lt;/g3&gt; is used.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T091706Z" creationid="makenowjust" creationdate="20200424T091002Z">
        <seg>&lt;g1&gt;case&lt;/g1&gt;において、対象の値と条件式は&lt;g2&gt;case 等価性演算子&lt;/g2&gt; (&lt;g3&gt;===&lt;/g3&gt;) によって比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For easy setup just run in your command line:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T062024Z" creationid="hirofumiwakasugi" creationdate="20150831T052806Z">
        <seg>簡単にその設定を行うためのスクリプトを用意していますので、以下のコマンドをそのまま実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For everything I/O related there's an event loop.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T065005Z" creationid="akiji" creationdate="20200428T054702Z">
        <seg>I/Oに関係するものであればなんでも、イベントループのお世話になっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T020139Z" creationid="hirofumiwakasugi" creationdate="20150902T020139Z">
        <seg>例をあげます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example &lt;g11&gt;TypeNode.all_subclasses&lt;/g11&gt; or &lt;g12&gt;TypeNode.methods&lt;/g12&gt;, respectively.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T112156Z" creationid="makenowjust" creationdate="20200510T112156Z">
        <seg>例えば &lt;g11&gt;TypeNode.all_subclasses&lt;/g11&gt; もしくは &lt;g12&gt;TypeNode.methods&lt;/g12&gt; といったメソッドがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example &lt;g1&gt;Hash#keys&lt;/g1&gt; will return a new array with the keys each time it's invoked.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T024353Z" creationid="akiji" creationdate="20200430T131935Z">
        <seg>例えば、&lt;g1&gt;Hash#keys&lt;/g1&gt; は実行されるたびにキーを含む新しい配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example &lt;g1&gt;a + b&lt;/g1&gt;
is semantically equivalent to &lt;g2&gt;a.+(b)&lt;/g2&gt;, a call to method &lt;g3&gt;+&lt;/g3&gt; on &lt;g4&gt;a&lt;/g4&gt; with
argument &lt;g5&gt;b&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T081033Z" creationid="makenowjust" creationdate="20200502T081033Z">
        <seg>例えば &lt;g1&gt;a + b&lt;/g1&gt; は意味的には &lt;g2&gt;a.+(b)&lt;/g2&gt; (&lt;g4&gt;a&lt;/g4&gt; をレシーバに、&lt;g5&gt;b&lt;/g5&gt; を引数にして &lt;g3&gt;+&lt;/g3&gt; メソッドを呼び出す) と同じものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example &lt;g2&gt;#from_json&lt;/g2&gt;,  &lt;g3&gt;#to_io&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T072004Z" creationid="makenowjust" creationdate="20200412T203943Z">
        <seg>例えば、&lt;g2&gt;#from_json&lt;/g2&gt; や &lt;g3&gt;#to_io&lt;/g3&gt; などです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example `#from_json`,  `#to_io`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010913Z" creationid="hirofumiwakasugi" creationdate="20151010T010913Z">
        <seg>例えば、`#from_json` や `#to_io` などです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example if there's I/O to be waited on, a fiber will tell the scheduler "Look, I have to wait for this I/O to be available, you continue executing other fibers and come back to me when that I/O is ready".</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T102850Z" creationid="akiji" creationdate="20200428T062404Z">
        <seg>例えばI/O による待ちが発生していた場合、ファイバはランタイムスケジューラに対して「おーい，自分はI/Oが使えるようになるまで待たないといけないから、他のファイバを実行していいよ。I/Oの準備ができたら帰ってきてね」と告げます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example in the standard library
the float division operator &lt;g4&gt;/&lt;/g4&gt; on integer types always returns &lt;g5&gt;Float64&lt;/g5&gt;,
because the quotient must not be limited to the value range of integers.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085736Z" creationid="makenowjust" creationdate="20200502T084402Z">
        <seg>例えば標準ライブラリには、浮動小数点数の割り算をする演算子 &lt;g4&gt;/&lt;/g4&gt; は整数型に対しても常に &lt;g5&gt;Float64&lt;/g5&gt; を返します。なぜなら、除算の結果は整数の範囲になるとは限らないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example on a Linux it could say "x86_64-unknown-linux-gnu".</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T045311Z" creationid="hirofumiwakasugi" creationdate="20150909T045258Z">
        <seg>例えば、Linux であれば "x86_64-unknown-linux-gnu" となるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example the very well known `size_t` type is defined like this in Crystal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043749Z" creationid="hirofumiwakasugi" creationdate="20150908T043727Z">
        <seg>例えば、`size_t` というよく知られた型は、Crystal では以下のように定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <note>BufferdIOはクラスではなくモジュールに変更されたため、ここの記述は要修正。
https://github.com/manastech/crystal/issues/1453</note>
      <tuv lang="EN-US">
        <seg>For example there's the standard library's `BufferedIO(T)`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T060855Z" creationid="hirofumiwakasugi" creationdate="20150912T073316Z">
        <seg>例えば、標準ライブラリに `BufferedIO(T)` というものがあります。 (訳注: `BufferedIO(T)` はクラスではなくモジュールに変更されたので、これ以降の内容は現在の Crystal には当てはまらないため翻訳していません。[An example code in the docs' "Generics" doesn't work](https://github.com/manastech/crystal/issues/1453))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;g1&gt;HTTP::WebSocket&lt;/g1&gt; is defined in &lt;g2&gt;src/http/web_socket.cr&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T072147Z" creationid="makenowjust" creationdate="20200412T204823Z">
        <seg>例えば、&lt;g1&gt;HTTP::WebSocket&lt;/g1&gt; は &lt;g2&gt;src/http/web_socket.cr&lt;/g2&gt; で定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;g2&gt;HTTP&lt;/g2&gt;, and &lt;g3&gt;LibXML&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T071955Z" creationid="makenowjust" creationdate="20200412T203904Z">
        <seg>例えば、&lt;g2&gt;HTTP&lt;/g2&gt; や &lt;g3&gt;LibXML&lt;/g3&gt; などです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;g6&gt;&lt;g7&gt;Class&lt;/g7&gt;&lt;/g6&gt; defines case equality as when an object is an instance of that class, &lt;g8&gt;&lt;g9&gt;Regex&lt;/g9&gt;&lt;/g8&gt; as when the value matches the regular expression and &lt;g10&gt;&lt;g11&gt;Range&lt;/g11&gt;&lt;/g10&gt; as when the value is included in that range.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T091406Z" creationid="makenowjust" creationdate="20200424T091406Z">
        <seg>例えば、&lt;g6&gt;&lt;g7&gt;Class&lt;/g7&gt;&lt;/g6&gt; 型では case 等価性が「比較対象のオブジェクトがそのクラスのインスタンスかどうか」として定義されていたり、&lt;g8&gt;&lt;g9&gt;Regex&lt;/g9&gt;&lt;/g8&gt; では「比較対象の文字列にマッチするかどうか」で、&lt;g10&gt;&lt;g11&gt;Range&lt;/g11&gt;&lt;/g10&gt;では「比較対象の値が含まれるかどうか」で定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;g6&gt;&lt;g7&gt;Class&lt;/g7&gt;&lt;/g6&gt;https://crystal-lang.org/api/Class.html#%3D%3D%3D%28other%29-instance-method&lt;e13/&gt; defines case equality as when an object is an instance of that class, &lt;g8&gt;&lt;g9&gt;Regex&lt;/g9&gt;&lt;/g8&gt;https://crystal-lang.org/api/Regex.html#%3D%3D%3D%28other%3AString%29-instance-method&lt;e14/&gt; as when the value matches the regular expression and &lt;g10&gt;&lt;g11&gt;Range&lt;/g11&gt;&lt;/g10&gt;https://crystal-lang.org/api/Range.html#%3D%3D%3D%28value%29-instance-method&lt;e15/&gt; as when the value is included in that range.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T083825Z" creationid="makenowjust" creationdate="20200518T083825Z">
        <seg>例えば、&lt;g6&gt;&lt;g7&gt;Class&lt;/g7&gt;&lt;/g6&gt;https://crystal-lang.org/api/Class.html#%3D%3D%3D%28other%29-instance-method&lt;e13/&gt; 型では「オブジェクトがそのクラスのインスタンスがどうか」として定義されていたり、&lt;g8&gt;&lt;g9&gt;Regex&lt;/g9&gt;&lt;/g8&gt;https://crystal-lang.org/api/Regex.html#%3D%3D%3D%28other%3AString%29-instance-method&lt;e14/&gt; では「比較対象の文字列にマッチするかどうか」で、&lt;g10&gt;&lt;g11&gt;Range&lt;/g11&gt;&lt;/g10&gt;https://crystal-lang.org/api/Range.html#%3D%3D%3D%28value%29-instance-method&lt;e15/&gt; では「比較対等の値が自身に含まれるかどうか」で定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;g6&gt;&lt;g7&gt;Class&lt;/g7&gt;&lt;/g6&gt;https://crystal-lang.org/api/latest/Class.html#%3D%3D%3D%28other%29-instance-method&lt;e13/&gt; defines case equality as when an object is an instance of that class, &lt;g8&gt;&lt;g9&gt;Regex&lt;/g9&gt;&lt;/g8&gt;https://crystal-lang.org/api/latest/Regex.html#%3D%3D%3D%28other%3AString%29-instance-method&lt;e14/&gt; as when the value matches the regular expression and &lt;g10&gt;&lt;g11&gt;Range&lt;/g11&gt;&lt;/g10&gt;https://crystal-lang.org/api/latest/Range.html#%3D%3D%3D%28value%29-instance-method&lt;e15/&gt; as when the value is included in that range.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T101100Z" creationid="makenowjust" creationdate="20210324T101100Z">
        <seg>例えば &lt;g6&gt;&lt;g7&gt;Class&lt;/g7&gt;&lt;/g6&gt;https://crystal-lang.org/api/latest/Class.html#%3D%3D%3D%28other%29-instance-method&lt;e13/&gt; 型では「オブジェクトがそのクラスのインスタンスかどうか」として定義されていたり、&lt;g8&gt;&lt;g9&gt;Regex&lt;/g9&gt;&lt;/g8&gt;https://crystal-lang.org/api/latest/Regex.html#%3D%3D%3D%28other%3AString%29-instance-method&lt;e14/&gt; では「比較対象の文字列にマッチするか」で、&lt;g10&gt;&lt;g11&gt;Range&lt;/g11&gt;&lt;/g10&gt;https://crystal-lang.org/api/latest/Range.html#%3D%3D%3D%28value%29-instance-method&lt;e15/&gt; では「比較対象の値が自身に含まれるかどうか」で定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, `HTTP::WebSocket` is defined in `src/http/web_socket.cr`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011824Z" creationid="hirofumiwakasugi" creationdate="20151010T011824Z">
        <seg>例えば、`HTTP::WebSocket` は `src/http/web_socket.cr` で定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, `HTTP`, and `LibXML`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010844Z" creationid="hirofumiwakasugi" creationdate="20151010T010702Z">
        <seg>例えば、`HTTP` や `LibXML` などです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, a block which is given an object to use as the default receiver by being invoked with &lt;g1&gt;with ... yield&lt;/g1&gt; can access macros defined within that object's ancestors chain:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T214431Z" creationid="makenowjust" creationdate="20200509T214431Z">
        <seg>例えば、ブロックが与えられていて、&lt;g1&gt;with ... yield&lt;/g1&gt; によってデフォルトのレシーバが設定されているときには、そのオブジェクトの継承チェーンの中で定義されているマクロにアクセスすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, a block which is given an object to use as the default receiver by being invoked with `with ... yield` can access macros defined within that object's ancestors chain:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T020339Z" creationid="hirofumiwakasugi" creationdate="20151001T015927Z">
        <seg>例えば、ブロックが与えられていて、`with ... yield` によってデフォルトのレシーバがあるオブジェクトに設定されているときには、そのオブジェクトの継承チェーンの中で定義されているマクロにアクセスすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, an API's method can specify a &lt;g2&gt;type restriction&lt;/g2&gt; using an enum type:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T183053Z" creationid="makenowjust" creationdate="20200505T183053Z">
        <seg>例えば、列挙型を API のメソッドの&lt;g2&gt;型制約&lt;/g2&gt;に指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, an API's method can specify a [type restriction](type_restrictions.html) using an enum type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011956Z" creationid="hirofumiwakasugi" creationdate="20150916T011820Z">
        <seg>例えば、Enum 型を利用して API のメソッド[型制約](type_restrictions.html)を設定することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, consider the following</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T104628Z" creationid="makenowjust" creationdate="20200504T104628Z">
        <seg>例えば、次のような例を考えてみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if assigning an &lt;g1&gt;if&lt;/g1&gt; expression, type will be inferred from the &lt;g2&gt;then&lt;/g2&gt; and &lt;g3&gt;else&lt;/g3&gt; branches:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T143439Z" creationid="makenowjust" creationdate="20200427T143436Z">
        <seg>例えば、&lt;g1&gt;if&lt;/g1&gt; 式の&lt;g2&gt;then&lt;/g2&gt; 節と &lt;g3&gt;else&lt;/g3&gt; 節で型推論された場合を考えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if static libraries are put in &lt;g2&gt;build/libs&lt;/g2&gt;, setting the environment variable accordingly will tell the compiler to look for libraries there.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T171230Z" creationid="makenowjust" creationdate="20200419T171230Z">
        <seg>例えば静的ライブラリが&lt;g2&gt;build/libs&lt;/g2&gt;に置かれていたとすると、環境変数をそれに応じて設定することでコンパイラがそこにライブラリを探索しに行くように伝えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if we define a class that has a &lt;g1&gt;+&lt;/g1&gt; method but isn't a &lt;g2&gt;Number&lt;/g2&gt;, we can use the &lt;g3&gt;add&lt;/g3&gt; method that doesn't have type restrictions, but we can't use the &lt;g4&gt;add&lt;/g4&gt; method that has restrictions.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T160535Z" creationid="makenowjust" creationdate="20200429T160535Z">
        <seg>例えば、&lt;g2&gt;Number&lt;/g2&gt; ではないクラスが &lt;g1&gt;+&lt;/g1&gt; メソッドを持っている場合を考えてみてください。もし &lt;g3&gt;add&lt;/g3&gt; というメソッドが型制約を持たない場合、そのクラスを渡すことができますがが、&lt;g4&gt;add&lt;/g4&gt; メソッドが型制約を持っている場合はそれができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if we define a class that has a `+` method but isn't a `Number`, we can use the `add` method that doesn't have type restrictions, but we can't use the `add` method that has restrictions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T014211Z" creationid="hirofumiwakasugi" creationdate="20150908T013756Z">
        <seg>例えば、`Number` ではないクラスが `+` メソッドを持っている場合を考えてみてください。もし `add` というメソッドが型制約を持たない場合、それらのクラスを利用することができますが、型制約がある場合には利用することができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if we take the above code and add this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T055638Z" creationid="hirofumiwakasugi" creationdate="20150912T055534Z">
        <seg>例えば、上記のコードに以下を追加したとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if you are on a Mac, the `uname -m -s` command says "Darwin x86_64".</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T045102Z" creationid="hirofumiwakasugi" creationdate="20150909T045017Z">
        <seg>例えば Mac の場合であれば、`uname -m -s` コマンドの実行結果は "Darwin x86_64" です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if you put &lt;g1&gt;require "foo"&lt;/g1&gt; in &lt;g2&gt;project.cr&lt;/g2&gt; and run &lt;g3&gt;crystal src/project.cr&lt;/g3&gt; in the project's root directory, it will find &lt;g4&gt;foo&lt;/g4&gt; in &lt;g5&gt;lib/foo/foo.cr&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T090405Z" creationid="makenowjust" creationdate="20200427T090405Z">
        <seg>このとき &lt;g2&gt;project.cr&lt;/g2&gt; に &lt;g1&gt;require "foo"&lt;/g1&gt; を加えて &lt;g3&gt;crystal src/project.cr&lt;/g3&gt; をプロジェクトのルートディレクトリで実行すると、コンパイラは &lt;g4&gt;foo&lt;/g4&gt; として &lt;g5&gt;lib/foo/foo.cr&lt;/g5&gt; を発見します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, invoking &lt;g1&gt;&lt;g2&gt;ASTNode#id&lt;/g2&gt;&lt;/g1&gt; in the above example solves the problem:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T214906Z" creationid="makenowjust" creationdate="20200509T214906Z">
        <seg>例えば、上の例では &lt;g1&gt;&lt;g2&gt;ASTNode#id&lt;/g2&gt;&lt;/g1&gt; を実行することで問題を解決できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, invoking &lt;g1&gt;&lt;g2&gt;ASTNode#id&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/Crystal/Macros/ASTNode.html#id%3AMacroId-instance-method&lt;e3/&gt; in the above example solves the problem:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T090243Z" creationid="makenowjust" creationdate="20200518T090243Z">
        <seg>例えば、上の例では &lt;g1&gt;&lt;g2&gt;ASTNode#id&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/Crystal/Macros/ASTNode.html#id%3AMacroId-instance-method&lt;e3/&gt; を呼び出すことで問題を解決できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, invoking &lt;g1&gt;&lt;g2&gt;ASTNode#id&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Crystal/Macros/ASTNode.html#id%3AMacroId-instance-method&lt;e3/&gt; in the above example solves the problem:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T080310Z" creationid="makenowjust" creationdate="20210324T080310Z">
        <seg>例えば、上の例では &lt;g1&gt;&lt;g2&gt;ASTNode#id&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Crystal/Macros/ASTNode.html#id%3AMacroId-instance-method&lt;e3/&gt; を呼びa出すことで問題を解決できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, invoking `ASTNode#id` in the above example solves the problem:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035808Z" creationid="hirofumiwakasugi" creationdate="20151001T035808Z">
        <seg>例えば、上記の例では、`ASTNode#id` を実行することで問題を解決できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, reassigning a variable with a different expression makes it have that expression’s type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053053Z" creationid="hirofumiwakasugi" creationdate="20150902T052132Z">
        <seg>例えば、次のようにローカル変数に別の式を再代入すると、その新しい式の型の変数となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, suppose a C function that invokes a callback at every tick, passing that tick:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090122Z" creationid="makenowjust" creationdate="20200512T090122Z">
        <seg>例として、一定の周期でコールバックを呼び出すような C の関数を考えてみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, suppose a ficticious library:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T052141Z" creationid="hirofumiwakasugi" creationdate="20151008T052141Z">
        <seg>例えば、以下のようなライブラリがあるものと考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, suppose a fictitious library:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T092513Z" creationid="makenowjust" creationdate="20200512T091431Z">
        <seg>例えば、以下のようなライブラリを考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the &lt;g1&gt;String&lt;/g1&gt; class implements &lt;g2&gt;to_unsafe&lt;/g2&gt; to return &lt;g3&gt;UInt8*&lt;/g3&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T082505Z" creationid="makenowjust" creationdate="20200512T082505Z">
        <seg>例えば、&lt;g1&gt;String&lt;/g1&gt; クラスが &lt;g3&gt;UInt8*&lt;/g3&gt; を返す &lt;g2&gt;to_unsafe&lt;/g2&gt; を実装している場合を考えてみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the `String` class implements `to_unsafe` to return `UInt8*`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T045122Z" creationid="hirofumiwakasugi" creationdate="20151005T045122Z">
        <seg>例えば、`String` クラスが `UInt8*` を返す `to_unsafe` を実装している場合を考えてみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the above &lt;g1&gt;Point&lt;/g1&gt; struct occupies 8 bytes.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T175233Z" creationid="makenowjust" creationdate="20200505T175056Z">
        <seg>例えば、次の &lt;g1&gt;Point&lt;/g1&gt; という構造体は8バイトの大きさがあるとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the following won't work:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T105252Z" creationid="makenowjust" creationdate="20200504T105252Z">
        <seg>例えば、次は動作しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the standard library includes a &lt;g1&gt;times&lt;/g1&gt; method on integers, allowing you to write:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T192051Z" creationid="makenowjust" creationdate="20200505T192051Z">
        <seg>例えば、標準ライブラリには &lt;g1&gt;times&lt;/g1&gt; という整数型に対するメソッドがあり、それを使うと以下のように書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the standard library includes a `times` method on integers, allowing you to write:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160119T161541Z" creationid="hirofumiwakasugi" creationdate="20150916T031807Z">
        <seg>例えば、標準ライブラリには `times` という整数のメソッドがあり、それを使うと以下のように書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the very well known &lt;g1&gt;size_t&lt;/g1&gt; type is defined like this in Crystal:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T023242Z" creationid="makenowjust" creationdate="20200511T023242Z">
        <seg>例えば、&lt;g1&gt;size_t&lt;/g1&gt; というよく知られた型は、Crystal では以下のように定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, this works as expected:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T080837Z" creationid="akiji" creationdate="20200428T080837Z">
        <seg>例えば、以下のコードは想定した通りに動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, using &lt;g5&gt;each_char&lt;/g5&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T132813Z" creationid="akiji" creationdate="20200430T132813Z">
        <seg>&lt;g5&gt;each_char&lt;/g5&gt;を使用した例はこうなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, we can define four different &lt;g1&gt;become_older&lt;/g1&gt; methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T150506Z" creationid="makenowjust" creationdate="20200429T150506Z">
        <seg>例えば、&lt;g1&gt;become_older&lt;/g1&gt; であれば、以下の4つの異なるメソッドを定義することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, we can define four different `become_older` methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071421Z" creationid="hirofumiwakasugi" creationdate="20150906T071338Z">
        <seg>例えば、`become_older` であれば、以下の4つの異なるメソッドを定義することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, we may run &lt;g1&gt;crystal -v&lt;/g1&gt; and Crystal will display:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172031Z" creationid="makenowjust" creationdate="20200413T172031Z">
        <seg>例えば&lt;g1&gt;crystal -v&lt;/g1&gt;を実行すると、Crystal は次のように表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, when assigning to a same variable inside different &lt;g1&gt;if&lt;/g1&gt; branches:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T143709Z" creationid="makenowjust" creationdate="20200429T143658Z">
        <seg>例えば、異なる&lt;g1&gt;if&lt;/g1&gt;の分岐節で同じ変数に代入したときを考えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T150831Z" creationid="hirofumiwakasugi" creationdate="20150901T072338Z">
        <seg>例をあげます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example: &lt;g2&gt;@[Link(ldflags: "-lpcre")]&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T030712Z" creationid="makenowjust" creationdate="20200511T030709Z">
        <seg>例: &lt;g2&gt;@[Link(ldflags: "-lpcre")]&lt;/g2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example: &lt;g3&gt;LibC&lt;/g3&gt;, &lt;g4&gt;LibEvent2&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T072023Z" creationid="makenowjust" creationdate="20200412T204151Z">
        <seg>例えば、&lt;g3&gt;LibC&lt;/g3&gt; や &lt;g4&gt;LibEvent2&lt;/g4&gt; などです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example: `@[Link(ldflags: "-lpcre")]`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T143202Z" creationid="hirofumiwakasugi" creationdate="20151003T143202Z">
        <seg>例: `@[Link(ldflags: "-lpcre")]`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example: `LibC`, `LibEvent2`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011023Z" creationid="hirofumiwakasugi" creationdate="20151010T011023Z">
        <seg>例えば、`LibC` や `LibEvent2` などです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For instance:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140125Z" creationid="hirofumiwakasugi" creationdate="20151010T140125Z">
        <seg>例えば、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For integers and floats you can use the various &lt;g2&gt;to_...&lt;/g2&gt; methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T031608Z" creationid="makenowjust" creationdate="20200511T031608Z">
        <seg>整数と浮動小数点数に関しては&lt;g2&gt;to_...&lt;/g2&gt; メソッドが利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For integers and floats you can use the various `to_...` methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T041211Z" creationid="hirofumiwakasugi" creationdate="20151005T041211Z">
        <seg>整数と浮動小数点数に関しては、様々な `to_...` メソッドが利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For macOS users, we fixed some compatibility issues with 10.15 (Catalina) in &lt;g1&gt;#9296&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/9296&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T031719Z" creationid="makenowjust" creationdate="20200611T031655Z">
        <seg>macOS ユーザーへ、10.15 (Catalina) で起こるいくつかの互換性の問題を&lt;g1&gt;#9296&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/9296&lt;e2/&gt;で修正しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more details see &lt;g4&gt;Using the compiler – Creating documentation&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T211548Z" creationid="makenowjust" creationdate="20200412T211548Z">
        <seg>より詳細には&lt;g4&gt;コンパイラの利用 - ドキュメントの生成&lt;/g4&gt;を閲覧してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information on getter and setter macros, see the standard library documentation for &lt;g1&gt;Object#getter&lt;/g1&gt;, &lt;g2&gt;Object#setter&lt;/g2&gt;, and &lt;g3&gt;Object#property&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T124621Z" creationid="makenowjust" creationdate="20200427T124621Z">
        <seg>ゲッターとセッターのマクロの詳細は、標準ライブラリの&lt;g1&gt;Object#getter&lt;/g1&gt;, &lt;g2&gt;Object#setter&lt;/g2&gt;と&lt;g3&gt;Object#property&lt;/g3&gt;の辺りを参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information on getter and setter macros, see the standard library documentation for &lt;g1&gt;Object#getter&lt;/g1&gt;https://crystal-lang.org/api/latest/Object.html#getter%28%2Anames%2C%26block%29-macro&lt;e4/&gt;, &lt;g2&gt;Object#setter&lt;/g2&gt;https://crystal-lang.org/api/latest/Object.html#setter%28%2Anames%29-macro&lt;e5/&gt;, and &lt;g3&gt;Object#property&lt;/g3&gt;https://crystal-lang.org/api/latest/Object.html#property%28%2Anames%2C%26block%29-macro&lt;e6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T090804Z" creationid="makenowjust" creationdate="20200518T090804Z">
        <seg>ゲッターとセッターのマクロの詳細は、標準ライブラリの &lt;g1&gt;Object#getter&lt;/g1&gt;https://crystal-lang.org/api/latest/Object.html#getter%28%2Anames%2C%26block%29-macro&lt;e4/&gt; や &lt;g2&gt;Object#setter&lt;/g2&gt;https://crystal-lang.org/api/latest/Object.html#setter%28%2Anames%29-macro&lt;e5/&gt;、&lt;g3&gt;Object#property&lt;/g3&gt;https://crystal-lang.org/api/latest/Object.html#property%28%2Anames%2C%26block%29-macro&lt;e6/&gt; の辺りを参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For musl users, we fixed some weird segfaults in &lt;g1&gt;#9238&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/9238&lt;e3/&gt; and fixed some empty backtraces &lt;g2&gt;#9267&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9267&lt;e4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T031839Z" creationid="makenowjust" creationdate="20200611T031839Z">
        <seg>musl ユーザーへ、奇妙な segfaults が&lt;g1&gt;#9238&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/9238&lt;e3/&gt;で、バックトレースが空になる問題が&lt;g2&gt;#9267&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9267&lt;e4/&gt;で修正されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For nested procs (and any type, in general), you can use parentheses:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011652Z" creationid="hirofumiwakasugi" creationdate="20151009T011652Z">
        <seg>ネストされた Proc に対しては (および実際にはどんな型であっても) カッコを利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For now, the annotation is used in the documentation generator tool.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T145537Z" creationid="makenowjust" creationdate="20200610T145529Z">
        <seg>今のところ、アノテーションはドキュメントジェネレータで利用されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For our second application, we will add a &lt;g1&gt;text decoration&lt;/g1&gt; (&lt;g2&gt;blink&lt;/g2&gt;in this case):</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T184435Z" creationid="makenowjust" creationdate="20200413T184435Z">
        <seg>ユーザーの入力を受け取る方のアプリケーションに、今回は&lt;g2&gt;blink&lt;/g2&gt; (点滅)という&lt;g1&gt;テキストの装飾&lt;/g1&gt;を追加してみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For profiling, on macOS you can use &lt;g1&gt;Instruments Time Profiler&lt;/g1&gt;, which comes with XCode.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T084216Z" creationid="akiji" creationdate="20200430T084216Z">
        <seg>プロファイリングには、macOS上であればXCodeに含まれている &lt;g1&gt;Instruments Time Profiler&lt;/g1&gt;が利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For profiling, on macOS you can use &lt;g1&gt;Instruments Time Profiler&lt;/g1&gt;https://developer.apple.com/library/prerelease/content/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Instrument-TimeProfiler.html&lt;e4/&gt;, which comes with XCode.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081914Z" creationid="makenowjust" creationdate="20200518T081914Z">
        <seg>プロファイリングには、macOS上であればXCodeに含まれている &lt;g1&gt;Instruments Time Profiler&lt;/g1&gt;https://developer.apple.com/library/prerelease/content/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Instrument-TimeProfiler.html&lt;e4/&gt; が利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For profiling, on macOS you can use &lt;g1&gt;Instruments Time Profiler&lt;/g1&gt;https://developer.apple.com/library/prerelease/content/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Instrument-TimeProfiler.html&lt;e8/&gt;, which comes with XCode, or one of the &lt;g2&gt;sampling profilers&lt;/g2&gt;https://stackoverflow.com/questions/11445619/profiling-c-on-mac-os-x&lt;e9/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T072712Z" creationid="makenowjust" creationdate="20201213T072712Z">
        <seg>プロファイリングには、macOS上であればXCodeに含まれている &lt;g1&gt;Instruments Time Profiler&lt;/g1&gt;https://developer.apple.com/library/prerelease/content/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Instrument-TimeProfiler.html&lt;e8/&gt; もしくは &lt;g2&gt;サンプリングプロファイラ&lt;/g2&gt;https://stackoverflow.com/questions/11445619/profiling-c-on-mac-os-x&lt;e9/&gt;の1つが利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For simple development builds, there is usually no reason to do so.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T152313Z" creationid="makenowjust" creationdate="20200419T152313Z">
        <seg>開発時のビルドであれば、リリースビルドをする必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For starters, our applications already display information but (I think) we could do better.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T063138Z" creationid="makenowjust" creationdate="20200413T182942Z">
        <seg>はじめに、アプリケーションは現時点でも情報を表示してはいるけど、そこまで良い表示だとは言えません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For the above example to output the docs at &lt;g1&gt;public&lt;/g1&gt; with custom canonical base url, and entrypoint &lt;g2&gt;src/my_app.cr&lt;/g2&gt;,
the following arguments can be used:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163130Z" creationid="makenowjust" creationdate="20200419T162946Z">
        <seg>次の例ではcanonicalなベースURLを明示的に指定した上で、&lt;g1&gt;public&lt;/g1&gt;を出力先のディレクトリにして, そして&lt;g2&gt;src/my_app.cr&lt;/g2&gt;をエントリーポイントとしてドキュメントを生成しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For the shards that didn’t upgrade to 0.35.0, there is no action needed probably.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200621T083814Z" creationid="makenowjust" creationdate="20200621T083814Z">
        <seg>0.35.0 向けにアップデートしていない shard はとくに追加で何かすることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For the shards that were updated for 0.35.0 regarding this, it should be enough to compare against 0.35.0 exactly.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200621T083744Z" creationid="makenowjust" creationdate="20200621T082506Z">
        <seg>このため、0.35.0向けにアップデートした shard については、0.35.0と十分に比較する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For these two situations, the &lt;g3&gt;OptionParser&lt;/g3&gt; class has two methods: &lt;g4&gt;#invalid_option&lt;/g4&gt; and &lt;g5&gt;#missing_option&lt;/g5&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180120Z" creationid="makenowjust" creationdate="20200413T180120Z">
        <seg>2つの状況に応じて、&lt;g3&gt;OptionParser&lt;/g3&gt;クラスは&lt;g4&gt;#invalid_option&lt;/g4&gt;と&lt;g5&gt;#missing_option&lt;/g5&gt;という2つメソッドを持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this reason, Crystal needs to know, in an obvious way (as obvious as to a human), the types of instance and &lt;g1&gt;class&lt;/g1&gt; variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T132916Z" creationid="makenowjust" creationdate="20200427T132916Z">
        <seg>これらの理由から、Crystal ではインスタンス変数と&lt;g1&gt;クラス&lt;/g1&gt;変数の型ははっきり分かるように書くことを要求します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this reason, iterating a String in this way is not optimal, and in fact has a complexity of &lt;g1&gt;O(n^2)&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T025224Z" creationid="akiji" creationdate="20200430T132657Z">
        <seg>こうした理由から、文字列に対する繰り返し処理は効率的とはいえず、実際 &lt;g1&gt;O(n^2)&lt;/g1&gt;オーダーの複雑性を有しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this to be useful the method name should have some reference to the module, otherwise chances of name clashes are high.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T150623Z" creationid="hirofumiwakasugi" creationdate="20150911T150305Z">
        <seg>ただ、名前が衝突する可能性も高くなってしまうため、モジュールに関連したメソッド名にしておくことがこのパターンを有効に活用するコツになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For those who don't know, a palindrome is a word which is spelled the same way forwards as it is backwards.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T153845Z" creationid="makenowjust" creationdate="20200527T153845Z">
        <seg>知らない方のために説明すると、palindrome (回文) というのは前から読んでも後ろから読んでも同じになるような語のことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Forwarding non-captured blocks</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075543Z" creationid="makenowjust" creationdate="20200506T075543Z">
        <seg>捕捉されないブロックのフォワーディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Found any issues?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T100737Z" creationid="makenowjust" creationdate="20200518T100737Z">
        <seg>何か問題が発生しましたか？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Free variables</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T162322Z" creationid="makenowjust" creationdate="20200429T162322Z">
        <seg>自由変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Free variables allow type inference to be used when creating generic types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T072402Z" creationid="hirofumiwakasugi" creationdate="20150908T040818Z">
        <seg>自由変数を使うことで、ジェネリック型を作るときに型推論を行うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>FreeBSD</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071422Z" creationid="makenowjust" creationdate="20200518T071422Z">
        <seg>FreeBSD</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>FreeBSD includes the Crystal compiler in the ports tree, starting from version FreeBSD 11.0.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T110756Z" creationid="makenowjust" creationdate="20200518T110756Z">
        <seg>FreeBSD では、バージョン 11.0 から Crystal のコンパイラが ports ツリーに含まれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fresh variables</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T225641Z" creationid="makenowjust" creationdate="20200509T225641Z">
        <seg>フレッシュ変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>From here the guide differs depending on whether you are hosting your repo on GitHub or GitLab.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T163558Z" creationid="makenowjust" creationdate="20200527T163558Z">
        <seg>ここからのガイドは GitHub で公開するか GitLab で公開するかによって変わってきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>From here, you can jump to anywhere you want in this document.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080059Z" creationid="makenowjust" creationdate="20200516T080052Z">
        <seg>ここから、ドキュメント内のどのページへ移動してもよいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>From methods</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172018Z" creationid="makenowjust" creationdate="20200422T172018Z">
        <seg>メソッドから Proc を生成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>From now on the default precision of &lt;g1&gt;Time#to_rfc3339&lt;/g1&gt; will be seconds, without fractions.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T152252Z" creationid="makenowjust" creationdate="20200610T152024Z">
        <seg>これからは &lt;g1&gt;Time#to_rfc3339&lt;/g1&gt; のデフォルトの精度は秒となり、それ以上の精度は出力されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>From now on when running the compiler with a file argument instead of a command like &lt;g2&gt;crystal path/to/file.cr arg1 arg2&lt;/g2&gt; the file will be compiled, and then executed with the arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T130848Z" creationid="makenowjust" creationdate="20200610T130654Z">
        <seg>これからは、コマンドの代わりにファイルを引数にしてコンパイラを実行すると (&lt;g2&gt;crystal path/to/file.cr arg1 arg2&lt;/g2&gt; のように)、ファイルがコンパイルされて、そしてそれを実行する、という動作をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>From sources</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T101355Z" creationid="makenowjust" creationdate="20200518T093112Z">
        <seg>ソースコードからの</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>From tar.gz</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T101351Z" creationid="makenowjust" creationdate="20200518T093255Z">
        <seg>tar.gz からの</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>From the feedback received, we decided to:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T124600Z" creationid="makenowjust" creationdate="20200610T124600Z">
        <seg>ですが、フィーバックを受けて、次のことを決定しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>From this you can see that the main routine is simply the program itself: there's no need to define a "main" function or something similar.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072454Z" creationid="hirofumiwakasugi" creationdate="20150901T072454Z">
        <seg>このプログラムを見ればわかる通り、Crystal ではプログラム自体がメインルーチンとなります。つまり、「main」関数やそれに値するものを定義する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Function names</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T031612Z" creationid="makenowjust" creationdate="20200511T031612Z">
        <seg>関数名</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Function names in Crystal can be different from the C name.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T031733Z" creationid="makenowjust" creationdate="20200511T031733Z">
        <seg>これは、Crystal の関数名は C でのそれとは異なるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Function names in a &lt;g1&gt;lib&lt;/g1&gt; definition can start with an upper case letter.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T031629Z" creationid="makenowjust" creationdate="20200511T031629Z">
        <seg>&lt;g1&gt;lib&lt;/g1&gt; 中での関数名は大文字からはじめることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Function types (&lt;g1&gt;Function(Int32, Int32)&lt;/g1&gt;, which can also be written as &lt;g2&gt;Int32 -&gt; Int32&lt;/g2&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T032113Z" creationid="makenowjust" creationdate="20200511T032113Z">
        <seg>関数型 (&lt;g1&gt;Function(Int32, Int32)&lt;/g1&gt;、これは &lt;g2&gt;Int32 -&gt; Int32&lt;/g2&gt; のようにも書けます)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fund Crystal and help it become production-ready at</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075123Z" creationid="makenowjust" creationdate="20200413T210319Z">
        <seg>production-readyに向けて支援をお願いします: </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fund Crystal and help it keep growing at</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210504T120628Z" creationid="makenowjust" creationdate="20210504T120628Z">
        <seg>さらなる成長のために支援をお願いします:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Garbage Collector: to clean up "no longer used" memory.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T113144Z" creationid="akiji" creationdate="20200428T055808Z">
        <seg>"もう使用されない" メモリを掃除する「ガベージコレクタ」</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gemfile</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075516Z" creationid="makenowjust" creationdate="20200516T075516Z">
        <seg>Gemfile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gemfile.lock</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075516Z" creationid="makenowjust" creationdate="20200516T075516Z">
        <seg>Gemfile.lock</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generic Type Argument</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T172914Z" creationid="makenowjust" creationdate="20200420T172914Z">
        <seg>ジェネリック型引数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generic classes and structs can be inherited.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061942Z" creationid="hirofumiwakasugi" creationdate="20150924T061642Z">
        <seg>ジェネリックなクラスとモジュールを継承することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generic structs and modules</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T142956Z" creationid="makenowjust" creationdate="20200504T142956Z">
        <seg>ジェネリックな構造体とモジュール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generic types inheritance</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T143224Z" creationid="makenowjust" creationdate="20200504T143219Z">
        <seg>ジェネリック型の継承</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generics</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T142436Z" creationid="makenowjust" creationdate="20200504T142436Z">
        <seg>ジェネリクス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generics allow you to parameterize a type based on other type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T142626Z" creationid="makenowjust" creationdate="20200504T142626Z">
        <seg>ジェネリクスによってある型を元にしたパラメーター化した型を作ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generics are especially useful for implementing collection types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T142706Z" creationid="makenowjust" creationdate="20200504T142706Z">
        <seg>ジェネリクスは特にコレクション型を実装するに便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gentoo Linux</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071411Z" creationid="makenowjust" creationdate="20200518T071411Z">
        <seg>Gentoo Linux</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gentoo Linux includes the Crystal compiler in the main overlay.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111549Z" creationid="makenowjust" creationdate="20200518T111549Z">
        <seg>Gentoo Linux は main オーバレイに Crystal のコンパイラを含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Get ready for some 1.0.0-preX releases.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T123448Z" creationid="makenowjust" creationdate="20200610T123448Z">
        <seg>1.0.0-preX のリリースに向けて準備をしていてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Get them from Google Fonts</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T085103Z" creationid="makenowjust" creationdate="20200516T085103Z">
        <seg>これは Google Fonts から取得できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Getters and setters</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T124442Z" creationid="makenowjust" creationdate="20200427T124442Z">
        <seg>ゲッターとセッター</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Getting started</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T081308Z" creationid="makenowjust" creationdate="20200516T080258Z">
        <seg>Getting Started</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Given a valid keyword, Crystal will automatically generate visual flags that help highlight problems, notes and/or possible issues.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214434Z" creationid="makenowjust" creationdate="20200412T214434Z">
        <seg>特定のキーワードを与えると Crystal は自動で問題や注意を強調するために、視覚的なフラグを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Given the same number of arguments, the compiler will try to sort them by leaving the less restrictive ones to the end:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072545Z" creationid="hirofumiwakasugi" creationdate="20150906T072441Z">
        <seg>もし同じ数の引数をとるメソッドが複数ある場合、コンパイラは最も制約の少ないものが最後にくる (優先されない) ようにソートを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Given the same number of parameters, the compiler will try to sort them by leaving the less restrictive ones to the end:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T075939Z" creationid="makenowjust" creationdate="20210324T075939Z">
        <seg>もし同じ数の引数をとるメソッドが複数ある場合、コンパイラは最も制約の少ないものが最後にくる (優先度の低い) ようにソートを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gives a hint to the compiler to always inline a method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073142Z" creationid="hirofumiwakasugi" creationdate="20150919T073142Z">
        <seg>常にメソッドをインラインにするようにコンパイラに指示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gives this compile-time error:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155212Z" creationid="hirofumiwakasugi" creationdate="20150905T043736Z">
        <seg>これはコンパイルエラーとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Global variables start with a dollar sign (`$`).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053517Z" creationid="hirofumiwakasugi" creationdate="20150902T053517Z">
        <seg>変数名の先頭にドル記号 (`$`) をつけるとグローバル変数になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Go</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092319Z" creationid="makenowjust" creationdate="20201217T092319Z">
        <seg>Go</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Great!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T183326Z" creationid="makenowjust" creationdate="20200413T175354Z">
        <seg>いい感じですね。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Green</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024115Z" creationid="hirofumiwakasugi" creationdate="20150914T024115Z">
        <seg>Green</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Green       # 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024409Z" creationid="hirofumiwakasugi" creationdate="20150914T024409Z">
        <seg>Green       # 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Green      # 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T181845Z" creationid="makenowjust" creationdate="20200505T181845Z">
        <seg>Green      # 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Greeter.greet # =&gt; "Hello"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T073854Z" creationid="makenowjust" creationdate="20210324T073854Z">
        <seg>Greeter.greet # =&gt; "Hello"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Greeter.greet # undefined constant 'Greeter'
```</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T073855Z" creationid="makenowjust" creationdate="20210324T073855Z">
        <seg>Greeter.greet # undefined constant 'Greeter'
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Grow in Crystal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T151442Z" creationid="makenowjust" creationdate="20210726T151442Z">
        <seg>Crystal の成長</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Guidelines</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T085108Z" creationid="makenowjust" creationdate="20200516T085108Z">
        <seg>ガイドライン</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Guides</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T102303Z" creationid="makenowjust" creationdate="20200506T102303Z">
        <seg>ガイド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>HERE</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T034149Z" creationid="makenowjust" creationdate="20200420T034149Z">
        <seg>HERE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>HTTP::Headers{"foo" =&gt; "bar"}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180228Z" creationid="makenowjust" creationdate="20200420T180228Z">
        <seg>HTTP::Headers{"foo" =&gt; "bar"}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>HTTP::Response.ok "text/plain", "Hello world! The time is #{Time.now}"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072546Z" creationid="hirofumiwakasugi" creationdate="20150901T072546Z">
        <seg>HTTP::Response.ok "text/plain", "Hello world! The time is #{Time.now}"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>HTTP::Response.ok "text/plain", "Hello world!"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140134Z" creationid="hirofumiwakasugi" creationdate="20151009T140134Z">
        <seg>HTTP::Response.ok "text/plain", "Hello world!"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>HTTP::Response.ok "text/plain", "Hello world, got #{request.path}!"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T034948Z" creationid="hirofumiwakasugi" creationdate="20151102T034948Z">
        <seg>HTTP::Response.ok "text/plain", "Hello world, got #{request.path}!"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>HTTP::Server.new ...
...</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162445Z" creationid="makenowjust" creationdate="20200413T162445Z">
        <seg>HTTP::Server.new ...
...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>HTTP::Server.new do |context|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162533Z" creationid="makenowjust" creationdate="20200413T162533Z">
        <seg>HTTP::Server.new do |context|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>HTTP::Server.new(8000) ...</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072631Z" creationid="hirofumiwakasugi" creationdate="20150901T072631Z">
        <seg>HTTP::Server.new(8000) ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>HTTP::Server.new(8080) do |context|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061326Z" creationid="hirofumiwakasugi" creationdate="20160204T061326Z">
        <seg>HTTP::Server.new(8080) do |context|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>HTTP::Server.new(8080) do |request|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072642Z" creationid="hirofumiwakasugi" creationdate="20150901T072642Z">
        <seg>HTTP::Server.new(8080) do |request|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hash</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T174742Z" creationid="makenowjust" creationdate="20200420T174742Z">
        <seg>ハッシュ (Hash)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hash(String, Type)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T081518Z" creationid="makenowjust" creationdate="20200506T081518Z">
        <seg>Hash(String, Type)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hash(String, Type)
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071435Z" creationid="hirofumiwakasugi" creationdate="20150919T071435Z">
        <seg>Hash(String, Type)
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hash-like Type Literal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T175838Z" creationid="makenowjust" creationdate="20200420T175838Z">
        <seg>ハッシュライクな型のリテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hashes are typically created with a hash literal denoted by curly braces (&lt;g1&gt;{ }&lt;/g1&gt;) enclosing a list of pairs using &lt;g2&gt;=&gt;&lt;/g2&gt; as delimiter between key and value and separated by commas &lt;g3&gt;,&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T175320Z" creationid="makenowjust" creationdate="20200420T175046Z">
        <seg>ハッシュは通常、ひげ括弧 (&lt;g1&gt;{ }&lt;/g1&gt;) に囲われた中に、キーと値を &lt;g2&gt;=&gt;&lt;/g2&gt; で組にしてコンマ &lt;g3&gt;,&lt;/g3&gt; で区切って並べたものである、ハッシュリテラルによって生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hash{"one" =&gt; 1, "two" =&gt; 2}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180031Z" creationid="makenowjust" creationdate="20200420T180031Z">
        <seg>Hash{"one" =&gt; 1, "two" =&gt; 2}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Have a syntax similar to Ruby (but compatibility with it is not a goal).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T221322Z" creationid="makenowjust" creationdate="20200412T221322Z">
        <seg>Rubyのような構文を持つ (しかし互換性は目標ではない)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Have an annotation that when applied to an instance variable determines if that instance variable should be serialized, or with what key.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T105220Z" creationid="makenowjust" creationdate="20200510T105220Z">
        <seg>インスタンス変数がどのように、どんなキーとしてシリアライズされるかを決めるために、アノテーションを使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Have compile-time evaluation and generation of code, to avoid boilerplate code.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T221858Z" creationid="makenowjust" creationdate="20200412T221536Z">
        <seg>コンパイル時評価が出来て、ボイラープレートを消し去るためコンパイル時にコード生成ができる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Have no fear using blocks for readability or code reuse, it won't affect the resulting executable performance.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T033049Z" creationid="hirofumiwakasugi" creationdate="20150916T033005Z">
        <seg>コードの読みやすさや再利用性のために積極的にブロックを利用しましょう。それが実行時のパフォーマンスに影響することはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hayashida Ryuichi</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084041Z" creationid="makenowjust" creationdate="20200516T084041Z">
        <seg>Hayashida Ryuichi</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hello</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T063553Z" creationid="hirofumiwakasugi" creationdate="20160204T062353Z">
        <seg>Hello</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hello Crystal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080757Z" creationid="makenowjust" creationdate="20200516T080757Z">
        <seg>Hello Crystal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hello World</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T091257Z" creationid="makenowjust" creationdate="20210130T091257Z">
        <seg>Hello World</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hello World!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T161803Z" creationid="makenowjust" creationdate="20200413T161803Z">
        <seg>Hello World!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here &lt;g1&gt;@values&lt;/g1&gt; is inferred to be &lt;g2&gt;Array(Int32)&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T140100Z" creationid="makenowjust" creationdate="20200427T140100Z">
        <seg>この例で、&lt;g1&gt;@values&lt;/g1&gt; は &lt;g2&gt;Array(Int32)&lt;/g2&gt; に推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here &lt;g1&gt;channel.send&lt;/g1&gt; is executed first, but since there's no one waiting for a value (yet), execution continues in other fibers.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T142136Z" creationid="akiji" creationdate="20200429T142136Z">
        <seg>ここでは、まず&lt;g1&gt;channel.send&lt;/g1&gt;が実行されますが、まだだれもその値を待っている人がいないので、他のファイバを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is an example of such an invalid macro:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221655Z" creationid="makenowjust" creationdate="20200509T221655Z">
        <seg>次が、そのような無効なマクロの例になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here rule 5 (argument's default value) is used, and because the constant resolves to an integer literal, &lt;g1&gt;@lucky_number&lt;/g1&gt; is inferred to be &lt;g2&gt;Int32&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T143908Z" creationid="makenowjust" creationdate="20200427T143908Z">
        <seg>ここでは規則5 (引数のデフォルト値) が利用されています。そして定数が整数リテラルに解決されるので、&lt;g1&gt;@lucky_number&lt;/g1&gt; は &lt;g2&gt;Int32&lt;/g2&gt; に推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here rule 5 (default parameter value) is used, and because the constant resolves to an integer literal, &lt;g1&gt;@lucky_number&lt;/g1&gt; is inferred to be &lt;g2&gt;Int32&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T074436Z" creationid="makenowjust" creationdate="20210324T074436Z">
        <seg>ここでは規則5 (引数のデフォルト値) が利用されています。そして定数が整数リテラルに解決されるので、&lt;g1&gt;@lucky_number&lt;/g1&gt; は &lt;g2&gt;Int32&lt;/g2&gt; と推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here the argument list is that of the method generated by the macro def.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T223749Z" creationid="makenowjust" creationdate="20200509T223749Z">
        <seg>ここでは引数リストはマクロ def によって生成されたメソッドに渡るものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here the parameter list is that of the method generated by the macro def.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T080829Z" creationid="makenowjust" creationdate="20210324T080829Z">
        <seg>ここでは引数リストはマクロ def によって生成されたメソッドに渡るものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here the standard output &lt;g2&gt;might&lt;/g2&gt; never block so the program will continue executing forever.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T075644Z" creationid="akiji" creationdate="20200428T075644Z">
        <seg>ただし、標準出力はブロックされない&lt;g2&gt;かもしれません&lt;/g2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here the two values are received and the channel is depleted.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103808Z" creationid="akiji" creationdate="20200429T144608Z">
        <seg>ここで2つの値が取り出されてチャネルが空になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here we are sending literal values, but the spawned fiber might compute this value by, for example, reading a file, or getting it from a socket.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T140454Z" creationid="akiji" creationdate="20200429T140454Z">
        <seg>今回はリテラル値を渡していますが、生成されたファイバはファイルから読み込んだり、ソケットから値を取得したりして、この値を計算する場合もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here we have two fibers: one reads from a socket and the other does a &lt;g1&gt;sleep&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T150802Z" creationid="akiji" creationdate="20200428T064350Z">
        <seg>ここには、2つのファイバがあります。1つ目はソケットから何かを読み出すもので、もう一つは&lt;g1&gt;sleep&lt;/g1&gt;するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here we have two more examples to continue our first steps in Crystal:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080939Z" creationid="makenowjust" creationdate="20200516T080939Z">
        <seg>最初の Crystal プログラムとして、次の2つの例を用意してあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here we will name two well-known libraries: &lt;g1&gt;Readline&lt;/g1&gt; and &lt;g2&gt;NCurses&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T191325Z" creationid="makenowjust" creationdate="20200413T191325Z">
        <seg>&lt;g1&gt;Readline&lt;/g1&gt;と&lt;g2&gt;NCurses&lt;/g2&gt;という、2つのよく知られたライブラリです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here we will name two well-known libraries: &lt;g1&gt;Readline&lt;/g1&gt; and&lt;g2&gt; NCurses&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T191027Z" creationid="makenowjust" creationdate="20200413T185842Z">
        <seg>&lt;g1&gt;Readline&lt;/g1&gt; と &lt;g2&gt;NCurses&lt;/g2&gt; という、2つのよく知られたライブラリです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here's a list of our main communication channels and resources.&lt;br0/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20220525T085830Z" creationid="makenowjust" creationdate="20220525T085830Z">
        <seg>ここには主要なコミュニケーションチャンネルや情報リソースの一覧があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here's a list of our main communication channels and resources.&lt;x1/&gt; Check out our &lt;g2&gt;Team page&lt;/g2&gt; to meet the people.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T145747Z" creationid="makenowjust" creationdate="20210726T144242Z">
        <seg>ここには主要なコミュニティやリソースの一覧があります。&lt;x1/&gt; 人々と会うために &lt;g2&gt;チームページ&lt;/g2&gt; をチェックしてください。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here's a list of our main communication channels.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T102316Z" creationid="makenowjust" creationdate="20200516T091404Z">
        <seg>ここには主要なコミュニティの一覧があります。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, &lt;g1&gt;person&lt;/g1&gt; is an instance of &lt;g2&gt;Person&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T102515Z" creationid="makenowjust" creationdate="20200427T102515Z">
        <seg>この例では &lt;g1&gt;person&lt;/g1&gt; は &lt;g2&gt;Person&lt;/g2&gt; クラスのインスタンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, `person` is an instance of `Person`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T022330Z" creationid="hirofumiwakasugi" creationdate="20150904T022303Z">
        <seg>この例では、`person` は `Person` クラスのインスタンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, the right-hand side of the &lt;g1&gt;&amp;&amp;&lt;/g1&gt; expression is also guaranteed to have &lt;g2&gt;a&lt;/g2&gt; as not &lt;g3&gt;Nil&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081606Z" creationid="makenowjust" creationdate="20200424T081606Z">
        <seg>&lt;g1&gt;&amp;&amp;&lt;/g1&gt; 式の右辺が評価された場合、&lt;g2&gt;a&lt;/g2&gt;が&lt;g3&gt;Nil&lt;/g3&gt;ではないことも同様に保証されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, the right-hand side of the `&amp;&amp;` expression is also guaranteed to have `a` as not `Nil`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T015121Z" creationid="hirofumiwakasugi" creationdate="20150903T015044Z">
        <seg>`&amp;&amp;` 式の右辺が評価された場合、`a` が `Nil` でないことも同時に保証されることがわかると思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Heredoc</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194817Z" creationid="makenowjust" creationdate="20200419T194817Z">
        <seg>ヒアドキュメント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s the final result, with invalid/missing options handling, plus other new options:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180413Z" creationid="makenowjust" creationdate="20200413T180413Z">
        <seg>これが、無効なオプション/パラメーターの処理を追加して、新しいオプションを追加した、最終的なソースコードです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hexadecimal numbers start with &lt;g1&gt;0x&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182641Z" creationid="makenowjust" creationdate="20200419T182641Z">
        <seg>先頭に&lt;g1&gt;0x&lt;/g1&gt;をつけると16進数になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hexadecimal numbers start with `0x`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052550Z" creationid="hirofumiwakasugi" creationdate="20150901T052550Z">
        <seg>先頭に `0x` をつけると16進数になります</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hi and welcome to Crystal's Reference Book!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080311Z" creationid="makenowjust" creationdate="20200516T080311Z">
        <seg>Crystal のリファレンスにようこそ！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hirofumi Wakasugi</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084024Z" creationid="makenowjust" creationdate="20200516T084024Z">
        <seg>Hirofumi Wakasugi</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hooks</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224105Z" creationid="makenowjust" creationdate="20200509T224105Z">
        <seg>フック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hosting</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T163458Z" creationid="makenowjust" creationdate="20200527T163458Z">
        <seg>ホスティング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>How are you going to use these new features?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T113951Z" creationid="makenowjust" creationdate="20200809T113951Z">
        <seg>あなたならこの機能をどのようにして使いますか？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>How call arguments are matched to method arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T145913Z" creationid="makenowjust" creationdate="20200430T145913Z">
        <seg>どのように渡された引数がメソッドの引数にマッチするのか</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>How call arguments are matched to method parameters</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T091345Z" creationid="makenowjust" creationdate="20210324T091345Z">
        <seg>どのように渡された引数がメソッドの仮引数にマッチするのか</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>How do we &lt;g1&gt;read&lt;/g1&gt; that value?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180826Z" creationid="makenowjust" creationdate="20200413T180749Z">
        <seg>どのようにして値を&lt;g1&gt;読む&lt;/g1&gt;のでしょうか？　</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>How long have you been working with / looking into Crystal?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092409Z" creationid="makenowjust" creationdate="20201217T092409Z">
        <seg>どれくらいの期間 Crystal を利用してきたか/知っていたか？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>How to create custom log formatters was revisited in &lt;g1&gt;#9211&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/9211&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T030614Z" creationid="makenowjust" creationdate="20200611T030614Z">
        <seg>カスタムのログフォーマッタを作る方法は&lt;g1&gt;#9211&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/9211&lt;e2/&gt;で再検討されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>How to use it</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T161136Z" creationid="makenowjust" creationdate="20200527T161136Z">
        <seg>どのようにして使うのか</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>How to write and release Crystal Shards.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200521T041531Z" creationid="makenowjust" creationdate="20200521T041424Z">
        <seg>ここでは Crystal の shard の作り方とリリース方法について説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>How we take the decisions that guide the language and its community.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T153843Z" creationid="makenowjust" creationdate="20210726T153843Z">
        <seg>言語やコミュニティについて、どのように意思決定するか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However that is not true for macro defs, here the argument list is that of the method generated by the macro def, you cannot not access their compile time value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092128Z" creationid="hirofumiwakasugi" creationdate="20151009T030304Z">
        <seg>しかし、これはマクロメソッド (macro def) に対しては有効ではありません。「macro def」によって生成されたメソッドの引数のリストに対して、それらのコンパイル時の値にアクセスすることは不可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However that is not true for macro defs.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T223723Z" creationid="makenowjust" creationdate="20200509T223723Z">
        <seg>しかしマクロ def ではそれは異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, doing so has a few issues:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T130008Z" creationid="makenowjust" creationdate="20200427T125957Z">
        <seg>ですが、そのようにするといくつかの問題が生じます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, explicit &lt;g2&gt;return&lt;/g2&gt; expressions are possible:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T100058Z" creationid="makenowjust" creationdate="20200427T100058Z">
        <seg>ただ、明示的に&lt;g2&gt;return&lt;/g2&gt;を書くことも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, explicit `return` are possible:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T015355Z" creationid="hirofumiwakasugi" creationdate="20150904T015355Z">
        <seg>ただ、明示的に `return` を書くことも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, if &lt;g1&gt;x&lt;/g1&gt; is closured by a proc, the type is always the mixed type of all assignments to it:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T081145Z" creationid="makenowjust" creationdate="20200506T081145Z">
        <seg>しかし、もし &lt;g1&gt;x&lt;/g1&gt; が Proc によってクロージャに格納された場合は、その型はすべての代入された型の組み合わせとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, if `x` is closured by a proc, the type is always the mixed type of all assignments to it:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T055219Z" creationid="hirofumiwakasugi" creationdate="20150918T055148Z">
        <seg>しかし、もし `x` が proc によってクロージャに包まれた場合は、その型はすべての代入された型の組み合わせとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, if the programmer makes a typo, say &lt;g1&gt;:reed&lt;/g1&gt;, the error will only be caught at runtime, while attempting to use &lt;g2&gt;Color::Reed&lt;/g2&gt; will result in a compile-time error.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T183213Z" creationid="makenowjust" creationdate="20200505T183213Z">
        <seg>ただ、この場合はもしプログラマが &lt;g1&gt;:reed&lt;/g1&gt; とタイポしてしまったとすると、実行時にエラーが発生することになります。一方、&lt;g2&gt;Color::Reed&lt;/g2&gt; であればコンパイルエラーとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, if the programmer makes a typo, say `:reed`, the error will only be caught at runtime, but writing `Color::Reed` will result in a compile-time error.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T012428Z" creationid="hirofumiwakasugi" creationdate="20150916T012238Z">
        <seg>ただ、この場合はもしプログラマーが `:reed` とタイポしてしまったとすると、ランタイムにエラーが発生することになります。一方、`Color::Reed` であればコンパイルエラーになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, if you are writing a program and you realize that writing a semantically equivalent, faster version involves just minor changes, you shouldn't miss that opportunity.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T064237Z" creationid="akiji" creationdate="20200430T084137Z">
        <seg>とはいえ、もしプログラムを書いている際に「意味的に同じ内容をより早く実行できるバージョン」がちょっとした変更で実現できるのであれば、その機会を見逃す手はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, in the third send the channel's buffer is full, so execution goes to the main fiber.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103802Z" creationid="akiji" creationdate="20200429T144329Z">
        <seg>しかし、3回目のsendではチャネルのバッファがいっぱいになっているため、メインファイバに処理が移ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, it is also possible to get &lt;g8&gt;TypeNode&lt;/g8&gt;/&lt;g9&gt;Def&lt;/g9&gt; types using other methods on &lt;g10&gt;TypeNode&lt;/g10&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T112138Z" creationid="makenowjust" creationdate="20200510T112138Z">
        <seg>もちろん、&lt;g10&gt;TypeNode&lt;/g10&gt; のその他のメソッドから取得した &lt;g8&gt;TypeNode&lt;/g8&gt; もしくは &lt;g9&gt;Def&lt;/g9&gt; 型のオブジェクトから取得することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, it might not be the most recent version available.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111011Z" creationid="makenowjust" creationdate="20200518T111011Z">
        <seg>ですが、それは一番最近のバージョンではないかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, once a String's size has been computed, it is cached.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T024902Z" creationid="akiji" creationdate="20200430T132750Z">
        <seg>しかし、Stringの文字数は一度計算されるとその値がキャッシュされます（ので繰り返しによるデメリットは限定的です）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, once multiple threads (parallelism) is introduced in the language, it might break.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T102917Z" creationid="akiji" creationdate="20200428T063842Z">
        <seg>しかし、一旦マルチスレッド（並列処理）が言語に導入されると、そういう訳にもいかなくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, regular code usually never involves pointer manipulation or uninitialized variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012935Z" creationid="hirofumiwakasugi" creationdate="20151009T012742Z">
        <seg>ただ、通常のコードでポインタ操作や初期化しない変数を扱うことはないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, some C functions accept callbacks to be executed by other C functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T052121Z" creationid="hirofumiwakasugi" creationdate="20151008T052121Z">
        <seg>しかし、C の関数には、他の C 関数によって実行されるコールバックを受け取るものがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, some restrictions are required.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T125800Z" creationid="makenowjust" creationdate="20200427T125800Z">
        <seg>しかし、どうしても型制約が必要になる場合もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the compiler cannot always figure out the order because there isn't always a total ordering, so it's always better to put less restrictive methods at the end.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T073602Z" creationid="hirofumiwakasugi" creationdate="20150906T073003Z">
        <seg>しかしながら、必ずしも順序関係が全順序であるとは限らないため、コンパイラが常に正しく順序を設定できるわけではありません。したがって、いつも制約の少ないメソッドを最後に書くようにすることを推奨します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the compiler doesn't know that &lt;g3&gt;execute_callback&lt;/g3&gt; can potentially raise because it is not marked as &lt;g4&gt;@[Raises]&lt;/g4&gt; and the compiler has no way to figure this out.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T091601Z" creationid="makenowjust" creationdate="20200512T091601Z">
        <seg>しかし、 &lt;g3&gt;execute_callback&lt;/g3&gt; に &lt;g4&gt;@[Raises]&lt;/g4&gt; が指定されていないため、コンパイラはそれが例外を発生させるものであることを知ることができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the compiler doesn't know that `execute_callback` can potentially raise because it is not marked as `@[Raises]` and the compiler has no way to figure this out.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T052920Z" creationid="hirofumiwakasugi" creationdate="20151008T052920Z">
        <seg>しかし、`execute_callback` に `@[Raises]` が指定されていないため、コンパイラはそれが例外を発生させるものであることを知ることができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the only way to create a `MyBox(T)` instance is by passing a `T` value, that becomes `@value`'s type, and that's what makes it all work.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T064809Z" creationid="hirofumiwakasugi" creationdate="20150912T064732Z">
        <seg>しかし、`MyBox(T)` のインスタンスを作るためには必ず `T` の値を渡す必要があり、それが `@value` の型となるため、実際には、こうしておくことですべての場合に問題なく動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the string contents come in subsequent lines until the ending heredoc idenfitier which must be on its own line.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T091254Z" creationid="makenowjust" creationdate="20210130T091254Z">
        <seg>ですが、その文字列の内容は終端のヒアドキュメントの識別子までの後続の行のものとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, there are a few cases where the resulting type is a different type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T145841Z" creationid="makenowjust" creationdate="20200429T144653Z">
        <seg>ですが、いくつかの場合にそれとは異なる型になることがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, there's a tiny flaw in the above code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063505Z" creationid="hirofumiwakasugi" creationdate="20150912T063130Z">
        <seg>ただ、上記のコードにはわずかな欠点があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, this isn't generally true.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T024631Z" creationid="akiji" creationdate="20200430T132517Z">
        <seg>しかし、一般的にそういった状況は稀です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, you can change this default type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053243Z" creationid="hirofumiwakasugi" creationdate="20151007T053225Z">
        <seg>デフォルトの型は以下のように変更することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, you might want to specify it for two reasons:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T024527Z" creationid="hirofumiwakasugi" creationdate="20150909T024256Z">
        <seg>しかし、以下の2つの理由から、戻り値の型を指定したい場合があるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Html output will be in &lt;g1&gt;_book&lt;/g1&gt; folder (some links won't work if opening the files locally).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165051Z" creationid="makenowjust" creationdate="20200413T164638Z">
        <seg>HTML の出力は&lt;g1&gt;_book&lt;/g1&gt;ディレクトリになります (一部のリンクはローカルでは上手く開けません)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>I am a sponsor contributing $5/month, but my URL is not listed</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083426Z" creationid="makenowjust" creationdate="20200516T083426Z">
        <seg>月5ドルのスポンサーをしているけれど、自分のURLがリストにありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>INFO    -  Cleaning site directory
INFO    -  Documentation built in 3.02 seconds
INFO    -  Serving on http://127.0.0.1:8000
...</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T055716Z" creationid="makenowjust" creationdate="20201213T055716Z">
        <seg>INFO    -  Cleaning site directory
INFO    -  Documentation built in 3.02 seconds
INFO    -  Serving on http://127.0.0.1:8000
...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>INFO_CAPTURECOUNT = 2
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T022114Z" creationid="hirofumiwakasugi" creationdate="20151008T022114Z">
        <seg>INFO_CAPTURECOUNT = 2
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>INFO_CAPTURECOUNT = 2
end

PCRE::INFO_CAPTURECOUNT # =&gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T084324Z" creationid="makenowjust" creationdate="20200512T084324Z">
        <seg>INFO_CAPTURECOUNT = 2
end

PCRE::INFO_CAPTURECOUNT # =&gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>IO::Memory 423.82k (  2.36µs) (± 3.76%)  1.41× slower</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091008Z" creationid="makenowjust" creationdate="20200506T091008Z">
        <seg>IO::Memory 423.82k (  2.36µs) (± 3.76%)  1.41× slower</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>IO::Memory{1, 2, 3}
Set{1, 2, 3}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173553Z" creationid="makenowjust" creationdate="20200420T173553Z">
        <seg>IO::Memory{1, 2, 3}
Set{1, 2, 3}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>IOMode::None.value # =&gt; 0
IOMode::All.value  # =&gt; 7</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182423Z" creationid="makenowjust" creationdate="20200505T182423Z">
        <seg>IOMode::None.value # =&gt; 0
IOMode::All.value  # =&gt; 7</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Identifiers may contain any unicode characters.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T172146Z" creationid="makenowjust" creationdate="20200420T172146Z">
        <seg>識別子には任意のユニコード文字を含むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;g11&gt;CRYSTAL_CACHE_DIR&lt;/g11&gt; is set but points to a path that is not writeable, the default values are used instead.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T170714Z" creationid="makenowjust" creationdate="20200419T170714Z">
        <seg>&lt;g11&gt;CRYSTAL_CACHE_DIR&lt;/g11&gt;で指定されたパスが書き込み不可能だった場合もデフォルト値が代わりに利用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;g1&gt;MyHash&lt;/g1&gt; is generic, the above is equivalent to this:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180557Z" creationid="makenowjust" creationdate="20200420T180557Z">
        <seg>ここで&lt;g1&gt;MyHash&lt;/g1&gt;がジェネリック型であれば、上の例は以下と等しいものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;g1&gt;Point&lt;/g1&gt; is inherited, an array of such type should also account for the fact that other types can be inside it, so the size of each element should grow to accommodate that.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T175532Z" creationid="makenowjust" creationdate="20200505T175532Z">
        <seg>もし &lt;g1&gt;Point&lt;/g1&gt; が継承されるとすると、そのような型の配列にその継承した型が追加される可能性があるので、各要素毎に確保する大きさをそれだけ大きくしなければいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;g1&gt;T1&lt;/g1&gt; and &lt;g2&gt;T2&lt;/g2&gt; are under the same hierarchy, and their nearest common ancestor &lt;g3&gt;Parent&lt;/g3&gt; is not &lt;g4&gt;Reference&lt;/g4&gt;, &lt;g5&gt;Struct&lt;/g5&gt;, &lt;g6&gt;Int&lt;/g6&gt;, &lt;g7&gt;Float&lt;/g7&gt; nor &lt;g8&gt;Value&lt;/g8&gt;, the resulting type is &lt;g9&gt;Parent+&lt;/g9&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T145159Z" creationid="makenowjust" creationdate="20200429T144856Z">
        <seg>&lt;g1&gt;T1&lt;/g1&gt; と &lt;g2&gt;T2&lt;/g2&gt; が継承元を共有していて、共通する祖先の型 &lt;g3&gt;Parent&lt;/g3&gt; が &lt;g4&gt;Reference&lt;/g4&gt;、&lt;g5&gt;Struct&lt;/g5&gt;、&lt;g6&gt;Int&lt;/g6&gt;、&lt;g7&gt;Float&lt;/g7&gt; もしくは &lt;g8&gt;Value&lt;/g8&gt; ではないとき、2つからユニオン型を構成しようとしたときの結果の型は &lt;g9&gt;Parent+&lt;/g9&gt; となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;g1&gt;x&lt;/g1&gt; is assigned something else after the block, the compiler knows the type changed:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T081113Z" creationid="makenowjust" creationdate="20200506T081113Z">
        <seg>もしブロックの後で &lt;g1&gt;x&lt;/g1&gt; に何かが代入されたとき、コンパイラはその型が変更されたと判断します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If Crystal is installed correctly then we should see something like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080602Z" creationid="makenowjust" creationdate="20200516T080546Z">
        <seg>もしコンパイラを正しくインストールできていれば、このように表示されるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If Crystal isn't available in some system you can try cross-compiling it there.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T050816Z" creationid="hirofumiwakasugi" creationdate="20150909T050805Z">
        <seg>もし、あるシステムでコンパイラが利用できない場合は、このクロスコンパイルを試してみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If `MyType` is generic, the above is equivalent to this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T072344Z" creationid="hirofumiwakasugi" creationdate="20150901T140432Z">
        <seg>もし `MyType` がジェネリック型である場合は、上記は以下と同じ意味です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If `MyType` is not generic, the above is equivalent to this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T072335Z" creationid="hirofumiwakasugi" creationdate="20150901T140409Z">
        <seg>もし `MyType` がジェネリック型でない場合は、上記は以下と同じ意味です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If `x` is assigned something else after the block, the compiler knows the type changed:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T055150Z" creationid="hirofumiwakasugi" creationdate="20150918T055057Z">
        <seg>もし、ブロックの後で `x` に何かが代入されたとき、コンパイラはその型が変更されたと判断します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a &lt;g1&gt;break&lt;/g1&gt; receives many arguments, they are automatically transformed to a &lt;g2&gt;Tuple&lt;/g2&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190604Z" creationid="makenowjust" creationdate="20200505T190604Z">
        <seg>&lt;g1&gt;break&lt;/g1&gt; が複数の引数を受け取るとき、それらは自動的に &lt;g2&gt;Tuple&lt;/g2&gt; に変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a &lt;g1&gt;break&lt;/g1&gt; receives many arguments, they are automatically transformed to a &lt;g2&gt;Tuple&lt;/g2&gt;http://crystal-lang.org/api/Tuple.html&lt;e3/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T083001Z" creationid="makenowjust" creationdate="20200518T083001Z">
        <seg>&lt;g1&gt;break&lt;/g1&gt; が複数の引数を受け取るとき、それらは自動的に &lt;g2&gt;Tuple&lt;/g2&gt;http://crystal-lang.org/api/Tuple.html&lt;e3/&gt; に変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a &lt;g1&gt;break&lt;/g1&gt; receives many arguments, they are automatically transformed to a &lt;g2&gt;Tuple&lt;/g2&gt;https://crystal-lang.org/api/latest/Tuple.html&lt;e3/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094331Z" creationid="makenowjust" creationdate="20210324T094331Z">
        <seg>&lt;g1&gt;break&lt;/g1&gt; が複数の引数を受け取るとき、それらは自動的に &lt;g2&gt;Tuple&lt;/g2&gt;https://crystal-lang.org/api/latest/Tuple.html&lt;e3/&gt; に変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a &lt;g1&gt;break&lt;/g1&gt; receives no arguments, it's the same as receiving a single &lt;g2&gt;nil&lt;/g2&gt; argument:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190639Z" creationid="makenowjust" creationdate="20200505T190639Z">
        <seg>&lt;g1&gt;break&lt;/g1&gt; が引数を取らない場合、&lt;g2&gt;nil&lt;/g2&gt; を1つ受け取ったのと同じことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a &lt;g1&gt;next&lt;/g1&gt; receives many arguments, they are automatically transformed to a &lt;g2&gt;Tuple&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190849Z" creationid="makenowjust" creationdate="20200505T190849Z">
        <seg>&lt;g1&gt;next&lt;/g1&gt; が複数の引数を受け取るとき、それらは自動的に &lt;g2&gt;Tuple&lt;/g2&gt; に変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a &lt;g1&gt;next&lt;/g1&gt; receives many arguments, they are automatically transformed to a &lt;g2&gt;Tuple&lt;/g2&gt;http://crystal-lang.org/api/Tuple.html&lt;e4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T094531Z" creationid="makenowjust" creationdate="20200518T094531Z">
        <seg>&lt;g1&gt;next&lt;/g1&gt; が引数の引数を受け取るとき、それらは自動的に &lt;g2&gt;Tuple&lt;/g2&gt;http://crystal-lang.org/api/Tuple.html&lt;e4/&gt; に変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a &lt;g1&gt;next&lt;/g1&gt; receives many arguments, they are automatically transformed to a &lt;g2&gt;Tuple&lt;/g2&gt;https://crystal-lang.org/api/latest/Tuple.html&lt;e4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094356Z" creationid="makenowjust" creationdate="20210324T094356Z">
        <seg>&lt;g1&gt;next&lt;/g1&gt; が複数の引数を受け取るとき、それらは自動的に &lt;g2&gt;Tuple&lt;/g2&gt;https://crystal-lang.org/api/latest/Tuple.html&lt;e4/&gt; に変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a &lt;g1&gt;when&lt;/g1&gt;'s expression is a type, &lt;g2&gt;is_a?&lt;/g2&gt; is used.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T091439Z" creationid="makenowjust" creationdate="20200424T091439Z">
        <seg>もし&lt;g1&gt;when&lt;/g1&gt;節の条件式に型が与えられていれば、代わりに&lt;g2&gt;is_a?&lt;/g2&gt;が使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a C function executes a user-provided callback that might raise, it must be annotated with the &lt;g1&gt;@[Raises]&lt;/g1&gt; annotation.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094010Z" creationid="makenowjust" creationdate="20210324T094010Z">
        <seg>例外を発生させる可能性のあるコールバックを C の関数が実行するときには &lt;g1&gt;@[Raises]&lt;/g1&gt; アノテーションを指定しておく必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a C function executes a user-provided callback that might raise, it must be annotated with the &lt;g1&gt;@[Raises]&lt;/g1&gt; attribute.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T091208Z" creationid="makenowjust" creationdate="20200512T091208Z">
        <seg>例外を発生させる可能性のあるコールバックを C の関数が実行するときには、&lt;g1&gt;@[Raises]&lt;/g1&gt; アノテーションを指定しておく必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a C function executes a user-provided callback that might raise, it must be annotated with the `@[Raises]` attribute.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T051733Z" creationid="hirofumiwakasugi" creationdate="20151008T030306Z">
        <seg>例外を発生させる可能性のあるコールバックを C の関数が実行するときには、`@[Raises]` 属性を指定しておく必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a `break` receives many arguments, they are automatically transformed to a [Tuple](http://crystal-lang.org/api/Tuple.html):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025406Z" creationid="hirofumiwakasugi" creationdate="20150916T025406Z">
        <seg>`break` が複数の引数を受けとるとき、それらは自動的に[タプル](http://crystal-lang.org/api/Tuple.html)に変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a `break` receives no arguments, it's the same as receiving a single `nil` argument:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025547Z" creationid="hirofumiwakasugi" creationdate="20150916T025420Z">
        <seg>`break` が引数をとらない場合、それは `nil` を1つ受け取ったのと同じことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a `next` receives many arguments, they are automaticaly transformed to a [Tuple](http://crystal-lang.org/api/Tuple.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030141Z" creationid="hirofumiwakasugi" creationdate="20150916T030126Z">
        <seg>`next` が複数の引数を受けとるとき、それらは自動的に[タプル](http://crystal-lang.org/api/Tuple.html)に変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a `when`'s expression is a type, `is_a?` is used.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010018Z" creationid="hirofumiwakasugi" creationdate="20150903T025401Z">
        <seg>もし `when` 節の式に型が与えられた場合は、`is_a?` を用いて比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a block has a single argument and invokes a method on it, the block can be replaced with the short syntax argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185103Z" creationid="makenowjust" creationdate="20200505T185103Z">
        <seg>もしブロックが単一の引数とそれに対するメソッド呼び出しのみの場合、ブロックをより短い記法で置き換えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a block has a single parameter and invokes a method on it, the block can be replaced with the short syntax argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094635Z" creationid="makenowjust" creationdate="20210324T094635Z">
        <seg>ブロックが単一の引数とそれに対するメソッド呼び出しのみである場合、ブロックはより短い記法で置き換えれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a class defines a &lt;g1&gt;finalize&lt;/g1&gt; method, when an instance of that class is
garbage-collected that method will be invoked:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T140323Z" creationid="makenowjust" creationdate="20200504T135922Z">
        <seg>もしクラスに &lt;g1&gt;finalize&lt;/g1&gt; メソッドが定義されていた場合、そのクラスのインスタンスがガベージコレクトされるときにそのメソッドが呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a class defines a &lt;g1&gt;new&lt;/g1&gt; or &lt;g2&gt;initialize&lt;/g2&gt; then its superclass constructors are not inherited:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T103733Z" creationid="makenowjust" creationdate="20200504T103733Z">
        <seg>クラスが&lt;g1&gt;new&lt;/g1&gt; や &lt;g2&gt;initialize&lt;/g2&gt; を定義した場合は、スーパークラスのコンストラクタは継承されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a class defines a `finalize` method, when an instance of that class is garbage-collected that method will be invoked:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041749Z" creationid="hirofumiwakasugi" creationdate="20150910T041614Z">
        <seg>もしクラスに `finalize` メソッドが定義されていた場合、そのクラスのインスタンスがガベージコレクトされるときにそのメソッドが実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a class defines a `new` or `initialize` then its superclass constructors are not inherited:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024008Z" creationid="hirofumiwakasugi" creationdate="20150910T023817Z">
        <seg>もしクラスに `new` や `initialize` が定義されると、スーパークラスのコンストラクタは継承されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a class variable is read before it is assigned a value, it will include the `Nil` type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041019Z" creationid="hirofumiwakasugi" creationdate="20150910T041010Z">
        <seg>もし値が代入される前にクラス変数を読み込むと、それは `Nil` 型を持つものとして解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a constant is not used, its initializer is never included in the final executable.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055934Z" creationid="hirofumiwakasugi" creationdate="20150913T055934Z">
        <seg>もしある定数が使われなければ、最終的な実行ファイルにその定数の初期化処理は含まれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a dependency is listed in the override file, that version will be used, no matter what the rest of the dependency graph states.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T113321Z" creationid="makenowjust" creationdate="20200809T113225Z">
        <seg>もし依存関係がオーバーライドファイルに載っていた場合、その他の依存関係のグラフの状態に関わらず、そのバージョンが使われることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a directory named "filename" is found and it contains a file named "filename.cr" directly underneath it, it is required.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085247Z" creationid="makenowjust" creationdate="20200427T084827Z">
        <seg>"filename" という名前のディレクトリの中に "filename.cr" というファイルがあれば、そのファイルが読み込まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a directory named "filename" is found with a directory "src" in it and it contains a directory named "filename" directly underneath it with a "filename.cr" file inside it, it is required.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085253Z" creationid="makenowjust" creationdate="20200427T085028Z">
        <seg>"filename" という名前のディレクトリの中の "src" ディレクトリ中に "filename" というディレクトリがあり、その中に "filename.cr" があれば、そのファイルが読み込まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a directory named "filename" is found with a directory "src" in it and it contains a file named "filename.cr" directly underneath it, it is required.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085250Z" creationid="makenowjust" creationdate="20200427T084945Z">
        <seg>"filename" という名前のディレクトリの中の "src" ディレクトリ中に "filename.cr" というファイルがあれば、そのファイルが読み込まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a file named "filename.cr" is found in the require path, it is required.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085131Z" creationid="makenowjust" creationdate="20200427T084731Z">
        <seg>"filename.cr" という名前のファイルが require パスで見つかれば、そのファイルが読み込まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a file named "filename.cr" is found relative to the current file, it is required.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T090853Z" creationid="makenowjust" creationdate="20200427T090729Z">
        <seg>"filename.cr" という名前のファイルが現在のディレクトリから相対的な位置で見つかれば、そのファイルを読み込まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a parameter was already filled by a positional argument then it's an error.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T091758Z" creationid="makenowjust" creationdate="20210324T091758Z">
        <seg>もしその引数が位置指定の引数として既にマッチしていた場合、エラーとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a top-level macro is marked as &lt;g1&gt;private&lt;/g1&gt; it is only accessible in that file.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T214257Z" creationid="makenowjust" creationdate="20200509T214257Z">
        <seg>トップレベルのマクロが &lt;g1&gt;private&lt;/g1&gt; 指定されていた場合は、そのファイル内でのみアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a top-level macro is marked as `private` it is only accessible in that file.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T015719Z" creationid="hirofumiwakasugi" creationdate="20151001T015605Z">
        <seg>もしトップレベルのマクロが `private` に指定された場合は、そのファイル内でのみアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a type defines a &lt;g1&gt;to_unsafe&lt;/g1&gt; method, when passing it to C the value returned by this method will be passed.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T082429Z" creationid="makenowjust" creationdate="20200512T082429Z">
        <seg>もし、ある方に &lt;g1&gt;to_unsafe&lt;/g1&gt; メソッドが定義されていた場合、C に渡されるのはそのメソッドからの戻り値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a type defines a `to_unsafe` method, when passing it to C the value returned by this method will be passed.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044331Z" creationid="hirofumiwakasugi" creationdate="20151005T044331Z">
        <seg>もし、ある型に `to_unsafe` メソッドが定義されていた場合、C に渡されるのはそのメソッドからの戻り値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a variable is the condition of an &lt;g1&gt;if&lt;/g1&gt;, inside the &lt;g2&gt;then&lt;/g2&gt; branch the variable will be considered as not having the &lt;g3&gt;Nil&lt;/g3&gt; type:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081334Z" creationid="makenowjust" creationdate="20200424T081329Z">
        <seg>変数が&lt;g1&gt;if&lt;/g1&gt;の条件式に使われたとき、&lt;g2&gt;then&lt;/g2&gt;節の中ではその変数は&lt;g3&gt;Nil&lt;/g3&gt;型を持たないと判断されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a variable is the condition of an `if`, inside the `then` branch the variable will be considered as not having the `Nil` type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014316Z" creationid="hirofumiwakasugi" creationdate="20150903T014120Z">
        <seg>もしある変数が `if` の条件になっているとき、`then` の分岐内においては、その値が `Nil` 型ではないと判断されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an &lt;g1&gt;if&lt;/g1&gt; branch is empty, or it’s missing, it’s considered as if it had &lt;g2&gt;nil&lt;/g2&gt; in it:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080544Z" creationid="makenowjust" creationdate="20200424T080544Z">
        <seg>&lt;g1&gt;if&lt;/g1&gt;が評価する分岐節が空、もしくは存在しない場合、そこに&lt;g2&gt;nil&lt;/g2&gt;が与えられていたのと同じ挙動になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an &lt;g1&gt;if&lt;/g1&gt;'s condition is &lt;g2&gt;var.nil?&lt;/g2&gt; then the type of &lt;g3&gt;var&lt;/g3&gt; in the &lt;g4&gt;then&lt;/g4&gt; branch is known by the compiler to be &lt;g5&gt;Nil&lt;/g5&gt;, and to be known as non-&lt;g6&gt;Nil&lt;/g6&gt; in the &lt;g7&gt;else&lt;/g7&gt; branch:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085223Z" creationid="makenowjust" creationdate="20200424T085223Z">
        <seg>&lt;g1&gt;if&lt;/g1&gt;の条件が&lt;g2&gt;var.nil?&lt;/g2&gt;のようになっていると、コンパイラは&lt;g4&gt;then&lt;/g4&gt;節では&lt;g3&gt;var&lt;/g3&gt;が&lt;g5&gt;Nil&lt;/g5&gt;型だと判断して、&lt;g7&gt;else&lt;/g7&gt;では&lt;g6&gt;Nil&lt;/g6&gt;型以外の型だと判断します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an &lt;g1&gt;if&lt;/g1&gt;'s condition is a &lt;g2&gt;responds_to?&lt;/g2&gt; test, in the &lt;g3&gt;then&lt;/g3&gt; branch the type of a variable is guaranteed to be restricted to the types that respond to that method:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083811Z" creationid="makenowjust" creationdate="20200424T083723Z">
        <seg> &lt;g1&gt;if&lt;/g1&gt;の条件で&lt;g2&gt;responds_to?&lt;/g2&gt;によるチェックを行なうと、&lt;g3&gt;then&lt;/g3&gt;節ではその変数がそのメソッドを持つ型に制限されていることが保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an &lt;g1&gt;if&lt;/g1&gt;'s condition is an &lt;g2&gt;is_a?&lt;/g2&gt; test, the type of a variable is guaranteed to be restricted by that type in the &lt;g3&gt;then&lt;/g3&gt; branch.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083726Z" creationid="makenowjust" creationdate="20200424T082734Z">
        <seg>&lt;g1&gt;if&lt;/g1&gt;の条件式で&lt;g2&gt;is_a?&lt;/g2&gt;によるチェックを行うと、&lt;g3&gt;then&lt;/g3&gt;節で変数がその型に制限されていることが保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an `if` branch is empty, or it’s missing, it’s considered as if it had `nil` in it:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T025739Z" creationid="hirofumiwakasugi" creationdate="20150903T013505Z">
        <seg>もし、条件に合致する分岐節が空の場合、もしくは合致する分岐節自体が存在しない場合には、そこに `nil` が与えられていたのと同じ挙動になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an `if`'s condition is a `responds_to?` test, in the `then` branch the type of a variable is guaranteed to be restricted to the types that respond to that method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030223Z" creationid="hirofumiwakasugi" creationdate="20150903T030021Z">
        <seg>`if` の条件で `responds_to?` によるチェックを行うと、`then` 節での変数の型に対して、そのメソッドに応答するものであることを制限し保証することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an `if`'s condition is an `is_a?` test, the type of a variable is guaranteed to be restricted by that type in the `then` branch.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030115Z" creationid="hirofumiwakasugi" creationdate="20150903T021654Z">
        <seg>`if` の条件で `is_a?` によるチェックを行うと、`then` 節での変数の型を制限し保証することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an argument points to a folder, all spec
files inside that folder are appended.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165441Z" creationid="makenowjust" creationdate="20200419T163906Z">
        <seg>引数がフォルダを指していた場合、そのフォルダ中の spec をまとめて指定したことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an argument was already filled by a positional argument then it's an error.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T155215Z" creationid="makenowjust" creationdate="20200501T155039Z">
        <seg>もしその引数が位置指定の引数として既にマッチしていた場合、エラーが起こります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an exception is raised
inside the &lt;g3&gt;initialize&lt;/g3&gt; method, &lt;g4&gt;finalize&lt;/g4&gt; won't be invoked.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T140315Z" creationid="makenowjust" creationdate="20200504T140315Z">
        <seg>もし例外が &lt;g3&gt;initialize&lt;/g3&gt; メソッド中で発生したとき、&lt;g4&gt;finalize&lt;/g4&gt; は呼び出されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an exception is raised inside the `initialize` method, `finalize` won't be invoked.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041925Z" creationid="hirofumiwakasugi" creationdate="20150910T041925Z">
        <seg>もし `initialize` メソッドで例外が発生したとき、`finalize` は実行されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an instance variable is not assigned in all of the `initialize` defined in a class, it will be considered as also having the type `Nil`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T053828Z" creationid="hirofumiwakasugi" creationdate="20150905T053828Z">
        <seg>もし、あるインスタンス変数が、クラスで定義されているすべての `initialize` で初期化されなかったとき、そのインスタンス変数は `Nil` 型を持つと解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an option matches then the block passed to &lt;g2&gt;parser#on&lt;/g2&gt; gets executed!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T173500Z" creationid="makenowjust" creationdate="20200413T173451Z">
        <seg>ここで、オプションがマッチしたときに、&lt;g2&gt;parser#on&lt;/g2&gt;に渡されたブロックが実行される、というわけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If for any reason you can't or don't want to use one of the previous installation methods, you can still download Crystal in a standalone .tar.gz file with everything you need to get started.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055610Z" creationid="hirofumiwakasugi" creationdate="20150831T052600Z">
        <seg>何らかの理由で、これまで紹介した方法でインストールすることができない場合、.tar.gz ファイルをダウンロードする方法もあります。その中に、Crystal に必要なすべてのものが含まれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If for some reason we are sure &lt;g3&gt;a&lt;/g3&gt; is an &lt;g4&gt;Int32&lt;/g4&gt; after the &lt;g5&gt;if&lt;/g5&gt;, we can force the compiler to treat it like one:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T114339Z" creationid="makenowjust" creationdate="20200512T114339Z">
        <seg>何らかの理由で &lt;g5&gt;if&lt;/g5&gt; のあとで &lt;g3&gt;a&lt;/g3&gt; が &lt;g4&gt;Int32&lt;/g4&gt; であるとしたい場合は、このようにすることでコンパイラに強制することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If for some reason we are sure `a` is an `Int32` after the `if`, we can force the compiler to treat it like one:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T015109Z" creationid="hirofumiwakasugi" creationdate="20150930T014930Z">
        <seg>もし何らかの理由で、`if` の後で `a` が `Int32` であるとしたい場合は、そのように扱うようにコンパイラに強制することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If in the previous example we pass a symbol, the generated code becomes invalid:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T021112Z" creationid="hirofumiwakasugi" creationdate="20151001T020911Z">
        <seg>例えばもし、上記の例でシンボルを渡した場合には、生成されたコードは不正なものとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it can't find one, the type union remains.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T033139Z" creationid="hirofumiwakasugi" creationdate="20150910T033118Z">
        <seg>もし同一階層下に見つからない型であれば、そのまま型の組み合わせとして残ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it is a call,
the replacements are semantically equivalent but the implementation is a bit
more complex (introducing an anonymous temporary variable) and expects &lt;g2&gt;a=&lt;/g2&gt; to
be callable.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100029Z" creationid="makenowjust" creationdate="20200502T100029Z">
        <seg>呼び出しだった場合も同様の意味の形に変換されますが、実装は少し複雑になり(一時的な変数を利用します)、また&lt;g2&gt;a=&lt;/g2&gt;が呼び出せる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it is impossible for a type to be restricted by another type, a compile-time error is issued:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T015428Z" creationid="hirofumiwakasugi" creationdate="20150930T015428Z">
        <seg>ある型を別の型に強制することは不可能で、コンパイルエラーが発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it is only a library for other shards to depend on, &lt;g3&gt;shard.lock&lt;/g3&gt; should &lt;g4&gt;not&lt;/g4&gt; be checked in, only &lt;g5&gt;shard.yml&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T095318Z" creationid="makenowjust" creationdate="20200419T174457Z">
        <seg>他のshardから依存されるようなライブラリである場合 &lt;g3&gt;shard.lock&lt;/g3&gt; はバージョン管理下に置くべき&lt;g4&gt;ではあありません&lt;/g4&gt;。&lt;g5&gt;shard.yml&lt;/g5&gt; のみを含めてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it receives no arguments it's the same as receiving a single &lt;g3&gt;nil&lt;/g3&gt; argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190921Z" creationid="makenowjust" creationdate="20200505T190921Z">
        <seg>引数を取らない場合には、 &lt;g3&gt;nil&lt;/g3&gt; を1つ受け取ったのと同じことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it receives no arguments it's the same as receiving a single `nil` argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030200Z" creationid="hirofumiwakasugi" creationdate="20150916T030156Z">
        <seg>引数をとらない場合には、`nil` を1つ受け取ったのと同じことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it's *falsey*, it evaluates its right hand side and has that value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052649Z" creationid="hirofumiwakasugi" creationdate="20150905T052649Z">
        <seg>もしそれが「偽」の場合のみ、右辺に対して評価を行い、結果の値が右辺の値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it's *truthy*, it evaluates its right hand side and has that value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052514Z" creationid="hirofumiwakasugi" creationdate="20150905T052514Z">
        <seg>もしそれが「真」の場合のみ、右辺に対して評価を行い、結果の値が右辺の値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it's &lt;g2&gt;falsey&lt;/g2&gt;, it evaluates its right hand side and has that value.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101746Z" creationid="makenowjust" creationdate="20200424T101746Z">
        <seg>それが&lt;g2&gt;偽となる&lt;/g2&gt;値であれば、右辺を評価し、それを結果の値とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it's &lt;g2&gt;truthy&lt;/g2&gt;, it evaluates its right hand side and has that value.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T102259Z" creationid="makenowjust" creationdate="20200424T101601Z">
        <seg>それが&lt;g2&gt;真となる&lt;/g2&gt;値であれば、右辺の値を評価し、その値を結果とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If multiple heredocs start in the same line, their bodies are read sequentially:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T091344Z" creationid="makenowjust" creationdate="20210130T091344Z">
        <seg>もし複数のヒアドキュメントが同じ行で開始した場合、それらの内容は逐次的に読み込まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If necessary a variable can be defined as a union type at compile time</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T144525Z" creationid="makenowjust" creationdate="20200429T144525Z">
        <seg>コンパイル時に、変数をユニオン型として定義するには次のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no &lt;g1&gt;source&lt;/g1&gt; argument is provided, the Crystal source is read from standard input.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160002Z" creationid="makenowjust" creationdate="20200419T160002Z">
        <seg>&lt;g1&gt;source&lt;/g1&gt;が引数で指定されなかった場合は、ソースコードを標準入力から読み込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no &lt;g2&gt;files&lt;/g2&gt; argument is provided, the default is &lt;g3&gt;./spec&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163939Z" creationid="makenowjust" creationdate="20200419T163939Z">
        <seg>何も&lt;g2&gt;files&lt;/g2&gt;引数を指定しなかった場合は、デフォルト値として&lt;g3&gt;./spec&lt;/g3&gt;が与えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no command is given, &lt;g1&gt;install&lt;/g1&gt; will be run by default.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T174642Z" creationid="makenowjust" creationdate="20200419T174642Z">
        <seg>コマンドが指定されなかった場合、&lt;g1&gt;install&lt;/g1&gt;がデフォルトでは実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no suffix is present, the literal's type is &lt;g3&gt;Float64&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T183137Z" creationid="makenowjust" creationdate="20200419T183137Z">
        <seg>サフィックスがない場合はリテラルの型は&lt;g3&gt;Float64&lt;/g3&gt;となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no suffix is present, the literal's type is `Float64`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T074014Z" creationid="hirofumiwakasugi" creationdate="20150901T074014Z">
        <seg>もしサフィックスがない場合は、リテラルの型は `Float64` になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no suffix is present, the literal's type is the lowest between &lt;g3&gt;Int32&lt;/g3&gt;, &lt;g4&gt;Int64&lt;/g4&gt; and &lt;g5&gt;UInt64&lt;/g5&gt;
in which the number fits (at the moment, &lt;g6&gt;128&lt;/g6&gt; bit integers must always be suffixed):</seg>
      </tuv>
      <tuv lang="JA" changeid="uni" changedate="20221107T031057Z" creationid="uni" creationdate="20221107T031057Z">
        <seg>サフィックスがない場合、順にまず&lt;g3&gt;Int32&lt;/g3&gt;の範囲に数がおさまれば型は&lt;g3&gt;Int32&lt;/g3&gt;になり、&lt;g4&gt;Int64&lt;/g4&gt;の範囲におさまれば&lt;g4&gt;Int64&lt;/g4&gt;になり、 &lt;g5&gt;UInt64&lt;/g5&gt;の範囲におさまれば&lt;g5&gt;UInt64&lt;/g5&gt;になります。
なお、これらの範囲外の&lt;g6&gt;128&lt;/g6&gt;ビット整数には、常にサフィックスを付ける必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no suffix is present, the literal's type is the lowest between &lt;g3&gt;Int32&lt;/g3&gt;, &lt;g4&gt;Int64&lt;/g4&gt; and &lt;g5&gt;UInt64&lt;/g5&gt;
in which the number fits:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182509Z" creationid="makenowjust" creationdate="20200419T182509Z">
        <seg>サフィックスがない場合はリテラルの型は&lt;g3&gt;Int32&lt;/g3&gt;か&lt;g4&gt;Int64&lt;/g4&gt;または&lt;g5&gt;UInt64&lt;/g5&gt;の中で、その数値に適した最小のものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no suffix is present, the literal's type is the lowest between `Int32`, `Int64` and `UInt64`
in which the number fits:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025649Z" creationid="hirofumiwakasugi" creationdate="20151009T025642Z">
        <seg>もしサフィックスがない場合は、リテラルの型は `Int32`/`Int64`/`UInt64`のいずれかのうち、数値に合致する最も小さいものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no suffix is present, the literal's type is the lowest betwen `Int32`, `Int64` and `UInt64`
in which the number fits:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052257Z" creationid="hirofumiwakasugi" creationdate="20150901T051834Z">
        <seg>もしサフィックスがない場合は、リテラルの型は `Int32`/`Int64`/`UInt64`のいずれかのうち、数値に合致する最も小さいものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no targets are specified, all are built.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180300Z" creationid="makenowjust" creationdate="20200419T180124Z">
        <seg>ターゲットが指定されていなければ、すべてがビルドされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If not already present, generates a &lt;g2&gt;shard.lock&lt;/g2&gt; file from resolved dependencies, locking version
numbers or Git commits.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T095223Z" creationid="makenowjust" creationdate="20200419T180805Z">
        <seg>&lt;g2&gt;shard.lock&lt;/g2&gt; が存在しない場合、解決した依存関係、ロックしたバージョンもしくはGitコミットから生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If one of the branches never reaches past the end of an &lt;g1&gt;if&lt;/g1&gt;, like in the case of a &lt;g2&gt;return&lt;/g2&gt;, &lt;g3&gt;next&lt;/g3&gt;, &lt;g4&gt;break&lt;/g4&gt; or &lt;g5&gt;raise&lt;/g5&gt;, that type is not considered at the end of the &lt;g6&gt;if&lt;/g6&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T075226Z" creationid="makenowjust" creationdate="20200424T075226Z">
        <seg>ある分岐節が&lt;g1&gt;if&lt;/g1&gt;の最後まで絶対に到達しない場合 (&lt;g2&gt;return&lt;/g2&gt;や&lt;g3&gt;next&lt;/g3&gt;、&lt;g4&gt;break&lt;/g4&gt;、&lt;g5&gt;raise&lt;/g5&gt;などがある場合)、 &lt;g6&gt;if&lt;/g6&gt;の後でその分岐節における型が考慮されることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If one of the branches never reaches past the end of an `if`, like in the case of a `return`, `next`, `break` or `raise`, that type is not considered at the end of the `if`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T025816Z" creationid="hirofumiwakasugi" creationdate="20150903T012622Z">
        <seg>もし、ある分岐節が `if` の最後まで絶対に到達しない場合、例えば `return`/`next`/`break`/`raise` などが存在した場合には、`if` の後でその分岐節における型が考慮されることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If one or more &lt;g1&gt;var&lt;/g1&gt; arguments are provided,
the value of each named variable is printed on its own line.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163353Z" creationid="makenowjust" creationdate="20200419T163353Z">
        <seg>もしいくつかの&lt;g1&gt;var&lt;/g1&gt;引数が渡された場合、それらの変数の値がそれぞれの行に出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If that fails, we try to use your GitHub or Twitter accounts listed in that same profile.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083553Z" creationid="makenowjust" creationdate="20200516T083553Z">
        <seg>それができなかった場合は、GitHub もしくは Twitter のアカウントのものを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the assigned value is not exactly the same as the property's type, &lt;g1&gt;to_unsafe&lt;/g1&gt; will be tried.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083015Z" creationid="makenowjust" creationdate="20200512T083015Z">
        <seg>代入された値がプロパティの型と正確に同じものでない場合、&lt;g1&gt;to_unsafe&lt;/g1&gt; を呼び出して型を一致させようとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the callback passed to &lt;g1&gt;store_callback&lt;/g1&gt; raises, then &lt;g2&gt;execute_callback&lt;/g2&gt; will raise.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T091522Z" creationid="makenowjust" creationdate="20200512T091522Z">
        <seg>このとき、もし &lt;g1&gt;store_callback&lt;/g1&gt; に渡されたコールバックが例外を発生させるものであるときには、 &lt;g2&gt;execute_callback&lt;/g2&gt; が例外を発生させるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the callback passed to `store_callback` raises, then `execute_callback` will raise.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T052827Z" creationid="hirofumiwakasugi" creationdate="20151008T052822Z">
        <seg>このとき、もし `store_callback` に渡されたコールバックが例外を発生させるものであるときには、`execute_callback` が例外を発生させるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the compiler can't detect this at compile-time, an exception will be raised at runtime.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024803Z" creationid="hirofumiwakasugi" creationdate="20151008T024715Z">
        <seg>もしコンパイラがコンパイル時にこのことを検出できなかった場合、ランタイムに例外が発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the compiler detects at compile-time that a closure is being passed, an error will be issued:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024655Z" creationid="hirofumiwakasugi" creationdate="20151008T024642Z">
        <seg>もし、クロージャが渡されていることがコンパイル時に検出されるとエラーが発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the compiler gives an error saying that the type of an instance variable can't be inferred you can always add an explicit type restriction.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T134836Z" creationid="makenowjust" creationdate="20200427T134836Z">
        <seg>コンパイラがインスタンス変数の型を推論できずエラーが起こったときは、明示的に型制限を追加することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the condition is an &lt;g4&gt;var.is_a?(Type)&lt;/g4&gt; test, &lt;g5&gt;var&lt;/g5&gt; is guaranteed to be of type &lt;g6&gt;Type&lt;/g6&gt; inside the body.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095007Z" creationid="makenowjust" creationdate="20200424T094954Z">
        <seg>条件式が&lt;g4&gt;var.is_a?(Type)&lt;/g4&gt;という形なら、本体では&lt;g5&gt;var&lt;/g5&gt;は&lt;g6&gt;Type&lt;/g6&gt;型であることが保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the condition is an `var.is_a?(Type)` test, `var` is guaranteed to be of type Type inside the body.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052123Z" creationid="hirofumiwakasugi" creationdate="20150905T052123Z">
        <seg>条件で `var.is_a?(Type)` による判定を行うと、本体の中では `var` の型がその型であることを保証することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the constant denotes a type, you get back a &lt;g1&gt;&lt;g2&gt;TypeNode&lt;/g2&gt;&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220141Z" creationid="makenowjust" creationdate="20200509T220141Z">
        <seg>もし定数が型を示していれば、そのとき得られるのは &lt;g1&gt;&lt;g2&gt;TypeNode&lt;/g2&gt;&lt;/g1&gt; となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the constant denotes a type, you get back a &lt;g1&gt;&lt;g2&gt;TypeNode&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/Crystal/Macros/TypeNode.html&lt;e3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T090627Z" creationid="makenowjust" creationdate="20200518T090623Z">
        <seg>もし定数が型を示していれば、そのとき得られるのは &lt;g1&gt;&lt;g2&gt;TypeNode&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/Crystal/Macros/TypeNode.html&lt;e3/&gt; となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the constant denotes a type, you get back a &lt;g1&gt;&lt;g2&gt;TypeNode&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Crystal/Macros/TypeNode.html&lt;e3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T080331Z" creationid="makenowjust" creationdate="20210324T080331Z">
        <seg>もし定数が型を示していれば、そのとき得られるのは &lt;g1&gt;&lt;g2&gt;TypeNode&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Crystal/Macros/TypeNode.html&lt;e3/&gt; となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the constant denotes a type, you get back a `TypeNode`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T041605Z" creationid="hirofumiwakasugi" creationdate="20151001T041605Z">
        <seg>もし定数が型を示していれば、そのとき得られるのは `TypeNode` となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the left-hand side contains just one variable, the right-hand side is considered an array:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060149Z" creationid="hirofumiwakasugi" creationdate="20150902T060132Z">
        <seg>それでは、もし左辺に1つの変数しかないときはどうでしょうか。その場合には、右辺が配列であると解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the method has arguments, you must specify their types:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022124Z" creationid="hirofumiwakasugi" creationdate="20150902T022124Z">
        <seg>引数を持つメソッドの場合は、その型を指定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the method has other required arguments, the short syntax argument should also be supplied in the method's argument list.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094727Z" creationid="makenowjust" creationdate="20210324T094727Z">
        <seg>メソッドが他の引数を要求する場合、短縮句法はメソッドの引数リストに追加されなければいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the method has other required parameters, the short syntax argument should also be supplied in the method's argument list.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185637Z" creationid="makenowjust" creationdate="20200505T185637Z">
        <seg>メソッドが他の引数を要求する場合、短縮記法はメソッドの引数リストに追加されなければいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the method has parameters, you must specify their types:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T081753Z" creationid="makenowjust" creationdate="20210324T081753Z">
        <seg>引数を持つメソッドの場合は、その型を指定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the ports collection is not already installed, it can be downloaded using &lt;g1&gt;portsnap fetch&lt;/g1&gt; or &lt;g2&gt;git clone https://github.com/freebsd/freebsd-ports&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111329Z" creationid="makenowjust" creationdate="20200518T111329Z">
        <seg>ports コレクションをインストールしていない場合は、&lt;g1&gt;portsnap fetch&lt;/g1&gt; か &lt;g2&gt;git clone https://github.com/freebsd/freebsd-ports&lt;/g2&gt; でダウンロードしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the return type is void you can omit it:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T040824Z" creationid="hirofumiwakasugi" creationdate="20151005T040718Z">
        <seg>もし戻り値の型が void であれば省略することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the right-hand side contains just one expression, it is considered an indexed type and the following syntax sugar applies:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060158Z" creationid="hirofumiwakasugi" creationdate="20150902T055855Z">
        <seg>もし代入文の右辺に1つの式しかないときにはどうなるのでしょうか。その場合には、インデックスを持つ型だと解釈され、以下のシンタックスシュガーが適用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the right-hand side contains just one expression, the type is indexed for each variable on the left-hand side like so:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175549Z" creationid="makenowjust" creationdate="20200422T175540Z">
        <seg>代入式の右辺に1つしか式が無かった場合、次の例のように各変数に順にインデックスして代入していきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the source ends up ambiguous, an error will be displayed.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T105815Z" creationid="makenowjust" creationdate="20200809T105737Z">
        <seg>もしフォーク元の依存関係が曖昧であれば、エラーが表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there are conditional breaks, the call's return value type will be a union of the type of the block's value and the type of the many &lt;g1&gt;break&lt;/g1&gt;s:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190530Z" creationid="makenowjust" creationdate="20200505T190530Z">
        <seg>もしある条件によって break する場合、そのメソッドの戻り値の型は、ブロックの戻り値の型とすべての &lt;g1&gt;break&lt;/g1&gt; の型の組み合わせとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there are conditional breaks, the call's return value type will be a union of the type of the block's value and the type of the many `break`s:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025313Z" creationid="hirofumiwakasugi" creationdate="20150916T024921Z">
        <seg>もしある条件によって break する場合、そのメソッドの戻り値の型は、ブロックの戻り値の型と (複数ある場合にはすべての) `break` の型の組み合わせとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there are multiple annotations of the same type applied to the same instance variable/method/type, the &lt;g1&gt;.annotations(type : TypeNode)&lt;/g1&gt; method can be used.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T112612Z" creationid="makenowjust" creationdate="20200510T112547Z">
        <seg>同じ型のアノテーションが1つのインスタンス変数、メソッド、型に適用されていたとき、&lt;g1&gt;.annotations(type : TypeNode)&lt;/g1&gt; メソッドが使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there aren't other fibers to execute, the Event Loop will wait until either of these events happen, without consuming CPU time.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T150815Z" creationid="akiji" creationdate="20200428T070439Z">
        <seg>もし他に実行可能なファイバがいなければ、イベントループはイベントループはCPUを消費することなく、どちらかのイベントが発生するまで待機します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there is any mismatch information you would like to correct, please &lt;a0&gt;contact us&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083807Z" creationid="makenowjust" creationdate="20200516T083807Z">
        <seg>もし情報が間違っていて、正しく訂正したい場合は、&lt;a0&gt;私たちに連絡して&lt;/a0&gt;ください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there is any mismatch information you would like to correct, please &lt;g1&gt;contact us&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T080103Z" creationid="makenowjust" creationdate="20200518T080103Z">
        <seg>もし情報が間違っていれ、訂正を求める場合は、&lt;g1&gt;私たちに連絡して&lt;/g1&gt;ください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there's a splat method argument with a name (the case without a name is explained below), more positional arguments are allowed and they are captured as a tuple.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T154928Z" creationid="makenowjust" creationdate="20200501T154840Z">
        <seg>もしスプラット指定された引数に名前があれば、(名前がない場合についてはあとで説明します)、よりたくさんの位置指定の引数を渡すことができて、それらはタプルとしてその引数にキャプチャされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there's a splat parameter with a name (the case without a name is explained below), more positional arguments are allowed and they are captured as a tuple.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T091534Z" creationid="makenowjust" creationdate="20210324T091534Z">
        <seg>もしスプラット展開指定された引数に名前があれば(名前がない場合については後に説明します)、よりたくさんの位置指定の引数を渡すことができて、それらはタプルとしてその引数にキャプチャされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this is a stopper issue for you, &lt;g2&gt;Process.fork&lt;/g2&gt; is still available.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T031416Z" creationid="makenowjust" creationdate="20200611T031342Z">
        <seg>この変更が問題である場合は、&lt;g2&gt;Process.fork&lt;/g2&gt; はまだ利用できるのでそちらを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If we create more boxes with more types:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T060141Z" creationid="hirofumiwakasugi" creationdate="20150912T055711Z">
        <seg>この箱クラスのインスタンスを、別の型を与えていくつか作成してみます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If we define two modules with names &lt;g1&gt;A&lt;/g1&gt; and &lt;g2&gt;B&lt;/g2&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141831Z" creationid="makenowjust" creationdate="20200504T141831Z">
        <seg>2つのモジュールが &lt;g1&gt;A&lt;/g1&gt; と &lt;g2&gt;B&lt;/g2&gt; を考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If we had invoked `Person.new` with another type, `@name` would have taken a different type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T134631Z" creationid="hirofumiwakasugi" creationdate="20150904T134510Z">
        <seg>もし、`Person.new` の引数が別の型だった場合は、`@name` もそれに応じて別の型になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If we run the `hierarchy` command again, we get:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063038Z" creationid="hirofumiwakasugi" creationdate="20150912T063038Z">
        <seg>`hierarchy` コマンドを再度実行してみましょう。その結果は以下となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If we run the `tool hierarchy` command again, we get:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024444Z" creationid="hirofumiwakasugi" creationdate="20151009T024444Z">
        <seg>`tool hierarchy` コマンドを再度実行してみましょう。その結果は以下となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If we want to execute the spawned fiber for ever, we can use &lt;g1&gt;sleep&lt;/g1&gt; without arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T075856Z" creationid="akiji" creationdate="20200428T075856Z">
        <seg>もし、生成したファイバを実行させ続けたいのであれば、引数なしの &lt;g1&gt;sleep&lt;/g1&gt; を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If we want to try it then the &lt;g4&gt;crystal-lang/crystal-readline&lt;/g4&gt; shard will give us an easy API to use &lt;g5&gt;Readline&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T190348Z" creationid="makenowjust" creationdate="20200413T190348Z">
        <seg>それらの機能を使いたいのであれば&lt;g4&gt;crystal-lang/crystal-readline&lt;/g4&gt; shardが&lt;g5&gt;Readline&lt;/g5&gt;を簡単に扱える API を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If we want to try it then the &lt;g4&gt;crystal-lang/crystal-readline&lt;/g4&gt;https://github.com/crystal-lang/crystal-readline&lt;e7/&gt; shard will give us an easy API to use &lt;g5&gt;Readline&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T094103Z" creationid="makenowjust" creationdate="20200518T094103Z">
        <seg>それらの機能を使いたいのであれば &lt;g4&gt;crystal-lang/crystal-readline&lt;/g4&gt;https://github.com/crystal-lang/crystal-readline&lt;e7/&gt; shard が &lt;g5&gt;Readline&lt;/g5&gt; を簡単に扱うための API を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you are into cross-compiling you’ll be quite happy with the introduction of &lt;g1&gt;host_flag?&lt;/g1&gt; macro method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T151622Z" creationid="makenowjust" creationdate="20200610T151622Z">
        <seg>クロスコンパイルの際、&lt;g1&gt;host_flag?&lt;/g1&gt; というマクロが追加されたことを知っておくと便利でしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you are using Mac and the Homebrew formula, this will be automatically configured for you if you install Crystal adding `--with-llvm` flag.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T062345Z" creationid="hirofumiwakasugi" creationdate="20150831T060425Z">
        <seg>もし Mac を使っていて Homebrew のフォーミュラからインストールする場合は、`--with-llvm` フラグを与えてインストールすれば LLVM が自動的に構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you compile the above program with the &lt;g1&gt;tool hierarchy&lt;/g1&gt; command you will see this for &lt;g2&gt;Person&lt;/g2&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T110537Z" creationid="makenowjust" creationdate="20200504T110537Z">
        <seg>上記のプログラムに対して &lt;g1&gt;tool hierarchy&lt;/g1&gt; コマンドを実行すると、 &lt;g2&gt;Person&lt;/g2&gt; は以下のように表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you compile the above program with the `hierarchy` command you will see this for `Person`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T032241Z" creationid="hirofumiwakasugi" creationdate="20150910T032227Z">
        <seg>上記のプログラムに対して `hierarchy` を実行すると、`Person` は以下のように表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you compile the above program with the `tool hierarchy` command you will see this for `Person`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140028Z" creationid="hirofumiwakasugi" creationdate="20151009T140028Z">
        <seg>上記のプログラムに対して `tool hierarchy` を実行すると、`Person` は以下のように表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you compile the previous programs with the `hierarchy` command, the compiler will show you a hierarchy graph with the types it inferred.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135533Z" creationid="hirofumiwakasugi" creationdate="20150904T134746Z">
        <seg>これらのプログラムに `hierarchy` コマンドでコンパイラを起動すると、推論された型を階層的に表示することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you compile the previous programs with the `tool hierarchy` command, the compiler will show you a hierarchy graph with the types it inferred.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025323Z" creationid="hirofumiwakasugi" creationdate="20151009T025323Z">
        <seg>これらのプログラムに `tool hierarchy` コマンドでコンパイラを起動すると、推論された型を階層的に表示することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you declare your type as a &lt;g1&gt;struct&lt;/g1&gt; instead of a &lt;g2&gt;class&lt;/g2&gt;, creating an instance of it will use stack memory, which is much cheaper than heap memory and doesn't put pressure on the GC.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091155Z" creationid="akiji" creationdate="20200430T132012Z">
        <seg>独自の型を  &lt;g2&gt;クラス&lt;/g2&gt; ではなく &lt;g1&gt;構造体&lt;/g1&gt; として定義すると、ヒープメモリよりも低負荷でGCに負担もかけないスタックメモリ上にインスタンスを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you define the function inline in the same call you can omit the argument types, the compiler will add the types for you based on the &lt;g1&gt;fun&lt;/g1&gt; signature:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T085659Z" creationid="makenowjust" creationdate="20200512T085659Z">
        <seg>呼び出しと同時にインラインで関数を定義する場合は、引数の型を省略することが可能です。このとき、コンパイラが &lt;g1&gt;fun&lt;/g1&gt; のシグネチャに基づいて型を追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you define the function inline in the same call you can omit the argument types, the compiler will add the types for you based on the `fun` signature:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024506Z" creationid="hirofumiwakasugi" creationdate="20151008T024506Z">
        <seg>もし呼び出しと同時にインラインで関数を定義する場合は、引数の型を省略することが可能です。このとき、コンパイラが `fun` のシグネイチャに基づいて型を追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you define the function inline in the same call you can omit the parameter types, the compiler will add the types for you based on the &lt;g1&gt;fun&lt;/g1&gt; signature:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T093859Z" creationid="makenowjust" creationdate="20210324T093859Z">
        <seg>呼び出しと同時にインラインで関数を定義する場合は、引数の型を省略できます。このとき、コンパイラが &lt;g1&gt;fun&lt;/g1&gt; のシグネチャに基づいて型を追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you do want to have different `Person` types, one with `@name` being an `Int32` and one with `@name` being a `String`, you must use [generics](generics.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T045923Z" creationid="hirofumiwakasugi" creationdate="20150905T045504Z">
        <seg>もし、`@name` が `Int32` である `Person` 型と、`@name` が `String` である `Person` 型の2つを使いたい場合は、 [ジェネリクス](generics.html) を利用すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don't know the difference between stack and heap memory, be sure to &lt;g3&gt;read this&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T120232Z" creationid="akiji" creationdate="20200430T120232Z">
        <seg>スタックメモリとヒープメモリの違いがわからない場合は、 &lt;g3&gt;ここを読んでみてください&lt;/g3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don't know the difference between stack and heap memory, be sure to &lt;g3&gt;read this&lt;/g3&gt;https://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap&lt;e4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T082040Z" creationid="makenowjust" creationdate="20200518T082040Z">
        <seg>スタックメモリとヒープメモリの違いがわからない場合は、&lt;g3&gt;ここを読んでみてください&lt;/g3&gt;https://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap&lt;e4/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don't mark them, &lt;g1&gt;begin/rescue&lt;/g1&gt; blocks that surround this function's calls won't work as expected.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T091637Z" creationid="makenowjust" creationdate="20200512T091637Z">
        <seg>もし上記のように指定しなかった場合、この関数呼び出しを囲む &lt;g1&gt;begin/rescue&lt;/g1&gt; ブロックは期待通りに動いてくれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don't mark them, `begin/rescue` blocks that surround this function's calls won't work as expected.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053456Z" creationid="hirofumiwakasugi" creationdate="20151008T053456Z">
        <seg>もし上記のように指定しなかった場合、この関数の呼び出しを囲む `begin/rescue` ブロックが期待通りに働いてくれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don't specify one it defaults to &lt;g2&gt;Reference&lt;/g2&gt; for classes and &lt;g3&gt;Struct&lt;/g3&gt; for structs.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T070455Z" creationid="makenowjust" creationdate="20200504T103607Z">
        <seg>継承元を明示的に指定せず定義した場合、クラスであれば &lt;g2&gt;Reference&lt;/g2&gt; が、構造体であれば &lt;g3&gt;Struct&lt;/g3&gt; がスーパークラスになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don't specify one it defaults to `Reference` for classes and `Struct` for structs.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T023456Z" creationid="hirofumiwakasugi" creationdate="20150910T023444Z">
        <seg>継承元を明示的に指定せず定義した場合、クラスであれば `Reference` を、構造体であれば `Struct` がスーパークラスになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you find bugs or sections
which need more clarification you're welcome to contribute to this
language reference.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164457Z" creationid="makenowjust" creationdate="20200413T164304Z">
        <seg>バグ、もしくはより詳細な説明の必要なセクションを見つけたのなら、この言語リファレンスへ貢献することを歓迎します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you get an error like:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061035Z" creationid="hirofumiwakasugi" creationdate="20160204T061024Z">
        <seg>以下のエラーが発生することがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you have &lt;g1&gt;Linuxbrew&lt;/g1&gt;https://linuxbrew.sh&lt;e2/&gt; installed you're ready to install Crystal:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T113211Z" creationid="makenowjust" creationdate="20200518T113211Z">
        <seg>&lt;g1&gt;Linuxbrew&lt;/g1&gt;https://linuxbrew.sh&lt;e2/&gt; がインストールされていれば、Crystal をインストールする準備は万端です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you have &lt;g1&gt;snapd&lt;/g1&gt; installed you're ready to install Crystal:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T113435Z" creationid="makenowjust" creationdate="20200518T113435Z">
        <seg>&lt;g1&gt;snapd&lt;/g1&gt; がインストールしてあれば、Crystal をインストールする準備は万端です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you have an array of points the points are embedded inside the array's buffer:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T175343Z" creationid="makenowjust" creationdate="20200505T175343Z">
        <seg>そして、配列のバッファに各点の情報が埋め込まれると考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you like this project and you see its potential, you can help.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083229Z" creationid="makenowjust" creationdate="20200516T083229Z">
        <seg>このプロジェクトを気に入っていただき、その可能性を感じていただけたならば、力になれるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to bind to a C function that starts with a capital letter you can give the function another name for Crystal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T041456Z" creationid="hirofumiwakasugi" creationdate="20151005T041456Z">
        <seg>もし、大文字で始まる C の関数へバインドしたい場合、Crystal のために別の名前を与えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to execute the body at least once and then check for a breaking condition, you can do this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052159Z" creationid="hirofumiwakasugi" creationdate="20150905T052159Z">
        <seg>ループを抜けるための条件を設定することで、必ず1回は本体を実行することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to set any compile-time flags not set implicitly through &lt;g1&gt;--target&lt;/g1&gt;, you can use the &lt;g2&gt;-D&lt;/g2&gt; command line flag.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T024031Z" creationid="makenowjust" creationdate="20200511T024031Z">
        <seg>&lt;g1&gt;--target&lt;/g1&gt; 経由で暗黙的にセットされているものでないコンパイル時のフラグをセットする必要がある場合は、&lt;g2&gt;-D&lt;/g2&gt; コマンドライン引数が使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to use compile flags and want to execute the program with some arguments you can still use the run command: &lt;g1&gt;crystal run path/to/file.cr -Dcompiler_flag --release -- arg1 arg2&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T131410Z" creationid="makenowjust" creationdate="20200610T131313Z">
        <seg>コンパイラフラグを使いたい場合や引数と共にプログラムを実行したい場合は、次のように run コマンドが使えます。&lt;g1&gt;crystal run path/to/file.cr -Dcompiler_flag --release -- arg1 arg2&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to write a string that has many double quotes, parenthesis, or similar
characters, you can use alternative literals:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104420Z" creationid="hirofumiwakasugi" creationdate="20150901T104420Z">
        <seg>もし文字列にダブルクォートやカッコなどの文字が多く含まれている場合には、次のような形式でリテラルを書くこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you omit an explicit type restriction, the compiler will try to infer the type of instance and class variables using a bunch of syntactic rules.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T135216Z" creationid="makenowjust" creationdate="20200427T133628Z">
        <seg>明示的に型制約をしなかった場合、コンパイラは構文上の規則からインスタンス変数・クラス変数の型を推論しようとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you prefer to do it manually execute:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T053622Z" creationid="hirofumiwakasugi" creationdate="20150831T052947Z">
        <seg>もし手動で構成したいのであれば、以下の操作を実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you prefer to do it manually, execute the following commands:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T102834Z" creationid="makenowjust" creationdate="20200518T102814Z">
        <seg>もし手動で設定したいのであれば、以下のコマンドを実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you redefine a method, the last definition will take precedence.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T123107Z" creationid="hirofumiwakasugi" creationdate="20150904T122933Z">
        <seg>もしあるメソッドが再度定義された場合、最後に定義されたものが優先されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you run the compiler from somewhere else, say the &lt;g1&gt;src&lt;/g1&gt; folder, &lt;g2&gt;lib&lt;/g2&gt; will not be in the path and &lt;g3&gt;require "foo"&lt;/g3&gt; can't be resolved.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T090700Z" creationid="makenowjust" creationdate="20200427T090700Z">
        <seg>プロジェクトのルートディレクトリ以外の場所からコンパイラを実行すると (例えば  &lt;g1&gt;src&lt;/g1&gt; ディレクトリの中から、など)、 &lt;g2&gt;lib&lt;/g2&gt; は require パスに追加されず &lt;g3&gt;require "foo"&lt;/g3&gt; はうまく解決できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you use &lt;g1&gt;{"crystal", "ruby", "java"}&lt;/g1&gt; in the above program it will work the same way, but since a tuple doesn't involve heap memory it will be faster, consume less memory, and give more chances for the compiler to optimize the program.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T131728Z" creationid="akiji" creationdate="20200430T131728Z">
        <seg>上記プログラムで &lt;g1&gt;{"crystal", "ruby", "java"}&lt;/g1&gt;を使用すると、同じようにちゃんと動作しますが、タプルはヒープメモリをつかわないため、より高速でメモリ消費が少なく、コンパイラに対してプログラムを最適化するより多くの機会を提供できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you use a single uppercase letter as a type restriction, the identifier becomes a free variable:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T035649Z" creationid="hirofumiwakasugi" creationdate="20150908T030348Z">
        <seg>型制約において、型を1文字の大文字で指定するとその識別子は自由変数となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want a method to only accept the type Int32 (not instances of it), you use &lt;g1&gt;.class&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T161745Z" creationid="makenowjust" creationdate="20200429T161745Z">
        <seg>もし、メソッドが(インスタンスではなく) Int32 クラスだけを受け入れるようにしたい場合、&lt;g1&gt;.class&lt;/g1&gt; を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want a method to only accept the type Int32 (not instances of it), you use `.class`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025720Z" creationid="hirofumiwakasugi" creationdate="20150908T025544Z">
        <seg>もし、メソッドが (そのインスタンスではなく) `Int32` というクラスだけを受け入れるようにしたい場合、`.class` を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to contribute then you might want to install Crystal from sources.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T062357Z" creationid="hirofumiwakasugi" creationdate="20150831T060128Z">
        <seg>もしコントリビュートしたいと考えているのであれば、Crystal をソースコードからインストールしたくなることと思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to dive into the development of Crystal, these materials give some guidance.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T152926Z" creationid="makenowjust" creationdate="20210726T152926Z">
        <seg>Crystal の開発に興味があるのであれば、これらの資料がガイドになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to invoke the program's method, even though the current type defines a method with the same name, prefix the call with &lt;g1&gt;::&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T100950Z" creationid="makenowjust" creationdate="20200427T100950Z">
        <seg>プログラムに定義されたメソッドを呼び出したいけれど、現在の型にも同名のメソッドが定義されているときは、&lt;g1&gt;::&lt;/g1&gt;をプレフィックスにして呼び出すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to invoke the program's method, even though the current type defines a method with the same name, prefix the call with `::`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021405Z" creationid="hirofumiwakasugi" creationdate="20150904T021221Z">
        <seg>プログラムに定義されたメソッドを実行したいけれど、自身の型にも同名のメソッドが定義されている場合には、`::` をプレフィックスに与えることで実行できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to keep using them, use the &lt;g5&gt;github:crystal-community/future.cr&lt;/g5&gt;https://github.com/crystal-community/future.cr&lt;e7/&gt; shard.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T031052Z" creationid="makenowjust" creationdate="20200611T031052Z">
        <seg>これらを使い続けたい場合 &lt;g5&gt;github:crystal-community/future.cr&lt;/g5&gt;https://github.com/crystal-community/future.cr&lt;e7/&gt; shard を利用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to pass &lt;g1&gt;NULL&lt;/g1&gt; instead of a callback, just pass &lt;g2&gt;nil&lt;/g2&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T085857Z" creationid="makenowjust" creationdate="20200512T085857Z">
        <seg>コールバックではなく &lt;g1&gt;NULL&lt;/g1&gt; を渡したい場合は、単純に &lt;g2&gt;nil&lt;/g2&gt; を渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to pass `NULL` instead of a callback, just pass `nil`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022900Z" creationid="hirofumiwakasugi" creationdate="20151009T022900Z">
        <seg>もしコールバックの代わりに `NULL` を渡したい場合は、単純に `nil` を渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to support the empty-tuple case, add another overload:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T030209Z" creationid="hirofumiwakasugi" creationdate="20150908T030209Z">
        <seg>もし空のタプルもサポートしたいのであれば、もう1つオーバーロードを追加してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to test that log entries are emitted you can use the new spec helper &lt;g1&gt;Log.capture&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T031005Z" creationid="makenowjust" creationdate="20200611T031005Z">
        <seg>出力するログのエントリーをテストしたい場合、新しく追加された &lt;g1&gt;Log.capture&lt;/g1&gt; というヘルパーが利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want your contribution to Crystal to be listed here, fork the repository, add it to the list and send a pull request." link_text="awesome-crystal" url="https://github.com/veelenga/awesome-crystal" icon="awesome" continues=true custom_icon=true %} {% include community_row.html title="" divId="shardbox" content="A database of Crystal shards.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T103413Z" creationid="makenowjust" creationdate="20200516T100742Z">
        <seg>このリストにあなたのCrystalへの貢献を追加したい場合は、リポジトリを fork して、リストにそれを追加して Pull Request を送ってください。'
   link_text='awesome-crystal'
   url='https://github.com/veelenga/awesome-crystal'
   icon='awesome'
   continues=true
   custom_icon=true %}

{% include community_row.html
   title=''
   divId='shardbox'
   content='Crystal shardsのデータベース。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you would like more information about &lt;g1&gt;bin/crystal&lt;/g1&gt;, check out the &lt;g2&gt;using the compiler&lt;/g2&gt; documentation.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T065529Z" creationid="makenowjust" creationdate="20200518T065529Z">
        <seg>&lt;g1&gt;bin/crystal&lt;/g1&gt; コマンドについてより詳しい情報が必要な場合は、ドキュメントの&lt;g2&gt;コンパイラの使い方&lt;/g2&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you would like more information about &lt;g1&gt;bin/crystal&lt;/g1&gt;, check out the &lt;g2&gt;using the compiler&lt;/g2&gt;https://crystal-lang.org/reference/using_the_compiler/&lt;e3/&gt; documentation.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093245Z" creationid="makenowjust" creationdate="20200518T093245Z">
        <seg>&lt;g1&gt;bin/crystal&lt;/g1&gt; コマンドについてより詳しい情報が必要な場合は、ドキュメントの&lt;g2&gt;コンパイラの使い方&lt;/g2&gt;https://ja.crystal-lang.org/reference/using_the_compiler/&lt;e3/&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you're hosting somewhere else, please feel free to write up a guide and add it to this book!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T163654Z" creationid="makenowjust" creationdate="20200527T163654Z">
        <seg>それ以外の場所で公開しているのであれば、ぜひガイドを書いて、このリファレンスに追加するよう言ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you're on a &lt;g1&gt;-RELEASE&lt;/g1&gt; version of FreeBSD, by default &lt;g2&gt;pkg&lt;/g2&gt; is configured for the &lt;g3&gt;quarterly&lt;/g3&gt; package set, which is updated every quarter (except for security patches, which are included ASAP).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111111Z" creationid="makenowjust" creationdate="20200518T111111Z">
        <seg>&lt;g1&gt;-RELEASE&lt;/g1&gt; バージョンの FreeBSD であれば、デフォルトで &lt;g2&gt;pkg&lt;/g2&gt; は &lt;g3&gt;quarterly&lt;/g3&gt; パッケージセットに設定されています。これは各クオーター毎に更新されます (セキュリティパッケージを除いて)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you're planning to contribute to the language itself you might find useful to install LLVM as well.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T113253Z" creationid="makenowjust" creationdate="20200518T113253Z">
        <seg>言語にコントリビュートするつもりであれば、同時に LLVM もインストールしておくとよいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you're planning to contribute to the project you might find useful to install LLVM as well.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055330Z" creationid="hirofumiwakasugi" creationdate="20150831T055330Z">
        <seg>もしプロジェクトにコントリビュートしたいのであれば、同時に LLVM もインストールしておくとよいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you're using GitLab, you'll also want to change all instances of &lt;g2&gt;github&lt;/g2&gt; with &lt;g3&gt;gitlab&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T161526Z" creationid="makenowjust" creationdate="20200527T161526Z">
        <seg>また GitLab を使っている場合は、&lt;g2&gt;github&lt;/g2&gt; を &lt;g3&gt;gitlab&lt;/g3&gt; に変更してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If your class
defines a &lt;g5&gt;finalize&lt;/g5&gt; method, be sure to catch any exceptions that might be
raised in the &lt;g6&gt;initialize&lt;/g6&gt; methods and free resources.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T085324Z" creationid="makenowjust" creationdate="20200504T140423Z">
        <seg>もしクラスに &lt;g5&gt;finalize&lt;/g5&gt; メソッドを定義する場合は、必ず &lt;g6&gt;initialize&lt;/g6&gt; メソッドで発生し得る例外を捕捉して、リソースの解放をするようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If your class defines a finalizer, be sure to catch any exceptions that might be raised in the `initialize` methods and free resources.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T042148Z" creationid="hirofumiwakasugi" creationdate="20150910T042000Z">
        <seg>もしクラスに `finalize` を定義する場合は、必ず `initialize` メソッドで発生し得る例外を捕捉して、リソースの開放をするようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If your shard builds an application, both &lt;g1&gt;shard.yml&lt;/g1&gt; and &lt;g2&gt;shard.lock&lt;/g2&gt; should be checked into version control to provide reproducible dependency installs.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T095142Z" creationid="makenowjust" creationdate="20200419T174221Z">
        <seg>アプリケーションを開発しているのであれば、再現可能な依存関係のインストールを実現するために、&lt;g1&gt;shard.yml&lt;/g1&gt; と &lt;g2&gt;shard.lock&lt;/g2&gt; をバージョン管理下に置いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Imagine if all arrays and hashes had their types mixed, it would be pretty annoying to deal with them.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T061508Z" creationid="hirofumiwakasugi" creationdate="20150912T061124Z">
        <seg>例えば、配列やハッシュが様々な型の要素を含むときに、要素がそれぞれ固有の型を持っていないと非常に扱いづらいものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implementations in the standard-library usually raise &lt;g3&gt;&lt;g4&gt;KeyError&lt;/g4&gt;&lt;/g3&gt;
or &lt;g5&gt;&lt;g6&gt;IndexError&lt;/g6&gt;&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T101325Z" creationid="makenowjust" creationdate="20200502T101325Z">
        <seg>標準ライブラリではそのような場合通常、&lt;g3&gt;&lt;g4&gt;KeyError&lt;/g4&gt;&lt;/g3&gt; か &lt;g5&gt;&lt;g6&gt;IndexError&lt;/g6&gt;&lt;/g5&gt; がエラーとして投げなられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implementations in the standard-library usually raise &lt;g3&gt;&lt;g4&gt;KeyError&lt;/g4&gt;&lt;/g3&gt;https://crystal-lang.org/api/latest/KeyError.html&lt;e7/&gt;
or &lt;g5&gt;&lt;g6&gt;IndexError&lt;/g6&gt;&lt;/g5&gt;https://crystal-lang.org/api/latest/IndexError.html&lt;e8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T090907Z" creationid="makenowjust" creationdate="20200518T090907Z">
        <seg>標準ライブラリではそのような場合に通常では &lt;g3&gt;&lt;g4&gt;KeyError&lt;/g4&gt;&lt;/g3&gt;https://crystal-lang.org/api/latest/KeyError.html&lt;e7/&gt; か &lt;g5&gt;&lt;g6&gt;IndexError&lt;/g6&gt;&lt;/g5&gt;https://crystal-lang.org/api/latest/IndexError.html&lt;e8/&gt; をエラーとして生じさせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implicit constants, &lt;g1&gt;None&lt;/g1&gt; and &lt;g2&gt;All&lt;/g2&gt;, are automatically added to these enums, where &lt;g3&gt;None&lt;/g3&gt; has the value &lt;g4&gt;0&lt;/g4&gt; and &lt;g5&gt;All&lt;/g5&gt; has the "or"ed value of all constants.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182422Z" creationid="makenowjust" creationdate="20200505T182422Z">
        <seg>また、暗黙の定数として &lt;g1&gt;None&lt;/g1&gt; と &lt;g2&gt;All&lt;/g2&gt; が自動的に列挙型に追加されます。ここで &lt;g3&gt;None&lt;/g3&gt; の値は &lt;g4&gt;0&lt;/g4&gt; で、&lt;g5&gt;All&lt;/g5&gt; はすべての定数のビット ORを取ったものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implicit constants, `None` and `All`, are automatically added to these enums, where `None` has the value `0` and `All` has the "or"ed value of all constants.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150915T052016Z" creationid="hirofumiwakasugi" creationdate="20150915T051414Z">
        <seg>また、このとき Enum には、`None` と `All` が暗黙的に追加されます。`None` の値は `0` で、`All` はすべての定数の「OR」をとったときの値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implicit-object allowed</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094341Z" creationid="makenowjust" creationdate="20200424T093716Z">
        <seg>暗黙のオブジェクト指定が利用できます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In &lt;g2&gt;#5916&lt;/g2&gt;https://github.com/crystal-lang/crystal/issues/5916&lt;e4/&gt; you can read the motivation to standardize them as the first argument in these functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T142042Z" creationid="makenowjust" creationdate="20200610T142042Z">
        <seg>&lt;g2&gt;#5916&lt;/g2&gt;https://github.com/crystal-lang/crystal/issues/5916&lt;e4/&gt; で、このような引数を最初の引数にすることを標準化する提案がありました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In &lt;g3&gt;#9283&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9283&lt;e4/&gt; we are dropping the logic to show the fraction of seconds depending on the time value.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T141810Z" creationid="makenowjust" creationdate="20200610T152150Z">
        <seg>&lt;g3&gt;#9283&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9283&lt;e4/&gt; で、時刻に応じて小数点以下の秒を表示する機能を削除しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Crystal everything is an object.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T012652Z" creationid="hirofumiwakasugi" creationdate="20150904T012652Z">
        <seg>Crystal ではすべてのものがオブジェクトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Crystal it looks like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080823Z" creationid="makenowjust" creationdate="20200516T080823Z">
        <seg>Crystal ではこのようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Crystal, &lt;g1&gt;puts&lt;/g1&gt; will invoke &lt;g2&gt;to_s(io)&lt;/g2&gt; on the object, passing it the IO to which the string representation should be written.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T120831Z" creationid="akiji" creationdate="20200430T120831Z">
        <seg>Crystalでは、 &lt;g1&gt;puts&lt;/g1&gt;はそれぞれのオブジェクトの&lt;g2&gt;to_s(io)&lt;/g2&gt;に、そのオブジェクトの文字列表現を書き出したいIOを渡して実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Debian derived distributions, you can use the &lt;g1&gt;Official Crystal deb repository&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T092337Z" creationid="makenowjust" creationdate="20210130T092337Z">
        <seg>Debian 系のディストリビューションでは、&lt;g1&gt;Crystal 公式の deb リポジトリ&lt;/g1&gt;を利用してインストールできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Debian derived distributions, you can use the official Crystal repository.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T052645Z" creationid="hirofumiwakasugi" creationdate="20150831T052645Z">
        <seg>Debian 系のディストリビューションでは、公式の Crystal リポジトリを利用してインストールすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In GitLab this badge belongs to the project so we'll cover it in the GitLab instructions below, for GitHub it is common to place it below the description in your README.md like so:
(Be sure to replace &lt;g1&gt;&lt;LINK-TO-YOUR-DOCUMENTATION&gt;&lt;/g1&gt; accordingly)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T160812Z" creationid="makenowjust" creationdate="20200527T160733Z">
        <seg>GitLab では以降で説明する方法で、このバッジをプロジェクトに設定することができます。GitHub では README.md に次のように追加します。
(&lt;g1&gt;&lt;LINK-TO-YOUR-DOCUMENTATION&gt;&lt;/g1&gt; を自分のものに置き換えることを忘れないでください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Red Hat derived distributions, you can use the &lt;g1&gt;Official Crystal rpm repository&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T092237Z" creationid="makenowjust" creationdate="20210130T092206Z">
        <seg>Red Hat 系のディストリビューションでは、&lt;g1&gt;Crystal 公式の rpm リポジトリ&lt;/g1&gt;を利用してインストールできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Red Hat derived distributions, you can use the official Crystal repository.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T101707Z" creationid="makenowjust" creationdate="20200518T101707Z">
        <seg>Red Hat 系のディストリビューションでは、公式の Crystal リピジトリを利用してインストールできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In RedHat derived distributions, you can use the official Crystal repository.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055048Z" creationid="hirofumiwakasugi" creationdate="20150831T055045Z">
        <seg>RedHat 系のディストリビューションでは、公式の Crystal リポジトリを利用してインストールすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Ubuntu derived distributions, you can use the &lt;g1&gt;Official Crystal deb repository&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T092228Z" creationid="makenowjust" creationdate="20210130T092119Z">
        <seg>Ubuntu 系のディストリビューションでは、&lt;g1&gt;Crystal 公式の deb リポジトリ&lt;/g1&gt;.を利用してインストールできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Ubuntu derived distributions, you can use the official Crystal repository.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111801Z" creationid="makenowjust" creationdate="20200518T111801Z">
        <seg>Ubuntu 系のディストリビューションでは、公式の Crystal リポジトリを利用してインストールできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a 32-bit machine we can only spawn 512 fibers, which is not a lot.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103133Z" creationid="akiji" creationdate="20200428T062725Z">
        <seg>32ビットマシンの場合はそれほど多くはなく、生成できるファイバは512個だけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a previous release the crystal property became effectively mandatory and is used to declare for which versions of the compiler and std-lib the package is expected to work.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T110210Z" creationid="makenowjust" creationdate="20200809T110116Z">
        <seg>前回のリリースで crystal プロパティが必須になり、そのパッケージが期待するコンパイラと標準ライブラリのバージョンを指定できるようになりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a way, there's still nothing relating `T` with `@value`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T064512Z" creationid="hirofumiwakasugi" creationdate="20150912T064017Z">
        <seg>ただ、それでも `T` と `@value` の間に関連性があるわけではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In all of these cases you can use the special &lt;g1&gt;*&lt;/g1&gt; and &lt;g2&gt;**&lt;/g2&gt; suffixes:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T091517Z" creationid="makenowjust" creationdate="20200427T091517Z">
        <seg>これらのすべての場合で、末尾に &lt;g1&gt;*&lt;/g1&gt; と &lt;g2&gt;**&lt;/g2&gt; という特別な記号を利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In all of these cases you can use the special `*` and `**` suffixes:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T161145Z" creationid="hirofumiwakasugi" creationdate="20150905T161026Z">
        <seg>これらのすべてのケースにおいて、 `*` と `**` という特別なサフィックスを利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In both cases you can use nested names and they will be looked up in nested directories:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T160538Z" creationid="hirofumiwakasugi" creationdate="20150905T160428Z">
        <seg>上記したどちらのケースでも、ネストされた形式で名前を指定することが可能で、その場合にはネストされたデイレクトリを探索します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In case no default can be found, this option is mandatory.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T162703Z" creationid="makenowjust" creationdate="20200419T162636Z">
        <seg>デフォルト値が見つからない場合、このオプションは必須です</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In case we want to build richer CLI applications, there are libraries that can help us.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T190917Z" creationid="makenowjust" creationdate="20200413T185802Z">
        <seg>よりリッチなCLI アプリケーションを構築しようと思ったとき、これらのライブラリが助けになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In cases like this where we want each instance to have a unique type for `@value`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T061002Z" creationid="hirofumiwakasugi" creationdate="20150912T060710Z">
        <seg>したがって、このような場合には、`@value` がインスタンスごとに固有の型を持つことが望ましいと考えることでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In certain cases you want to tell the compiler to fix the type of an instance variable.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T094141Z" creationid="hirofumiwakasugi" creationdate="20150905T093311Z">
        <seg>ときには、インスタンス変数の型をコンパイラに固定してもらいたいときもあるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In class names, acronyms are &lt;g1&gt;all-uppercase&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T071931Z" creationid="makenowjust" creationdate="20200412T203836Z">
        <seg>クラス名では、頭字語は &lt;g1&gt;すべて大文字&lt;/g1&gt; とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In class names, acronyms are _all-uppercase_.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010828Z" creationid="hirofumiwakasugi" creationdate="20151010T010702Z">
        <seg>クラス名では、頭字語は「すべて大文字」とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In code examples, the comment &lt;g1&gt;#=&gt;&lt;/g1&gt; is used to show the value of an expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162809Z" creationid="makenowjust" creationdate="20200413T162809Z">
        <seg>コードの例では、ある式の結果を示すために&lt;g1&gt;#=&gt;&lt;/g1&gt;というコメントを使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In code examples, the comment `#=&gt;` is used to show the value of an expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072316Z" creationid="hirofumiwakasugi" creationdate="20150901T072316Z">
        <seg>コードの例では、ある式の結果の値を示すために `#=&gt;` というコメントを使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In either case, &lt;g1&gt;&amp;.some_method&lt;/g1&gt; is an argument passed to &lt;g2&gt;method&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185408Z" creationid="makenowjust" creationdate="20200505T185200Z">
        <seg>両方の場合で、&lt;g1&gt;&amp;.some_method&lt;/g1&gt; は &lt;g2&gt;method&lt;/g2&gt; に引数として渡されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In fact, the above code doesn't need the return type restriction in &lt;g1&gt;self.unknown&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T141943Z" creationid="makenowjust" creationdate="20200427T141943Z">
        <seg>実際のところ、上記のコードでは&lt;g1&gt;self.unknown&lt;/g1&gt;の型制約は必要ありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In general, the standard library already takes care of doing all of this so you don't have to.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T074523Z" creationid="akiji" creationdate="20200428T074523Z">
        <seg>基本的に、標準ライブラリは使用者がそうした一切を気にかける必要がないように配慮されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In general, they are just value holders associated with the type that the programmer expects them to have according to their location and usage on the program.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060839Z" creationid="hirofumiwakasugi" creationdate="20150902T052052Z">
        <seg>どういうことかというと、一般的にローカル変数というのは単純に型の情報を持った値の入れ物のようなものと考えることができて、プログラムにおけるそれぞれの場所や用途に応じてその入れ物の型も変化するということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In generated documentation the dummy &lt;g1&gt;&amp;block&lt;/g1&gt; method will always appear, regardless of you writing it or not.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T151945Z" creationid="makenowjust" creationdate="20200429T151945Z">
        <seg>ドキュメントでは、このように書いたかに関わらずに、必ず &lt;g1&gt;&amp;block&lt;/g1&gt; を引数に伴なって表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In generated documentation the dummy `&amp;block` method will always appear, regardless of you writing it or not.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072339Z" creationid="hirofumiwakasugi" creationdate="20150906T072316Z">
        <seg>ドキュメントでは、明示的にダミーの `&amp;block` を指定したかどうかに関わらず、必ず `&amp;block` を引数に伴って出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In its basic form, it allows matching a value against other values:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T023531Z" creationid="hirofumiwakasugi" creationdate="20150903T023234Z">
        <seg>基本的な書き方は以下のような形で、値と値のマッチングによって制御します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In let_it_cli.cr:5:46</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182451Z" creationid="makenowjust" creationdate="20200413T182451Z">
        <seg>In let_it_cli.cr:5:46</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In macro definitions arguments are passed as their AST nodes, giving you access to them in macro expansions (`{{some_macro_argument}}`).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030258Z" creationid="hirofumiwakasugi" creationdate="20151009T030258Z">
        <seg>マクロの定義では、引数は AST ノードとして渡され、マクロ展開 (`{{some_macro_argument}}`) を使ってそれらにアクセスすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In macro definitions, arguments are passed as their AST nodes, giving you access to them in macro expansions (&lt;g1&gt;{{some_macro_argument}}&lt;/g1&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T223710Z" creationid="makenowjust" creationdate="20200509T223710Z">
        <seg>マクロ定義では、引数はそれ自身の AST ノードとして渡され &lt;g1&gt;{{some_macro_argument}}&lt;/g1&gt; のようにしてそれらにアクセスすることができました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In many programming languages what will happen is that &lt;g1&gt;to_s&lt;/g1&gt;, or a similar method for converting the object to its string representation, will be invoked, and then that string will be written to the standard output.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T022157Z" creationid="akiji" creationdate="20200430T120701Z">
        <seg>こうした際、多くのプログラミング言語では、&lt;g1&gt;to_s&lt;/g1&gt;やそれに類する「オブジェクトを文字列表現に変換するメソッド」を実行し、その文字列を標準出力へ書きんでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In method names, acronyms are &lt;g1&gt;all-lowercase&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T071945Z" creationid="makenowjust" creationdate="20200412T203926Z">
        <seg>メソッド名では、頭字語は &lt;g1&gt;すべて小文字&lt;/g1&gt; とします。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In method names, acronyms are _all-lowercase_.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010856Z" creationid="hirofumiwakasugi" creationdate="20151010T010856Z">
        <seg>メソッド名では、頭字語は「すべて小文字」とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In non-packed structs, padding between field types is inserted according to the target system.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073043Z" creationid="hirofumiwakasugi" creationdate="20150919T072939Z">
        <seg>パックしていない構造体では、対象のシステムに応じて、フィールドの型の間にパディングが挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In order to account for load-order dependencies, &lt;g3&gt;source_file&lt;/g3&gt; can be used to specify one (or multiple)
entrypoints for the docs generator.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T162432Z" creationid="makenowjust" creationdate="20200419T162432Z">
        <seg>読む込む順序に依存する場合は、ドキュメントジェネレータに明示的に1つ (ないし複数) の&lt;g3&gt;source_file&lt;/g3&gt; をエントリーポイントして指定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In order to achieve this, the compiler executable provides two flags:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T044817Z" creationid="hirofumiwakasugi" creationdate="20150909T044557Z">
        <seg>そのために、コンパイラに以下の2つのフラグを用意しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In order to release a Crystal Shard, and follow along with this tutorial, you will need the following:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T154010Z" creationid="makenowjust" creationdate="20200527T154010Z">
        <seg>Crystal の shard をリリースするために、そしてこのチュートリアルを続けていくためには、次のものが必要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In regular code &lt;g1&gt;Int32 -&gt; String&lt;/g1&gt; is a syntax error.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T122727Z" creationid="makenowjust" creationdate="20200507T122727Z">
        <seg>通常のコードでは &lt;g1&gt;Int32 -&gt; String&lt;/g1&gt; は構文エラーです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In regular code &lt;g1&gt;_&lt;/g1&gt; means the &lt;g2&gt;underscore&lt;/g2&gt; variable.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T074608Z" creationid="makenowjust" creationdate="20210324T074608Z">
        <seg>通常のコードにおいては、 &lt;g1&gt;_&lt;/g1&gt; は&lt;g2&gt;アンダースコア&lt;/g2&gt;そのものの名前の変数を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In regular code `Int32 -&gt; String` is a syntax error.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011715Z" creationid="hirofumiwakasugi" creationdate="20151009T011653Z">
        <seg>通常のコードにおいては、`Int32 -&gt; String` はシンタックスエラーとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In regular code, &lt;g1&gt;Int32*&lt;/g1&gt; means invoking the &lt;g2&gt;*&lt;/g2&gt; method on &lt;g3&gt;Int32&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T121234Z" creationid="makenowjust" creationdate="20200507T120933Z">
        <seg>通常のコードにおいては、&lt;g1&gt;Int32*&lt;/g1&gt; が意味するのは &lt;g3&gt;Int32&lt;/g3&gt; に対して &lt;g2&gt;*&lt;/g2&gt; メソッドを呼び出すことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In regular code, &lt;g1&gt;Int32?&lt;/g1&gt; is an &lt;g2&gt;Int32 | ::Nil&lt;/g2&gt; union type itself.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T091744Z" creationid="makenowjust" creationdate="20200518T091744Z">
        <seg>通常のコードにおいても、&lt;g1&gt;Int32?&lt;/g1&gt; は &lt;g2&gt;Int32 | ::Nil&lt;/g2&gt; のユニオン型を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In regular code, &lt;g1&gt;Int32[8]&lt;/g1&gt; means invoking the &lt;g2&gt;[]&lt;/g2&gt; method on &lt;g3&gt;Int32&lt;/g3&gt; with &lt;g4&gt;8&lt;/g4&gt; as an argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T121230Z" creationid="makenowjust" creationdate="20200507T121230Z">
        <seg>通常のコードにおいては、&lt;g1&gt;Int32[8]&lt;/g1&gt; は &lt;g3&gt;Int32&lt;/g3&gt; に対して &lt;g4&gt;8&lt;/g4&gt; を引数として &lt;g2&gt;[]&lt;/g2&gt; メソッドを呼び出すことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In regular code, &lt;g1&gt;{Int32, String}&lt;/g1&gt; is a tuple instance containing &lt;g2&gt;Int32&lt;/g2&gt; and &lt;g3&gt;String&lt;/g3&gt; as its elements.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T122332Z" creationid="makenowjust" creationdate="20200507T122332Z">
        <seg>通常のコードにおいては、&lt;g1&gt;{Int32, String}&lt;/g1&gt; は&lt;g2&gt;Int32&lt;/g2&gt; と &lt;g3&gt;String&lt;/g3&gt; を要素として持つタプルのインスタンスを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In regular code, &lt;g1&gt;{x: Int32, y: String}&lt;/g1&gt; is a named tuple instance containing &lt;g2&gt;Int32&lt;/g2&gt; and &lt;g3&gt;String&lt;/g3&gt; for &lt;g4&gt;x&lt;/g4&gt; and &lt;g5&gt;y&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T122603Z" creationid="makenowjust" creationdate="20200507T122603Z">
        <seg>通常のコードにおいては、&lt;g1&gt;{x: Int32, y: String}&lt;/g1&gt; は &lt;g2&gt;Int32&lt;/g2&gt; と &lt;g3&gt;String&lt;/g3&gt; をキー &lt;g4&gt;x&lt;/g4&gt; と &lt;g5&gt;y&lt;/g5&gt; の値として持つ名前付きタプルのインスタンスを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In regular code, &lt;g3&gt;Int32 | String&lt;/g3&gt; means invoking the method &lt;g4&gt;|&lt;/g4&gt; on &lt;g5&gt;Int32&lt;/g5&gt; with &lt;g6&gt;String&lt;/g6&gt; as an argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T121241Z" creationid="makenowjust" creationdate="20200507T120504Z">
        <seg>通常のコードにおいては、&lt;g3&gt;Int32 | String&lt;/g3&gt; が意味するのは &lt;g5&gt;Int32&lt;/g5&gt; に対して &lt;g6&gt;String&lt;/g6&gt; を引数として &lt;g4&gt;|&lt;/g4&gt; メソッドを呼び出すことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In regular code, `Int32 | String` means invoking the method `|` on `Int32` with `String` as an argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010641Z" creationid="hirofumiwakasugi" creationdate="20151009T010641Z">
        <seg>通常のコードにおいては、`Int32 | String` が意味するのは、`Int32` に対して `String` を引数として `|` メソッドを実行することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In regular code, `Int32*` means invoking the `*` method on `Int32`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010951Z" creationid="hirofumiwakasugi" creationdate="20151009T010951Z">
        <seg>通常のコードにおいては、`Int32*` が意味するのは、`Int32` に対して `*` メソッドを実行することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In regular code, `Int32?` is a syntax error.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010914Z" creationid="hirofumiwakasugi" creationdate="20151009T010848Z">
        <seg>通常のコードにおいては、`Int32?` はシンタックスエラーとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In regular code, `Int32[8]` means invoking the `[]` method on `Int32` with `8` as an argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011122Z" creationid="hirofumiwakasugi" creationdate="20151009T011116Z">
        <seg>通常のコードにおいては、`Int32[8]` が意味するのは、`Int32` に対して `8` を引数として `[]` メソッドを実行することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In regular code, `{Int32, String}` is a tuple instance containing `Int32` and `String` as its elements.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011232Z" creationid="hirofumiwakasugi" creationdate="20151009T011204Z">
        <seg>通常のコードにおいては、`{Int32, String}` は `Int32` と `String` を要素として持つタプルのインスタンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In short, avoid &lt;g1&gt;&amp;block&lt;/g1&gt; forwarding when &lt;g2&gt;yield&lt;/g2&gt; is involved.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075840Z" creationid="makenowjust" creationdate="20200506T075840Z">
        <seg>一言で言うと、&lt;g2&gt;yield&lt;/g2&gt; を使う場合は &lt;g1&gt;&amp;block&lt;/g1&gt; のフォワーディングは避けるべき、ということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In short, avoid `&amp;block` forwarding when `yield` is involved.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T032539Z" creationid="hirofumiwakasugi" creationdate="20150917T032404Z">
        <seg>一言で言うと、`yield` を伴うときには `&amp;block` のフォワーディングは避けるべき、ということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In short, it is preferred to:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T135946Z" creationid="hirofumiwakasugi" creationdate="20151010T135946Z">
        <seg>簡単に言うと、以下のようにするのが好ましいということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In that block we define all the options.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T173629Z" creationid="makenowjust" creationdate="20200413T173314Z">
        <seg>このブロックですべてのオプションを定義しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In that case the inferred type will be the one returned by &lt;g3&gt;new&lt;/g3&gt;, if it can be inferred using some of the next rules.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T140407Z" creationid="makenowjust" creationdate="20200427T140407Z">
        <seg>この場合、その他の規則で型が推論できれば、&lt;g3&gt;new&lt;/g3&gt;で返る型に推論できるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In that case, we would get an empty string (if the user only presses &lt;g1&gt;Enter&lt;/g1&gt;) or maybe a &lt;g2&gt;Nil&lt;/g2&gt; value (if the input stream id closed, e.g. by pressing &lt;g3&gt;Ctrl+D&lt;/g3&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182258Z" creationid="makenowjust" creationdate="20200413T182258Z">
        <seg>この場合は、空文字列 (ユーザーが &lt;g1&gt;Enter&lt;/g1&gt;を押した場合) もしくは &lt;g2&gt;Nil&lt;/g2&gt; 値 (&lt;g3&gt;Ctrl+D&lt;/g3&gt;によって入力ストリームを閉じた場合) が返ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In that case, we would get an empty string (if the user only presses &lt;g1&gt;Enter&lt;/g1&gt;) or maybe a &lt;g2&gt;Nil&lt;/g2&gt; value (if the input stream is closed, e.g. by pressing &lt;g3&gt;Ctrl+D&lt;/g3&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T090847Z" creationid="makenowjust" creationdate="20211107T090301Z">
        <seg>この場合、空の文字列 (ユーザーが &lt;g1&gt;Enter&lt;/g1&gt; だけ入力した場合) か、&lt;g2&gt;Nil&lt;/g2&gt; 値 (インプットがクローズされた場合、例えば &lt;g3&gt;Ctrl+D&lt;/g3&gt; を押された) を取得します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the "Everything is an object" section we said that an object has a type and responds to some methods, which is the only way to interact with objects, so we'll need a `name` and `age` methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061750Z" creationid="hirofumiwakasugi" creationdate="20150904T052518Z">
        <seg>「すべてがオブジェクト」のセクションで、「オブジェクトは型を持ち、メソッドに応答する」ものであると書きました。つまり、オブジェクトと対話するためにはメソッドが必要だということです。それでは、名前と年齢のために `name` と `age` の2つのメソッドを設定しましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the "Everything is an object" section we said that an object has a type and responds to some methods, which is the only way to interact with objects, so we'll need both &lt;g3&gt;name&lt;/g3&gt; and &lt;g4&gt;age&lt;/g4&gt; methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T102918Z" creationid="makenowjust" creationdate="20200427T102918Z">
        <seg>「すべてがオブジェクト」のセクションで「オブジェクトは型を持つメソッドに応答する」ものであると書きました。つまり、メソッドがオブジェクトと対話する唯一の方法だということです。よって、名前と年齢のために &lt;g3&gt;name&lt;/g3&gt; と &lt;g4&gt;age&lt;/g4&gt; の2つのメソッドが必要になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the &lt;g1&gt;previous release&lt;/g1&gt; we allowed the compiler to check the exhaustivity of the case conditions.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T124537Z" creationid="makenowjust" creationdate="20200610T124537Z">
        <seg>&lt;g1&gt;前回のリリース&lt;/g1&gt;で、コンパイラは case 文の条件節の網羅性チェックをするようになりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the &lt;g4&gt;initialize&lt;/g4&gt;, the type of the &lt;g5&gt;[Bar.new]&lt;/g5&gt; expression is &lt;g6&gt;Array(Bar)&lt;/g6&gt;, period.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T105536Z" creationid="makenowjust" creationdate="20200504T105536Z">
        <seg>&lt;g4&gt;initialize&lt;/g4&gt; での &lt;g5&gt;[Bar.new]&lt;/g5&gt; という式の型は &lt;g6&gt;Array(Bar)&lt;/g6&gt; です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above case, &lt;g1&gt;@lucky_number&lt;/g1&gt; will be inferred to be &lt;g2&gt;Int32 | Nil&lt;/g2&gt;: &lt;g3&gt;Int32&lt;/g3&gt; because 42 was assigned to it, and &lt;g4&gt;Nil&lt;/g4&gt; because it wasn't assigned in all of the class' initialize methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T135655Z" creationid="makenowjust" creationdate="20200427T135655Z">
        <seg>この場合、&lt;g1&gt;@lucky_number&lt;/g1&gt; は &lt;g2&gt;Int32 | Nil&lt;/g2&gt; に推論されます。&lt;g3&gt;Int32&lt;/g3&gt; は 42 が代入されているためで、 &lt;g4&gt;Nil&lt;/g4&gt; は初期化されていないために、そのようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above case, the compiler will still infer &lt;g1&gt;@name&lt;/g1&gt; to be &lt;g2&gt;String&lt;/g2&gt;, and later will give a compile time error, when fully typing that method, saying that &lt;g3&gt;Int32&lt;/g3&gt; can't be assigned to a variable of type &lt;g4&gt;String&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T065715Z" creationid="makenowjust" creationdate="20200427T141542Z">
        <seg>上の例では、コンパイラは &lt;g1&gt;@name&lt;/g1&gt; を &lt;g2&gt;String&lt;/g2&gt; として、それから &lt;g3&gt;Int32&lt;/g3&gt; の値を &lt;g4&gt;String&lt;/g4&gt; 型の変数に代入できないとしてコンパイルエラーを起こします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above code we didn't have to specify the type arguments of &lt;g1&gt;MyBox&lt;/g1&gt;, the compiler inferred them following this process:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T142851Z" creationid="makenowjust" creationdate="20200504T142851Z">
        <seg>上記では、&lt;g1&gt;MyBox&lt;/g1&gt; に型引数を与えていません。このとき、コンパイラは以下の流れで推論を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above code we didn't have to specify the type arguments of `MyBox`, the compiler inferred them following this process:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T070907Z" creationid="hirofumiwakasugi" creationdate="20150912T070907Z">
        <seg>上記では、`MyBox` に型引数を与えていません。このとき、コンパイラは以下の流れで推論を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above code, &lt;g1&gt;a&lt;/g1&gt; is a union of &lt;g2&gt;Int32 | String&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T114246Z" creationid="makenowjust" creationdate="20200512T114246Z">
        <seg>上記のコードでは、&lt;g1&gt;a&lt;/g1&gt; は &lt;g2&gt;Int32 | String&lt;/g2&gt; のユニオン型となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above code, `a` is a union of `Int32 | String`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010108Z" creationid="hirofumiwakasugi" creationdate="20150930T014204Z">
        <seg>上記のコードでは、`a` は `Int32 | String` の組み合わせ (ユニオン型) となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above example &lt;g1&gt;@lucky_number&lt;/g1&gt; will be inferred to be &lt;g2&gt;Int32 | Nil&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T143641Z" creationid="makenowjust" creationdate="20200427T143641Z">
        <seg>上の例で &lt;g1&gt;@lucky_number&lt;/g1&gt; は &lt;g2&gt;Int32 | Nil&lt;/g2&gt; と推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above example the type of &lt;g1&gt;&amp;block&lt;/g1&gt; wasn't specified: this just means that the captured block doesn't have arguments and doesn't return anything.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T073839Z" creationid="makenowjust" creationdate="20200506T073839Z">
        <seg>上記の例において、&lt;g1&gt;&amp;block&lt;/g1&gt; の型を指定していません。これは捕捉されたブロックが引数を何も受け取らず、戻り値も返さないことを示しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above example the type of &lt;g1&gt;&amp;block&lt;/g1&gt; wasn't specified: this just means that the captured block doesn't take any arguments and doesn't return anything.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T101313Z" creationid="makenowjust" creationdate="20210324T101313Z">
        <seg>上記の例において、&lt;g1&gt;&amp;block&lt;/g1&gt; の型を指定していません。これは捕捉されたブロックが引数を何も受け取らず、戻り値も返さないことを示しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above example the type of `&amp;block` wasn't specified: this just means that the captured block doesn't have arguments and doesn't return anything.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061933Z" creationid="hirofumiwakasugi" creationdate="20150918T061933Z">
        <seg>上記の例において、`&amp;block` の型を指定していません。これは捕捉されたブロックが引数を何も受け取らず、戻り値も返さないことを示しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above example three variables were declared, associated to an index, and then they were printed, referring to these variables with the same indices.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T021240Z" creationid="hirofumiwakasugi" creationdate="20151002T021104Z">
        <seg>上記の例では、3つの変数を宣言しインデックスに紐付けています。それから出力をしていますが、そのときに同じインデックスで変数を参照しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above example we used &lt;g1&gt;nil&lt;/g1&gt; just to communicate that the fiber ended.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T132539Z" creationid="akiji" creationdate="20200429T132539Z">
        <seg>上の例では単にファイバが終了したことを伝えるだけの目的で &lt;g1&gt;nil&lt;/g1&gt; を使いました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above example, &lt;g1&gt;invoke&lt;/g1&gt; receives a block.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075355Z" creationid="makenowjust" creationdate="20200506T075355Z">
        <seg>上記の例で、&lt;g1&gt;invoke&lt;/g1&gt; はブロックを受け取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above example, `invoke` receives a block.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024318Z" creationid="hirofumiwakasugi" creationdate="20150917T024210Z">
        <seg>上記の例で、`invoke` はブロックを受け取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above example, even though &lt;g1&gt;x&lt;/g1&gt; is a local variable, it was captured by the proc literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T080543Z" creationid="makenowjust" creationdate="20200506T080543Z">
        <seg>上記の例において、&lt;g1&gt;x&lt;/g1&gt; はローカル変数であるにも関わらず、Proc リテラルによって捕捉されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above example, even though `x` is a local variable, it was captured by the proc literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T053936Z" creationid="hirofumiwakasugi" creationdate="20150918T053758Z">
        <seg>上記の例において、`x` はローカル変数であるにも関わらず、proc リテラルによって捕捉されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above example, it is as if we pasted the &lt;g1&gt;size&lt;/g1&gt; method from the module into the &lt;g2&gt;Items&lt;/g2&gt; class.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141411Z" creationid="makenowjust" creationdate="20200504T141411Z">
        <seg>上記の例では、まるでモジュールの &lt;g1&gt;size&lt;/g1&gt; メソッドを &lt;g2&gt;Items&lt;/g2&gt; クラスに貼り付けたようになっていることが分かるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above example, it is as if we pasted the `length` method from the module into the `Items` class.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T135837Z" creationid="hirofumiwakasugi" creationdate="20150911T133944Z">
        <seg>上記の例では、まるでモジュールの `length` メソッドを `Items` クラスの中に貼り付けたようにメソッドが実行されていることがわかるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above example, it is as if we pasted the `size` method from the module into the `Items` class.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092312Z" creationid="hirofumiwakasugi" creationdate="20151009T092312Z">
        <seg>上記の例では、まるでモジュールの `size` メソッドを `Items` クラスの中に貼り付けたようにメソッドが実行されていることがわかるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above example, three indexed variables are declared, assigned values, and then printed, displaying their corresponding indices.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T230254Z" creationid="makenowjust" creationdate="20200509T230254Z">
        <seg>上記の例では、3つのインデックスされた変数を宣言し、値を代入して、それから各インデックスについて対応する値を表示しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the case of a generic type, the type arguments can be specified too:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T072433Z" creationid="hirofumiwakasugi" creationdate="20150901T140601Z">
        <seg>ジェネリック型である場合には、型引数を指定することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the first case:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135141Z" creationid="hirofumiwakasugi" creationdate="20150904T135122Z">
        <seg>1つの例の場合:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example &lt;g1&gt;@age&lt;/g1&gt; is inferred to be &lt;g2&gt;Int32&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T142958Z" creationid="makenowjust" creationdate="20200427T142958Z">
        <seg>次の例で、&lt;g1&gt;@age&lt;/g1&gt; は &lt;g2&gt;Int32&lt;/g2&gt; に推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example &lt;g1&gt;@name&lt;/g1&gt; is inferred to be &lt;g2&gt;String&lt;/g2&gt; because the method argument &lt;g3&gt;name&lt;/g3&gt; has a type restriction of type &lt;g4&gt;String&lt;/g4&gt;, and that argument is assigned to &lt;g5&gt;@name&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T140639Z" creationid="makenowjust" creationdate="20200427T140639Z">
        <seg>次の例で &lt;g1&gt;@name&lt;/g1&gt; は &lt;g2&gt;String&lt;/g2&gt; に推論されます。これは &lt;g3&gt;name&lt;/g3&gt; が &lt;g4&gt;String&lt;/g4&gt; の型制約を持ち、&lt;g5&gt;@name&lt;/g5&gt; に代入されているためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, &lt;g1&gt;@address&lt;/g1&gt; is inferred to be &lt;g2&gt;Address&lt;/g2&gt;, because the class method &lt;g3&gt;Address.unknown&lt;/g3&gt; has a return type restriction of &lt;g4&gt;Address&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T142252Z" creationid="makenowjust" creationdate="20200427T141855Z">
        <seg>次の例で、&lt;g1&gt;@address&lt;/g1&gt; は &lt;g2&gt;Address&lt;/g2&gt; に推論されます。これはクラスメソッド &lt;g3&gt;Address.unknown&lt;/g3&gt; に戻り値の型制約として &lt;g4&gt;Address&lt;/g4&gt; が指定されているためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, &lt;g1&gt;@address&lt;/g1&gt; is inferred to be &lt;g2&gt;Address&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T135933Z" creationid="makenowjust" creationdate="20200427T135933Z">
        <seg>次の例で、&lt;g1&gt;@address&lt;/g1&gt; は &lt;g2&gt;Address&lt;/g2&gt; に推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, &lt;g1&gt;@name&lt;/g1&gt; is inferred to be &lt;g2&gt;String&lt;/g2&gt; and &lt;g3&gt;@age&lt;/g3&gt; to be &lt;g4&gt;Int32&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T135514Z" creationid="makenowjust" creationdate="20200427T135514Z">
        <seg>次の例で、&lt;g1&gt;@name&lt;/g1&gt; は &lt;g2&gt;String&lt;/g2&gt; に、&lt;g3&gt;@age&lt;/g3&gt; は &lt;g4&gt;Int32&lt;/g4&gt; に推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, because the default value of &lt;g1&gt;name&lt;/g1&gt; is a string literal, and it's later assigned to &lt;g2&gt;@name&lt;/g2&gt;, &lt;g3&gt;String&lt;/g3&gt; will be added to the set of inferred types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T142655Z" creationid="makenowjust" creationdate="20200427T142655Z">
        <seg>次の例で、&lt;g1&gt;name&lt;/g1&gt; のデフォルト値は文字列リテラルで、それが &lt;g2&gt;@name&lt;/g2&gt; に代入されているため、結果 &lt;g3&gt;String&lt;/g3&gt; に推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the general case, when two types &lt;g1&gt;T1&lt;/g1&gt; and &lt;g2&gt;T2&lt;/g2&gt; are combined, the result is a union &lt;g3&gt;T1 | T2&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T145148Z" creationid="makenowjust" creationdate="20200429T144638Z">
        <seg>一般的に、&lt;g1&gt;T1&lt;/g1&gt; と &lt;g2&gt;T2&lt;/g2&gt; からユニオン型を構成するとき、その結果のユニオン型は &lt;g3&gt;T1 | T2&lt;/g3&gt; となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the latter case, T will be set to the union of the array literal elements.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140016Z" creationid="hirofumiwakasugi" creationdate="20150901T135656Z">
        <seg>配列リテラルで生成した場合であれば、リテラルの要素の型の組み合わせによって型が決まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the latter case, `K` will be set to the union of the hash literal keys, and `V` will be set to the union of the hash literal values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T142449Z" creationid="hirofumiwakasugi" creationdate="20150901T142332Z">
        <seg>ハッシュリテラルで生成した場合であれば、リテラルのキーと値それぞれの型の組み合わせによって型が決まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the literal notation, &lt;g3&gt;nil&lt;/g3&gt; can be omitted: &lt;g4&gt;x..&lt;/g4&gt; is an end-less range starting from &lt;g5&gt;x&lt;/g5&gt;, and &lt;g6&gt;..x&lt;/g6&gt; is an begin-less range ending at &lt;g7&gt;x&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T035741Z" creationid="makenowjust" creationdate="20200421T035741Z">
        <seg>リテラルを書く上では &lt;g3&gt;nil&lt;/g3&gt; は省略できます。つまり &lt;g4&gt;x..&lt;/g4&gt; は &lt;g5&gt;x&lt;/g5&gt; から始まる end-less 範囲で、&lt;g6&gt;..x&lt;/g6&gt; は&lt;g7&gt;x&lt;/g7&gt;で終わる begin-less 範囲です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the next sections a dollar sign (`$`) denotes the command line.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T071925Z" creationid="hirofumiwakasugi" creationdate="20150901T071925Z">
        <seg>なお、以降ではドル記号 (`$`) でコマンドラインを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the previous example &lt;g1&gt;self&lt;/g1&gt; is the same as writing &lt;g2&gt;Person&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T160943Z" creationid="makenowjust" creationdate="20200429T160943Z">
        <seg>上記の例では &lt;g1&gt;self&lt;/g1&gt; を指定するのは、そのまま &lt;g2&gt;Person&lt;/g2&gt; と書くことと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the previous example `self` is the same as writing `Person`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T023847Z" creationid="hirofumiwakasugi" creationdate="20150908T023654Z">
        <seg>上記の例では、`self` を指定するのは、そのまま `Person` と書くことと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the second case:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135153Z" creationid="hirofumiwakasugi" creationdate="20150904T135153Z">
        <seg>2つ目の例の場合:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In these cases you have to manually mark such functions:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053358Z" creationid="hirofumiwakasugi" creationdate="20151008T053358Z">
        <seg>こういったケースでは、それらの関数に手動で指示を与える必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case the compiler allocates &lt;g2&gt;x&lt;/g2&gt; on the heap and uses it as the context data of the proc to make it work, because normally local variables live in the stack and are gone after a method returns.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T080646Z" creationid="makenowjust" creationdate="20200506T080646Z">
        <seg>通常であれば、ローカル変数はスタックに存在し、メソッドが終了すると消えますが、このような場合はコンパイラは &lt;g2&gt;x&lt;/g2&gt; をヒープに割り当て、Proc が動作するためのコンテキストのデータとして利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case the compiler allocates `x` on the heap and uses it as the context data of the proc to make it work, because normally local variables live in the stack and are gone after a method returns.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T054123Z" creationid="hirofumiwakasugi" creationdate="20150918T054123Z">
        <seg>このとき、コンパイラは `x` をヒープに割り当て、proc が動作するためのコンテキストのデータをして利用します。通常であれば、ローカル変数はスタックに存在し、メソッドが終了すると消えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, if we assign something that's not an `Int32` to `@age`, a compile-time error will be issued at the assignment location.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155308Z" creationid="hirofumiwakasugi" creationdate="20150905T100056Z">
        <seg>こうしておくと、`@age` に `Int32` ではない値を代入しようとしたときに、その場所でコンパイルエラーが発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, leading whitespace is not included in the resulting string.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104227Z" creationid="hirofumiwakasugi" creationdate="20150901T104227Z">
        <seg>この場合、先頭の空白が結果の文字列に含まれることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, no runtime checks are done: pointers are unsafe and this type of casting is usually only needed in C bindings and low-level code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T015956Z" creationid="hirofumiwakasugi" creationdate="20150930T015956Z">
        <seg>このとき、ランタイムのチェックは行われません。ポインタは安全でない (unsafe) ため、通常、この型キャストは C バインディングやローレベルなコードにおいてのみ利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, the block receives a parameter that represents the parameter passed to the option.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175327Z" creationid="makenowjust" creationdate="20200413T175327Z">
        <seg>この場合、ブロックにはオプションに与えられたパラメーターの値が渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, the compiler will consider any usage of `@name` as always being either a `String` or an `Int32` and will give a compile time error if a method is not found for *both* types:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155300Z" creationid="hirofumiwakasugi" creationdate="20150905T042636Z">
        <seg>このケースでは、コンパイラは `@name` は常に `String` か `Int32` のいずれかの型であるとして解釈します。したがって、もしその「両方」の型に存在しないメソッドが呼び出された場合にはコンパイルエラーが発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this cases you can help the compiler by using an `as` expression:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151220T002329Z" creationid="hirofumiwakasugi" creationdate="20151220T002314Z">
        <seg>こういったケースでは、`as`式を使うことでコンパイラを補助することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this release Shards will read the &lt;g1&gt;SHARDS_OPTS&lt;/g1&gt; environment variable for additional CLI options.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T111725Z" creationid="makenowjust" creationdate="20200809T111725Z">
        <seg>このリリースでは、Shards は &lt;g1&gt;SHARDS_OPTS&lt;/g1&gt; 環境変数を読み取って、追加の CLI オプションとして認識するようになりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this release the time came for auto-casting regarding multi-dispatch and regarding default values against unions.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T114949Z" creationid="makenowjust" creationdate="20200610T132609Z">
        <seg>このリリースではオートキャストが多重ディスパッチやユニオンのデフォルト値に対して動作するようになりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this tutorial, we'll be making a Crystal library called &lt;g1&gt;palindrome-example&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200521T042826Z" creationid="makenowjust" creationdate="20200521T042826Z">
        <seg>このチュートリアルでは、&lt;g1&gt;palindrome-example&lt;/g1&gt; という Crystal のライブラリを作ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this way a block can be saved as a callback:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061907Z" creationid="hirofumiwakasugi" creationdate="20150918T061907Z">
        <seg>この方法で、ブロックをコールバックとして保存しておくこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this way a module can be used as a namespace:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T145113Z" creationid="hirofumiwakasugi" creationdate="20150911T142912Z">
        <seg>このとき、モジュールを名前空間として利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this way generic types are less tedious to work with.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T072243Z" creationid="hirofumiwakasugi" creationdate="20150912T071027Z">
        <seg>このようにして、ジェネリック型の扱いが冗長になってしまうことを軽減しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this way we pass a pointer of &lt;g1&gt;status_ptr&lt;/g1&gt; to the function for it to fill its value.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T082007Z" creationid="makenowjust" creationdate="20200512T082007Z">
        <seg>このとき、&lt;g1&gt;status_ptr&lt;/g1&gt; のポインタを関数に渡し、値を設定してもらっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this way we pass a pointer of `status_ptr` to the function for it to fill its value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043900Z" creationid="hirofumiwakasugi" creationdate="20151005T043846Z">
        <seg>このとき、`status_ptr` のポインタを関数に渡し、値を設定してもらっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this way, default arguments and named arguments are related to each other: when you specify default arguments you are also allowing the caller to use their names.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T114215Z" creationid="hirofumiwakasugi" creationdate="20150906T113517Z">
        <seg>このように、デフォルト引数と名前付き引数には密接な関係があります。つまり、デフォルト引数を指定した場合、同事に呼び出し側がその名前で引数を指定できるようになるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In those cases you can use &lt;g1&gt;as&lt;/g1&gt; to let it know the type:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T120517Z" creationid="makenowjust" creationdate="20200512T120517Z">
        <seg>これらすべての場合で、&lt;g1&gt;as&lt;/g1&gt; は型を知らせるために使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In type restrictions, generic type arguments and other places where a type is expected, you can use a shorter syntax, as explained in the &lt;g1&gt;type grammar&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T170522Z" creationid="makenowjust" creationdate="20200422T170522Z">
        <seg>型制約やジェネリック型の型引数など型が期待される場所であれば、&lt;g1&gt;型の文法&lt;/g1&gt;で説明しているような短い記法で型を書けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In type restrictions, generic type arguments and other places where a type is expected, you can use a shorter syntax, as explained in the &lt;g1&gt;type&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171839Z" creationid="makenowjust" creationdate="20200422T171839Z">
        <seg>型制約やジェネリック型の型引数など型が期待される場所であれば、&lt;g1&gt;型の文法&lt;/g1&gt;で説明しているような短い記法で型を書けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your terminal: &lt;g1&gt;crystal init lib &lt;YOUR-SHARD-NAME&gt;&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T154735Z" creationid="makenowjust" creationdate="20200527T154735Z">
        <seg>ターミナルで、次のように実行します: &lt;g1&gt;crystal init lib &lt;YOUR-SHARD-NAME&gt;&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Index Accessors</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T101128Z" creationid="makenowjust" creationdate="20200502T101128Z">
        <seg>インデックスアクセサ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Index accessors</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085140Z" creationid="makenowjust" creationdate="20200502T084654Z">
        <seg>インデックス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Index accessors are used to query a value by index or key, for example an array
item or map entry.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T084910Z" creationid="makenowjust" creationdate="20200502T101210Z">
        <seg>インデックスアクセサは配列の要素やハッシュのエントリなど、インデックスもしくはキーに対応する値を取得するために使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indicates the call convention of a &lt;g1&gt;lib fun&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120231Z" creationid="makenowjust" creationdate="20200510T120231Z">
        <seg>&lt;g1&gt;lib fun&lt;/g1&gt; の呼び出し規約を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indicates the call convention of a [lib fun](c_bindings/fun.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T074352Z" creationid="hirofumiwakasugi" creationdate="20150919T074346Z">
        <seg>[lib fun](c_bindings/fun.html) の呼出規約を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Individual symbols are separated by a single space character (&lt;g1&gt; &lt;/g1&gt;) which must be escaped to use it as a part of an identifier.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T172243Z" creationid="makenowjust" creationdate="20200420T172243Z">
        <seg>個々のシンボルは1つのスペース (&lt;g1&gt; &lt;/g1&gt;) で区切られていて、スペースを1つの部分に含めたい場合はエスケープが必要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Informative</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T162607Z" creationid="makenowjust" creationdate="20200527T162607Z">
        <seg>有益な情報を含む</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inheritance</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T103503Z" creationid="makenowjust" creationdate="20200504T103503Z">
        <seg>継承</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inheriting Documentation</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212923Z" creationid="makenowjust" creationdate="20200412T212923Z">
        <seg>ドキュメントの継承</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initializes a shard folder and creates a &lt;g1&gt;shard.yml&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T095217Z" creationid="makenowjust" creationdate="20200419T180511Z">
        <seg>shard用のフォルダを生成して &lt;g1&gt;shard.yml&lt;/g1&gt; を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Input</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T163657Z" creationid="makenowjust" creationdate="20200413T163657Z">
        <seg>入力</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Insert your distribution name and release as &lt;g1&gt;{REPOSITORY}&lt;/g1&gt; in the following script and you are all set.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210504T120346Z" creationid="makenowjust" creationdate="20210504T120346Z">
        <seg>ディストリビューション名とリリース名を次のスクリプトの &lt;g1&gt;{REPOSITORY}&lt;/g1&gt; に挿入することで、設定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inside an &lt;g1&gt;if&lt;/g1&gt;'s branch the type of a variable is the one it got assigned in that branch, or the one that it had before the branch if it was not reassigned:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T075057Z" creationid="makenowjust" creationdate="20200424T075031Z">
        <seg>&lt;g1&gt;if&lt;/g1&gt;の分岐節の中である変数に代入が行なわれたとき、変数の型は代入された式の型になりますが、もし条件に合致せずその代入式が評価されなかった場合、以前の型のままで変更されることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inside an `if`'s branch the type of a variable is the one it got assigned in that branch, or the one that it had before the branch if it was not reassigned:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T025805Z" creationid="hirofumiwakasugi" creationdate="20150903T011814Z">
        <seg>`if` の分岐節の中である変数に代入が行われたとき、変数の型は代入された式の型になりますが、もし条件に合致せずその代入式が評価されなかった場合には、以前の型のままで変更されることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inside it you will have a &lt;g1&gt;bin/crystal&lt;/g1&gt; executable.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T070742Z" creationid="makenowjust" creationdate="20200518T070742Z">
        <seg>その中に、&lt;g1&gt;bin/crystal&lt;/g1&gt; という実行可能ファイルが含まれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inside it you will have a `bin/crystal` executable.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055805Z" creationid="hirofumiwakasugi" creationdate="20150831T055805Z">
        <seg>その中に、`bin/crystal` という実行ファイルが含まれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inside the repository you will also find a wrapper script at `bin/crystal`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060933Z" creationid="hirofumiwakasugi" creationdate="20150831T060755Z">
        <seg>リポジトリの中を見ると、`bin/crystal` というラッパースクリプトが存在することに気づくと思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Install</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T100701Z" creationid="makenowjust" creationdate="20200518T100701Z">
        <seg>インストール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Install Crystal and get it running.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T151314Z" creationid="makenowjust" creationdate="20210726T151314Z">
        <seg>Crystal ををインストールして実行する方法を説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Install Package</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T110946Z" creationid="makenowjust" creationdate="20200518T110946Z">
        <seg>パッケージのインストール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Install Port</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111201Z" creationid="makenowjust" creationdate="20200518T111201Z">
        <seg>port によるインストール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Installation</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T173305Z" creationid="makenowjust" creationdate="20200419T173305Z">
        <seg>インストール方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Installing the shard</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T190738Z" creationid="daiki" creationdate="20200705T190738Z">
        <seg>shard のインストール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instance and class methods</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T104554Z" creationid="makenowjust" creationdate="20200510T104545Z">
        <seg>インスタンスメソッドとクラスメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instance variables</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T104559Z" creationid="makenowjust" creationdate="20200510T104559Z">
        <seg>インスタンス変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instance variables can also be initialized outside &lt;g1&gt;initialize&lt;/g1&gt; methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T125244Z" creationid="makenowjust" creationdate="20200427T125244Z">
        <seg>インスタンス変数は &lt;g1&gt;initialize&lt;/g1&gt; メソッドの外部で初期化することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instance variables can also be initialized outside `initialize` methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T054955Z" creationid="hirofumiwakasugi" creationdate="20150905T054955Z">
        <seg>インスタンス変数を `initialize` メソッドの外側で初期化することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instance variables' types are inferred from the values assigned to them, like it was explained in [instance variables type inference](instance_variables_type_inference.html):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T060051Z" creationid="hirofumiwakasugi" creationdate="20150912T054625Z">
        <seg>[インスタンス変数と型推論](instance_variables_type_inference.html)で説明したように、インスタンス変数の型は代入された値から推論されます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead of defining a type with &lt;g1&gt;class&lt;/g1&gt; you can do so with &lt;g2&gt;struct&lt;/g2&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T171234Z" creationid="makenowjust" creationdate="20200505T171234Z">
        <seg>ある型を定義するとき、&lt;g1&gt;class&lt;/g1&gt; ではなく &lt;g2&gt;struct&lt;/g2&gt; を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead of defining a type with `class` you can do so with `struct`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T053814Z" creationid="hirofumiwakasugi" creationdate="20150913T053658Z">
        <seg>ある型を定義するとき、`class` ではなく `struct` を使うことで構造体を定義することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead of doing that, you can use &lt;g2&gt;Hash#each_key&lt;/g2&gt;, &lt;g3&gt;Hash#has_key?&lt;/g3&gt; and other methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T131951Z" creationid="akiji" creationdate="20200430T131951Z">
        <seg>代わりに&lt;g2&gt;Hash#each_key&lt;/g2&gt;や&lt;g3&gt;Hash#has_key?&lt;/g3&gt;といった他のメソッドを使用しましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead of overriding you can define specialized methods by using type restrictions:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024415Z" creationid="hirofumiwakasugi" creationdate="20150910T024330Z">
        <seg>オーバーライドの代わりに、型制約を利用して派生クラスに特化したメソッドを定義することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, we'll catch Susan's search for "spelling" and Felipe's search for "text".</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T163446Z" creationid="makenowjust" creationdate="20200527T163446Z">
        <seg>代わりに、Susan の探している "spelling" や Felipe の探している "text" といった単語を含めるようにするといいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instructions on how to use the compiler and tools.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T152255Z" creationid="makenowjust" creationdate="20210726T152252Z">
        <seg>コンパイラやツールの使い方についての文書。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Int32
My::Nested::Type
Array(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T120327Z" creationid="makenowjust" creationdate="20200507T120327Z">
        <seg>Int32
My::Nested::Type
Array(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Int64 |</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071433Z" creationid="hirofumiwakasugi" creationdate="20150919T071433Z">
        <seg>Int64 |</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Integers</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181937Z" creationid="makenowjust" creationdate="20200419T181937Z">
        <seg>整数 (Integer)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Integrate your own logo with Crystal logos.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T085915Z" creationid="makenowjust" creationdate="20200516T085915Z">
        <seg>Crystal のロゴと独自のロゴを組み合わせること</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Internally a symbol is represented as an `Int32`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T131554Z" creationid="hirofumiwakasugi" creationdate="20150901T131529Z">
        <seg>内部的には、シンボルは `Int32` で表現されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Internally, a channel implements all the locking mechanisms to avoid data races, but from the outside you use them as communication primitives, so you (the user) don't have to use locks.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103031Z" creationid="akiji" creationdate="20200428T064113Z">
        <seg>チャネルは内部的にデータ競合を避けるためのロック機構を実装していますが、外から使う分にはロックを考慮する必要のないデータの送受信手法として使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Internally, symbols are implemented as constants with a numeric value of type &lt;g1&gt;Int32&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171712Z" creationid="makenowjust" creationdate="20200420T171712Z">
        <seg>内部的には、シンボルは&lt;g1&gt;Int32&lt;/g1&gt;型の定数値として実装されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Internally, the compiler rewrites command literals to calls to the top-level method &lt;g1&gt;&lt;g2&gt; `()&lt;/g2&gt;&lt;/g1&gt; with a string literal containing the command as argument: &lt;g3&gt; `echo #{argument}` &lt;/g3&gt; and &lt;g4&gt;%x(echo #{argument})&lt;/g4&gt; are rewritten to &lt;g5&gt; `("echo #{argument}")&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172958Z" creationid="makenowjust" creationdate="20200422T172958Z">
        <seg>内部的にはコンパイラはコマンドリテラルを &lt;g1&gt;&lt;g2&gt; `()&lt;/g2&gt;&lt;/g1&gt; メソッドに文字列リテラルを渡すように書き換えています。つまり &lt;g3&gt; `echo #{argument}` &lt;/g3&gt; と &lt;g4&gt;%x(echo #{argument})&lt;/g4&gt; は &lt;g5&gt; `("echo #{argument}")&lt;/g5&gt; のように書き換えられています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Internally, the compiler rewrites command literals to calls to the top-level method &lt;g1&gt;&lt;g2&gt; `()&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/toplevel.html#%60(command):String-class-method&lt;e6/&gt; with a string literal containing the command as argument: &lt;g3&gt; `echo #{argument}` &lt;/g3&gt; and &lt;g4&gt;%x(echo #{argument})&lt;/g4&gt; are rewritten to &lt;g5&gt; `("echo #{argument}")&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T064928Z" creationid="makenowjust" creationdate="20200518T084952Z">
        <seg>内部的にはコマンドリテラルを &lt;g1&gt;&lt;g2&gt; `()&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/toplevel.html#%60(command):String-class-method&lt;e6/&gt; メソッドに文字列を渡すように書き換えています。つまり &lt;g3&gt; `echo #{argument}` &lt;/g3&gt; と &lt;g4&gt;%x(echo #{argument})&lt;/g4&gt; は &lt;g5&gt; `("echo #{argument}")&lt;/g5&gt; のように書き換えられています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interpolated strings are transformed by the compiler to append to a string IO so that it automatically avoids intermediate strings.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T024030Z" creationid="akiji" creationdate="20200430T131017Z">
        <seg>式展開を含む文字列は、コンパイラによってIOへ追加する形に変換され、中間文字列の生成を自動的に回避します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interpolation</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192656Z" creationid="makenowjust" creationdate="20200419T192158Z">
        <seg>文字列の補間</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interpolation can be disabled by escaping the &lt;g1&gt;#&lt;/g1&gt; character with a backslash or by using a non-interpolating string literal like &lt;g2&gt;%q()&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192729Z" creationid="makenowjust" creationdate="20200419T192637Z">
        <seg>&lt;g1&gt;#&lt;/g1&gt;をバックスラッシュでエスケープするか、&lt;g2&gt;%q()&lt;/g2&gt;のような補間を許可しないような文字列リテラルを使うことで、補間を無効にできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interpolation is implemented using a &lt;g1&gt;String::Builder&lt;/g1&gt; and invoking &lt;g2&gt;Object#to_s(IO)&lt;/g2&gt; on each expression enclosed by &lt;g3&gt;#{...}&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192832Z" creationid="makenowjust" creationdate="20200419T192832Z">
        <seg>補間は&lt;g1&gt;String::Builder&lt;/g1&gt;を使い、&lt;g3&gt;#{...}&lt;/g3&gt;の中の式に対して&lt;g2&gt;Object#to_s(IO)&lt;/g2&gt;を呼び出すことで実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interpolation is implemented using a &lt;g1&gt;String::Builder&lt;/g1&gt;http://crystal-lang.org/api/String/Builder.html&lt;e5/&gt; and invoking &lt;g2&gt;Object#to_s(IO)&lt;/g2&gt; on each expression enclosed by &lt;g3&gt;#{...}&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T064234Z" creationid="makenowjust" creationdate="20201213T064234Z">
        <seg>文字列の補間は &lt;g1&gt;String::Builder&lt;/g1&gt;http://crystal-lang.org/api/String/Builder.html&lt;e5/&gt; を使い、 &lt;g3&gt;#{...}&lt;/g3&gt; の中の式に対して &lt;g2&gt;Object#to_s(IO)&lt;/g2&gt; を呼び出すことで実装されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interpolation is implemented using a &lt;g1&gt;String::Builder&lt;/g1&gt;https://crystal-lang.org/api/latest/String/Builder.html&lt;e5/&gt; and invoking &lt;g2&gt;Object#to_s(IO)&lt;/g2&gt; on each expression enclosed by &lt;g3&gt;#{...}&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T081159Z" creationid="makenowjust" creationdate="20210324T081159Z">
        <seg>文字列の補間は &lt;g1&gt;String::Builder&lt;/g1&gt;https://crystal-lang.org/api/latest/String/Builder.html&lt;e5/&gt; を使い、&lt;g3&gt;#{...}&lt;/g3&gt; の中の式に対して &lt;g2&gt;Object#to_s(IO)&lt;/g2&gt; を呼び出すことで実装されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interpolation works in regular expression literals just as it does in &lt;g1&gt;string literals&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T041326Z" creationid="makenowjust" creationdate="20200421T041326Z">
        <seg>文字列の補間は正規表現リテラル中でも&lt;g1&gt;文字列リテラル&lt;/g1&gt;の場合と同様に機能します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Introduce the &lt;g1&gt;case ... in&lt;/g1&gt; statements as experimental: they don’t have an implicit &lt;g2&gt;else&lt;/g2&gt;, and the conditions need to be exhaustive or the code will not compile.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T124814Z" creationid="makenowjust" creationdate="20200610T124814Z">
        <seg>&lt;g1&gt;case ... in&lt;/g1&gt; 文を実験的に導入する。こちらは暗黙の &lt;g2&gt;else&lt;/g2&gt; を持たず、条件の網羅性が確認できなければコンパイルが通らない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Introduction</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200521T041323Z" creationid="makenowjust" creationdate="20200521T041323Z">
        <seg>導入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Introductory courses for beginners and advanced learners.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T151343Z" creationid="makenowjust" creationdate="20210726T151343Z">
        <seg>初心者やより進んだ学習者のための入門コースです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invoking</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171920Z" creationid="makenowjust" creationdate="20200422T171920Z">
        <seg>Proc の呼び出し</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invoking the compiler with the `hierarchy` command we get:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135700Z" creationid="hirofumiwakasugi" creationdate="20150904T135515Z">
        <seg>`hierarchy` コマンドでコンパイラを起動すると、結果は以下となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invoking the compiler with the `tool hierarchy` command we get:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025336Z" creationid="hirofumiwakasugi" creationdate="20151009T025336Z">
        <seg>`tool hierarchy` コマンドでコンパイラを起動すると、結果は以下となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Is equivalent to:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185648Z" creationid="makenowjust" creationdate="20200505T185648Z">
        <seg>これは次に等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It accepts a single argument, a string literal, and it can come in many flavors.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T161716Z" creationid="hirofumiwakasugi" creationdate="20150905T161552Z">
        <seg>引数には1つの文字列リテラルをとり、その書き方によって様々な形式で対象を指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It accepts multiple arguments, and the result is the union of the expression types:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062601Z" creationid="hirofumiwakasugi" creationdate="20150930T062601Z">
        <seg>複数の引数を渡すことも可能で、その場合にはそれぞれの式の組み合わせの型となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It accepts the type as first argument and the instance variable name prefixed by an &lt;g2&gt;@&lt;/g2&gt; as second argument:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T020153Z" creationid="makenowjust" creationdate="20200511T020148Z">
        <seg>最初の引数に型を受け取り、2番目に引数には &lt;g2&gt;@&lt;/g2&gt; からはじまるインスタンス変数を受け取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It allows writing a chain of if-else-if with a small change in semantic and some more powerful constructs.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090846Z" creationid="hirofumiwakasugi" creationdate="20150903T023143Z">
        <seg>これは、多少異なる点もありますが、if 文で if-else-if の形で複数の条件分岐を構築することに近いです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It also can't be used to cast between pointer types and other types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T120804Z" creationid="makenowjust" creationdate="20200512T120804Z">
        <seg>しかしポインタ型を他の型へキャストすることはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It also does not work with constants.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081903Z" creationid="makenowjust" creationdate="20200424T081903Z">
        <seg>また、定数に対しても機能しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It basically allocates the necessary memory for it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060757Z" creationid="hirofumiwakasugi" creationdate="20150904T060739Z">
        <seg>そのとき、必要なメモリが割り当てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It basically allocates the necessary memory for the object, then &lt;g2&gt;initialize&lt;/g2&gt; is invoked on it and finally the instance is returned.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T121854Z" creationid="makenowjust" creationdate="20200427T121848Z">
        <seg>必要なメモリを割り当てて、&lt;g2&gt;initialize&lt;/g2&gt; メソッドを呼び出し、最後にそのインスタンスを返しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It can be followed by these modifiers:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T015949Z" creationid="hirofumiwakasugi" creationdate="20150902T015847Z">
        <seg>また、正規表現リテラルにはオプションを追加することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It can contain alphanumeric characters, underscore (&lt;g1&gt;_&lt;/g1&gt;) or characters with a code point greater than &lt;g2&gt;159&lt;/g2&gt;(&lt;g3&gt;0x9F&lt;/g3&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171453Z" creationid="makenowjust" creationdate="20200420T171453Z">
        <seg>つまり、アルファベットや数値、アンダースコア (&lt;g1&gt;_&lt;/g1&gt;) 、もしくは &lt;g2&gt;159&lt;/g2&gt;(&lt;g3&gt;0x9F&lt;/g3&gt;) より大きいコードポイントの文字をシンボルの識別子に利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It can either be followed by exactly four hexadecimal characters representing the unicode bytes (&lt;g2&gt;\u0000&lt;/g2&gt; to &lt;g3&gt;\uFFFF&lt;/g3&gt;) or a number of one to six hexadecimal characters wrapped in curly braces (&lt;g4&gt;\u{0}&lt;/g4&gt; to &lt;g5&gt;\u{10FFFF}&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T190356Z" creationid="makenowjust" creationdate="20200419T190331Z">
        <seg>ユニコードの文字を表現するため、ちょうど4つの16進数の数値か (&lt;g2&gt;\u0000&lt;/g2&gt; to &lt;g3&gt;\uFFFF&lt;/g3&gt;) かひげ括弧で囲った6つまでの16進数の数値が利用できます (&lt;g4&gt;\u{0}&lt;/g4&gt; to &lt;g5&gt;\u{10FFFF}&lt;/g5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It can respond to some methods</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T095457Z" creationid="makenowjust" creationdate="20200427T095457Z">
        <seg>メソッドに応答する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It consists of a string of UTF-8 character enclosed in forward slashes (&lt;g2&gt;/&lt;/g2&gt;):</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T041152Z" creationid="makenowjust" creationdate="20200421T040543Z">
        <seg>リテラルとしては、UTF-8の文字列をスラッシュ (&lt;g2&gt;/&lt;/g2&gt;) で囲んで記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It consists of a string of UTF-8 characters enclosed in forward slashes (&lt;g2&gt;/&lt;/g2&gt;):</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T090404Z" creationid="makenowjust" creationdate="20210130T090404Z">
        <seg>リテラルとしては、UTF-8の文字列をスラッシュ (&lt;g2&gt;/&lt;/g2&gt;) で囲んで記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It consists of the name of the type followed by a list of  comma separated key-value pairs enclosed in curly braces (&lt;g1&gt;{}&lt;/g1&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180029Z" creationid="makenowjust" creationdate="20200420T180029Z">
        <seg>型の名前のあとに続けたひげ括弧 (&lt;g1&gt;{}&lt;/g1&gt;) の中に、コンマ区切りのキーと値の組を並べることで利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It consists of the name of the type followed by a list of elements enclosed in curly braces (&lt;g1&gt;{}&lt;/g1&gt;) and individual elements separated by a comma (&lt;g2&gt;,&lt;/g2&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T174210Z" creationid="makenowjust" creationdate="20200420T173502Z">
        <seg>型の名前にひげ括弧 (&lt;g1&gt;{}&lt;/g1&gt;) とコンマ (&lt;g2&gt;,&lt;/g2&gt;) によって区切られた個々の要素を続けることで利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It doesn’t work with instance variables, class variables, or variables bound in a closure.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081803Z" creationid="makenowjust" creationdate="20200424T081803Z">
        <seg>インスタンス変数、クラス変数、クロージャに束縛された変数に関してはこの機能は機能しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It got implemented in &lt;g3&gt;#9134&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9134&lt;e5/&gt; and some follow up PRs.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T142102Z" creationid="makenowjust" creationdate="20200610T142102Z">
        <seg>これは &lt;g3&gt;#9134&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9134&lt;e5/&gt; といくつかのそれに続く PR で実現されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It has a better integration with pkg-config and we dropped the &lt;g2&gt;static:&lt;/g2&gt; option.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T150752Z" creationid="makenowjust" creationdate="20200610T133621Z">
        <seg>pkg-config とより統合されて、&lt;g2&gt;static:&lt;/g2&gt; オプションのサポートが無くなりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It has a type</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T095452Z" creationid="makenowjust" creationdate="20200427T095444Z">
        <seg>型を持っている</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It has the same effect as writing &lt;g1&gt;is_a?(Nil)&lt;/g1&gt; but it's shorter and easier to read and write.</seg>
      </tuv>
      <tuv lang="JA" changeid="tobias" changedate="20200501T145248Z" creationid="tobias" creationdate="20200501T145248Z">
        <seg>それは&lt;g1&gt;is_a?(Nil)&lt;/g1&gt;と書くのと同じですが、より短く読み書きが簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It helps developers to discover shards and the Shards ecosystem." link_text="Shardbox.org" url="https://shardbox.org/" continues=true icon="play_arrow" %} {% include community_row.html title="" content="View of all repositories on GitHub and GitLab that have Crystal code in them and easily identify the dependencies and the associated releases." link_text="shards.info" url="https://shards.info/" continues=true icon="play_arrow" %} {% include community_row.html title="" content="The crystalshards.org service provides an uncurated view of all repositories on GitHub that have Crystal code in them.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20220525T090549Z" creationid="makenowjust" creationdate="20220525T090549Z">
        <seg>開発者が shards や shards のエコシステムを探すのを手助けします。'
   link_text='Shardbox.org'
   url='https://shardbox.org/'
   continues=true
   icon='play_arrow' %}

{% include community_row.html
   title=''
   content='Crystal コードを含む GitHub リポジトリの一覧です。依存関係やリリースも確認できます。'
   link_text='shards.info'
   url='https://shards.info/'
   continues=true
   icon='play_arrow' %}

{% include community_row.html
   title=''
   content='crystalshards.org は要約されていない Crystal コードを含む GitHub リポジトリの一覧です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It helps developers to discover shards and the Shards ecosystem." link_text="Shardbox.org" url="https://shardbox.org/" continues=true icon="play_arrow" %} {% include community_row.html title="" content="View of all repositories on GitHub that have Crystal code in them and easily identify the dependencies and the associated releases." link_text="shards.info" url="http://shards.info/" continues=true icon="play_arrow" %} {% include community_row.html title="" content="The crystalshards.xyz service provides an uncurated view of all repositories on GitHub that have Crystal code in them.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T103453Z" creationid="makenowjust" creationdate="20200516T101021Z">
        <seg>開発者が shards や shards のエコシステムを探すのを手助けします。'
   link_text='Shardbox.org'
   url='https://shardbox.org/'
   continues=true
   icon='play_arrow' %}

{% include community_row.html
   title=''
   content='Crystal コードを含む GitHub リポジトリの一覧です。依存関係やリリースも確認できます。'
   link_text='shards.info'
   url='http://shards.info/'
   continues=true
   icon='play_arrow' %}

{% include community_row.html
   title=''
   content='crystalshards.xyz は要約されていない Crystal コードを含む GitHub リポジトリの一覧です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is a pseudo-method because it only accepts a symbol literal as its argument, and is also treated specially by the compiler, as explained in &lt;g1&gt;if var.responds_to?(...)&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T113752Z" creationid="makenowjust" creationdate="20200512T113752Z">
        <seg>これが疑似メソッドである理由は、&lt;g1&gt;if var.responds_to?(...)&lt;/g1&gt; で説明したように、引数にシンボルリテラルのみを受け取り、そしてコンパイラによって特別な扱いを受けるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is a pseudo-method because it only accepts a symbol literal as its argument, and is also treated specially by the compiler, as explained in [if var.responds_to?(...)](if_varresponds_to.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T014059Z" creationid="hirofumiwakasugi" creationdate="20150930T013944Z">
        <seg>これが擬似メソッドである理由は、[if 変数.responds_to?(...)](if_varresponds_to.html) で説明したように、引数にシンボルのリテラルのみを受け取り、そして、コンパイラによって特別な扱いを受けるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is a pseudo-method because the compiler knows about it and it can affect type information, as explained in &lt;g1&gt;if var.is_a?(...)&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T113441Z" creationid="makenowjust" creationdate="20200512T113012Z">
        <seg>これが疑似メソッドである理由は、&lt;g1&gt;if var.is_a?(...)&lt;/g1&gt;で説明したように、このメソッドをコンパイラは把握していて、型の情報に影響を与えるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is a pseudo-method because the compiler knows about it and it can affect type information, as explained in &lt;g1&gt;if var.nil?(...)&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="tobias" changedate="20200501T145108Z" creationid="tobias" creationdate="20200501T145108Z">
        <seg>これが疑似メソッドである理由は、&lt;g1&gt;if var.nil?(...)&lt;/g1&gt;で説明したように、このメソッドはコンパイラによって参照され、それによって型情報を設定することができるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is a pseudo-method because the compiler knows about it and it can affect type information, as explained in [if var.is_a?(...)](if_varis_a.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T013812Z" creationid="hirofumiwakasugi" creationdate="20150930T011157Z">
        <seg>これが擬似メソッドである理由は、[if 変数.is_a?(...)](if_varis_a.html) で説明したように、このメソッドはコンパイラによって参照され、それによって型情報を設定することができるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is a very common practice to pass options to the application.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164130Z" creationid="makenowjust" creationdate="20200413T164130Z">
        <seg>アプリケーションにオプションを渡すことはとても一般的です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is also used to refer to code from &lt;g1&gt;specs&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T091308Z" creationid="makenowjust" creationdate="20200427T090741Z">
        <seg>また、&lt;g1&gt;specs&lt;/g1&gt; からコードを参照する場合にも利用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is also used to refer to code from &lt;g1&gt;specs&lt;/g1&gt;:
q
!!!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T075553Z" creationid="makenowjust" creationdate="20210324T075553Z">
        <seg>また &lt;g1&gt;specs&lt;/g1&gt; からコードを参照する場合にも利用されます。
q
!!!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is also used to refer to code from specs:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T160401Z" creationid="hirofumiwakasugi" creationdate="20150905T160230Z">
        <seg>また、spec からコードを参照する場合にも利用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is created by enclosing an UTF-8 character in single quotes.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T074441Z" creationid="hirofumiwakasugi" creationdate="20150901T074441Z">
        <seg>UTF-8 の文字をシングルクォートで囲んで記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is defined as a method on &lt;g4&gt;&lt;g5&gt;Object&lt;/g5&gt;&lt;/g4&gt; and can be overridden by subclasses to provide meaningful semantics in case statements.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T091145Z" creationid="makenowjust" creationdate="20200424T091145Z">
        <seg>これは&lt;g4&gt;&lt;g5&gt;Object&lt;/g5&gt;&lt;/g4&gt;に定義されたメソッドで、case 文で使う際に意味があるようにサブクラスでオーバライドされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is defined as a method on &lt;g4&gt;&lt;g5&gt;Object&lt;/g5&gt;&lt;/g4&gt;https://crystal-lang.org/api/Object.html#%3D%3D%3D%28other%29-instance-method&lt;e12/&gt; and can be overridden by subclasses to provide meaningful semantics in case statements.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T083718Z" creationid="makenowjust" creationdate="20200518T083718Z">
        <seg>これは &lt;g4&gt;&lt;g5&gt;Object&lt;/g5&gt;&lt;/g4&gt;https://crystal-lang.org/api/Object.html#%3D%3D%3D%28other%29-instance-method&lt;e12/&gt; に定義されたメソッドで、case 文で使う際に意味があるようにサブクラスでオーバライドされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is defined as a method on &lt;g4&gt;&lt;g5&gt;Object&lt;/g5&gt;&lt;/g4&gt;https://crystal-lang.org/api/latest/Object.html#%3D%3D%3D%28other%29-instance-method&lt;e12/&gt; and can be overridden by subclasses to provide meaningful semantics in case statements.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100947Z" creationid="makenowjust" creationdate="20210324T100947Z">
        <seg>これは &lt;g4&gt;&lt;g5&gt;Object&lt;/g5&gt;&lt;/g4&gt;https://crystal-lang.org/api/latest/Object.html#%3D%3D%3D%28other%29-instance-method&lt;e12/&gt; に定義されたメソッドで、case 分で使う際に意味があるようにサブクラスでオーバーライドされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is extremely important for us to sustain the support through donations, so that we can maintain this development pace.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T034337Z" creationid="makenowjust" creationdate="20200611T034318Z">
        <seg>継続的に開発・メンテナンスを続けていくには、寄付が不可欠です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is indicated by &lt;g2&gt;%i&lt;/g2&gt; and a pair of delimiters.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171905Z" creationid="makenowjust" creationdate="20200420T171905Z">
        <seg>それは&lt;g2&gt;%i&lt;/g2&gt;と区切り文字の組によって記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is indicated by &lt;g2&gt;%w&lt;/g2&gt; and a pair of delimiters.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T193903Z" creationid="makenowjust" creationdate="20200419T193903Z">
        <seg>それは&lt;g2&gt;%w&lt;/g2&gt;と区切り文字の組によって記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is often used in generic code, to make use of the compiler's type inference capabilities:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062811Z" creationid="hirofumiwakasugi" creationdate="20150930T062630Z">
        <seg>これはジェネリックコードにおいて、コンパイラの型推論の力を利用したいときにしばしば使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is only available in the same scope as the command literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172851Z" creationid="makenowjust" creationdate="20200422T172851Z">
        <seg>この特殊変数はコマンドリテラルと同じスコープに限り有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is only syntactic sugar and does not have any performance penalty.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185440Z" creationid="makenowjust" creationdate="20200505T185440Z">
        <seg>これは単なるシンタックスシュガーであり、パフォーマンス上の欠点はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is only used when an expression will never return to the current scope.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T142838Z" creationid="makenowjust" creationdate="20200430T142750Z">
        <seg>実行元に戻ってこない場合だけにこの型は利用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is possible to define a macro which generates one or more macro definitions.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220217Z" creationid="makenowjust" creationdate="20200509T220217Z">
        <seg>いくつかのマクロを生成するようなマクロを定義することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is possible to directly call methods on heredoc string literals, or use them inside parentheses:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T034037Z" creationid="makenowjust" creationdate="20200420T034037Z">
        <seg>ヒアドキュメントの直後にそれに対するメソッド呼び出しを続けたり、括弧の中でヒアドキュメントを使うことも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is recommended to enable per package instead of globally</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111657Z" creationid="makenowjust" creationdate="20200518T111648Z">
        <seg>It is recommended to enable per package instead of globally</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is typically constructed with a range literal, consisting of two or three dots:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T033825Z" creationid="makenowjust" creationdate="20200421T033825Z">
        <seg>通常、範囲は2つもしくは3つのドットからなる範囲リテラルによって生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is typically created with a char literal by enclosing an UTF-8 character in single quotes.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T185801Z" creationid="makenowjust" creationdate="20200419T185801Z">
        <seg>通常、シングルクォートでUTF-8でエンコードされた文字を囲って文字リテラルを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is typically created with a hash literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140851Z" creationid="hirofumiwakasugi" creationdate="20150901T140851Z">
        <seg>通常、以下のハッシュリテラルを利用して書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is typically created with a proc literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021043Z" creationid="hirofumiwakasugi" creationdate="20150902T021043Z">
        <seg>通常、Proc リテラルを使って生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is typically created with an array literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T135948Z" creationid="hirofumiwakasugi" creationdate="20150901T131939Z">
        <seg>通常、以下の配列リテラルを利用して書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is used to filter which versions of a shard are available based on the crystal environment.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T135702Z" creationid="makenowjust" creationdate="20200610T135702Z">
        <seg>このプロパティは、有効な shard のバージョンを Crystal 環境に基いて決定するのに使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is useful in multiple assignment when some of the values returned by the right-hand side are unimportant:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T095201Z" creationid="makenowjust" creationdate="20210324T095201Z">
        <seg>これは多重代入で、右辺のいくつかの値は重要ではないようなときに役に立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It makes them be thread local.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T072504Z" creationid="hirofumiwakasugi" creationdate="20150919T072504Z">
        <seg>これによって、それらの変数がスレッドローカルになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It manages dependencies for Crystal projects and libraries with reproducible
installs across computers and systems.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T173259Z" creationid="makenowjust" creationdate="20200419T173259Z">
        <seg>これは Crystal のプロジェクトやライブラリの依存関係を管理して、あるシステムやコンピュータのまたがって再現可能なインストールを実現します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It matches anything:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012131Z" creationid="hirofumiwakasugi" creationdate="20151009T012120Z">
        <seg>それはすべてにマッチすることを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It means: they must be passed as named arguments, but they aren't required (so: optional named arguments):</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160358Z" creationid="makenowjust" creationdate="20200501T160358Z">
        <seg>つまり、その引数は名前付き引数として渡さなければいけないけれど、それは必須ではないという、オプショナルな名前付き引数になる、ということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It means: they must be passed as named arguments, but they aren't required (so: optional named parameters):</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T092105Z" creationid="makenowjust" creationdate="20210324T092105Z">
        <seg>つまり、その引数は名前付き引数として渡さなければいけないが必須ではない、オプショナルな名前付き引数になる、ということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It must not start with a number and may end with an exclamation mark (&lt;g4&gt;!&lt;/g4&gt;) or question mark (&lt;g5&gt;?&lt;/g5&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171551Z" creationid="makenowjust" creationdate="20200420T171551Z">
        <seg>そして、数字から識別子をはじめることはできず、識別子の最後にエクストラメーションマーク (&lt;g4&gt;!&lt;/g4&gt;) やクエスチョンマーク (&lt;g5&gt;?&lt;/g5&gt;) を続けることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It not parsed as a method, and its meaning cannot be changed.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084546Z" creationid="makenowjust" creationdate="20200502T084546Z">
        <seg>これはメソッドとしてパースされず、意味を変更することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It occupies 32 bits.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T074303Z" creationid="hirofumiwakasugi" creationdate="20150901T074230Z">
        <seg>そのビット数は32ビットです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It only has a single value:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000940Z" creationid="makenowjust" creationdate="20200414T000747Z">
        <seg>ただ1つの値を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It returns a union type of the type of the passed expressions:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012331Z" creationid="hirofumiwakasugi" creationdate="20151009T012331Z">
        <seg>渡された式の型の組み合わせ (ユニオン型) を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It seems everybody wanted to jump in and polish some corner of the std-lib before 1.0.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T031211Z" creationid="makenowjust" creationdate="20200610T121200Z">
        <seg>今回のリリースはみなさんの待ち望んでいた、1.0直前の標準ライブラリに磨きをかけるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It will be substituted at runtime by the captured output from executing the string in a subshell.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172827Z" creationid="makenowjust" creationdate="20200422T172520Z">
        <seg>実行時に文字列の内容をコマンドとしてサブシェルで実行して、その出力の文字列が結果の値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's a small object that has an associated &lt;g1&gt;stack&lt;/g1&gt; of 8MB, which is what is usually assigned to an operating system thread.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T065753Z" creationid="akiji" creationdate="20200428T060032Z">
        <seg>ファイバは、通常OSスレッド上の &lt;g1&gt;スタックメモリ&lt;/g1&gt; 上に8MBが割り当てられた小さなオブジェクトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's a small object that has an associated &lt;g1&gt;stack&lt;/g1&gt;https://en.wikipedia.org/wiki/Call_stack&lt;e2/&gt; of 8MB, which is what is usually assigned to an operating system thread.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081517Z" creationid="makenowjust" creationdate="20200518T081517Z">
        <seg>ファイバは、通常 OS スレッド上の&lt;g1&gt;スタックメモリ&lt;/g1&gt;https://en.wikipedia.org/wiki/Call_stack&lt;e2/&gt;上に8MBが割り当てられた小さなオブジェクトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's an error specifying more block arguments than those yielded:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184824Z" creationid="makenowjust" creationdate="20200505T184824Z">
        <seg>しかし、yield された引数の数よりも多くのブロック引数を指定した場合はエラーになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's an error specifying more block parameters than the arguments yielded:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094448Z" creationid="makenowjust" creationdate="20210324T094448Z">
        <seg>しかし yield された引数の数よりも多くのブロック引数を指定した場合はエラーとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's as if the end of the starting heredoc identifier is the end of the string.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T090936Z" creationid="makenowjust" creationdate="20210130T090936Z">
        <seg>このとき、ヒアドキュメントの識別子は文字列リテラルの終端のように機能します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's fine to have your own style, but sticking to &lt;g1&gt;some core rubrics defined by the Crystal team&lt;/g1&gt; can help keep your code consistent, readable and usable for other developers.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T161851Z" creationid="makenowjust" creationdate="20200527T161851Z">
        <seg>自身のスタイルを持つことは良いことですが、&lt;g1&gt;Crystal チームの慣習的なスタイル&lt;/g1&gt;に従うことで、コードの一貫性や可読性を保ち、他の開発者の理解しやすいものにできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's good advice to add it to &lt;g6&gt;.gitignore&lt;/g6&gt; (the &lt;g7&gt;&lt;g8&gt;crystal init&lt;/g8&gt;&lt;/g7&gt; does this automatically when initializing a &lt;g9&gt;lib&lt;/g9&gt; repository).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T095325Z" creationid="makenowjust" creationdate="20200419T174612Z">
        <seg>&lt;g6&gt;.gitignore&lt;/g6&gt; にそれを含めることをオススメします (&lt;g7&gt;&lt;g8&gt;crystal init&lt;/g8&gt;&lt;/g7&gt; は &lt;g9&gt;lib&lt;/g9&gt; リポジトリを初期化する際にそれを自動的に行います).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's hard for anyone to use your project if they can't find it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T162721Z" creationid="makenowjust" creationdate="20200527T162721Z">
        <seg>見つけられるものでなければ、誰もあなたのプロジェクトを利用しないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's the only way for anyone, including you, to know if it works.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T155940Z" creationid="makenowjust" creationdate="20200527T155907Z">
        <seg>人々 (あなたを含む) にとって、テストだけがどのように機能するものなのかを示すものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Items.length #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T141821Z" creationid="hirofumiwakasugi" creationdate="20150911T141821Z">
        <seg>Items.length #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Items.size #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092316Z" creationid="hirofumiwakasugi" creationdate="20151009T092316Z">
        <seg>Items.size #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Iterating strings</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T132205Z" creationid="akiji" creationdate="20200430T132205Z">
        <seg>文字列に対する繰り返し処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Iteration</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215139Z" creationid="makenowjust" creationdate="20200509T215136Z">
        <seg>繰り返し</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Its age will always be zero.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T122842Z" creationid="makenowjust" creationdate="20200427T122842Z">
        <seg>age は常に0のままです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Its type is the union of the types of both sides.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010053Z" creationid="hirofumiwakasugi" creationdate="20150905T052607Z">
        <seg>その型は両辺の型の組み合わせ (ユニオン型）です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It’s been hard to prioritize, but we are getting to it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T141931Z" creationid="makenowjust" creationdate="20200610T141931Z">
        <seg>これに優先順位を付けることは簡単ではなく、地道に進めています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It’s broken: we need to handle &lt;g1&gt;invalid options&lt;/g1&gt; and &lt;g2&gt;invalid parameters&lt;/g2&gt; given to an option!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180036Z" creationid="makenowjust" creationdate="20200413T180036Z">
        <seg>これは壊れていますね。&lt;g1&gt;無効なオプション&lt;/g1&gt;と&lt;g2&gt;無効なパラメーター&lt;/g2&gt;が渡されたときの処理をする必要するがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Jan 2021 - &lt;g1&gt;More release notes&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T091709Z" creationid="makenowjust" creationdate="20210130T091706Z">
        <seg>Jan 2021 - &lt;g1&gt;その他のリリースノート&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Java, Scala, Clojure, Kotlin</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092322Z" creationid="makenowjust" creationdate="20201217T092322Z">
        <seg>Java, Scala, Clojure, Kotlin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Javascript</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092321Z" creationid="makenowjust" creationdate="20201217T092321Z">
        <seg>Javascript</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Jean-Baptiste Barth</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084026Z" creationid="makenowjust" creationdate="20200516T084026Z">
        <seg>Jean-Baptiste Barth</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Jesse Doyle</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084042Z" creationid="makenowjust" creationdate="20200516T084042Z">
        <seg>Jesse Doyle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Joakim Ekström</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084043Z" creationid="makenowjust" creationdate="20200516T084043Z">
        <seg>Joakim Ekström</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Jonne Haß</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084043Z" creationid="makenowjust" creationdate="20200516T084043Z">
        <seg>Jonne Haß</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Joseph Method</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084044Z" creationid="makenowjust" creationdate="20200516T084044Z">
        <seg>Joseph Method</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>June 2020 - &lt;g1&gt;More release notes&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200620T122204Z" creationid="makenowjust" creationdate="20200620T122204Z">
        <seg>June 2020 - &lt;g1&gt;その他のリリースノート&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just Crystal making our life easy.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174028Z" creationid="makenowjust" creationdate="20200413T173050Z">
        <seg>実装が簡単になったのは Crystal のおかげです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just like a class or a struct, you can define methods for enums:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182804Z" creationid="hirofumiwakasugi" creationdate="20150916T011402Z">
        <seg>クラスや構造体と同様に、列挙型にもメソッドを定義することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>KDE Neon</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071403Z" creationid="makenowjust" creationdate="20200518T071403Z">
        <seg>KDE Neon</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Keep an eye on &lt;g1&gt;#9291&lt;/g1&gt;https://github.com/crystal-lang/crystal/issues/9291&lt;e3/&gt; for a proposal to improve the interpolation of strings so they can emit directly to an &lt;g2&gt;IO&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T144510Z" creationid="makenowjust" creationdate="20200610T144510Z">
        <seg>文字列のインターポレーションの際に生成された文字列が直接 &lt;g2&gt;IO&lt;/g2&gt; に渡されるようにするための改善の提案として、&lt;g1&gt;#9291&lt;/g1&gt;https://github.com/crystal-lang/crystal/issues/9291&lt;e3/&gt;に目を通しておくといいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Keiji Matsuzaki</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084045Z" creationid="makenowjust" creationdate="20200516T084045Z">
        <seg>Keiji Matsuzaki</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Key/value</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T110056Z" creationid="makenowjust" creationdate="20200510T110047Z">
        <seg>キー/値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Kris Leech</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084028Z" creationid="makenowjust" creationdate="20200516T084028Z">
        <seg>Kris Leech</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Kubuntu</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071335Z" creationid="makenowjust" creationdate="20200518T071335Z">
        <seg>Kubuntu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>LANGS = ["crystal", "ruby", "java"]

lines_with_language_reference = 0
while line = gets</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091137Z" creationid="makenowjust" creationdate="20200506T091137Z">
        <seg>LANGS = ["crystal", "ruby", "java"]

lines_with_language_reference = 0
while line = gets</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>LUCKY_NUMBERS     = [3, 7, 11]
DOCUMENTATION_URL = "http://crystal-lang.org/docs"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T205107Z" creationid="makenowjust" creationdate="20200412T205107Z">
        <seg>LUCKY_NUMBERS     = [3, 7, 11]
DOCUMENTATION_URL = "http://crystal-lang.org/docs"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Language changes</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T123942Z" creationid="makenowjust" creationdate="20200610T123942Z">
        <seg>言語の変更</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Last week was the first edition of Raw Crystal 2020.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T091436Z" creationid="makenowjust" creationdate="20201217T091436Z">
        <seg>先週、Raw Crystal 2020 の第一段が開催されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Latest release &lt;a0&gt;0.34.0&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210344Z" creationid="makenowjust" creationdate="20200413T210335Z">
        <seg>最新のリリース &lt;a0&gt;0.34.0&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Latest release &lt;g1&gt;0.34.0&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T212105Z" creationid="makenowjust" creationdate="20200413T212105Z">
        <seg>最新のリリース &lt;g1&gt;0.34.0&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Latest release &lt;g1&gt;0.35.0&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T010336Z" creationid="makenowjust" creationdate="20200610T010336Z">
        <seg>最新のリリース &lt;g1&gt;0.35.0&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Latest release &lt;g1&gt;0.35.1&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200620T122146Z" creationid="makenowjust" creationdate="20200620T122146Z">
        <seg>最新のリリース &lt;g1&gt;0.35.1&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Latest release &lt;g1&gt;0.36.0&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T091657Z" creationid="makenowjust" creationdate="20210130T091657Z">
        <seg>最新のリリース &lt;g1&gt;0.36.0&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Latest release &lt;g1&gt;1.0.0&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T073635Z" creationid="makenowjust" creationdate="20210324T073635Z">
        <seg>最新のリリース &lt;g1&gt;1.0.0&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Latest release &lt;g1&gt;{{ site.latest_release.version }}&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T144045Z" creationid="makenowjust" creationdate="20210726T144045Z">
        <seg>最新のリリース &lt;g1&gt;{{ site.latest_release.version }}&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Leading whitespace is removed from the heredoc contents according to the number of whitespace in the last line before the heredoc identifier.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T033928Z" creationid="makenowjust" creationdate="20200420T033928Z">
        <seg>最後の行のヒアドキュメントの識別子の前の空白の個数分だけ、ヒアドキュメントの内容から先頭の空白文字が削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Leading whitespace is removing from the heredoc contents according to the number of whitespace that this last `IDENT` has.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T062351Z" creationid="hirofumiwakasugi" creationdate="20160204T062144Z">
        <seg>ヒアドキュメントでは、終端の `IDENT` に指定されている先頭の空白の数にしたがって、ヒアドキュメントの内容から先頭の空白が削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Learn</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T100717Z" creationid="makenowjust" creationdate="20200518T100717Z">
        <seg>学ぶ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Learn how to bind to C libraries</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221549Z" creationid="makenowjust" creationdate="20200413T221549Z">
        <seg>C ライブラリのバインディング方法について学ぶ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Learning Materials</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T151015Z" creationid="makenowjust" creationdate="20210726T151015Z">
        <seg>学習資料</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Leave no blanks between them.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T033511Z" creationid="hirofumiwakasugi" creationdate="20151010T033502Z">
        <seg>間に空白行が入っていてはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Length</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182021Z" creationid="makenowjust" creationdate="20200419T182021Z">
        <seg>大きさ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Less than 3 years</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092433Z" creationid="makenowjust" creationdate="20201217T092433Z">
        <seg>3年未満</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Less than 6 months</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092425Z" creationid="makenowjust" creationdate="20201217T092425Z">
        <seg>6ヶ月未満</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Less than a month</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092419Z" creationid="makenowjust" creationdate="20201217T092419Z">
        <seg>1ヶ月未満</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Less than a year</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092429Z" creationid="makenowjust" creationdate="20201217T092429Z">
        <seg>1年未満</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let's build another &lt;g1&gt;fabulous&lt;/g1&gt; application with the following feature:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081053Z" creationid="makenowjust" creationdate="20200518T081053Z">
        <seg>続けて、こんな機能を持つ&lt;g1&gt;ファビュラスな&lt;/g1&gt;アプリケーションを作ってみましょう:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let's build another &lt;g1&gt;fabulous&lt;/g1&gt; application with the following feature:
By default (i.e. no options given) the application will display the names of the Fab Four.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175858Z" creationid="makenowjust" creationdate="20200413T174655Z">
        <seg>続けて、デフォルトでは (オプションが与えられなかったときに) The Fab Four のメンバーの名前を表示する、という機能を持った、&lt;g1&gt;ファビュラスな&lt;/g1&gt;アプリケーションを作ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let's compare the times:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T130322Z" creationid="akiji" creationdate="20200430T130322Z">
        <seg>実行時間を比較してみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let's start with two examples to familiarize ourselves with the language.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072409Z" creationid="hirofumiwakasugi" creationdate="20150901T072409Z">
        <seg>それでは、まずはこれから紹介する2つのプログラムの例を見ながら、Crystal に親しんでいきましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let's try it!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080448Z" creationid="makenowjust" creationdate="20200516T080448Z">
        <seg>試してみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Lets make John's pet talk:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T034133Z" creationid="hirofumiwakasugi" creationdate="20150910T034104Z">
        <seg>それでは、John のペットに喋らせてみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let’s add more &lt;g1&gt;life&lt;/g1&gt; (i.e. colors!) to the outputs.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T063146Z" creationid="makenowjust" creationdate="20200413T183019Z">
        <seg>せっかくなので出力を &lt;g1&gt;色付け&lt;/g1&gt; してみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let’s build a really simple application that shows a string with colors!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T183246Z" creationid="makenowjust" creationdate="20200413T183246Z">
        <seg>色付いた文字列を表示する、単純なアプリケーションを作ってみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let’s build an application using this parser!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172329Z" creationid="makenowjust" creationdate="20200413T172329Z">
        <seg>それではこのパーサーを使ったアプリケーションを作ってみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let’s create a new application: the Fab Four will sing with us any phrase we want.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T181535Z" creationid="makenowjust" creationdate="20200413T180944Z">
        <seg>The Fab Four が望むフレーズを唄ってくれる、というアプリケーションを作ってみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let’s create another application: &lt;g1&gt;when passing the option &lt;g2&gt;-g&lt;/g2&gt; / &lt;g3&gt;--goodbye_hello&lt;/g3&gt;, the application will say hello to a given name &lt;g4&gt;passed as a parameter to the option&lt;/g4&gt;&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175838Z" creationid="makenowjust" creationdate="20200413T175221Z">
        <seg>次はこんなアプリケーションを作ってみましょう。&lt;g1&gt;&lt;g2&gt;-g&lt;/g2&gt; / &lt;g3&gt;--goodbye_hello&lt;/g3&gt;オプションが与えられたときに、&lt;g4&gt;オプションのパラメーター&lt;/g4&gt;として渡された名前に挨拶をする&lt;/g1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let’s get right into some of the highlights in this release.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T123631Z" creationid="makenowjust" creationdate="20200610T123631Z">
        <seg>それでは今回のリリースのハイライトを紹介していきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let’s see a couple of questions regarding the programming backgrounds of the attendees.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092245Z" creationid="makenowjust" creationdate="20201217T092245Z">
        <seg>参加者のプログラミング背景についての2つの質問の結果を見てみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let’s see the demographics results.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092047Z" creationid="makenowjust" creationdate="20201217T092047Z">
        <seg>集計結果を見てみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let’s try it!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175336Z" creationid="makenowjust" creationdate="20200413T175336Z">
        <seg>試してみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let’s try the renewed application … and &lt;g1&gt;hear&lt;/g1&gt; the difference!!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T184841Z" creationid="makenowjust" creationdate="20200413T184558Z">
        <seg>生まれ変わったアプリケーションを試してみてください……そして、違いを&lt;g1&gt;聴き取って&lt;/g1&gt;ください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>LibFoo.store_callback -&gt;{ raise "OH NO!" }
LibFoo.execute_callback
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T052144Z" creationid="hirofumiwakasugi" creationdate="20151008T052144Z">
        <seg>LibFoo.store_callback -&gt;{ raise "OH NO!" }
LibFoo.execute_callback
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>LibPerson.compute_default_age(out @age)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T143226Z" creationid="makenowjust" creationdate="20200427T143226Z">
        <seg>LibPerson.compute_default_age(out @age)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>LibTicker.on_tick(-&gt;(tick, data) {</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090842Z" creationid="makenowjust" creationdate="20200512T090842Z">
        <seg>LibTicker.on_tick(-&gt;(tick, data) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Library authors are advised to put their definitions inside a module to avoid name clashes.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T131718Z" creationid="hirofumiwakasugi" creationdate="20150911T131411Z">
        <seg>あなたがライブラリの作者であれば、上記のように型などの定義をモジュールの内部で行うことによって名前の衝突を避けるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Libs</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T203954Z" creationid="makenowjust" creationdate="20200412T203954Z">
        <seg>ライブラリ (Lib)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Like above, they are inherited by including/subclassing types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T135311Z" creationid="makenowjust" creationdate="20200504T135311Z">
        <seg>上記と同様に、インクールドや継承された型にクラス変数は継承されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Like above, they are not inherited by including types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041346Z" creationid="hirofumiwakasugi" creationdate="20150910T041346Z">
        <seg>その場合も、上記と同様に、インクルードによってクラス変数が引き継がれることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Likewise, we can wait for multiple fibers to complete execution, and gather their values:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T151047Z" creationid="akiji" creationdate="20200429T134328Z">
        <seg>同様に、処理を完了するために複数のファイバを待ち受けて、それらの値を集約することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Limitations</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T082037Z" creationid="makenowjust" creationdate="20200424T081649Z">
        <seg>制約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Link</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114557Z" creationid="makenowjust" creationdate="20200510T114557Z">
        <seg>Link</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Linux Mint</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071406Z" creationid="makenowjust" creationdate="20200518T071406Z">
        <seg>Linux Mint</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Linuxbrew</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T113150Z" creationid="makenowjust" creationdate="20200518T113150Z">
        <seg>Linuxbrew を使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>List of operators</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084817Z" creationid="makenowjust" creationdate="20200502T084817Z">
        <seg>演算子の一覧</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Lists the installed dependencies and their versions.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181040Z" creationid="makenowjust" creationdate="20200419T181040Z">
        <seg>インストールされた依存関係とそれらのバージョンの一覧を表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Literal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000357Z" creationid="makenowjust" creationdate="20200414T000357Z">
        <seg>リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Literals</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000322Z" creationid="makenowjust" creationdate="20200414T000322Z">
        <seg>リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Live preview (at http://127.0.0.1:8000):</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T055712Z" creationid="makenowjust" creationdate="20201213T055712Z">
        <seg>ライブプレビューを実行 (http://127.0.0.1:8000):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Local variables</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T180224Z" creationid="makenowjust" creationdate="20200422T180224Z">
        <seg>ローカル変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Local variables start with lowercase letters.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053623Z" creationid="hirofumiwakasugi" creationdate="20150902T051653Z">
        <seg>変数名の先頭が小文字の変数はローカル変数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Logging</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T152611Z" creationid="makenowjust" creationdate="20200610T152611Z">
        <seg>ログ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Logical</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091921Z" creationid="makenowjust" creationdate="20200502T091921Z">
        <seg>論理演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Logical AND</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084756Z" creationid="makenowjust" creationdate="20200502T084756Z">
        <seg>論理 AND</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Logical OR</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084801Z" creationid="makenowjust" creationdate="20200502T084801Z">
        <seg>論理 OR</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Logo</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084835Z" creationid="makenowjust" creationdate="20200516T084835Z">
        <seg>ロゴ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Logs are available at &lt;a12&gt;irclog.crystal-lang.org&lt;/a12&gt;." link_text="#crystal-lang" url="https://web.libera.chat/#crystal-lang" icon="libera_chat" continues=true custom_icon=true %} {% include community_row.html title="" content="The Discord server, unlike the Gitter room and the IRC channel, is unofficial, but strives not to yield to the official alternatives.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20220525T090501Z" creationid="makenowjust" creationdate="20220525T090501Z">
        <seg>チャットのログは &lt;a12&gt;irclog.crystal-lang.org&lt;/a12&gt; で確認できます。'
  link_text='#crystal-lang'
  url='https://web.libera.chat/#crystal-lang'
  icon='libera_chat'
  continues=true
  custom_icon=true %}

{% include community_row.html
  title=''
  content='Discord サーバーです。Gitter ルームや IRC チャンネルと異なり非公式ですが、公式にも劣らない代替場所となっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Logs are available at &lt;g13&gt;irclog.crystal-lang.org&lt;/g13&gt;." link_text="#crystal-lang" url="https://web.libera.chat/#crystal-lang" icon="libera_chat" continues=true custom_icon=true %} {% include community_row.html title="" content="The Discord server, unlike the Gitter room and the IRC channel, is unofficial, but strives not to yield to the official alternatives.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T081216Z" creationid="makenowjust" creationdate="20211107T081216Z">
        <seg>チャットのログは &lt;g13&gt;irclog.crystal-lang.org&lt;/g13&gt; で確認できます。'
  link_text='#crystal-lang'
  url='https://web.libera.chat/#crystal-lang'
  icon='libera_chat'
  continues=true
  custom_icon=true %}

{% include community_row.html
  title=''
  content='Discord サーバーです。Gitter ルームや IRC チャンネルと異なり非公式ですが、公式にも劣らない代替場所となっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Logs are available at &lt;g13&gt;irclog.crystal-lang.org&lt;/g13&gt;." link_text="#crystal-lang" url="https://web.libera.chat/#crystal-lang" icon="web_asset" continues=true %} {% include community_row.html title="" content="The Discord server, unlike the Gitter room and the IRC channel, is unofficial, but strives not to yield to the official alternatives.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T145135Z" creationid="makenowjust" creationdate="20210726T144444Z">
        <seg>ログは &lt;g13&gt;irclog.crystal-lang.org&lt;/g13&gt; にあります。'
  link_text='#crystal-lang'
  url='https://web.libera.chat/#crystal-lang'
  icon='web_asset'
  continues=true %}

{% include community_row.html
  title=''
  content='Discord サーバーです。Gitter ルームや IRC チャンネルと異なり非公式ですが、公式にも劣らない代替場所となっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Low-level primitives</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T015038Z" creationid="makenowjust" creationdate="20200511T015038Z">
        <seg>低レベルプリミティブ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Luis Lavena</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084029Z" creationid="makenowjust" creationdate="20200516T084029Z">
        <seg>Luis Lavena</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macro calls</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T214726Z" creationid="makenowjust" creationdate="20200509T214726Z">
        <seg>マクロにおけるメソッド呼び出し</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macro conditionals can be used outside a macro definition:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040247Z" creationid="hirofumiwakasugi" creationdate="20151001T040232Z">
        <seg>マクロの条件分岐は、マクロの外側でも使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macro defs allow you to define a method for a class hierarchy and have that method be evaluated at the end of the type-inference phase, as a macro, where type information is known, for each concrete subtype.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T012111Z" creationid="hirofumiwakasugi" creationdate="20151002T011727Z">
        <seg>マクロで def を使うと、クラス階層内でメソッドを定義することが可能で、そのメソッドは型推論フェーズの終わりに評価されます。そのとき、マクロはそれぞれの派生型の型情報を知っている状態で評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macro defs allow you to define a method for a class hierarchy which is then instantiated for each concrete subtype.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T223535Z" creationid="makenowjust" creationdate="20200509T223419Z">
        <seg>マクロ def を使うと、各サブタイプの実体に応じたクラス階層についてメソッドを定義することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macro expressions are evaluated both within comments as well as compilable sections of code.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221019Z" creationid="makenowjust" creationdate="20200509T221019Z">
        <seg>コメント中のマクロの式は、コンパイルされるコードと同様に評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macro iterations can be used outside a macro definition:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215337Z" creationid="hirofumiwakasugi" creationdate="20151001T040446Z">
        <seg>マクロの繰り返し構文は、マクロの外側でも使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macro methods</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T223150Z" creationid="makenowjust" creationdate="20200509T223150Z">
        <seg>マクロメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macros</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211717Z" creationid="makenowjust" creationdate="20200413T211717Z">
        <seg>マクロ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macros are also looked-up in the ancestors chain (superclasses and included modules).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T015921Z" creationid="hirofumiwakasugi" creationdate="20151001T015914Z">
        <seg>また、マクロは継承チェーン (スーパクラスとインクルードされたモジュール) からも探索されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macros are methods that receive AST nodes at compile-time and produce
code that is pasted into a program.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T014644Z" creationid="hirofumiwakasugi" creationdate="20151001T014640Z">
        <seg>マクロとは、コンパイル時に AST ノードを受け取り、コードを生成してそれをプログラムに書き込むメソッドです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macros can access constants.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T041453Z" creationid="hirofumiwakasugi" creationdate="20151001T041453Z">
        <seg>マクロは定数にアクセスすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macros declared at the top-level are visible anywhere.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T015527Z" creationid="hirofumiwakasugi" creationdate="20151001T015417Z">
        <seg>トップレベルで宣言されたマクロはどこからでもアクセス可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macros defined in classes and modules can be invoked from outside of them too:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T214519Z" creationid="makenowjust" creationdate="20200509T214519Z">
        <seg>クラスやモジュールに定義されたマクロを、その外側から呼び出すこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Main code</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T101036Z" creationid="makenowjust" creationdate="20200427T101030Z">
        <seg>メインとなるコード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Main code can also be inside type declarations:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T101223Z" creationid="makenowjust" creationdate="20200427T101223Z">
        <seg>メインとなるコードは型定義の中に現れる場合もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Main code, the code that is run when you compile and run a program, can be written directly in a source file without the need to put it in a special "main" method:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T101601Z" creationid="makenowjust" creationdate="20200427T101147Z">
        <seg>コンパイルされたプログラムを実行する際に実行される部分のコードは、ソースコードに直接書きます。"main" メソッドのような特別なメソッドに含める必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Main language is russian but you may ask something in english too." link_text="Crystal - Russian speaking community" url="https://t.me/crystal_ru" icon="telegram" custom_icon=true %} {% include community_row.html title="General Announcements and Events" divId="twitter" content="The Twitter account will often tweet general announcements on releases and events, and retweet any interesting articles from the tweetosphere.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T081809Z" creationid="makenowjust" creationdate="20211107T081809Z">
        <seg>主な言語はロシア語ですが、英語で質問することもできます。'
  link_text='Crystal - ロシア語話者コミュニティー'
  url='https://t.me/crystal_ru'
  icon='telegram'
  custom_icon=true %}

{% include community_row.html
  title='総合的なアナウンスやイベントの通知'
  divId='twitter'
  content='Twitter アカウントは総合的なリリースのアナウンスや、興味深い記事のリツイートをします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure a supported LLVM version is present in the path.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T064756Z" creationid="makenowjust" creationdate="20200518T064756Z">
        <seg>サポートしているバージョンの LLVM にパスが通っているか確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure to always profile programs by compiling or running them with the &lt;g1&gt;--release&lt;/g1&gt; flag, which turns on optimizations.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T025734Z" creationid="akiji" creationdate="20200430T084316Z">
        <seg>なお、プログラムのプロファイリングを行う際は、必ずコンパイルする際や実行時に &lt;g1&gt;--release&lt;/g1&gt; フラグをつけて最適化を有効にするようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure to always use `--release` for production-ready executables and when performing benchmarks.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072118Z" creationid="hirofumiwakasugi" creationdate="20150901T072118Z">
        <seg>したがって、プロダクションでの利用やベンチマークを測定するような場合には、必ず `--release` をつけるようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure to install &lt;g1&gt;all the required libraries&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T064855Z" creationid="makenowjust" creationdate="20200518T064855Z">
        <seg>そして、&lt;g1&gt;すべての必要なライブラリが&lt;/g1&gt;インストールされていることを確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure to install &lt;g1&gt;all the required libraries&lt;/g1&gt;https://github.com/crystal-lang/crystal/wiki/All-required-libraries&lt;e3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093141Z" creationid="makenowjust" creationdate="20200518T093128Z">
        <seg>そして、&lt;g1&gt;すべての必要なライブラリ (英語)&lt;/g1&gt;https://github.com/crystal-lang/crystal/wiki/All-required-libraries&lt;e3/&gt; がインストールされていることを確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure to install [all the required libraries](https://github.com/manastech/crystal/wiki/All-required-libraries).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060736Z" creationid="hirofumiwakasugi" creationdate="20150831T060736Z">
        <seg>ただし、 [「すべての必要なライブラリ」](https://github.com/manastech/crystal/wiki/All-required-libraries)がインストールされている必要があることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure to keep the discussion organised, and consider using the mailing list if the chat drags for too long." link_text="crystal-lang/crystal" url="https://gitter.im/crystal-lang/crystal" icon="gitter" continues=true custom_icon=true %} {% include community_row.html title="" content="If you are more of an IRC kind of person, the channel at irc.freenode.net which keeps its logs in &lt;a8&gt;irclog.crystal-lang.org&lt;/a8&gt;, is bridged to the Gitter room, so anything sent on one channel is forwarded to the other one." link_text="#crystal-lang" url="https://webchat.freenode.net/?channels=%23crystal-lang" icon="web_asset" %} {% include community_row.html title="General Announcements and Events" divId="twitter" content="The Twitter account will often tweet general announcements on releases and events, and retweet any interesting articles from the tweetosphere.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T095516Z" creationid="makenowjust" creationdate="20200516T093630Z">
        <seg>議論はまとまるように心がけてください。チャット欄が短かいと感じたらメーリングリストを使うことも検討してください。"
   link_text="crystal-lang/crystal"
   url="https://gitter.im/crystal-lang/crystal"
   icon="gitter"
   continues=true
   custom_icon=true %}

{% include community_row.html title=""
   content="IRC の方が手軽な場合は、irc.freenode.net につながっている &lt;a8&gt;irclog.crystal-lang.org&lt;/a8&gt; が Gitter にブリッジされています。ここに送ったものは Gitter にも転送されます。"
   link_text="#crystal-lang"
   url="https://webchat.freenode.net/?channels=%23crystal-lang"
   icon="web_asset" %}

{% include community_row.html
   title="総合的なアナウンスやイベントの通知"
   divId="twitter"
   content="Twitter アカウントは総合的なリリースのアナウンスや、興味深い記事のリツイートをします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure to keep the discussion organised, and consider using the mailing list if the chat drags for too long." link_text="crystal-lang/crystal" url="https://gitter.im/crystal-lang/crystal" icon="gitter" continues=true custom_icon=true %} {% include community_row.html title="" content="If you are more of an IRC kind of person, the channel at irc.freenode.net which keeps its logs in &lt;g9&gt;irclog.crystal-lang.org&lt;/g9&gt;, is bridged to the Gitter room, so anything sent on one channel is forwarded to the other one." link_text="#crystal-lang" url="https://webchat.freenode.net/?channels=%23crystal-lang" icon="web_asset" %} {% include community_row.html title="General Announcements and Events" divId="twitter" content="The Twitter account will often tweet general announcements on releases and events, and retweet any interesting articles from the tweetosphere.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T103228Z" creationid="makenowjust" creationdate="20200518T075915Z">
        <seg>議論はまとまるように心がけてください。チャット欄が短かいと感じたらメーリングリストを使うことも検討してください。'
   link_text='crystal-lang/crystal'
   url='https://gitter.im/crystal-lang/crystal'
   icon='gitter'
   continues=true
   custom_icon=true %}

{% include community_row.html title=''
   content='IRC の方が手軽な場合は、irc.freenode.net につながっている &lt;g9&gt;irclog.crystal-lang.org&lt;/g9&gt; が Gitter にブリッジされています。ここに送ったものは Gitter にも転送されます。'
   link_text='#crystal-lang'
   url='https://webchat.freenode.net/?channels=%23crystal-lang'
   icon='web_asset' %}

{% include community_row.html
   title='総合的なアナウンスやイベントの通知'
   divId='twitter'
   content='Twitter アカウントは総合的なリリースのアナウンスや、興味深い記事のリツイートをします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure to keep the discussion organised, and consider using the mailing list if the chat drags for too long." link_text="crystal-lang/crystal" url="https://gitter.im/crystal-lang/crystal" icon="gitter" continues=true custom_icon=true %} {% include community_row.html title="" content="Our IRC channel at &lt;g12&gt;irc.libera.chat:6697#crystal-lang&lt;/g12&gt; is bridged to the Gitter room, so anything sent on one platform is forwarded to the other one.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T144818Z" creationid="makenowjust" creationdate="20210726T144409Z">
        <seg>議論を整理整頓するようにして、チャット欄が短いと感じたらメーリングリストを使うことも検討してください。'
  link_text='crystal-lang/crystal'
  url='https://gitter.im/crystal-lang/crystal'
  icon='gitter'
  continues=true
  custom_icon=true %}

{% include community_row.html
  title=''
  content='IRC チャンネル &lt;g12&gt;irc.libera.chat:6697#crystal-lang&lt;/g12&gt; は Gitter のルームにブリッジされているので、一方に送られたことはもう一方にも転送されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure to keep the discussion organised, and consider using the mailing list if the chat drags for too long." link_text="crystal-lang/crystal" url="https://gitter.im/crystal-lang/crystal" icon="gitter" continues=true custom_icon=true %} {% include community_row.html title="" content='If you are more of an IRC kind of person, the channel at irc.freenode.net which keeps its logs in &lt;g12&gt;irclog.crystal-lang.org&lt;/g12&gt;, is bridged to the Gitter room, so anything sent on one channel is forwarded to the other one.' link_text="#crystal-lang" url="https://webchat.freenode.net/?channels=%23crystal-lang" icon="web_asset" %} {% include community_row.html title="General Announcements and Events" divId="twitter" content="The Twitter account will often tweet general announcements on releases and events, and retweet any interesting articles from the tweetosphere.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200617T111556Z" creationid="makenowjust" creationdate="20200617T111556Z">
        <seg>議論はまとまるように心がけてください。チャット欄が短かいと感じたらメーリングリストを使うことも検討してください。'
   link_text='crystal-lang/crystal'
   url='https://gitter.im/crystal-lang/crystal'
   icon='gitter'
   continues=true
   custom_icon=true %}

{% include community_row.html title=''
   content='IRC の方が手軽な場合は、irc.freenode.net につながっている &lt;g12&gt;irclog.crystal-lang.org&lt;/g12&gt; が Gitter にブリッジされています。ここに送ったものは Gitter にも転送されます。'
   link_text='#crystal-lang'
   url='https://webchat.freenode.net/?channels=%23crystal-lang'
   icon='web_asset' %}

{% include community_row.html
   title='総合的なアナウンスやイベントの通知'
   divId='twitter'
   content='Twitter アカウントは総合的なリリースのアナウンスや、興味深い記事のリツイートをします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure to keep the discussion organised, and consider using the mailing list if the chat drags for too long." link_text="crystal-lang/crystal" url="https://gitter.im/crystal-lang/crystal" icon="gitter" continues=true custom_icon=true %} {% include community_row.html title="" content='If you are more of an IRC kind of person, the channel at irc.freenode.net which keeps its logs in &lt;g12&gt;irclog.crystal-lang.org&lt;/g12&gt;, is bridged to the Gitter room, so anything sent on one channel is forwarded to the other one.' link_text="#crystal-lang" url="https://webchat.freenode.net/?channels=%23crystal-lang" icon="web_asset" continues=true %} {% include community_row.html title="" content="The Discord server, unlike the Gitter room and the IRC channel, is unofficial, but strives not to yield to the official alternatives.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201203T132801Z" creationid="makenowjust" creationdate="20201203T122306Z">
        <seg>議論はまとまるように心がけてください。チャット欄が短かいと感じたらメーリングリストを使うことも検討してください。'
   link_text='crystal-lang/crystal'
   url='https://gitter.im/crystal-lang/crystal'
   icon='gitter'
   continues=true
   custom_icon=true %}

{% include community_row.html title=''
   content='IRC の方が手軽な場合は、irc.freenode.net につながっている &lt;g12&gt;irclog.crystal-lang.org&lt;/g12&gt; が Gitter にブリッジされています。ここに送ったものは Gitter にも転送されます。'
   link_text='#crystal-lang'
   url='https://webchat.freenode.net/?channels=%23crystal-lang'
   icon='web_asset'
   continues=true %}

{% include community_row.html title=''
  content='Discord サーバーは Gitter のルームや IRC のチャンネルとは異なり非公式ですが、しかし公式のその他のものに屈せず追求しています。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure to keep the discussion organised, and consider using the mailing list if the chat drags for too long." link_text="crystal-lang/crystal" url="https://gitter.im/crystal-lang/crystal" icon="gitter" continues=true custom_icon=true %} {% include community_row.html title="" content='If you are more of an IRC kind of person, the channel at irc.freenode.net which keeps its logs in &lt;g9&gt;irclog.crystal-lang.org&lt;/g9&gt;, is bridged to the Gitter room, so anything sent on one channel is forwarded to the other one.' link_text="#crystal-lang" url="https://webchat.freenode.net/?channels=%23crystal-lang" icon="web_asset" %} {% include community_row.html title="General Announcements and Events" divId="twitter" content="The Twitter account will often tweet general announcements on releases and events, and retweet any interesting articles from the tweetosphere.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T104753Z" creationid="makenowjust" creationdate="20200518T104753Z">
        <seg>議論はまとまるように心がけてください。チャット欄が短かいと感じたらメーリングリストを使うことも検討してください。'
   link_text='crystal-lang/crystal'
   url='https://gitter.im/crystal-lang/crystal'
   icon='gitter'
   continues=true
   custom_icon=true %}

{% include community_row.html title=''
   content='IRC の方が手軽な場合は、irc.freenode.net につながっている &lt;g9&gt;irclog.crystal-lang.org&lt;/g9&gt; が Gitter にブリッジされています。ここに送ったものは Gitter にも転送されます。'
   link_text='#crystal-lang'
   url='https://webchat.freenode.net/?channels=%23crystal-lang'
   icon='web_asset' %}

{% include community_row.html
   title='総合的なアナウンスやイベントの通知'
   divId='twitter'
   content='Twitter アカウントは総合的なリリースのアナウンスや、興味深い記事のリツイートをします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure to keep the discussion organised, and consider using the mailing list if the chat drags for too long." link_text="crystal-lang/crystal" url="https://gitter.im/crystal-lang/crystal" icon="gitter" continues=true custom_icon=true %} {% include community_row.html title="" divId="liberachat" content="Our IRC channel at &lt;a11&gt;irc.libera.chat:6697#crystal-lang&lt;/a11&gt; is bridged to the Gitter room, so anything sent on one platform is forwarded to the other one.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20220525T090438Z" creationid="makenowjust" creationdate="20220525T090438Z">
        <seg>議論を整理整頓するようにして、チャット欄が短いと感じたらメーリングリストを使うことも検討してください。'
  link_text='crystal-lang/crystal'
  url='https://gitter.im/crystal-lang/crystal'
  icon='gitter'
  continues=true
  custom_icon=true %}

{% include community_row.html
  title=''
  divId='liberachat'
  content='IRC チャンネル &lt;a11&gt;irc.libera.chat:6697#crystal-lang&lt;/a11&gt; は Gitter のルームにブリッジされているので、一方に送られたことはもう一方にも転送されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure to keep the discussion organised, and consider using the mailing list if the chat drags for too long." link_text="crystal-lang/crystal" url="https://gitter.im/crystal-lang/crystal" icon="gitter" continues=true custom_icon=true %} {% include community_row.html title="" divId="liberachat" content="Our IRC channel at &lt;g12&gt;irc.libera.chat:6697#crystal-lang&lt;/g12&gt; is bridged to the Gitter room, so anything sent on one platform is forwarded to the other one.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T081019Z" creationid="makenowjust" creationdate="20211107T081019Z">
        <seg>議論を整理整頓するようにして、チャット欄が短いと感じたらメーリングリストを使うことも検討してください。'
  link_text='crystal-lang/crystal'
  url='https://gitter.im/crystal-lang/crystal'
  icon='gitter'
  continues=true
  custom_icon=true %}

{% include community_row.html
  title=''
  divId='liberachat'
  content='IRC チャンネル &lt;g12&gt;irc.libera.chat:6697#crystal-lang&lt;/g12&gt; は Gitter のルームにブリッジされているので、一方に送られたことはもう一方にも転送されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Makefile</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075517Z" creationid="makenowjust" creationdate="20200516T075517Z">
        <seg>Makefile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Making sure a method returns &lt;g1&gt;nil&lt;/g1&gt; without needing to add an extra &lt;g2&gt;nil&lt;/g2&gt; at the end, or at every return point</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T084459Z" creationid="makenowjust" creationdate="20200430T141558Z">
        <seg>追加で末尾に &lt;g2&gt;nil&lt;/g2&gt; を置いて戻り値を設定しなくても、明確に &lt;g1&gt;nil&lt;/g1&gt; を返せる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Manjaro</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071405Z" creationid="makenowjust" creationdate="20200518T071405Z">
        <seg>Manjaro</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Manual setup</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T092829Z" creationid="makenowjust" creationdate="20210130T092829Z">
        <seg>マニュアルセットアップ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many methods have an &lt;g1&gt;IO&lt;/g1&gt; argument that is a sink or target of the computation.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T142012Z" creationid="makenowjust" creationdate="20200610T142012Z">
        <seg>計算結果の出力や入力に &lt;g1&gt;IO&lt;/g1&gt; を引数に取る多くのメソッドがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Mar 2021 - &lt;g1&gt;More release notes&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T073648Z" creationid="makenowjust" creationdate="20210324T073648Z">
        <seg>Mar 2021 - &lt;g1&gt;その他のリリースノート&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marking a Crystal struct with this annotation makes it possible to use it in lib declarations:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T095945Z" creationid="makenowjust" creationdate="20210324T095945Z">
        <seg>このアノテーションをつけた Crystal の構造体は lib 宣言の中でも使えるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marking a Crystal struct with this attribute makes it possible to use it in lib declarations:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114654Z" creationid="makenowjust" creationdate="20200510T114650Z">
        <seg>このアノテーションをつけた Crystal の構造体はlibの宣言の中でも使えるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marking a class as abstract will also prevent us from creating an instance of it:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T035618Z" creationid="hirofumiwakasugi" creationdate="20150910T035546Z">
        <seg>abstract クラスとすることで、そのクラスを直接インスタンス化するのを避けることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marking a method as returning &lt;g1&gt;Nil&lt;/g1&gt; will make it return &lt;g2&gt;nil&lt;/g2&gt; regardless of what it actually returns:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T141324Z" creationid="makenowjust" creationdate="20200430T141324Z">
        <seg>戻り値の型に &lt;g1&gt;Nil&lt;/g1&gt; を指定すると、明示的に &lt;g2&gt;nil&lt;/g2&gt; を返さなくても &lt;g2&gt;nil&lt;/g2&gt; が返るようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marks a &lt;g1&gt;C struct&lt;/g1&gt; as packed, which prevents the automatic insertion of padding bytes between fields.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T115437Z" creationid="makenowjust" creationdate="20200510T115437Z">
        <seg>&lt;g1&gt;C の構造体&lt;/g1&gt;をパックし、自動でフィールド間のパディングが挿入されるのを防ぎます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marks a method or &lt;g1&gt;lib fun&lt;/g1&gt; as potentially raising an exception.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120807Z" creationid="makenowjust" creationdate="20200510T120156Z">
        <seg>メソッドもしくは &lt;g1&gt;lib 中の fun&lt;/g1&gt; が例外を発生させる可能性があることを指示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marks a method or &lt;g1&gt;lib fun&lt;/g1&gt; as returning twice.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120558Z" creationid="makenowjust" creationdate="20200510T120104Z">
        <seg>メソッドもしくは &lt;g1&gt;lib 中の fun&lt;/g1&gt; が2度リターンすることを指示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marks a method or [lib fun](c_bindings/fun.html) as potentially raising an exception.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073519Z" creationid="hirofumiwakasugi" creationdate="20150919T073510Z">
        <seg>メソッド、および [lib fun](c_bindings/fun.html) が例外を発生させる可能性があることを指示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marks a method or [lib fun](c_bindings/fun.html) as returning twice.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073513Z" creationid="hirofumiwakasugi" creationdate="20150919T073359Z">
        <seg>メソッド、および [lib fun](c_bindings/fun.html) が2回リターンすることを指示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marks an &lt;g1&gt;enum&lt;/g1&gt; as a "flags enum", which changes the behaviour of some of its methods, like &lt;g2&gt;to_s&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120359Z" creationid="makenowjust" creationdate="20200510T120359Z">
        <seg>&lt;g1&gt;列挙型&lt;/g1&gt;を「フラグ列挙型」とします。これによって、&lt;g2&gt;to_s&lt;/g2&gt; などいくつかのメソッドの挙動が変更されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marks an [enum](enum.html) as a "flags enum", which changes the behaviour of some of its methods, like `to_s`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T074833Z" creationid="hirofumiwakasugi" creationdate="20150919T074833Z">
        <seg>[Enum](enum.html) を「Flags Enum」とします。これによって、`to_s` などのいくつかのメソッドの挙動が変更されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Maximum Value</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182034Z" creationid="makenowjust" creationdate="20200419T182034Z">
        <seg>最大値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Meet all</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222530Z" creationid="makenowjust" creationdate="20200413T222530Z">
        <seg>一覧はこちら</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Meet our original sponsors &lt;a0&gt;here&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T082839Z" creationid="makenowjust" creationdate="20200516T082839Z">
        <seg>オリジナルのスポンサーは&lt;a0&gt;こちら&lt;/a0&gt;で確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Meet our original sponsors &lt;g1&gt;here&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093348Z" creationid="makenowjust" creationdate="20200518T093348Z">
        <seg>オリジナルのスポンサーは&lt;g1&gt;こちら&lt;/g1&gt;で確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Method arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T143752Z" creationid="makenowjust" creationdate="20200430T143752Z">
        <seg>メソッドの引数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Method calls</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T082209Z" creationid="makenowjust" creationdate="20200424T082209Z">
        <seg>メソッド呼び出し</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Method information</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215847Z" creationid="makenowjust" creationdate="20200509T215847Z">
        <seg>メソッドの情報</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Method names begin with a lowercase letter and, as a convention, only use lowercase letters, underscores and numbers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122532Z" creationid="hirofumiwakasugi" creationdate="20150904T122532Z">
        <seg>メソッド名の先頭は小文字である必要があります。また、メソッド名には使うのは小文字とアンダースコア、そして数値のみとすることが慣習的です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Methods</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182756Z" creationid="makenowjust" creationdate="20200505T182756Z">
        <seg>メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Methods &lt;g1&gt;can&lt;/g1&gt; be marked as &lt;g2&gt;private&lt;/g2&gt; or &lt;g3&gt;protected&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T103718Z" creationid="makenowjust" creationdate="20200502T103718Z">
        <seg>メソッドは&lt;g2&gt;private&lt;/g2&gt;もしくは&lt;g3&gt;protected&lt;/g3&gt;を指定することが&lt;g1&gt;できます&lt;/g1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Methods and instance variables</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T122724Z" creationid="makenowjust" creationdate="20200427T122724Z">
        <seg>メソッドとインスタンス変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Methods are public by default: the compiler will always let you invoke them.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T040710Z" creationid="hirofumiwakasugi" creationdate="20150909T032000Z">
        <seg>メソッドのデフォルトの可視性は public になっており、どこからでも実行することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Methods can accept a block of code that is executed
with the &lt;g1&gt;yield&lt;/g1&gt; keyword.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T183851Z" creationid="makenowjust" creationdate="20200505T183851Z">
        <seg>メソッドはコードのブロックを取ることができ、そのブロックは &lt;g1&gt;yield&lt;/g1&gt; キーワードによって実行できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Methods can accept a block of code that is executed
with the `yield` keyword.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T013249Z" creationid="hirofumiwakasugi" creationdate="20150916T013214Z">
        <seg>メソッドはコードブロックをとることができ、そのブロックは `yield` キーワードによって実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Methods can be marked as `private` or `protected`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032415Z" creationid="hirofumiwakasugi" creationdate="20150909T032415Z">
        <seg>メソッドには `private` または `protected` を指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Methods on integers, floats and chars are provided for these conversions.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T115425Z" creationid="makenowjust" creationdate="20200512T115425Z">
        <seg>整数や浮動小数点数、そして文字にはこれらの変換のためのメソッドが提供されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Methods on integers, floats and chars are provided for these convertions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022312Z" creationid="hirofumiwakasugi" creationdate="20151009T022301Z">
        <seg>整数や浮動小数点数、そして文字にはこれらの変換のためのメソッドが提供されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Methods overload by several criteria:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071245Z" creationid="hirofumiwakasugi" creationdate="20150906T071206Z">
        <seg>メソッドがオーバーロードされるための条件は次の通りです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Minimum Value</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182026Z" creationid="makenowjust" creationdate="20200419T182026Z">
        <seg>最小値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Missing platform?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T064530Z" creationid="makenowjust" creationdate="20200518T064530Z">
        <seg>プラットフォームが見当たりませんか？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Modifiers</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T041506Z" creationid="makenowjust" creationdate="20200421T041506Z">
        <seg>修飾子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Module Type Checking</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141810Z" creationid="makenowjust" creationdate="20200504T141748Z">
        <seg>モジュールの型検査</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Modules</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141127Z" creationid="makenowjust" creationdate="20200504T141127Z">
        <seg>モジュール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Modules and classes</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T214925Z" creationid="makenowjust" creationdate="20200509T214925Z">
        <seg>モジュールとクラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Modules can also be used for type checking.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141807Z" creationid="makenowjust" creationdate="20200504T141807Z">
        <seg>モジュールは型を検査するのにも使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Modules serve two purposes:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T150909Z" creationid="hirofumiwakasugi" creationdate="20150911T130338Z">
        <seg>モジュールは以下の2つの役割のためにあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Modules, classes and structs can also be generated:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T214941Z" creationid="makenowjust" creationdate="20200509T214941Z">
        <seg>モジュールやクラス、構造体を生成することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Moo.new # undefined method 'new' for Moo:Class
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T150708Z" creationid="hirofumiwakasugi" creationdate="20150911T150708Z">
        <seg>Moo.new # undefined method 'new' for Moo:Class
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More articles</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222631Z" creationid="makenowjust" creationdate="20200413T222631Z">
        <seg>さらに記事を見る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More details about using the compiler can be found on the manpage &lt;g1&gt;man crystal&lt;/g1&gt; or in our &lt;g2&gt;compiler manual&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080756Z" creationid="makenowjust" creationdate="20200516T080756Z">
        <seg>より詳細のコンパイラの使い方を確認したい場合は、&lt;g1&gt;man crystal&lt;/g1&gt; を実行して man ページを見るか、このリファレンスの&lt;g2&gt;コンパイラのマニュアル&lt;/g2&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More flexibility will come later, but the new named arguments should offer a better experience.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T153654Z" creationid="makenowjust" creationdate="20200610T153654Z">
        <seg>より柔軟なものが今後追加されるかもしれませんが、名前付き引数はより良い体験を提供するはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More information about statically linking &lt;g1&gt;can be found in the Static Linking guide&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T101938Z" creationid="makenowjust" creationdate="20210324T101938Z">
        <seg>静的リンクについてのより詳細な情報は&lt;g1&gt;「静的リンク」についてのガイド&lt;/g1&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More information about statically linking &lt;g1&gt;can be found on the wiki&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T152900Z" creationid="makenowjust" creationdate="20200419T152900Z">
        <seg>静的リンクについてのより詳細な情報は&lt;g1&gt;Wikiを参照&lt;/g1&gt;してください (英語)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More information about statically linking &lt;g1&gt;can be found on the wiki&lt;/g1&gt;https://github.com/crystal-lang/crystal/wiki/Static-Linking&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T092900Z" creationid="makenowjust" creationdate="20200518T092900Z">
        <seg>静的リンクについてのより詳細な情報は &lt;g1&gt;Wiki (英語)&lt;/g1&gt;https://github.com/crystal-lang/crystal/wiki/Static-Linking&lt;e2/&gt; を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More options are described in the integrated help: &lt;g1&gt;crystal build --help&lt;/g1&gt; or man page &lt;g2&gt;man crystal&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155604Z" creationid="makenowjust" creationdate="20200419T155604Z">
        <seg>その他のオプションは統合されたヘルプにて説明されています。&lt;g1&gt;crystal build --help&lt;/g1&gt;を使うか、&lt;g2&gt;man crystal&lt;/g2&gt; で man ページを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More options are described in the integrated help: &lt;g1&gt;crystal eval --help&lt;/g1&gt; or man page &lt;g2&gt;man crystal&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T165909Z" creationid="makenowjust" creationdate="20200422T165745Z">
        <seg>lgstその他のオプションは統合されたヘルプにて説明されています。&lt;g1&gt;crystal eval --help&lt;/g1&gt;を使うか、&lt;g2&gt;man crystal&lt;/g2&gt;で man ページを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More options are described in the integrated help: &lt;g1&gt;crystal run --help&lt;/g1&gt; or man page &lt;g2&gt;man crystal&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155636Z" creationid="makenowjust" creationdate="20200419T155000Z">
        <seg>その他のオプションは統合されたヘルプにて説明されています。&lt;g1&gt;crystal run --help&lt;/g1&gt;を使うか、&lt;g2&gt;man crystal&lt;/g2&gt;で man ページを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More release notes</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222713Z" creationid="makenowjust" creationdate="20200413T222713Z">
        <seg>さらにリリースノートを見る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More than 3 years</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092437Z" creationid="makenowjust" creationdate="20201217T092437Z">
        <seg>3年以上</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More than one type argument is allowed:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024500Z" creationid="hirofumiwakasugi" creationdate="20151009T024500Z">
        <seg>型引数は複数設定することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More than one type parameter is allowed:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T085901Z" creationid="makenowjust" creationdate="20210324T085901Z">
        <seg>型引数は複数設定することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More then one type arguments are allowed:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T065701Z" creationid="hirofumiwakasugi" creationdate="20150912T065618Z">
        <seg>型引数は複数設定することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Moreover, and to keep the language clean, Crystal has built-in type inference, so most type annotations are unneeded.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211227Z" creationid="makenowjust" creationdate="20200413T211227Z">
        <seg>さらに、Crystal は型推論も備えています。ほとんどの場合、型注釈は必要ありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most importantly, your README should explain:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T161118Z" creationid="makenowjust" creationdate="20200527T161118Z">
        <seg>最も重要なことですが、README では次のことが説明されているべきでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most of the time a C function that allows setting a callback also provide an argument for custom data.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090020Z" creationid="makenowjust" creationdate="20200512T090002Z">
        <seg>ほとんどの C 関数はコールバックに独自のデータのための引数が用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most of the time a C function that allows setting a callback also provides a parameter for custom data.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T093924Z" creationid="makenowjust" creationdate="20210324T093924Z">
        <seg>ほとんどの C 関数はコールバックに独自のデータのための引数が用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most of them have deprecation warnings as usual.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T141613Z" creationid="makenowjust" creationdate="20200610T141613Z">
        <seg>それらの大半は普通、非推奨の警告が出るようになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most operators can be implemented as regular methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T082926Z" creationid="makenowjust" creationdate="20200502T082926Z">
        <seg>ほとんどの演算子は通常のメソッドとして実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most used programming language in the last 6 months</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092315Z" creationid="makenowjust" creationdate="20201217T092254Z">
        <seg>ここ6ヶ月で最も利用したプログラミング言語</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Move the array to a constant.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T131740Z" creationid="akiji" creationdate="20200430T131740Z">
        <seg>配列を定数にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiline strings</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194151Z" creationid="makenowjust" creationdate="20200419T194151Z">
        <seg>複数行の文字列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiple &lt;g1&gt;rescue&lt;/g1&gt; clauses can be specified:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103528Z" creationid="makenowjust" creationdate="20200506T103528Z">
        <seg>複数の &lt;g1&gt;rescue&lt;/g1&gt; 節を指定することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiple `rescue` clauses can be specified:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012443Z" creationid="hirofumiwakasugi" creationdate="20150907T012443Z">
        <seg>複数の `rescue` 節を設定することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiple argument splats and double splats are allowed.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T145725Z" creationid="makenowjust" creationdate="20200430T145725Z">
        <seg>複数のスプラット展開と二重スプラット展開をすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiple assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175158Z" creationid="makenowjust" creationdate="20200422T175158Z">
        <seg>多重代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiple assignment is also available to methods that end with &lt;g1&gt;=&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175618Z" creationid="makenowjust" creationdate="20200422T175618Z">
        <seg>多重代入は名前が&lt;g1&gt;=&lt;/g1&gt;で終わるメソッドに対しても有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiple assignment is also available to methods that end with `=`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060243Z" creationid="hirofumiwakasugi" creationdate="20150902T060243Z">
        <seg>多重代入は、メソッド名が `=` で終わるメソッドに対しても有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiple free variables can be specified too, for matching types of multiple arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T135934Z" creationid="makenowjust" creationdate="20200430T135934Z">
        <seg>複数の引数に対して、複数の自由変数を指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiplicative</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085550Z" creationid="makenowjust" creationdate="20200502T084713Z">
        <seg>乗除法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Mutable structs are still allowed, but you should be careful when writing code involving mutability if you want to avoid surprises that are described below.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T172633Z" creationid="makenowjust" creationdate="20200505T172514Z">
        <seg>変更される (mutable) 構造体も利用できますが、値を変更するようなコードを書いたときに、下で説明するようなことで予想外の挙動をすることに十分に注意する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>MyBox(Int32).new(1)       # OK
MyBox(Int32).new("hello") # Error
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063746Z" creationid="hirofumiwakasugi" creationdate="20150912T063746Z">
        <seg>MyBox(Int32).new(1)       # OK
MyBox(Int32).new("hello") # エラー
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>MyBox.new(1)       # : MyBox(Int32)
MyBox.new("hello") # : MyBox(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T142823Z" creationid="makenowjust" creationdate="20200504T142823Z">
        <seg>MyBox.new(1)       # : MyBox(Int32)
MyBox.new("hello") # : MyBox(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>MyHash(String, String | Int32){"foo" =&gt; "bar"}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180600Z" creationid="makenowjust" creationdate="20200420T180600Z">
        <seg>MyHash(String, String | Int32){"foo" =&gt; "bar"}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>MyHash{"foo" =&gt; 1, "bar" =&gt; "baz"}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180534Z" creationid="makenowjust" creationdate="20200420T180534Z">
        <seg>MyHash{"foo" =&gt; 1, "bar" =&gt; "baz"}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>MySQL uses &lt;g2&gt;?&lt;/g2&gt; for parameter expansion and assignment is based on argument order.</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200706T001605Z" creationid="daiki" creationdate="20200705T234508Z">
        <seg>MySQL ではパラメータの展開に &lt;g2&gt;?&lt;/g2&gt; を使用し、代入は引数の順序に基づいて行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NOTE</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214455Z" creationid="makenowjust" creationdate="20200412T214455Z">
        <seg>NOTE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NOTE: Be sure to replace all instances of &lt;g1&gt;[your-github-name]&lt;/g1&gt; in the Crystal-generated README template with your GitHub/GitLab username.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T161444Z" creationid="makenowjust" creationdate="20200527T161444Z">
        <seg>注意: Crystal の生成した README のテンプレート中の &lt;g1&gt;[your-github-name]&lt;/g1&gt; という部分を実際の GitHub もしくは GitLab のユーザー名で置換するのを忘れないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NOTE: To use this new release you will need to build shards from sources or use a nightly Crystal release until 1.0.0-pre1 is tagged.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T105043Z" creationid="makenowjust" creationdate="20200809T105043Z">
        <seg>注意: この新しいリリースを使うには、Shards をソースコードからビルドするか、1.0.0-pre1 の Crystal がリリースされるまではナイトリー版の Crystal を使う必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NOTE: When running interactively, stdin can usually be closed by typing the end of transmission character (&lt;g1&gt;Ctrl+D&lt;/g1&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160234Z" creationid="makenowjust" creationdate="20200419T160234Z">
        <seg>注意: 対話的に実行したい場合、一般的には&lt;g1&gt;Ctrl+D&lt;/g1&gt;を入力することで標準入力を閉じることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Name</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T162315Z" creationid="makenowjust" creationdate="20200527T162315Z">
        <seg>名前</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Named arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T152447Z" creationid="makenowjust" creationdate="20200429T152447Z">
        <seg>名前付き引数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NamedTuple</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T165920Z" creationid="makenowjust" creationdate="20200422T165920Z">
        <seg>名前付きタプル (NamedTuple)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Naming</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T202836Z" creationid="makenowjust" creationdate="20200412T202836Z">
        <seg>命名</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Nested macros</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220149Z" creationid="makenowjust" creationdate="20200509T220149Z">
        <seg>ネストしたマクロ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Networking</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T152153Z" creationid="makenowjust" creationdate="20200610T152153Z">
        <seg>ネットワーク</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Nevertheless, these inversions can be defined with a custom implementation.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091212Z" creationid="makenowjust" creationdate="20200502T091212Z">
        <seg>もちろん、これらの演算子を独自に実装することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next configure the repository in Zypper:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112422Z" creationid="makenowjust" creationdate="20200518T112422Z">
        <seg>次に Zypper のリポジトリを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next follows the full list of operators with their usual meaning.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025303Z" creationid="hirofumiwakasugi" creationdate="20150909T025303Z">
        <seg>これから、すべての演算子を、その一般的な用途とあわせて紹介します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next steps</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T032725Z" creationid="makenowjust" creationdate="20200611T032725Z">
        <seg>次のステップ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Nil</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000703Z" creationid="makenowjust" creationdate="20200414T000703Z">
        <seg>Nil</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Nil return type</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T142645Z" creationid="makenowjust" creationdate="20200430T141237Z">
        <seg>Nil</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Nilable</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T121257Z" creationid="makenowjust" creationdate="20200507T120524Z">
        <seg>Nil 許容型 (Nilable)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>No language is 100% safe: some parts will inevitably be low-level, interface with the operating system and involve pointer manipulation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T013343Z" creationid="hirofumiwakasugi" creationdate="20151009T012743Z">
        <seg>100% 安全な言語というのは存在しません。ローレベルな処理や、OS のインターフェース、そしてポインタの操作をどこかで必ず含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>No runtime checks are performed in these cases because, again, pointers are involved.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T022153Z" creationid="hirofumiwakasugi" creationdate="20150930T020307Z">
        <seg>この場合も、ポインタが絡む処理になるためランタイムのチェックは行われません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>No, it’s not really magic!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174146Z" creationid="makenowjust" creationdate="20200413T172828Z">
        <seg>いえいえ、実のところ魔法ではないのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NoInline</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T115954Z" creationid="makenowjust" creationdate="20200510T115954Z">
        <seg>NoInline</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NoReturn return type</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T142648Z" creationid="makenowjust" creationdate="20200430T141905Z">
        <seg>NoReturn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>North America</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092113Z" creationid="makenowjust" creationdate="20201217T092113Z">
        <seg>北アメリカ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Not all of these files are required for every project, and some might need more customization, but &lt;g1&gt;crystal init&lt;/g1&gt; creates a good default environment for developing Crystal applications and libraries.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153841Z" creationid="makenowjust" creationdate="20200419T153841Z">
        <seg>すべてのファイルがあらゆるプロジェクトで必要になるわけではなく、カスタマイズが必要に感じる場合もあるでしょう。しかし、&lt;g1&gt;crystal init&lt;/g1&gt;は Crystal のlアプリケーションやライブラリの開発に十分なデフォルトの環境を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Not quite.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T105517Z" creationid="makenowjust" creationdate="20200504T105517Z">
        <seg>しかし、そうはいきません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that &lt;g1&gt;:foo&lt;/g1&gt; was the result of the interpolation, because that's what was passed to the macro.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T214653Z" creationid="makenowjust" creationdate="20200509T214653Z">
        <seg>マクロに渡されたものがそのまま埋め込まれるので、結果は &lt;g1&gt;:foo&lt;/g1&gt; となっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that &lt;g1&gt;@type&lt;/g1&gt; is always the &lt;g2&gt;instance&lt;/g2&gt; type, even when the macro is invoked in a class method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215832Z" creationid="makenowjust" creationdate="20200509T215832Z">
        <seg>&lt;g1&gt;@type&lt;/g1&gt; は常に (もしクラスメソッドの中で実行されたとしても) &lt;g2&gt;インスタンス&lt;/g2&gt;の型になることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that &lt;g1&gt;private&lt;/g1&gt; methods are visible by subclasses:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T105515Z" creationid="makenowjust" creationdate="20200502T105515Z">
        <seg>&lt;g1&gt;private&lt;/g1&gt; メソッドはサブクラスから呼び出すこともできることには注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that &lt;g1&gt;self&lt;/g1&gt; always represents a match against an instance type, even in class methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T161322Z" creationid="makenowjust" creationdate="20200429T161226Z">
        <seg>そして、クラスメソッドの中でも &lt;g1&gt;self&lt;/g1&gt; はインスタンスの型を表すことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that &lt;g2&gt;||&lt;/g2&gt; and &lt;g3&gt;&amp;&amp;&lt;/g3&gt; use the &lt;g4&gt;[]?&lt;/g4&gt; method to check for key presence.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174831Z" creationid="makenowjust" creationdate="20200422T174831Z">
        <seg>このとき &lt;g2&gt;||&lt;/g2&gt; と &lt;g3&gt;&amp;&amp;&lt;/g3&gt; は、 &lt;g4&gt;[]?&lt;/g4&gt; メソッドをキーの存在のチェックに使うことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that `:foo` was the result of the interpolation, because that's what was passed to the macro.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T021212Z" creationid="hirofumiwakasugi" creationdate="20151001T021013Z">
        <seg>マクロに渡されたものがそのまま埋め込まれるので、結果は `:foo` となっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that `===` is used for comparing an expression against a `case`'s value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T023748Z" creationid="hirofumiwakasugi" creationdate="20150903T023738Z">
        <seg>`case` において、対象の値と条件式は `===` を使って比較されることを覚えておいてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that `@type` is always the *instance* type, even when the macro is invoked in a class method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T041433Z" creationid="hirofumiwakasugi" creationdate="20151001T041433Z">
        <seg>`@type` は常に (もしクラスメソッドの中で実行されたとしても) 「インスタンス」の型になることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that `private` methods are visible by subclasses:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032832Z" creationid="hirofumiwakasugi" creationdate="20150909T032832Z">
        <seg>`private` メソッドがサブクラスからも実行可能であることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that `self` always represents a match against an instance type, even in class methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025130Z" creationid="hirofumiwakasugi" creationdate="20150908T025037Z">
        <seg>注意点として、それがもしクラスメソッドの中であったとしても、`self` は常にインスタンスの型に対してのチェックとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that `||` and `&amp;&amp;` use the `[]?` method to check for key prescence.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T055045Z" creationid="hirofumiwakasugi" creationdate="20150902T055045Z">
        <seg>このとき、`||` と `&amp;&amp;` は、キーの存在チェックのために `[]?` メソッドを使うことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that because expressions are assigned to temporary variables it is possible to exchange variables’ contents in a single line:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T055737Z" creationid="hirofumiwakasugi" creationdate="20150902T055732Z">
        <seg>また、式は一時的な変数に代入される仕組みになっているため、次のように1行で変数の値を交換することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that if a variable is declared inside one of the branches but not in the other one, at the end of the &lt;g1&gt;if&lt;/g1&gt; it will also contain the &lt;g2&gt;Nil&lt;/g2&gt; type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074913Z" creationid="makenowjust" creationdate="20200424T074615Z">
        <seg>もし一方の節である変数が宣言されて、もう一方ではされなかったとき、&lt;g1&gt;if&lt;/g1&gt;の後でその変数は&lt;g2&gt;Nil&lt;/g2&gt;型を持つこととに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that if a variable is declared inside one of the branches but not in the other one, at the end of the `if` it will also contain the `Nil` type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T025759Z" creationid="hirofumiwakasugi" creationdate="20150903T011416Z">
        <seg>もし、変数がある分岐節の中で宣言されて、条件に合致せずその宣言の式が評価されなかった場合も、`if` の後でその変数は `Nil` 型を持っていることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that if the return type is not specified, nothing gets returned from the proc call:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061941Z" creationid="hirofumiwakasugi" creationdate="20150918T061941Z">
        <seg>戻り値の型が指定されていないとき、proc の呼び出しは何も返さないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that if we had defined &lt;g1&gt;add&lt;/g1&gt; without type restrictions, we would also have gotten a compile time error:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T160116Z" creationid="makenowjust" creationdate="20200429T160116Z">
        <seg>ただし、&lt;g1&gt;add&lt;/g1&gt; に型制約をしていなかった場合でも、このコードはコンパイルエラーになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that if we had defined `add` without type restrictions, we would also have gotten a compile time error:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042849Z" creationid="hirofumiwakasugi" creationdate="20150907T042849Z">
        <seg>ただし、`add` に型制約をしていなかった場合でも、このコードはコンパイルエラーになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that in the above example &lt;g1&gt;T&lt;/g1&gt; becomes &lt;g2&gt;Int32&lt;/g2&gt; because &lt;g3&gt;Foo.new(1)&lt;/g3&gt; makes &lt;g4&gt;U&lt;/g4&gt; become &lt;g5&gt;Int32&lt;/g5&gt;, which in turn makes &lt;g6&gt;T&lt;/g6&gt; become &lt;g7&gt;Int32&lt;/g7&gt; via the inclusion of the generic module.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T085627Z" creationid="makenowjust" creationdate="20200504T143213Z">
        <seg>上記で &lt;g1&gt;T&lt;/g1&gt; は &lt;g2&gt;Int32&lt;/g2&gt; となります。これは &lt;g3&gt;Foo.new(1)&lt;/g3&gt; によって &lt;g4&gt;U&lt;/g4&gt; が &lt;g5&gt;Int32&lt;/g5&gt; となり、そしてジェネリックなモジュールのインクルードを経由して &lt;g6&gt;T&lt;/g6&gt; が &lt;g7&gt;Int32&lt;/g7&gt; となるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that in the above example `T` becomes `Int32` because `Foo.new(1)` makes `U` become `Int32`, which in turn makes `T` become `Int32` via the inclusion of the generic module.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061551Z" creationid="hirofumiwakasugi" creationdate="20150924T061551Z">
        <seg>上記で `T` は `Int32` となります。これは、`Foo.new(1)` によって `U` が `Int32` となり、そして、ジェネリックなモジュールをインクルードすることで `T` が `Int32` となるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that in the above example trailing and leading spaces, as well as newlines,
end up in the resulting string.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194223Z" creationid="hirofumiwakasugi" creationdate="20150901T081345Z">
        <seg>上の例では、先頭と末尾の空白、および改行が結果の文字列にも入っていることに注目してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that in the above example you can't use `x`'s name, as it doesn't have a default value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T113750Z" creationid="hirofumiwakasugi" creationdate="20150906T113435Z">
        <seg>上記において、`x` はデフォルト値を持たないため、その名前を指定することができないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that in the case of macro defs you need to specify the return type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030524Z" creationid="hirofumiwakasugi" creationdate="20151002T012151Z">
        <seg>マクロメソッド (macro def) では、返り値の型を指定する必要があることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that in the case of the method that yields, the compiler figured this out because there's a &lt;g1&gt;yield&lt;/g1&gt; expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T151649Z" creationid="makenowjust" creationdate="20200429T151649Z">
        <seg>コンパイラは &lt;g1&gt;yield&lt;/g1&gt; が含まれていることを検知して、そのメソッドがブロックをとるメソッドであることを判断しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that in the case of the method that yields, the compiler figured this out because there's a `yield` expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072041Z" creationid="hirofumiwakasugi" creationdate="20150906T071909Z">
        <seg>コンパイラは、`yield` が含まれていることを検知して、そのメソッドがブロックをとるメソッドであることを判断します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that literal denoted by &lt;g1&gt;%w&lt;/g1&gt; does not apply interpolation nor escapes except spaces.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T081335Z" creationid="makenowjust" creationdate="20210324T081335Z">
        <seg>&lt;g1&gt;%w&lt;/g1&gt; で記述されたリテラルはスペースを除くエスケープと文字列の補間を受け付けないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that literal denoted by &lt;g1&gt;%w&lt;/g1&gt; does not apply interpolation nor escapes expect spaces.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194010Z" creationid="makenowjust" creationdate="20200419T194010Z">
        <seg>&lt;g1&gt;%w&lt;/g1&gt;で記述されたリテラルはスペースを除くエスケープと文字列の補間を受け付けないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that special characters of the PCRE syntax need to be escaped if they are intended as literal characters.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T041251Z" creationid="makenowjust" creationdate="20200421T041251Z">
        <seg>PCRE の構文上意味のある文字を通常の文字として扱いたい場合もエスケープが必要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the first 2 sends are executed without switching to another fiber.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T151138Z" creationid="akiji" creationdate="20200429T144125Z">
        <seg>最初の２回のsendが実行された際に、他のファイバに処理が切り替わらなかったことに注目してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the name of the method argument is not important; this works as well:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T140707Z" creationid="makenowjust" creationdate="20200427T140707Z">
        <seg>メソッドの引数の名前は特に重要ではありません。次のようにしても動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the node is pasted as-is.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T021107Z" creationid="hirofumiwakasugi" creationdate="20151001T020805Z">
        <seg>ノードは「そのまま」貼り付けされることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that there are no implicit conversions (except &lt;g1&gt;to_unsafe&lt;/g1&gt;, which is explained later) when invoking a C function: you must pass the exact type that is expected.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T031546Z" creationid="makenowjust" creationdate="20200511T031546Z">
        <seg>C の関数を呼び出すときに (後に説明する &lt;g1&gt;to_unsafe&lt;/g1&gt; を除いては) 暗黙的な変換は行われないことに注意してください。つまり、期待される型を正確に渡す必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that there are no implicit conversions (except `to_unsafe`, explained later) when invoking a C function: you must pass the exact type that is expected.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T041249Z" creationid="hirofumiwakasugi" creationdate="20151005T041031Z">
        <seg>C の関数を実行するときに (後に説明する `to_unsafe` を除いては) 暗黙的な変換が行われないことに注意してください。つまり、期待される型を正確に渡さなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that type restrictions do not apply to the variables inside the actual methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T160806Z" creationid="makenowjust" creationdate="20200429T160806Z">
        <seg>実際のメソッドの本体での引数の型が型制約によって制約されているわけではないことには注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that using the crystal property helps prune the search space.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T111241Z" creationid="makenowjust" creationdate="20200809T111241Z">
        <seg>なお、crystal プロパティは依存関係解決の探索空間を枝刈りするのにも役立っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that virtual types only apply to classes, never to structs.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T034107Z" creationid="hirofumiwakasugi" creationdate="20150910T033939Z">
        <seg>virtual 型が適用されるのはクラスのみで、構造体には適用されないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that we create a &lt;g1&gt;Person&lt;/g1&gt; with &lt;g2&gt;new&lt;/g2&gt; but we defined the initialization in an &lt;g3&gt;initialize&lt;/g3&gt; method, not in a &lt;g4&gt;new&lt;/g4&gt; method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T121447Z" creationid="makenowjust" creationdate="20200427T120953Z">
        <seg>&lt;g2&gt;new&lt;/g2&gt; メソッドによって &lt;g1&gt;Person&lt;/g1&gt; のインスタンスを生成しましたが、初期化処理は &lt;g3&gt;initialize&lt;/g3&gt; メソッドに定義したのであって、&lt;g4&gt;new&lt;/g4&gt; メソッドにではないことが気になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that we create a `Person` with `new` but we defined the initialization in an `initialize` method, not in a `new` method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060003Z" creationid="hirofumiwakasugi" creationdate="20150904T055943Z">
        <seg>ただ、ちょっと不思議に思わないでしょうか？`new` を使って `Person` のインスタンスを生成していますが、先ほど初期化処理を実装したのは `initialize` メソッドで、`new` メソッドではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that we save the boxed callback in &lt;g1&gt;@@box&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T091012Z" creationid="makenowjust" creationdate="20200512T091012Z">
        <seg>ボックス化したコールバックを &lt;g1&gt;@@box&lt;/g1&gt; に保持したことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that when the program executes a &lt;g1&gt;receive&lt;/g1&gt;, that fiber blocks and execution continues with the other fiber.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T104633Z" creationid="akiji" creationdate="20200429T134829Z">
        <seg>プログラムがいつ&lt;g1&gt;receive&lt;/g1&gt;を実行したか、つまりいつそのファイバをブロックして他のファイバに実行が切り替わったかに注目してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that you can use any type as an &lt;g1&gt;is_a?&lt;/g1&gt; test, like abstract classes and modules.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083048Z" creationid="makenowjust" creationdate="20200424T083048Z">
        <seg>&lt;g1&gt;is_a?&lt;/g1&gt;によるチェックは、モジュールや抽象クラスなど、いかなる型でもチェックできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that you can use any type as an `is_a?` test, like abstract classes and modules.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022147Z" creationid="hirofumiwakasugi" creationdate="20150903T022147Z">
        <seg>`is_a?` によるチェックはどんな型に対しても行うことができます。例えば抽象クラスやモジュールでも有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that you still have to initialize the instance variables, either with a catch-all initializer or within an `initialize` method: there are no "default" values for types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T100511Z" creationid="hirofumiwakasugi" creationdate="20150905T100129Z">
        <seg>ただ、型に対する「デフォルト」の値というものは存在しないので、この場合においても、catch-all initializer か `initialize` メソッドでインスタンス変数の初期化を行う必要があることを覚えておいてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note, however, that fibers don't get executed right away.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T070334Z" creationid="akiji" creationdate="20200428T074612Z">
        <seg>ただし、ファイバが（生成後）即座に実行されるわけではないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note, however, that functions passed to C can't form closures.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024607Z" creationid="hirofumiwakasugi" creationdate="20151008T024607Z">
        <seg>ただ、C に渡される関数はクロージャにはなれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note, however, that this is not avaialble for every method out there, as exceptions are still the preferred way because they don't pollute the code with error handling logic.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T024637Z" creationid="hirofumiwakasugi" creationdate="20150907T024539Z">
        <seg>ただ、すべてのメソッドにこの方法が用意されているわけではありません。また、エラーハンドリングのロジックが混ざることよってコードが汚れてしまうのを避けるという意味でも、例外処理というのは好ましい方法であるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note, however, that this is not available for every method out there, as exceptions are still the preferred way because they don't pollute the code with error handling logic.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T105231Z" creationid="makenowjust" creationdate="20200506T105231Z">
        <seg>ただ、すべてのメソッドにこの方法が用意されているわけではありません。また、エラーハンドリングのロジックが混ざることによってコードが汚れてしまうのを避けるという意味でも、例外を発生させるというのは好ましい方法でしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note: The actual binary is built in to &lt;g1&gt;.build/crystal&lt;/g1&gt;, but the &lt;g2&gt;bin/crystal&lt;/g2&gt; wrapper script is what you should use to run crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T065636Z" creationid="makenowjust" creationdate="20200518T065619Z">
        <seg>注意: 実際にビルドされたバイナリは &lt;g1&gt;.build/crystal&lt;/g1&gt; に置かれています。ですが、 &lt;g2&gt;bin/crystal&lt;/g2&gt; ラッパースクリプトを Crystal の実行に使うべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that &lt;g1&gt;case&lt;/g1&gt; is not within the macro.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221730Z" creationid="makenowjust" creationdate="20200509T221706Z">
        <seg>&lt;g1&gt;case&lt;/g1&gt; がマクロの外側にあることに注目してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that the chained calls of &lt;g1&gt;plus&lt;/g1&gt; return the expected result, but only the first call to it modifies the variable &lt;g2&gt;counter&lt;/g2&gt;, as the second call operates on the &lt;g3&gt;copy&lt;/g3&gt; of the struct passed to it from the first call, and this copy is discarded after the expression is executed.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T084439Z" creationid="makenowjust" creationdate="20200505T173110Z">
        <seg>連続する &lt;g1&gt;plus&lt;/g1&gt; の呼び出しの戻り値は予想通りの結果になっていますが、最初の呼び出しだけが &lt;g2&gt;counter&lt;/g2&gt; を変更している、ということに注意してください。2番目の呼び出しは最初の呼び出しで返った構造体の&lt;g3&gt;コピー&lt;/g3&gt;になっていて、このコピーは呼び出し後に破棄されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice the variables in the inner macro are not available within the &lt;g1&gt;verbatim&lt;/g1&gt; block.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220705Z" creationid="makenowjust" creationdate="20200509T220705Z">
        <seg>内側のマクロの変数は &lt;g1&gt;verbatim&lt;/g1&gt; ブロックの中では有効ではないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now &lt;g1&gt;Int32&lt;/g1&gt; and &lt;g2&gt;MyInt&lt;/g2&gt; are interchangeable:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T085036Z" creationid="makenowjust" creationdate="20200512T085036Z">
        <seg>これで &lt;g1&gt;Int32&lt;/g1&gt; と &lt;g2&gt;MyInt&lt;/g2&gt; は相互に交換可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now `Int32` and `MyInt` are interchangeable:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023911Z" creationid="hirofumiwakasugi" creationdate="20151008T023911Z">
        <seg>これで、`Int32` と `MyInt` は相互に交換可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now imagine using this string as the banner for our All My CLI application, it's easy if you try:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T183922Z" creationid="makenowjust" creationdate="20200413T183804Z">
        <seg>イマジン (想像) してみてください、All My CLI アプリケーションのバナーにこの文字列を使うことを。ほら、簡単でしょう？ (it's easy if you try?)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now it works because we are creating a &lt;g1&gt;Proc&lt;/g1&gt; and we invoke it passing &lt;g2&gt;i&lt;/g2&gt;, so the value gets copied and now the spawned fiber receives a copy.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103403Z" creationid="akiji" creationdate="20200428T080507Z">
        <seg>今度は正しく動作しました。なぜかと言うと、&lt;g1&gt;Proc&lt;/g1&gt;を生成してそれに&lt;g2&gt;i&lt;/g2&gt;を渡しているからです。こうすることで、&lt;g2&gt;i&lt;/g2&gt;の値がコピーされ、生成されたファイバが使用するのはそのコピーになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now it works because we are creating a &lt;g1&gt;Proc&lt;/g1&gt;http://crystal-lang.org/api/Proc.html&lt;e3/&gt; and we invoke it passing &lt;g2&gt;i&lt;/g2&gt;, so the value gets copied and now the spawned fiber receives a copy.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081749Z" creationid="makenowjust" creationdate="20200518T081749Z">
        <seg>今度は正しく動作しました。なぜかと言うと &lt;g1&gt;Proc&lt;/g1&gt;http://crystal-lang.org/api/Proc.html&lt;e3/&gt; を生成してそれに &lt;g2&gt;i&lt;/g2&gt; を渡しているからです。こうすることで、&lt;g2&gt;i&lt;/g2&gt; の値がコピーされ、生成されたファイバが仕様するのはそのコピーになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now it works because we are creating a &lt;g1&gt;Proc&lt;/g1&gt;https://crystal-lang.org/api/latest/Proc.html&lt;e3/&gt; and we invoke it passing &lt;g2&gt;i&lt;/g2&gt;, so the value gets copied and now the spawned fiber receives a copy.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100404Z" creationid="makenowjust" creationdate="20210324T100404Z">
        <seg>今度は正しく動作しました。なぜかというと &lt;g1&gt;Proc&lt;/g1&gt;https://crystal-lang.org/api/latest/Proc.html&lt;e3/&gt; を生成して、それに &lt;g2&gt;i&lt;/g2&gt; を渡しているからです。こうすることで &lt;g2&gt;i&lt;/g2&gt; の値がコピーされ、生成したファイバが使用するのはそのコピーになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now the code compiles:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T035404Z" creationid="hirofumiwakasugi" creationdate="20150910T035315Z">
        <seg>これでコードのコンパイルが可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now we can create people like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055717Z" creationid="hirofumiwakasugi" creationdate="20150904T055631Z">
        <seg>これで、以下のようにしてインスタンスを生成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, if we want to list all the options given by the compiler, we may run &lt;g1&gt;crystal&lt;/g1&gt; program without any arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080658Z" creationid="makenowjust" creationdate="20200516T080652Z">
        <seg>さて、コンパイラに渡すことのできるオプションのリストを表示するには、&lt;g1&gt;crystal&lt;/g1&gt; コマンドに何も引数を渡さずに実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, let's run our application.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174108Z" creationid="makenowjust" creationdate="20200413T174108Z">
        <seg>さて、それではアプリケーションを実際に実行してみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, we will focus on the second main topic: our application’s output.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182859Z" creationid="makenowjust" creationdate="20200413T182859Z">
        <seg>ここからは、アプリケーションの出力という、2つ目のトピックに取りかかっていきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Null reference checks</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211324Z" creationid="makenowjust" creationdate="20200413T211324Z">
        <seg>Null 参照チェック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Numeric</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T151656Z" creationid="makenowjust" creationdate="20200610T151656Z">
        <seg>数値計算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>OK
...</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164546Z" creationid="makenowjust" creationdate="20200413T164546Z">
        <seg>OK
...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ONE # =&gt; 1
end

Foo::ONE # Error</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T110119Z" creationid="makenowjust" creationdate="20200502T110119Z">
        <seg>ONE # =&gt; 1
end

Foo::ONE # Error</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ONE, TWO, THREE = 1, 2, 3 # Syntax error: Multiple assignment is not allowed for constants</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T181227Z" creationid="makenowjust" creationdate="20200505T181227Z">
        <seg>ONE, TWO, THREE = 1, 2, 3 # Syntax error: Multiple assignment is not allowed for constants</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>OPTIMIZE</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214457Z" creationid="makenowjust" creationdate="20200412T214457Z">
        <seg>OPTIMIZE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ORMs</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T105238Z" creationid="makenowjust" creationdate="20200510T105238Z">
        <seg>ORM</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Object Serialization</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T105100Z" creationid="makenowjust" creationdate="20200510T105100Z">
        <seg>オブジェクトのシリアライズ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Octal numbers start with a &lt;g1&gt;0o&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182626Z" creationid="makenowjust" creationdate="20200419T182612Z">
        <seg>先頭に&lt;g1&gt;0o&lt;/g1&gt;をつけると8進数になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Octal numbers start with a `0o`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025717Z" creationid="hirofumiwakasugi" creationdate="20151009T025717Z">
        <seg>先頭に `0o` をつけると8進数になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Octal numbers start with a zero:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052538Z" creationid="hirofumiwakasugi" creationdate="20150901T052506Z">
        <seg>先頭にゼロをつけると8進数になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Of course the above program can be written without &lt;g1&gt;spawn&lt;/g1&gt; at all, just with a loop.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T075933Z" creationid="akiji" creationdate="20200428T075933Z">
        <seg>上のプログラムは単純にループを行なっているだけですので、もちろん&lt;g1&gt;spawn&lt;/g1&gt;を使わずに書くこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Of course, reassigning a variable inside the &lt;g1&gt;then&lt;/g1&gt; branch makes that variable have a new type based on the expression assigned.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081645Z" creationid="makenowjust" creationdate="20200424T081645Z">
        <seg>もちろん、&lt;g1&gt;then&lt;/g1&gt;節の中で変数へ再代入を行なった場合は、その代入された式に応じて変数の型が変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Of course, reassigning a variable inside the `then` branch makes that variable have a new type based on the expression assigned.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T015212Z" creationid="hirofumiwakasugi" creationdate="20150903T015212Z">
        <seg>もちろん、`then` の分岐内で変数へ再代入を行った場合は、その代入された式に応じて変数の型は変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Official Crystal deb repository</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T092450Z" creationid="makenowjust" creationdate="20210130T092450Z">
        <seg>Crystal 公式の deb リポジトリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Official Crystal rpm repository</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T093421Z" creationid="makenowjust" creationdate="20210130T093421Z">
        <seg>Crystal 公式の rpm リポジトリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Oh no!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175931Z" creationid="makenowjust" creationdate="20200413T175931Z">
        <seg>なんてことでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Omitting &lt;g2&gt;path&lt;/g2&gt; is equal to
specifying the current working directory.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165942Z" creationid="makenowjust" creationdate="20200419T165942Z">
        <seg>&lt;g2&gt;path&lt;/g2&gt;が指定されなかった場合、現在のデイレクトリを指定したものとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On Alpine Linux</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T101346Z" creationid="makenowjust" creationdate="20200518T101346Z">
        <seg>Alpine Linux への</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On Arch Linux</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T101528Z" creationid="makenowjust" creationdate="20200518T101528Z">
        <seg>Arch Linux への</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On CentOS</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T101640Z" creationid="makenowjust" creationdate="20200518T101640Z">
        <seg>CentOS への</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On Debian</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T101808Z" creationid="makenowjust" creationdate="20200518T101808Z">
        <seg>Debian への</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On Elementary OS</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T102933Z" creationid="makenowjust" creationdate="20200518T102933Z">
        <seg>Elementary OS への</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On Fedora</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T110345Z" creationid="makenowjust" creationdate="20200518T110345Z">
        <seg>Fedora への</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On FreeBSD</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T110725Z" creationid="makenowjust" creationdate="20200518T110725Z">
        <seg>FreeBSD への</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On Gentoo Linux</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111533Z" creationid="makenowjust" creationdate="20200518T111533Z">
        <seg>Gentoo Linux への</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On KDE Neon</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111711Z" creationid="makenowjust" creationdate="20200518T111711Z">
        <seg>KDE Neon への</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On Kubuntu</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111729Z" creationid="makenowjust" creationdate="20200518T111729Z">
        <seg>Kubuntu への</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On Linux Mint</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111838Z" creationid="makenowjust" creationdate="20200518T111838Z">
        <seg>Linux Mint への</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On Linux, any program that can profile C/C++ programs, like &lt;g2&gt;perf&lt;/g2&gt; or &lt;g3&gt;Callgrind&lt;/g3&gt;, should work.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T025642Z" creationid="akiji" creationdate="20200430T084258Z">
        <seg>Linuxであれば、&lt;g2&gt;perf&lt;/g2&gt; や &lt;g3&gt;Callgrind&lt;/g3&gt;のような、C/C++プログラムをプロファイリング可能な仕組みが大抵は動作するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On Linux, any program that can profile C/C++ programs, like &lt;g2&gt;perf&lt;/g2&gt;https://perf.wiki.kernel.org/index.php/Main_Page&lt;e5/&gt; or &lt;g3&gt;Callgrind&lt;/g3&gt;http://valgrind.org/docs/manual/cl-manual.html&lt;e6/&gt;, should work.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T082007Z" creationid="makenowjust" creationdate="20200518T082007Z">
        <seg>Linux であれば、&lt;g2&gt;perf&lt;/g2&gt;https://perf.wiki.kernel.org/index.php/Main_Page&lt;e5/&gt; や &lt;g3&gt;Callgrind&lt;/g3&gt;http://valgrind.org/docs/manual/cl-manual.html&lt;e6/&gt; のような、C/C++ プログラムをプロファイリング可能な仕組みが大抵は動作するでしょう。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On Linux, any program that can profile C/C++ programs, like &lt;g3&gt;perf&lt;/g3&gt;https://perf.wiki.kernel.org/index.php/Main_Page&lt;e10/&gt; or &lt;g4&gt;Callgrind&lt;/g4&gt;http://valgrind.org/docs/manual/cl-manual.html&lt;e11/&gt;, should work.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T072754Z" creationid="makenowjust" creationdate="20201213T072754Z">
        <seg>Linux であれば、&lt;g3&gt;perf&lt;/g3&gt;https://perf.wiki.kernel.org/index.php/Main_Page&lt;e10/&gt; や &lt;g4&gt;Callgrind&lt;/g4&gt;http://valgrind.org/docs/manual/cl-manual.html&lt;e11/&gt; のようなC/C++ プログラムをプロファイリング可能な仕組みが大抵は動作するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On Manjaro</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112303Z" creationid="makenowjust" creationdate="20200518T112303Z">
        <seg>Manjaro への</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On OpenSUSE</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112311Z" creationid="makenowjust" creationdate="20200518T112311Z">
        <seg>OpenSUSE への</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On OpenSUSE, Crystal can be installed from the official rpm package using Zypper.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112354Z" creationid="makenowjust" creationdate="20200518T112354Z">
        <seg>OpenSUSE では、Zypper を使って公式の rpm パッケージからインストールできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On Red Hat</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112523Z" creationid="makenowjust" creationdate="20200518T112523Z">
        <seg>Red Hat への</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On Ubuntu</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112534Z" creationid="makenowjust" creationdate="20200518T112534Z">
        <seg>Ubuntu への</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On Windows Subsystem for Linux</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112545Z" creationid="makenowjust" creationdate="20200518T112545Z">
        <seg>Windows Subsystem for Linux への</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On a 64-bit machine it lets us spawn millions and millions of fibers.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103041Z" creationid="akiji" creationdate="20200428T062651Z">
        <seg>64ビットマシンでは数百万ものファイバを生成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On macOS</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111854Z" creationid="makenowjust" creationdate="20200518T111854Z">
        <seg>macOS への</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On macOS 10.11 (El Capitan)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112052Z" creationid="makenowjust" creationdate="20200518T112052Z">
        <seg>macOS 10.11 (El Capitan) での注意</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On macOS 10.14 (Mojave)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112058Z" creationid="makenowjust" creationdate="20200518T112058Z">
        <seg>macOS 10.14 (Mojave) での注意</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On some linux 64 bits it will say "Linux x86_64".</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T045052Z" creationid="hirofumiwakasugi" creationdate="20150909T045052Z">
        <seg>64ビットの Linux であればその結果は "Linux x86_64" となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the other hand, we have &lt;g1&gt;NCurses&lt;/g1&gt;(New Curses).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T190403Z" creationid="makenowjust" creationdate="20200413T190403Z">
        <seg>続いて、&lt;g1&gt;NCurses&lt;/g1&gt;(New Curses) の紹介です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once &lt;g1&gt;installed&lt;/g1&gt;, the Crystal compiler should be available as &lt;g2&gt;crystal&lt;/g2&gt; command.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150151Z" creationid="makenowjust" creationdate="20200419T150151Z">
        <seg>&lt;g1&gt;インストール&lt;/g1&gt;が済んでいれば、&lt;g2&gt;crystal&lt;/g2&gt;というコマンドでコンパイラを利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once a file is required, the compiler remembers its absolute path and later &lt;g1&gt;require&lt;/g1&gt;s of that same file will be ignored.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T084502Z" creationid="makenowjust" creationdate="20200427T084502Z">
        <seg>ファイルが一度&lt;g1&gt;require&lt;/g1&gt;されると、 コンパイラはその絶対パスを記憶し、以降ではそのファイルは読み込まれなくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once a file is required, the compiler remembers its absolute path and later `require`s of that same file will be ignored.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T144740Z" creationid="hirofumiwakasugi" creationdate="20150905T144641Z">
        <seg>ファイルが `require` されると、コンパイラはその絶対パスを記憶し、以降ではそのファイルに対する `require` は無視されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once installed, the Crystal compiler should be available as &lt;g1&gt;crystal&lt;/g1&gt; command.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080441Z" creationid="makenowjust" creationdate="20200516T080441Z">
        <seg>インストールが済んでいれば、&lt;g1&gt;crystal&lt;/g1&gt; というコマンドでコンパイラを利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once macros generate code, they are parsed with a regular Crystal parser where local variables in the context of the macro invocations are assumed to be defined.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T015554Z" creationid="hirofumiwakasugi" creationdate="20151002T015339Z">
        <seg>マクロが生成したコードは通常の Crystal パーサーでパースされます。そのとき、マクロ呼び出しのコンテキスト内のローカル変数は定義されているものとして扱われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once the refactor is done, we could start testing the logic and including the file with the logic in the testing files we need.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T185657Z" creationid="makenowjust" creationdate="20200413T185520Z">
        <seg>このリファクタリングが済めば、あるロジックのテストに必要なコードを含むファイルだけをテストのコードに取り込んで、ロジックのテストをはじめることができるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once the refactoring is done, we could start testing the logic and including the file with the logic in the testing files we need.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T091112Z" creationid="makenowjust" creationdate="20211107T091112Z">
        <seg>リファクタリングが完了したら、ロジックのテストを開始し、必要なテストファイルにロジックを含むファイルを含めることができます。これは読者の課題としましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once the repository is configured you're ready to install Crystal:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T101752Z" creationid="makenowjust" creationdate="20200518T101752Z">
        <seg>リポジトリの設定が完了すれば、Crystal がインストールできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once the repository is configured, Crystal can be installed:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112444Z" creationid="makenowjust" creationdate="20200518T112424Z">
        <seg>リポジトリの設定が完了すれば、Crystal はインストールできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once the second declaration of &lt;g2&gt;Foo&lt;/g2&gt; is compiled the &lt;g3&gt;finished&lt;/g3&gt; macro will be run, which will print &lt;g4&gt;[bar]&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T225202Z" creationid="makenowjust" creationdate="20200509T225202Z">
        <seg>2番目の &lt;g2&gt;Foo&lt;/g2&gt; の宣言が処理されたのち、&lt;g3&gt;finished&lt;/g3&gt; マクロが呼び出され、今度は &lt;g4&gt;[bar]&lt;/g4&gt; を表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once the stable major release is out and the ecosystem caught up, there will be no need for &lt;g2&gt;--ignore-crystal-version&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T111145Z" creationid="makenowjust" creationdate="20200809T111020Z">
        <seg>ですが、一度安定版がリリースされてエコシステムがそれに並べば、&lt;g2&gt;--ignore-crystal-version&lt;/g2&gt; は必要なくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once you [install](../installation/README.md) the compiler you will have a `crystal` binary at your disposal.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T071919Z" creationid="hirofumiwakasugi" creationdate="20150901T071919Z">
        <seg>[インストール](../installation/README.md)が済んでいれば、`crystal` というバイナリを利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once you bind it, the function is available inside the &lt;g1&gt;C&lt;/g1&gt; type as if it was a class method:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T031038Z" creationid="makenowjust" creationdate="20200511T031038Z">
        <seg>バインディングを設定したら、その関数は &lt;g1&gt;C&lt;/g1&gt; 型でクラスメソッドのように利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once you bind it, the function is available inside the `C` type as if it was a class method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T143847Z" creationid="hirofumiwakasugi" creationdate="20151003T143811Z">
        <seg>バインディングを設定したら、その関数は `C` 型でクラスメソッドのように利用することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once you do this the executable will be available in that target system.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T045739Z" creationid="hirofumiwakasugi" creationdate="20150909T045659Z">
        <seg>そうすると、対象のシステム上に実行ファイルが作られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once you install the compiler using one of the following methods, make sure to read [Using the compiler](../using_the_compiler/README.md) to learn how to efficiently use it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T085710Z" creationid="hirofumiwakasugi" creationdate="20150831T053948Z">
        <seg>Crystal のコンパイラは以下のいずれかの方法でインストールすることができます。インストール後は、[「コンパイラを使用する」](../using_the_compiler/README.md)を読んで、コンパイラの活用方法について知りましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once your documentation is ready and available, you can add a documentation badge to your repository so users know that it exists.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T160538Z" creationid="makenowjust" creationdate="20200527T160538Z">
        <seg>ドキュメントのホスティングが完了したら、その存在を報せるためにリポジトリにドキュメンテーションバッジを追加するといいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052629Z" creationid="hirofumiwakasugi" creationdate="20151007T052629Z">
        <seg>One</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One can assign any meaning to the operators, but it is advisable to stay within
similar semantics to the generic operator meaning to avoid cryptic code that is
confusing and behaves unexpectedly.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T084830Z" creationid="makenowjust" creationdate="20200502T083055Z">
        <seg>ある演算子に対してどのような意味を持たせることもできますが、混乱するような直感的でないコードになることを避けるため、演算子の一般的な意味に近いものにすることをおすすめします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One can assign any meaning to the operators, but the convention is to follow the above ones to avoid cryptic code, or code that behaves in an unexpected way.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T031940Z" creationid="hirofumiwakasugi" creationdate="20150909T031255Z">
        <seg>実際には、演算子に対して、どのような内容の処理であっても自由に定義することが可能です。しかし、上記した演算子それぞれの意味にしたがって定義することが慣習となっています。これは、複雑で読みづらいコードや、コードが想定外の動作をしてしまうことを避ける意味で重要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One curly brace can contain multiple unicode characters each separated by a whitespace.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192147Z" creationid="makenowjust" creationdate="20200419T192147Z">
        <seg>1つのひげ括弧の中にスペースで区切って複数のユニコード文字が記述できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One of the best optimizations you can do in a program is avoiding extra/useless memory allocation.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T084407Z" creationid="akiji" creationdate="20200430T084407Z">
        <seg>プログラムの中で実施可能な一番良い最適化は、余分な/無用なメモリの割り当てを避けることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One of the main benefits of annotations is that they are applied directly to instance variables/methods, which causes classes to look more natural since a standard macro is not needed to create these properties/methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T105043Z" creationid="makenowjust" creationdate="20200510T105041Z">
        <seg>アノテーションの主な利点の一つはインスタンス変数やメソッドに直接適用できるということです。これによって、プロパティやメソッドを作るために標準のマクロを使う必要がなく、クラスがより自然に見えるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One place inheritance can get a little tricky is with arrays.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T104527Z" creationid="makenowjust" creationdate="20200504T104527Z">
        <seg>継承が少し厄介なのは、配列の場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One place this might trip you up is when automatic casting comes into play.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T105242Z" creationid="makenowjust" creationdate="20200504T105242Z">
        <seg>これは自動キャストが作用しているときに、悩ましい結果を引き起こすことがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One wanted feature that this enables is the possibility to attach local metadata or structured information to a log entry.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T154636Z" creationid="makenowjust" creationdate="20200610T154549Z">
        <seg>ログエントリにローカルのメタデータや構造化された情報を追加したいという機能が望まれていました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One way to solve it is to do a &lt;g1&gt;sleep&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T075009Z" creationid="akiji" creationdate="20200428T075009Z">
        <seg>この問題を解決留守方法の一つは、&lt;g1&gt;sleep&lt;/g1&gt;を使うことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only &lt;g1&gt;Exception&lt;/g1&gt; instances or subclasses can be raised.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103354Z" creationid="makenowjust" creationdate="20200506T103354Z">
        <seg>そして、raise の対象に指定することができるのは &lt;g1&gt;Exception&lt;/g1&gt; のインスタンス、もしくはそのサブクラスのみに限られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only `Exception` instances or subclasses can be raised.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013043Z" creationid="hirofumiwakasugi" creationdate="20150907T011513Z">
        <seg>そして、`raise` の対象に指定することができるのは `Exception` のインスタンス、もしくはそのサブクラスのみに限られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only integer types are allowed as the underlying type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T085929Z" creationid="hirofumiwakasugi" creationdate="20150914T024654Z">
        <seg>ただし、整数型しか指定することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only one-line comments are supported for now.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T073236Z" creationid="hirofumiwakasugi" creationdate="20150901T050651Z">
        <seg>現在のところ、1行 (one-line) のコメントのみがサポートされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only single letter names are allowed as names of type arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T070022Z" creationid="hirofumiwakasugi" creationdate="20150912T065827Z">
        <seg>型引数は1文字の名前のみ設定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open database</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T192035Z" creationid="daiki" creationdate="20200705T192035Z">
        <seg>データベースのオープン</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open the files in the &lt;g2&gt;/docs/&lt;/g2&gt; directory with a web browser to see how your documentation is looking along the way.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T160257Z" creationid="makenowjust" creationdate="20200527T160257Z">
        <seg>&lt;g2&gt;/docs/&lt;/g2&gt; ディレクトリのファイルを Web ブラウザで開くことで、生成されたドキュメントがどのようなものか確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>OpenSUSE</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071346Z" creationid="makenowjust" creationdate="20200518T071346Z">
        <seg>OpenSUSE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operator</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085201Z" creationid="makenowjust" creationdate="20200502T085201Z">
        <seg>演算子名</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operator Precedence</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084605Z" creationid="makenowjust" creationdate="20200502T084605Z">
        <seg>演算子の優先順位</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operator expressions are actually parsed as method calls.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T080932Z" creationid="makenowjust" creationdate="20200502T080932Z">
        <seg>演算子は実際にはメソッド呼び出しとしてパースされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operators</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T080851Z" creationid="makenowjust" creationdate="20200502T080851Z">
        <seg>演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operators are implemented like any regular method, and the standard library
offers many implementations, for example for math expressions.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T082830Z" creationid="makenowjust" creationdate="20200502T082445Z">
        <seg>演算子は通常のメソッドのように定義できて、標準ライブラリでは数学の式の演算子などいくつもの実装が提供されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operators can be invoked too:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185800Z" creationid="makenowjust" creationdate="20200505T185800Z">
        <seg>演算子の場合も同様に呼び出すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operators like `+` and `-` are regular method calls.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025139Z" creationid="hirofumiwakasugi" creationdate="20150905T052334Z">
        <seg>`+` や `-` などの演算子は、実は普通のメソッド呼び出しとなっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Optimizing</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T164159Z" creationid="makenowjust" creationdate="20200527T162633Z">
        <seg>最適化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>OptionParser.parse do |parser|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100520Z" creationid="makenowjust" creationdate="20210324T100520Z">
        <seg>OptionParser.parse do |parser|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Options</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T163944Z" creationid="makenowjust" creationdate="20200413T163944Z">
        <seg>オプション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Options:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072225Z" creationid="hirofumiwakasugi" creationdate="20150901T072225Z">
        <seg>Options:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153043Z" creationid="hirofumiwakasugi" creationdate="20160115T153043Z">
        <seg>または以下のように書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or like:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185121Z" creationid="makenowjust" creationdate="20200505T185121Z">
        <seg>あるいはこのようにも、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or pick any other channel listed here</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T114001Z" creationid="makenowjust" creationdate="20200518T104704Z">
        <seg>もしくはこのページの一覧から適切なところを選択して</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or read a scalar value without dealing explicitly with the ResultSet:</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200706T094712Z" creationid="daiki" creationdate="20200706T000037Z">
        <seg>また、ResultSet を明示的に取り扱わずにスカラ値を読み取ることもできます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or read a single row:</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T235957Z" creationid="daiki" creationdate="20200705T235957Z">
        <seg>１行で読み取ることもできます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or use &lt;g1&gt;loop&lt;/g1&gt;, found in the standard library:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095208Z" creationid="makenowjust" creationdate="20200424T095208Z">
        <seg>標準ライブラリの&lt;g1&gt;loop&lt;/g1&gt;を利用しても同じことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or use `loop`, found in the standard library:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052206Z" creationid="hirofumiwakasugi" creationdate="20150905T052206Z">
        <seg>標準ライブラリの `loop` を利用しても同じことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or with a proc returned from a method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T053740Z" creationid="hirofumiwakasugi" creationdate="20150918T053728Z">
        <seg>もしくは、メソッドが返す proc の場合は以下となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or you can use curly braces and specify up to six hexadecimal numbers (0 to 10FFFF):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104703Z" creationid="hirofumiwakasugi" creationdate="20150901T080209Z">
        <seg>波カッコ (ブレース) を使うと、(0 から 10FFFF までの) 16進数を指定することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or, combining the &lt;g1&gt;&amp;&lt;/g1&gt; and &lt;g2&gt;-&gt;&lt;/g2&gt; syntaxes:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075531Z" creationid="makenowjust" creationdate="20200506T075531Z">
        <seg>もしくは、&lt;g1&gt;&amp;&lt;/g1&gt; と &lt;g2&gt;-&gt;&lt;/g2&gt; の構文を組み合わせることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or, combining the `&amp;` and `-&gt;` syntaxes:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025050Z" creationid="hirofumiwakasugi" creationdate="20150917T025050Z">
        <seg>`&amp;` と `-&gt;` のシンタックスを組み合わせることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013607Z" creationid="hirofumiwakasugi" creationdate="20150907T013436Z">
        <seg>または</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Original Sponsors</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T082825Z" creationid="makenowjust" creationdate="20200516T082825Z">
        <seg>オリジナルのスポンサー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092511Z" creationid="makenowjust" creationdate="20201217T092327Z">
        <seg>その他</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other &lt;g1&gt;struct&lt;/g1&gt;, &lt;g2&gt;union&lt;/g2&gt;, &lt;g3&gt;enum&lt;/g3&gt;, &lt;g4&gt;type&lt;/g4&gt; or &lt;g5&gt;alias&lt;/g5&gt; declared previously.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T032222Z" creationid="makenowjust" creationdate="20200511T032119Z">
        <seg>その他の、これまでに宣言された &lt;g1&gt;struct&lt;/g1&gt;、&lt;g2&gt;union&lt;/g2&gt;、&lt;g3&gt;enum&lt;/g3&gt;、&lt;g4&gt;type&lt;/g4&gt; もしくは &lt;g5&gt;alias&lt;/g5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other connection uris are</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T192606Z" creationid="daiki" creationdate="20200705T192606Z">
        <seg>その他の接続 uri です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other forms</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T090808Z" creationid="makenowjust" creationdate="20200427T090808Z">
        <seg>その他の形式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other rules</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T143235Z" creationid="makenowjust" creationdate="20200427T143235Z">
        <seg>その他の規則</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other unary operators</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090218Z" creationid="makenowjust" creationdate="20200502T090218Z">
        <seg>その他の単項演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise a compile-time error is issued.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085242Z" creationid="makenowjust" creationdate="20200427T085242Z">
        <seg>それ以外の場合はコンパイルエラーとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise it has the value of the left hand side.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052557Z" creationid="hirofumiwakasugi" creationdate="20150905T052521Z">
        <seg>そうでない場合は、結果は左辺の値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise it will be a union of all element types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173034Z" creationid="makenowjust" creationdate="20200420T173034Z">
        <seg>そうでなければ、すべての要素の型のユニオン型となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise it will be a union of all key types or value types respectively.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180735Z" creationid="makenowjust" creationdate="20200420T175604Z">
        <seg>そうでなければ、すべてのキーの型のユニオン型ないし値の型のユニオン型となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise the assignment operator (&lt;g2&gt;a &lt;op&gt;= b&lt;/g2&gt;) would unintentionally change the
type of &lt;g3&gt;a&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084137Z" creationid="makenowjust" creationdate="20200502T084137Z">
        <seg>そうでないと代入演算子 (&lt;g2&gt;a &lt;op&gt;= b&lt;/g2&gt;) の場合に意図せず &lt;g3&gt;a&lt;/g3&gt; の型が変わってしまうことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise the compiler will populate them with default values.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T170107Z" creationid="makenowjust" creationdate="20200419T170107Z">
        <seg>指定されていなければ、コンパイラはデフォルト値を利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, it
evaluates the &lt;g3&gt;else&lt;/g3&gt; branch if present.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074646Z" creationid="makenowjust" creationdate="20200424T074220Z">
        <seg>偽の場合、&lt;g3&gt;else&lt;/g3&gt;節があればそちらを評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, it receives the arguments you pass to it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T082911Z" creationid="hirofumiwakasugi" creationdate="20150904T123538Z">
        <seg>そうでない場合には、指定した引数が渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024716Z" creationid="hirofumiwakasugi" creationdate="20150917T024643Z">
        <seg>そうしなかった場合は以下のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Our &lt;g1&gt;name&lt;/g1&gt; is already descriptive enough for Bob's search of "palindrome".</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T163317Z" creationid="makenowjust" creationdate="20200527T163317Z">
        <seg>この場合、&lt;g1&gt;name&lt;/g1&gt; にはすでに Bob の探している "palindrome" という単語が含まれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Our standards and expectations about working together as a community.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T153518Z" creationid="makenowjust" creationdate="20210726T153518Z">
        <seg>コミュニティで共にはたらくあたっての標準で期待していることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Output</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182807Z" creationid="makenowjust" creationdate="20200413T182807Z">
        <seg>出力</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Output:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T130800Z" creationid="akiji" creationdate="20200430T130800Z">
        <seg>出力はこうなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Overloadable</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085212Z" creationid="makenowjust" creationdate="20200502T085212Z">
        <seg>オーバーロード可能か</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Overloading</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T150109Z" creationid="makenowjust" creationdate="20200429T150109Z">
        <seg>オーバーロード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Overloads</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184535Z" creationid="makenowjust" creationdate="20200505T184535Z">
        <seg>オーバーロード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Overview</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170040Z" creationid="makenowjust" creationdate="20200413T170040Z">
        <seg>概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>PCRE::INFO_CAPTURECOUNT #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T022115Z" creationid="hirofumiwakasugi" creationdate="20151008T022115Z">
        <seg>PCRE::INFO_CAPTURECOUNT #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>PI #=&gt; 3.14
Earth::RADIUS #=&gt; 6_371_000
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055325Z" creationid="hirofumiwakasugi" creationdate="20150913T055325Z">
        <seg>PI #=&gt; 3.14
Earth::RADIUS #=&gt; 6_371_000
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>PI = 3.14

module Earth</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T180245Z" creationid="makenowjust" creationdate="20200505T180245Z">
        <seg>PI = 3.14

module Earth</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>PI_2 # =&gt; 6.28318...</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215211Z" creationid="makenowjust" creationdate="20200509T215211Z">
        <seg>PI_2 # =&gt; 6.28318...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>PI_3 # =&gt; 9.42477...</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215217Z" creationid="makenowjust" creationdate="20200509T215217Z">
        <seg>PI_3 # =&gt; 9.42477...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>PI_{{i.id}} = Math::PI * {{i}}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215208Z" creationid="makenowjust" creationdate="20200509T215208Z">
        <seg>PI_{{i.id}} = Math::PI * {{i}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Packed</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T115342Z" creationid="makenowjust" creationdate="20200510T115342Z">
        <seg>Packed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parallelism would be to stir fry onions with one hand while with the other one you chop a tomato.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T053745Z" creationid="akiji" creationdate="20200428T053745Z">
        <seg>並列処理（parallelism）というのは、片手で玉ねぎの入ったフライパンを振りながらもう片方の手でトマトを切るようなものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parameter names should be &lt;g1&gt;italicized&lt;/g1&gt; (surrounded with single asterisks &lt;g2&gt;*&lt;/g2&gt; or underscores &lt;g3&gt;_&lt;/g3&gt;):</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215002Z" creationid="makenowjust" creationdate="20200412T211936Z">
        <seg>パラメータ名は&lt;g1&gt;イタリック体&lt;/g1&gt;とします。1つのアスタリスク (&lt;g2&gt;*&lt;/g2&gt;) もしくはアンダースコア (&lt;g3&gt;_&lt;/g3&gt;)  で囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parameterized options</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175004Z" creationid="makenowjust" creationdate="20200413T175004Z">
        <seg>オプションのパラメーター</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parameters past the splat parameter without a default value are required named parameters:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T075214Z" creationid="makenowjust" creationdate="20210324T075214Z">
        <seg>スプラット指定された引数のあとの引数でデフォルト値が無い場合は、名前付き引数として渡さなければいけない引数となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parameters past the star can also have default values.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T092026Z" creationid="makenowjust" creationdate="20210324T092026Z">
        <seg>アスタリスク以降の引数はデフォルト値を持つこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parent.protected_method # OK</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T112618Z" creationid="makenowjust" creationdate="20200502T112618Z">
        <seg>Parent.protected_method # OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parentheses in method invocations are optional:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T082501Z" creationid="hirofumiwakasugi" creationdate="20150904T021616Z">
        <seg>メソッド呼び出しの際の括弧は省略することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Passing a closure to a C function</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T085923Z" creationid="makenowjust" creationdate="20200512T085923Z">
        <seg>C の関数にクロージャを渡す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Passing by value</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T172638Z" creationid="makenowjust" creationdate="20200505T172638Z">
        <seg>値渡し</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Paths and generics</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T120325Z" creationid="makenowjust" creationdate="20200507T120325Z">
        <seg>パスとジェネリクス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Per convention, the return type of a binary operator should be the type of the
first operand (the receiver), so that &lt;g1&gt;typeof(a &lt;op&gt; b) == typeof(a)&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084109Z" creationid="makenowjust" creationdate="20200502T084109Z">
        <seg>慣例的に、2項演算子の戻り値の方は1つ目のオペランド (レシーバ) と同じものにします。つまり &lt;g1&gt;typeof(a &lt;op&gt; b) == typeof(a)&lt;/g1&gt; ということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Percent Array Literals</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173311Z" creationid="makenowjust" creationdate="20200420T173311Z">
        <seg>パーセント配列リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Percent regex literals</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T041525Z" creationid="makenowjust" creationdate="20200421T041525Z">
        <seg>パーセント正規表現リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Percent string array literal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T193635Z" creationid="makenowjust" creationdate="20200419T193635Z">
        <seg>パーセント文字列配列リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Percent string literals</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192901Z" creationid="makenowjust" creationdate="20200419T192901Z">
        <seg>パーセント文字列リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Percent symbol array literal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171722Z" creationid="makenowjust" creationdate="20200420T171722Z">
        <seg>パーセントシンボル配列リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performance</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T083356Z" creationid="akiji" creationdate="20200430T083356Z">
        <seg>パフォーマンス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Person.compare(john, peter) # OK
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025143Z" creationid="hirofumiwakasugi" creationdate="20150908T025143Z">
        <seg>Person.compare(john, peter) # OK
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Person.say "hello" # OK</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T040626Z" creationid="hirofumiwakasugi" creationdate="20150909T040626Z">
        <seg>Person.say "hello" # OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pitfalls</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221231Z" creationid="makenowjust" creationdate="20200509T221226Z">
        <seg>落とし穴</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Platforms</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T031507Z" creationid="makenowjust" creationdate="20200611T031507Z">
        <seg>プラットフォーム</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Please update your Crystal and report any issues.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T033822Z" creationid="makenowjust" creationdate="20200611T033822Z">
        <seg>Crystal をアップデートしてください。そして、問題の報告を心待ちにしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Point.new 1, 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T120623Z" creationid="hirofumiwakasugi" creationdate="20150906T120623Z">
        <seg>Point.new 1, 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pointer</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T120846Z" creationid="makenowjust" creationdate="20200507T120846Z">
        <seg>ポインタ型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pointer types (&lt;g1&gt;Pointer(Int32)&lt;/g1&gt;, which can also be written as &lt;g2&gt;Int32*&lt;/g2&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T032042Z" creationid="makenowjust" creationdate="20200511T032042Z">
        <seg>ポインタ型 (&lt;g1&gt;Pointer(Int32)&lt;/g1&gt;、これは &lt;g2&gt;Int32*&lt;/g2&gt; のようにも書けます)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Positional</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T110800Z" creationid="makenowjust" creationdate="20200510T110800Z">
        <seg>位置指定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Positional arguments can always be matched by name:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160906Z" creationid="makenowjust" creationdate="20200501T160906Z">
        <seg>位置指定の引数も名前付き引数として渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Positional arguments never match past the splat method argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T154948Z" creationid="makenowjust" creationdate="20200501T154948Z">
        <seg>位置指定の引数はスプラット指定されたメソッドの引数のあとではマッチしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Positional arguments never match past the splat parameter.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T091556Z" creationid="makenowjust" creationdate="20210324T091556Z">
        <seg>位置指定の引数はスプラット展開指定されたメソッドの仮引数のあとではマッチしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Positional parameters can always be matched by name:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T092216Z" creationid="makenowjust" creationdate="20210324T092216Z">
        <seg>位置指定の引数も名前付き引数として渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Positional values can be accessed at compile time via the &lt;g1&gt;&lt;g2&gt;[]&lt;/g2&gt;&lt;/g1&gt; method; however, only one index can be accessed at a time.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T113819Z" creationid="makenowjust" creationdate="20200510T111128Z">
        <seg>位置指定の値もコンパイル時 &lt;g1&gt;&lt;g2&gt;[]&lt;/g2&gt;&lt;/g1&gt; メソッドによってアクセスできます。しかし、1度に1つのインデックスにアクセスすることしかできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Positional values can be accessed at compile time via the &lt;g1&gt;&lt;g2&gt;[]&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/Crystal/Macros/Annotation.html#%5B%5D%28index%3ANumberLiteral%29%3AASTNode-instance-method&lt;e3/&gt; method; however, only one index can be accessed at a time.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T082534Z" creationid="makenowjust" creationdate="20200518T082534Z">
        <seg>位置指定の値もコンパイル時に &lt;g1&gt;&lt;g2&gt;[]&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/Crystal/Macros/Annotation.html#%5B%5D%28index%3ANumberLiteral%29%3AASTNode-instance-method&lt;e3/&gt; メソッドによってアクセスできます。しかし、1度に1つのインデックスにアクセスすることしかできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Positional values can be accessed at compile time via the &lt;g1&gt;&lt;g2&gt;[]&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Crystal/Macros/Annotation.html#%5B%5D%28index%3ANumberLiteral%29%3AASTNode-instance-method&lt;e3/&gt; method; however, only one index can be accessed at a time.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T095836Z" creationid="makenowjust" creationdate="20210324T095836Z">
        <seg>位置指定の値もコンパイル時に &lt;g1&gt;&lt;g2&gt;[]&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Crystal/Macros/Annotation.html#%5B%5D%28index%3ANumberLiteral%29%3AASTNode-instance-method&lt;e3/&gt; メソッドによってアクセスできます。しかし、一度に1つのインデックスにアクセスすることしかできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>PostgreSQL uses &lt;g3&gt;$n&lt;/g3&gt; where &lt;g4&gt;n&lt;/g4&gt; is the ordinal number of the argument (starting with 1).</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T234719Z" creationid="daiki" creationdate="20200705T234719Z">
        <seg>PostgreSQL では &lt;g3&gt;$n&lt;/g3&gt; を使用し、 &lt;g4&gt;n&lt;/g4&gt; は1から始まる引数の順序です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Prefer to use the dedicated &lt;g1&gt;String.build&lt;/g1&gt; optimized for building strings, instead of creating an intermediate &lt;g2&gt;IO::Memory&lt;/g2&gt; allocation.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T131447Z" creationid="akiji" creationdate="20200430T131447Z">
        <seg>文字列の構築には、中間的な&lt;g2&gt;IO::Memory&lt;/g2&gt;を使用するのではなく、文字列構築に最適化された&lt;g1&gt;String.build&lt;/g1&gt;を使用するようにしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Premature optimization</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T084006Z" creationid="akiji" creationdate="20200430T084006Z">
        <seg>早まった最適化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Primitive types (&lt;g1&gt;Int8&lt;/g1&gt;, ..., &lt;g2&gt;Int64&lt;/g2&gt;, &lt;g3&gt;UInt8&lt;/g3&gt;, ..., &lt;g4&gt;UInt64&lt;/g4&gt;, &lt;g5&gt;Float32&lt;/g5&gt;, &lt;g6&gt;Float64&lt;/g6&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T032208Z" creationid="makenowjust" creationdate="20200511T032024Z">
        <seg>プリミティブ型 (&lt;g1&gt;Int8&lt;/g1&gt;、……、&lt;g2&gt;Int64&lt;/g2&gt;、&lt;g3&gt;UInt8&lt;/g3&gt;、……、&lt;g4&gt;UInt64&lt;/g4&gt;、&lt;g5&gt;Float32&lt;/g5&gt;、&lt;g6&gt;Float64&lt;/g6&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Print them on any merchandise you want, as long as you don’t sell it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T085235Z" creationid="makenowjust" creationdate="20200516T085235Z">
        <seg>適当なものへの印刷 (非商用に限る)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Prints the version of the shard.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181300Z" creationid="makenowjust" creationdate="20200419T181300Z">
        <seg>shard コマンドのバージョンを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Private and protected methods are always hidden.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144011Z" creationid="hirofumiwakasugi" creationdate="20151010T143918Z">
        <seg>private や protected のメソッドに関しては、はじめから常に隠されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Private methods</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T103726Z" creationid="makenowjust" creationdate="20200502T103726Z">
        <seg>プライベートメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Private top-level methods</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T112644Z" creationid="makenowjust" creationdate="20200502T112644Z">
        <seg>トップレベルのプライベートメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Private top-level types</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T085016Z" creationid="makenowjust" creationdate="20200502T113001Z">
        <seg>トップレベルのプライベート型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Private types</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T105521Z" creationid="makenowjust" creationdate="20200502T105521Z">
        <seg>プライベート型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Private types can only be referenced inside the namespace where they are defined, and never be fully qualified.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T110030Z" creationid="makenowjust" creationdate="20200502T110030Z">
        <seg>プライベート型は自身の定義された名前空間の内側からのみ参照できて、完全なパスで参照することのできない型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Proc</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T170959Z" creationid="makenowjust" creationdate="20200422T170959Z">
        <seg>Proc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Proc literal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T074257Z" creationid="makenowjust" creationdate="20200506T074257Z">
        <seg>Proc リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Proc pointer</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T091337Z" creationid="makenowjust" creationdate="20200518T091326Z">
        <seg>Proc ポインタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Proc(Int32, String).new { |x| x.to_s } # Proc(Int32, String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171401Z" creationid="makenowjust" creationdate="20200422T171401Z">
        <seg>Proc(Int32, String).new { |x| x.to_s } # Proc(Int32, String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Programming Command Line Interface applications (CLI applications) is one of the most entertaining tasks a developer may do.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T163517Z" creationid="makenowjust" creationdate="20200413T163517Z">
        <seg>コマンドラインインターフェースアプリケーション (CLI アプリケーション) の開発は、プログラマのタスクの中で最も愉快なものの1つです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Protected methods</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T110128Z" creationid="makenowjust" creationdate="20200502T110120Z">
        <seg>プロテクテッドメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pseudo Constants</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T180254Z" creationid="makenowjust" creationdate="20200505T180254Z">
        <seg>疑似定数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Public documentation, including
autogenerated API docs, is a special feature based on comments and is described
in &lt;g1&gt;&lt;g2&gt;Documenting Code&lt;/g2&gt;&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20220902T093510Z" creationid="makenowjust" creationdate="20210324T093114Z">
        <seg>自動生成された API ドキュメントを含む、公開されたドキュメントはコメントを元にした特別な機能で、&lt;g1&gt;&lt;g2&gt;コードのドキュメント化&lt;/g2&gt;&lt;/g1&gt;で説明されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Python</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092324Z" creationid="makenowjust" creationdate="20201217T092324Z">
        <seg>Python</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Query</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T234730Z" creationid="daiki" creationdate="20200705T234730Z">
        <seg>クエリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>RADIUS = 6_371_000
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055324Z" creationid="hirofumiwakasugi" creationdate="20150913T055324Z">
        <seg>RADIUS = 6_371_000
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>RADIUS = 6_371_000
end

PI            # =&gt; 3.14
Earth::RADIUS # =&gt; 6_371_000</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T180246Z" creationid="makenowjust" creationdate="20200505T180246Z">
        <seg>RADIUS = 6_371_000
end

PI            # =&gt; 3.14
Earth::RADIUS # =&gt; 6_371_000</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>README.md</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T055849Z" creationid="makenowjust" creationdate="20201213T055849Z">
        <seg>README.md</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Raises</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120157Z" creationid="makenowjust" creationdate="20200510T120157Z">
        <seg>Raises</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Raises annotation</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T093938Z" creationid="makenowjust" creationdate="20210324T093934Z">
        <seg>Raises アノテーション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Raises attribute</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T091135Z" creationid="makenowjust" creationdate="20200512T091128Z">
        <seg>Raises アノテーション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Raising an exception involves allocating memory, and executing an exception handler is generally slow.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T023548Z" creationid="hirofumiwakasugi" creationdate="20150907T023519Z">
        <seg>例外を発生させることはメモリの割り当てを伴うので、一般的に例外処理は遅くなる傾向があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Raising exception</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103122Z" creationid="makenowjust" creationdate="20200506T103122Z">
        <seg>例外を発生させる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rakefile</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075518Z" creationid="makenowjust" creationdate="20200516T075518Z">
        <seg>Rakefile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Range</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T033744Z" creationid="makenowjust" creationdate="20200421T033744Z">
        <seg>範囲 (Range)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ranges that begin with &lt;g1&gt;nil&lt;/g1&gt; are called begin-less ranges, while ranges that end with &lt;g2&gt;nil&lt;/g2&gt; are called end-less ranges.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T081609Z" creationid="makenowjust" creationdate="20210324T081609Z">
        <seg>左の値として &lt;g1&gt;nil&lt;/g1&gt; が与えられた範囲を begin-less 範囲、右の値として  &lt;g2&gt;nil&lt;/g2&gt; が与えられた範囲を end-less 範囲と呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ranges with &lt;g1&gt;nil&lt;/g1&gt; as begin are called begin-less and &lt;g2&gt;nil&lt;/g2&gt; as end are called end-less ranges.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T035630Z" creationid="makenowjust" creationdate="20200421T035630Z">
        <seg>左の値として&lt;g1&gt;nil&lt;/g1&gt;が与えられた範囲を begin-less 範囲、右の値として &lt;g2&gt;nil&lt;/g2&gt; が与えられた範囲を end-less 範囲と呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Raw Crystal 2020</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T091346Z" creationid="makenowjust" creationdate="20201217T091346Z">
        <seg>Raw Crystal 2020</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reach out to &lt;g5&gt;crystal@manas.tech&lt;/g5&gt; if you’d like to become a direct sponsor or find other ways to support Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200621T084149Z" creationid="makenowjust" creationdate="20200621T084149Z">
        <seg>Crystal の直接のスポンサーになりたい場合や、他のサポート方法を見つけた場合は、&lt;g5&gt;crystal@manas.tech&lt;/g5&gt; に連絡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reach out to &lt;g6&gt;crystal@manas.tech&lt;/g6&gt; if you’d like to become a direct sponsor or find other ways to support Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T034443Z" creationid="makenowjust" creationdate="20200611T034443Z">
        <seg>Crystal の直接のスポンサーになりたい場合や、他のサポート方法を探している場合は &lt;g6&gt;crystal@manas.tech&lt;/g6&gt; に連絡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read  # 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182142Z" creationid="makenowjust" creationdate="20200505T182142Z">
        <seg>Read  # 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read # 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T114623Z" creationid="hirofumiwakasugi" creationdate="20150914T114623Z">
        <seg>Read # 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more about Crystal's concurrency model</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221405Z" creationid="makenowjust" creationdate="20200413T221405Z">
        <seg>Crystal の並列モデルについて、より詳しく知る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more about Crystal's type system</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221050Z" creationid="makenowjust" creationdate="20200413T211317Z">
        <seg>Crystal の型システムについて、より詳しく知る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more about Shards in the repo</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221930Z" creationid="makenowjust" creationdate="20200413T221930Z">
        <seg>Shards のリポジトリはこちら</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more about macros</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221044Z" creationid="makenowjust" creationdate="20200413T221044Z">
        <seg>マクロについて、より詳しく知る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g1&gt;#9004&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/9004&lt;e3/&gt; and &lt;g2&gt;#9366&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9366&lt;e4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T132930Z" creationid="makenowjust" creationdate="20200610T132728Z">
        <seg>詳細は&lt;g1&gt;#9004&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/9004&lt;e3/&gt;と&lt;g2&gt;#9366&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9366&lt;e4/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g1&gt;#9403&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/9403&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T151745Z" creationid="makenowjust" creationdate="20200610T151745Z">
        <seg>詳細は&lt;g1&gt;#9403&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/9403&lt;e2/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g1&gt;#9459&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/9459&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200621T083935Z" creationid="makenowjust" creationdate="20200621T083935Z">
        <seg>詳細は&lt;g1&gt;#9459&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/9459&lt;e2/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g1&gt;#9469&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/9469&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200621T083824Z" creationid="makenowjust" creationdate="20200621T083824Z">
        <seg>詳細は&lt;g1&gt;#9469&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/9469&lt;e2/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g2&gt;#8426&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/8426&lt;e3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T145656Z" creationid="makenowjust" creationdate="20200610T145656Z">
        <seg>詳細は&lt;g2&gt;#8426&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/8426&lt;e3/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g2&gt;#8792&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/8792&lt;e5/&gt;, &lt;g3&gt;#9074&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9074&lt;e6/&gt;, and &lt;g4&gt;#9254&lt;/g4&gt;https://github.com/crystal-lang/crystal/pull/9254&lt;e7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T032721Z" creationid="makenowjust" creationdate="20200611T032721Z">
        <seg>詳細は&lt;g2&gt;#8792&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/8792&lt;e5/&gt;、&lt;g3&gt;#9074&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9074&lt;e6/&gt;、それと&lt;g4&gt;#9254&lt;/g4&gt;https://github.com/crystal-lang/crystal/pull/9254&lt;e7/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g2&gt;#9009&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9009&lt;e3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T145730Z" creationid="makenowjust" creationdate="20200610T145730Z">
        <seg>詳細は&lt;g2&gt;#9009&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9009&lt;e3/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g2&gt;#9088&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9088&lt;e3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T135131Z" creationid="makenowjust" creationdate="20200610T135131Z">
        <seg>詳細は&lt;g2&gt;#9088&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9088&lt;e3/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g2&gt;#9145&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9145&lt;e3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T153706Z" creationid="makenowjust" creationdate="20200610T153706Z">
        <seg>詳細は&lt;g2&gt;#9145&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9145&lt;e3/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g2&gt;#9201&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9201&lt;e3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T031015Z" creationid="makenowjust" creationdate="20200611T031015Z">
        <seg>詳細は&lt;g2&gt;#9201&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9201&lt;e3/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g2&gt;#9244&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9244&lt;e3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T145610Z" creationid="makenowjust" creationdate="20200610T145610Z">
        <seg>詳細は&lt;g2&gt;#9244&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9244&lt;e3/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g2&gt;#9258&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9258&lt;e4/&gt; and &lt;g3&gt;#9045&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9045&lt;e5/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T125828Z" creationid="makenowjust" creationdate="20200610T125828Z">
        <seg>より詳細な議論は&lt;g2&gt;#9258&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9258&lt;e4/&gt;と&lt;g3&gt;#9045&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9045&lt;e5/&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g3&gt;#8972&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/8972&lt;e4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T134318Z" creationid="makenowjust" creationdate="20200610T134318Z">
        <seg>詳細は&lt;g3&gt;#8972&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/8972&lt;e4/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g3&gt;#9006&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9006&lt;e4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T031311Z" creationid="makenowjust" creationdate="20200611T031311Z">
        <seg>詳細は&lt;g3&gt;#9006&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9006&lt;e4/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g3&gt;#9049&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9049&lt;e4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T151653Z" creationid="makenowjust" creationdate="20200610T151653Z">
        <seg>詳細は&lt;g3&gt;#9049&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9049&lt;e4/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g3&gt;#9136&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9136&lt;e4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T031504Z" creationid="makenowjust" creationdate="20200611T031504Z">
        <seg>詳細は&lt;g3&gt;#9136&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9136&lt;e4/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g3&gt;#9171&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9171&lt;e4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T131450Z" creationid="makenowjust" creationdate="20200610T131450Z">
        <seg>詳細は&lt;g3&gt;#9171&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9171&lt;e4/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g3&gt;#9175&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9175&lt;e4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T150609Z" creationid="makenowjust" creationdate="20200610T150609Z">
        <seg>詳細は&lt;g3&gt;#9175&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9175&lt;e4/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g3&gt;#9383&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9383&lt;e4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T151822Z" creationid="makenowjust" creationdate="20200610T151822Z">
        <seg>詳細は &lt;g3&gt;#9383&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9383&lt;e4/&gt; を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g4&gt;#417&lt;/g4&gt;https://github.com/crystal-lang/shards/pull/417&lt;e6/&gt;, &lt;g5&gt;#420&lt;/g5&gt;https://github.com/crystal-lang/shards/pull/420&lt;e7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T112158Z" creationid="makenowjust" creationdate="20200809T112158Z">
        <seg>詳細は&lt;g4&gt;#417&lt;/g4&gt;https://github.com/crystal-lang/shards/pull/417&lt;e6/&gt;と&lt;g5&gt;#420&lt;/g5&gt;https://github.com/crystal-lang/shards/pull/420&lt;e7/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g4&gt;#419&lt;/g4&gt;https://github.com/crystal-lang/shards/pull/419&lt;e6/&gt;, &lt;g5&gt;#429&lt;/g5&gt;https://github.com/crystal-lang/shards/pull/429&lt;e7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T105958Z" creationid="makenowjust" creationdate="20200809T105958Z">
        <seg>詳細は&lt;g4&gt;#419&lt;/g4&gt;https://github.com/crystal-lang/shards/pull/419&lt;e6/&gt;と&lt;g5&gt;#429&lt;/g5&gt;https://github.com/crystal-lang/shards/pull/429&lt;e7/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g4&gt;#9315&lt;/g4&gt;https://github.com/crystal-lang/crystal/pull/9315&lt;e5/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T134936Z" creationid="makenowjust" creationdate="20200610T134908Z">
        <seg>詳細は&lt;g4&gt;#9315&lt;/g4&gt;https://github.com/crystal-lang/crystal/pull/9315&lt;e5/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g4&gt;#9428&lt;/g4&gt;https://github.com/crystal-lang/crystal/pull/9428&lt;e5/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T131729Z" creationid="makenowjust" creationdate="20200610T131729Z">
        <seg>詳細は&lt;g4&gt;#9428&lt;/g4&gt;https://github.com/crystal-lang/crystal/pull/9428&lt;e5/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g6&gt;#9093&lt;/g6&gt;https://github.com/crystal-lang/crystal/pull/9093&lt;e8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T031104Z" creationid="makenowjust" creationdate="20200611T031104Z">
        <seg>詳細は &lt;g6&gt;#9093&lt;/g6&gt;https://github.com/crystal-lang/crystal/pull/9093&lt;e8/&gt; を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g7&gt;#9272&lt;/g7&gt;https://github.com/crystal-lang/crystal/pull/9272&lt;e10/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T151952Z" creationid="makenowjust" creationdate="20200610T151952Z">
        <seg>詳細は &lt;g7&gt;#9272&lt;/g7&gt;https://github.com/crystal-lang/crystal/pull/9272&lt;e10/&gt; を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more at &lt;g8&gt;#9233&lt;/g8&gt;https://github.com/crystal-lang/crystal/pull/9233&lt;e10/&gt; and &lt;g9&gt;#9363&lt;/g9&gt;https://github.com/crystal-lang/crystal/pull/9363&lt;e11/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T144810Z" creationid="makenowjust" creationdate="20200610T144807Z">
        <seg>詳細は&lt;g8&gt;#9233&lt;/g8&gt;https://github.com/crystal-lang/crystal/pull/9233&lt;e10/&gt;と&lt;g9&gt;#9363&lt;/g9&gt;https://github.com/crystal-lang/crystal/pull/9363&lt;e11/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read these guides to get the best out of Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T102321Z" creationid="makenowjust" creationdate="20200506T102321Z">
        <seg>Crystal の力を最高に引き出すにはこのガイドを読んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reading</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T111710Z" creationid="makenowjust" creationdate="20200510T111542Z">
        <seg>読み出し方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reading Multiple Annotations</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T112337Z" creationid="makenowjust" creationdate="20200510T112337Z">
        <seg>複数のアノテーションを読み出す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reads and enforces locked versions and commits if a &lt;g1&gt;shard.lock&lt;/g1&gt; file is present.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T095227Z" creationid="makenowjust" creationdate="20200419T180824Z">
        <seg>&lt;g1&gt;shard.lock&lt;/g1&gt; がある場合は、そこからロックされたバージョンとコミットを読み込んで強制します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recursive structs work just like you expect them to:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T082713Z" creationid="makenowjust" creationdate="20200512T082713Z">
        <seg>再帰的な構造体も期待通りに動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Red</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024115Z" creationid="hirofumiwakasugi" creationdate="20150914T024115Z">
        <seg>Red</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Red         # 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024409Z" creationid="hirofumiwakasugi" creationdate="20150914T024409Z">
        <seg>Red         # 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Red        # 0</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T181845Z" creationid="makenowjust" creationdate="20200505T181845Z">
        <seg>Red        # 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>RedHat</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071340Z" creationid="makenowjust" creationdate="20200518T071340Z">
        <seg>RedHat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Redefining methods, and previous_def</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T124807Z" creationid="makenowjust" creationdate="20200427T124807Z">
        <seg>メソッドの再定義とprevious_def</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to &lt;g5&gt;Pitfalls&lt;/g5&gt; for more information.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221238Z" creationid="makenowjust" creationdate="20200507T140829Z">
        <seg>詳しくは&lt;g5&gt;落とし穴&lt;/g5&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the &lt;g1&gt;type grammar&lt;/g1&gt; for the notation used in alias types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T085211Z" creationid="makenowjust" creationdate="20200512T085143Z">
        <seg>この宣言の型を指定方法については&lt;g1&gt;型の文法&lt;/g1&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the &lt;g1&gt;type grammar&lt;/g1&gt; for the notation used in callbacks and procs types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T085751Z" creationid="makenowjust" creationdate="20200512T085751Z">
        <seg>コールバックと Proc に使用する型の指定方法については&lt;g1&gt;型の文法&lt;/g1&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the &lt;g1&gt;type grammar&lt;/g1&gt; for the notation used in external variables types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T071746Z" creationid="makenowjust" creationdate="20200512T084107Z">
        <seg>外部変数の使用可能な型の指定方法については&lt;g1&gt;型の文法&lt;/g1&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the &lt;g1&gt;type grammar&lt;/g1&gt; for the notation used in fun types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T032426Z" creationid="makenowjust" creationdate="20200511T032426Z">
        <seg>fun の型を書く際に利用できる構文は&lt;g1&gt;型の文法&lt;/g1&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the &lt;g1&gt;type grammar&lt;/g1&gt; for the notation used in struct field types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083127Z" creationid="makenowjust" creationdate="20200512T083127Z">
        <seg>構造体のフィールドに使用可能な型の指定方法については&lt;g1&gt;型の文法&lt;/g1&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the &lt;g1&gt;type grammar&lt;/g1&gt; for the notation used in type restrictions.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T160711Z" creationid="makenowjust" creationdate="20200429T160711Z">
        <seg>型制約に指定する型の記法については、&lt;g1&gt;型の文法&lt;/g1&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the &lt;g1&gt;type grammar&lt;/g1&gt; for the notation used in typedef types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T084845Z" creationid="makenowjust" creationdate="20200512T084845Z">
        <seg>この宣言の型の指定方法については&lt;g1&gt;型の文法&lt;/g1&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the &lt;g1&gt;type grammar&lt;/g1&gt; for the notation used in union field types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083449Z" creationid="makenowjust" creationdate="20200512T083430Z">
        <seg>共用体のフィールドに使用可能な型の指定方法については&lt;g1&gt;型の文法&lt;/g1&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the &lt;g3&gt;type restrictions&lt;/g3&gt; section.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T122827Z" creationid="makenowjust" creationdate="20200507T122820Z">
        <seg>詳しくは&lt;g3&gt;型制約&lt;/g3&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [Generics](generics.html) section.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T041018Z" creationid="hirofumiwakasugi" creationdate="20150908T041018Z">
        <seg>詳しくは[ジェネリクス](generics.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type gammar](../type_grammar.html) for the notation used in fun types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T024329Z" creationid="hirofumiwakasugi" creationdate="20151102T024329Z">
        <seg>fun 型 で利用できる型の指定方法については [型文法](../type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type gammar](type_grammar.html) for the notation used in fun types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T042344Z" creationid="hirofumiwakasugi" creationdate="20151005T042344Z">
        <seg>fun 型 で利用できる型の指定方法については [型文法](type_grammar.html) を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type grammar](../type_grammar.html) for the notation used in alias types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T024300Z" creationid="hirofumiwakasugi" creationdate="20151102T024300Z">
        <seg>alias の型を設定する際の記載方法については[型文法](../type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type grammar](../type_grammar.html) for the notation used in external variables types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T024348Z" creationid="hirofumiwakasugi" creationdate="20151102T024348Z">
        <seg>外部の変数に使用可能な型の指定方法については[型文法](../type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type grammar](../type_grammar.html) for the notation used in struct field types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T024336Z" creationid="hirofumiwakasugi" creationdate="20151102T024336Z">
        <seg>構造体のフィールドに使用可能な型の指定方法については[型文法](../type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type grammar](../type_grammar.html) for the notation used in union field types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T024342Z" creationid="hirofumiwakasugi" creationdate="20151102T024342Z">
        <seg>共用体のフィールドに使用可能な型の指定方法については[型文法](../type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type grammar](type_grammar.html) for the notation used in alias types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024102Z" creationid="hirofumiwakasugi" creationdate="20151008T024102Z">
        <seg>alias の型を設定する際の記載方法については[型文法](type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type grammar](type_grammar.html) for the notation used in callbacks and procs types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024818Z" creationid="hirofumiwakasugi" creationdate="20151008T024816Z">
        <seg>コールバックと Proc に使用可能な型の指定方法については[型文法](type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type grammar](type_grammar.html) for the notation used in external variables types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053924Z" creationid="hirofumiwakasugi" creationdate="20151007T053920Z">
        <seg>外部の変数に使用可能な型の指定方法については[型文法](type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type grammar](type_grammar.html) for the notation used in struct field types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052002Z" creationid="hirofumiwakasugi" creationdate="20151007T052002Z">
        <seg>構造体のフィールドに使用可能な型の指定方法については[型文法](type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type grammar](type_grammar.html) for the notation used in type restrictions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T022626Z" creationid="hirofumiwakasugi" creationdate="20150908T022338Z">
        <seg>型制約を設定する際の記載方法については[型文法](type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type grammar](type_grammar.html) for the notation used in typedef types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023629Z" creationid="hirofumiwakasugi" creationdate="20151008T023629Z">
        <seg>typedef の型を設定する際の記載方法については[型文法](type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type grammar](type_grammar.html) for the notation used in union field types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052432Z" creationid="hirofumiwakasugi" creationdate="20151007T052432Z">
        <seg>共用体のフィールドに使用可能な型の指定方法については[型文法](type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type restrictions](type_restrictions.html) section.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011827Z" creationid="hirofumiwakasugi" creationdate="20151009T011827Z">
        <seg>詳しくは[型制約](type_restrictions.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Regarding actual changes in this release for Windows we have:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T032048Z" creationid="makenowjust" creationdate="20200611T032048Z">
        <seg>今回のリリースでの Windows 向けの変更としては次のようなものがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Region</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092050Z" creationid="makenowjust" creationdate="20201217T092050Z">
        <seg>地域</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Regular Expressions</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T040354Z" creationid="makenowjust" creationdate="20200421T040354Z">
        <seg>正規表現</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Regular expressions are represented by the &lt;g1&gt;Regex&lt;/g1&gt; class.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T040416Z" creationid="makenowjust" creationdate="20200421T040402Z">
        <seg>正規表現は&lt;g1&gt;Regex&lt;/g1&gt;クラスによって表現されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Regular expressions are represented by the &lt;g1&gt;Regex&lt;/g1&gt;http://crystal-lang.org/api/Regex.html&lt;e2/&gt; class.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T090013Z" creationid="makenowjust" creationdate="20200518T085858Z">
        <seg>正規表現は &lt;g1&gt;Regex&lt;/g1&gt;http://crystal-lang.org/api/Regex.html&lt;e2/&gt; クラスで表わされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Regular expressions are represented by the &lt;g1&gt;Regex&lt;/g1&gt;https://crystal-lang.org/api/latest/Regex.html&lt;e2/&gt; class.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T081358Z" creationid="makenowjust" creationdate="20210324T081358Z">
        <seg>正規表現は &lt;g1&gt;Regex&lt;/g1&gt;https://crystal-lang.org/api/latest/Regex.html&lt;e2/&gt; クラスで表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Regular expressions are represented by the [Regex](http://crystal-lang.org/api/Regex.html) class, which is usually created with a literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T015736Z" creationid="hirofumiwakasugi" creationdate="20150902T015736Z">
        <seg>正規表現 (Regular Expression) を表すのは [Regex](http://crystal-lang.org/api/Regex.html) クラスです。そして、通常それは以下の正規表現リテラルによって作られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Regular expressions support the same &lt;g1&gt;escape sequences as String literals&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T040734Z" creationid="makenowjust" creationdate="20200421T040624Z">
        <seg>正規表現では&lt;g1&gt;文字列リテラルと同様のエスケープシーケンス&lt;/g1&gt;をサポートしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Regular method names must start with a letter or underscore, but operators
only consist of special characters.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T081924Z" creationid="makenowjust" creationdate="20200502T081916Z">
        <seg>通常のメソッド名は小文字がアンダースコアからはじまりますが、演算子の名前は特別な記号のみからなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Regular types and generics can be used:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010420Z" creationid="hirofumiwakasugi" creationdate="20151009T010417Z">
        <seg>一般的な型とジェネリクスは以下のように利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Related to all these &lt;g1&gt;IO&lt;/g1&gt; methods, on &lt;g2&gt;String&lt;/g2&gt;, instead of returning &lt;g3&gt;String&lt;/g3&gt; values, there are new overloads to emit directly the result to the &lt;g4&gt;IO&lt;/g4&gt;; read more in &lt;g5&gt;#9236&lt;/g5&gt;https://github.com/crystal-lang/crystal/pull/9236&lt;e11/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T143027Z" creationid="makenowjust" creationdate="20200610T143027Z">
        <seg>これらのすべての &lt;g1&gt;IO&lt;/g1&gt; メソッドに関係して、&lt;g2&gt;String&lt;/g2&gt; クラスのメソッドで、&lt;g3&gt;String&lt;/g3&gt; の値を返すものについて、値を返すのではなく結果を &lt;g4&gt;IO&lt;/g4&gt; に書き込むようなオーバロードが追加されました。詳細は&lt;g5&gt;#9236&lt;/g5&gt;https://github.com/crystal-lang/crystal/pull/9236&lt;e11/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Release Notes</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T081443Z" creationid="makenowjust" creationdate="20200413T222638Z">
        <seg>リリースノート (一部未翻訳)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Release builds</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150611Z" creationid="makenowjust" creationdate="20200419T150611Z">
        <seg>リリースビルド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Remember: an array literal is just syntax sugar for creating an instance of an array and adding some values to it, and this will happen over and over on each iteration.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091057Z" creationid="akiji" creationdate="20200430T131555Z">
        <seg>配列リテラルは新しい配列を作成してそこに値をいくつか追加するという処理のシンタックスシュガーでしかないことを忘れないでください。そのため、ここでは何度も何度もメモリの割り当てが行われています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes unused dependencies from lib folder.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181102Z" creationid="makenowjust" creationdate="20200419T181102Z">
        <seg>使われていない依存関係をlibフォルダから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replace the desired &lt;g1&gt;{CHANNEL}&lt;/g1&gt; in the following script and you are all set.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T093050Z" creationid="makenowjust" creationdate="20210130T093050Z">
        <seg>利用したいチャンネル名で次のスクリプトの &lt;g1&gt;{CHANNEL}&lt;/g1&gt; の置き換えることで、設定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replace the desired &lt;g1&gt;{DISTRO}&lt;/g1&gt; and &lt;g2&gt;{CHANNEL}&lt;/g2&gt; in the following script and you are all set.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T093749Z" creationid="makenowjust" creationdate="20210130T093749Z">
        <seg>希望の値で次のスクリプトの &lt;g1&gt;{DISTRO}&lt;/g1&gt; と &lt;g2&gt;{CHANNEL}&lt;/g2&gt; を置き換えることで、設定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Request for user input</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180643Z" creationid="makenowjust" creationdate="20200413T180643Z">
        <seg>ユーザーへの入力の要求</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Requirements</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T153917Z" creationid="makenowjust" creationdate="20200527T153917Z">
        <seg>必要なもの</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Requiring files</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T084510Z" creationid="makenowjust" creationdate="20200427T084510Z">
        <seg>ファイルの require</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rescuing exceptions</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103428Z" creationid="makenowjust" creationdate="20200506T103428Z">
        <seg>例外の捕捉</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Resolves and installs dependencies into the &lt;g1&gt;lib&lt;/g1&gt; folder.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T095231Z" creationid="makenowjust" creationdate="20200419T180537Z">
        <seg>依存関係を解決して、それらを &lt;g1&gt;lib&lt;/g1&gt; にインストールします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Resolves and updates all dependencies into the lib folder again, whatever the locked versions and commits in the &lt;g1&gt;shard.lock&lt;/g1&gt; file.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T095331Z" creationid="makenowjust" creationdate="20200419T181220Z">
        <seg>&lt;g1&gt;shard.lock&lt;/g1&gt; にロックされたバージョンやコミットがあるかどうかに関わらず、すべての依存関係を解決してlibフォルダの内容を再度更新します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return types</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T141916Z" creationid="makenowjust" creationdate="20200430T141916Z">
        <seg>戻り値の型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns *other* added to `self`.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T083927Z" creationid="makenowjust" creationdate="20200502T083927Z">
        <seg>`self`と**other**を足し合わせたものを返す。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the inverted vector to `self`.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T083701Z" creationid="makenowjust" creationdate="20200502T083701Z">
        <seg>`self` を反転させたベクトルを返す。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ReturnsTwice</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120135Z" creationid="makenowjust" creationdate="20200510T120135Z">
        <seg>ReturnsTwice</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right now the code containing the logic of each of the applications always gets executed with the &lt;g1&gt;OptionParser&lt;/g1&gt;, i.e. there is no way to include that file without running the whole application.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T185530Z" creationid="makenowjust" creationdate="20200413T185401Z">
        <seg>現時点ではアプリケーションの各ロジックは&lt;g1&gt;OptionParser&lt;/g1&gt;の内で実行されています。つまり、アプリケーション全体を実行することなしに、部分的にファイルを取り込むことができないのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right now, we can't do much with a person aside from create it with a name.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T122834Z" creationid="makenowjust" creationdate="20200427T122834Z">
        <seg>今のところ、名前をつけて Person のインスタンスを生成することくらいしかできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right now, we can't do much with a person: create it with a name, ask for its name and for its age, which will always be zero.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122136Z" creationid="hirofumiwakasugi" creationdate="20150904T121927Z">
        <seg>さて、これで person に対して、「名前を付けてインスタンスを生成する」ことと「名前と年齢を尋ねる」ことができるようになりました。しかし、年齢はずっと0歳のままで変更できませんし、まだまだ機能は不十分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ruby</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092325Z" creationid="makenowjust" creationdate="20201217T092325Z">
        <seg>Ruby</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Run &lt;g1&gt;crystal docs&lt;/g1&gt; to convert your code and comments into interlinking API documentation.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T160224Z" creationid="makenowjust" creationdate="20200527T160213Z">
        <seg>&lt;g1&gt;crystal docs&lt;/g1&gt; を実行することで、コードのコメントを API ドキュメントに変換できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Run &lt;g1&gt;crystal spec --options&lt;/g1&gt; for available options.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164127Z" creationid="makenowjust" creationdate="20200419T164127Z">
        <seg>&lt;g1&gt;crystal spec --options&lt;/g1&gt;で可能なオプションの一覧を見ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Run &lt;g1&gt;make std_spec compiler_spec&lt;/g1&gt; to ensure all specs pass, and you've installed everything correctly.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T065419Z" creationid="makenowjust" creationdate="20200518T065419Z">
        <seg>&lt;g1&gt;make std_spec compiler_spec&lt;/g1&gt; を実行して、spec をパスして正しくインストールできていることを確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Run &lt;g1&gt;make&lt;/g1&gt; to build your own version of the compiler.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T065343Z" creationid="makenowjust" creationdate="20200518T065343Z">
        <seg>&lt;g1&gt;make&lt;/g1&gt; を実行してコンパイラをビルドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Running &lt;g1&gt;&lt;g2&gt;shards install&lt;/g2&gt;&lt;/g1&gt; resolves and installs the specified dependencies.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T095132Z" creationid="makenowjust" creationdate="20200419T173933Z">
        <seg>&lt;g1&gt;&lt;g2&gt;shards install&lt;/g2&gt;&lt;/g1&gt; を実行すると、指定された依存関係の解決とインストールが行なわれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Running the above code will produce no output and exit immediately.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T074641Z" creationid="akiji" creationdate="20200428T074641Z">
        <seg>上記コードは何も出力せず即座に終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Running the application with the &lt;g1&gt;-t&lt;/g1&gt; option will output:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174950Z" creationid="makenowjust" creationdate="20200413T174950Z">
        <seg>&lt;g1&gt;-t&lt;/g1&gt;をつけてこのアプリケーションを実行すると、次のように表示されるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Running the previous file:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211711Z" creationid="makenowjust" creationdate="20200413T211711Z">
        <seg>このファイルを実行すると、こんな結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Runtime</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T031242Z" creationid="makenowjust" creationdate="20200611T031242Z">
        <seg>ランタイム</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rust</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092326Z" creationid="makenowjust" creationdate="20201217T092326Z">
        <seg>Rust</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ryan Worl</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084047Z" creationid="makenowjust" creationdate="20200516T084047Z">
        <seg>Ryan Worl</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SECOND</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T091348Z" creationid="makenowjust" creationdate="20210130T091348Z">
        <seg>SECOND</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SOME</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T034041Z" creationid="makenowjust" creationdate="20200420T034041Z">
        <seg>SOME</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>STDERR.puts ""</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180426Z" creationid="makenowjust" creationdate="20200413T180426Z">
        <seg>STDERR.puts ""</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>STDERR.puts "ERROR: #{option_flag} is missing something."</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180425Z" creationid="makenowjust" creationdate="20200413T180425Z">
        <seg>STDERR.puts "ERROR: #{option_flag} is missing something."</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>STDERR.puts "ERROR: #{option_flag} is not a valid option."</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180432Z" creationid="makenowjust" creationdate="20200413T180432Z">
        <seg>STDERR.puts "ERROR: #{option_flag} is not a valid option."</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>STDERR.puts parser</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180428Z" creationid="makenowjust" creationdate="20200413T180428Z">
        <seg>STDERR.puts parser</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>STRING</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T063558Z" creationid="hirofumiwakasugi" creationdate="20160204T062354Z">
        <seg>STRING</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>STRING

&lt;&lt;-STRING # =&gt; "  Hello\n    world"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T033933Z" creationid="makenowjust" creationdate="20200420T033933Z">
        <seg>STRING

&lt;&lt;-STRING # =&gt; "  Hello\n    world"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>STRING
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T063603Z" creationid="hirofumiwakasugi" creationdate="20160204T062415Z">
        <seg>STRING
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sample code</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T064125Z" creationid="akiji" creationdate="20200428T064125Z">
        <seg>サンプルコード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sample values</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000414Z" creationid="makenowjust" creationdate="20200414T000414Z">
        <seg>値のサンプル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sb</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084030Z" creationid="makenowjust" creationdate="20200516T084030Z">
        <seg>Sb</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Scope</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T140849Z" creationid="makenowjust" creationdate="20200507T140849Z">
        <seg>スコープ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Scott Fleckenstein</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084031Z" creationid="makenowjust" creationdate="20200516T084031Z">
        <seg>Scott Fleckenstein</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Search &lt;g1&gt;crystalshards.xyz&lt;/g1&gt;https://crystalshards.xyz/&lt;e2/&gt; to check if your name is already taken.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T162439Z" creationid="makenowjust" creationdate="20200527T162439Z">
        <seg>&lt;g1&gt;crystalshards.xyz&lt;/g1&gt;https://crystalshards.xyz/&lt;e2/&gt; で検索して、既に使われている名前でないか確認しておきましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Second, &lt;g1&gt;allocate&lt;/g1&gt; is a low-level class method that creates an uninitialized object of the given type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210412T073937Z" creationid="makenowjust" creationdate="20200427T121758Z">
        <seg>次に、&lt;g1&gt;allocate&lt;/g1&gt;は与えられたクラスの初期化されていないオブジェクトを生成する、低レベルなクラスメソッドです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Second, `allocate` is a low-level class method that creates an uninitialized object of the given type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T033526Z" creationid="hirofumiwakasugi" creationdate="20150904T060528Z">
        <seg>次に `allocate` というメソッドについてです。これはローレベルなクラスメソッドで、与えられた型のオブジェクトを初期化されていない状態で作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Security concerns</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T173004Z" creationid="makenowjust" creationdate="20200422T173004Z">
        <seg>セキュリティ上の懸念</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See &lt;g1&gt;Splats and Tuples&lt;/g1&gt; for details.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T092135Z" creationid="makenowjust" creationdate="20200502T092135Z">
        <seg>詳細は&lt;g1&gt;スプラット展開とタプル&lt;/g1&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See &lt;g1&gt;the Shards command&lt;/g1&gt; for details.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200521T042733Z" creationid="makenowjust" creationdate="20200521T042733Z">
        <seg>詳しくは &lt;g1&gt;shards コマンド&lt;/g1&gt;の章を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See &lt;g2&gt;assignment&lt;/g2&gt; for details.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T094451Z" creationid="makenowjust" creationdate="20200502T094451Z">
        <seg>詳細は&lt;g2&gt;代入&lt;/g2&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See &lt;g4&gt;Install from a tar.gz&lt;/g4&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112039Z" creationid="makenowjust" creationdate="20200518T112039Z">
        <seg>これは&lt;g4&gt;tar.gz からのインストール&lt;/g4&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See below for instructions on hosting your compiler-generated docs on GitHub/GitLab Pages.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T160817Z" creationid="makenowjust" creationdate="20200527T160409Z">
        <seg>以降で、コンパイラが生成したドキュメントを GitHub や GitLab でホスティングする方法が説明されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See the &lt;a0&gt;Open Collective campaign&lt;/a0&gt; for more details.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083350Z" creationid="makenowjust" creationdate="20200516T083350Z">
        <seg>詳細は &lt;a0&gt;Open Collective でのキャンペーンページ&lt;/a0&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See the &lt;g1&gt;Open Collective campaign&lt;/g1&gt; for more details.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T080000Z" creationid="makenowjust" creationdate="20200518T080000Z">
        <seg>詳細は &lt;g1&gt;Open Collective のキャンペーンページ&lt;/g1&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See the Travis CI section below to implement this in your build.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T162213Z" creationid="makenowjust" creationdate="20200527T162213Z">
        <seg>以降の Travis CI の章で、ビルド時にこのチェックを追加する方法が説明されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select your platform to find specific instructions.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T065020Z" creationid="makenowjust" creationdate="20200518T064457Z">
        <seg>プラトッフォームを選んで詳しいインストール方法を確認してください。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sell Crystal artwork or merchandise without permission.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T085754Z" creationid="makenowjust" creationdate="20200516T085754Z">
        <seg>許可なく Crystal のイラストや商品を販売すること</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Serdar Dogruyol</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084033Z" creationid="makenowjust" creationdate="20200516T084033Z">
        <seg>Serdar Dogruyol</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sergey Kucher</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084034Z" creationid="makenowjust" creationdate="20200516T084034Z">
        <seg>Sergey Kucher</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sergio Gil</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084049Z" creationid="makenowjust" creationdate="20200516T084049Z">
        <seg>Sergio Gil</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Serialization</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T151826Z" creationid="makenowjust" creationdate="20200610T151826Z">
        <seg>シリアライズ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Serving book on http://localhost:4000</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164552Z" creationid="makenowjust" creationdate="20200413T164552Z">
        <seg>Serving book on http://localhost:4000</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Set(Int32){1, 2, 3}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T174453Z" creationid="makenowjust" creationdate="20200420T174453Z">
        <seg>Set(Int32){1, 2, 3}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Setup repository</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T101723Z" creationid="makenowjust" creationdate="20200518T101723Z">
        <seg>リポジトリの設定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Several Linux distribution are supported by WSL and the installation instructions for Crystal are equal to that of the respective Linux distribution, most commonly &lt;g1&gt;Debian&lt;/g1&gt; and &lt;g2&gt;Ubuntu&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112813Z" creationid="makenowjust" creationdate="20200518T112813Z">
        <seg>いくつかの Linux ディストリビューションが WSL をサポートしています。それらのディストリビューションのインストール方法に従ってください。よく使われるディストリビューションは &lt;g1&gt;Debian&lt;/g1&gt; か &lt;g2&gt;Ubuntu&lt;/g2&gt; でしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Several literals are available for creating many basic types in the language.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T080459Z" creationid="hirofumiwakasugi" creationdate="20150901T050812Z">
        <seg>Crystal には、数多くの基本的な型に対応したリテラルが用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Shannon Skipper</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084050Z" creationid="makenowjust" creationdate="20200516T084050Z">
        <seg>Shannon Skipper</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Shards</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T135134Z" creationid="makenowjust" creationdate="20200610T135134Z">
        <seg>Shards</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Shards 0.12.0 released!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T103137Z" creationid="makenowjust" creationdate="20200809T103137Z">
        <seg>Shards 0.12.0 がリリースされました！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Shards commands</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T174621Z" creationid="makenowjust" creationdate="20200419T174621Z">
        <seg>shards コマンド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Shards has a new development release.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T103251Z" creationid="makenowjust" creationdate="20200809T103251Z">
        <seg>Shards は新バージョンのリリースをしました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Shards is usually distributed with Crystal itself.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T173324Z" creationid="makenowjust" creationdate="20200419T173320Z">
        <seg>Shards 通常であれば Crystal 自身と共に配布されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Shards v0.11.1 is bundled in this release.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T135144Z" creationid="makenowjust" creationdate="20200610T135144Z">
        <seg>Shards v0.11.1 が今回のリリースではバンドルされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Shift</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084730Z" creationid="makenowjust" creationdate="20200502T084730Z">
        <seg>ビットシフト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Shifts</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090235Z" creationid="makenowjust" creationdate="20200502T090235Z">
        <seg>ビットスフト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sho Kusano</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084050Z" creationid="makenowjust" creationdate="20200516T084050Z">
        <seg>Sho Kusano</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Short one-argument syntax</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184925Z" creationid="makenowjust" creationdate="20200505T184925Z">
        <seg>単一引数の場合の短縮記法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Short one-parameter syntax</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094558Z" creationid="makenowjust" creationdate="20210324T094558Z">
        <seg>単一引数の場合の短縮記法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Short syntax form</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103858Z" creationid="makenowjust" creationdate="20200506T103858Z">
        <seg>短縮記法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Show all</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222912Z" creationid="makenowjust" creationdate="20200413T222912Z">
        <seg>すべて表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similar to &lt;g1&gt;&lt;g2&gt;break&lt;/g2&gt;&lt;/g1&gt;, &lt;g3&gt;next&lt;/g3&gt; can also take a parameter which will then be returned by &lt;g4&gt;yield&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T100848Z" creationid="makenowjust" creationdate="20200424T100343Z">
        <seg>&lt;g1&gt;&lt;g2&gt;break&lt;/g2&gt;&lt;/g1&gt;同様、&lt;g3&gt;next&lt;/g3&gt;は引数を受けとることも可能で、その場合には&lt;g4&gt;yield&lt;/g4&gt;の戻り値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similar to &lt;g1&gt;&lt;g2&gt;break&lt;/g2&gt;&lt;/g1&gt;, &lt;g3&gt;next&lt;/g3&gt; can also take an argument which will then be returned by &lt;g4&gt;yield&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T080110Z" creationid="makenowjust" creationdate="20210324T080110Z">
        <seg>&lt;g1&gt;&lt;g2&gt;break&lt;/g2&gt;&lt;/g1&gt; 同様、&lt;g3&gt;next&lt;/g3&gt; は引数を受け取ることも可能で、その場合には &lt;g4&gt;yield&lt;/g4&gt; の戻り値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similar to &lt;g2&gt;flag?&lt;/g2&gt; but it resolves on the host machine.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T140526Z" creationid="makenowjust" creationdate="20200610T151645Z">
        <seg>これは &lt;g2&gt;flag?&lt;/g2&gt; のようなものですが、ホストのマシンで解決されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similar to an &lt;g1&gt;if&lt;/g1&gt;, if a &lt;g2&gt;while&lt;/g2&gt;'s condition is a variable, the variable is guaranteed to not be &lt;g3&gt;nil&lt;/g3&gt; inside the body.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094859Z" creationid="makenowjust" creationdate="20200424T094859Z">
        <seg>&lt;g1&gt;if&lt;/g1&gt;のように、&lt;g2&gt;while&lt;/g2&gt;の条件式が変数であった場合、本体ではその変数は&lt;g3&gt;nil&lt;/g3&gt;ではないことが保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similar to an `if`, if a `while`'s condition is a variable, the variable is guaranteed to not be `nil` inside the body.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052118Z" creationid="hirofumiwakasugi" creationdate="20150905T052118Z">
        <seg>`if` の場合と同様に、`while` の条件に変数が与えられている場合は、本体の中ではその変数が `nil` ではないことが保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similar to percent string literals, valid delimiters for &lt;g1&gt;%x&lt;/g1&gt; are parentheses &lt;g2&gt;()&lt;/g2&gt;, square brackets &lt;g3&gt;[]&lt;/g3&gt;, curly braces &lt;g4&gt;{}&lt;/g4&gt;, angles &lt;g5&gt;&lt;&gt;&lt;/g5&gt; and pipes &lt;g6&gt;||&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172733Z" creationid="makenowjust" creationdate="20200422T172733Z">
        <seg>パーセントリテラルの形式の場合、他のパーセントリテラルと同様に&lt;g1&gt;%x&lt;/g1&gt;では、括弧&lt;g2&gt;()&lt;/g2&gt;、角括弧&lt;g3&gt;[]&lt;/g3&gt;、ひげ括弧&lt;g4&gt;{}&lt;/g4&gt;、三角括弧&lt;g5&gt;&lt;&gt;&lt;/g5&gt;そしてパイプ&lt;g6&gt;||&lt;/g6&gt;といった区切り文字が有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similar to regular code, &lt;g1&gt;&lt;g2&gt;Nop&lt;/g2&gt;&lt;/g1&gt;, &lt;g3&gt;&lt;g4&gt;NilLiteral&lt;/g4&gt;&lt;/g3&gt; and a false &lt;g5&gt;&lt;g6&gt;BoolLiteral&lt;/g6&gt;&lt;/g5&gt; are considered &lt;g7&gt;falsey&lt;/g7&gt;, while everything else is considered &lt;g8&gt;truthy&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215129Z" creationid="makenowjust" creationdate="20200509T215129Z">
        <seg>通常のコードと同様に、&lt;g1&gt;&lt;g2&gt;Nop&lt;/g2&gt;&lt;/g1&gt; と &lt;g3&gt;&lt;g4&gt;NilLiteral&lt;/g4&gt;&lt;/g3&gt; そして偽の &lt;g5&gt;&lt;g6&gt;BoolLiteral&lt;/g6&gt;&lt;/g5&gt; は&lt;g7&gt;偽となり&lt;/g7&gt;、それ意外はすべて&lt;g8&gt;真となり&lt;/g8&gt;ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similar to regular code, &lt;g1&gt;&lt;g2&gt;Nop&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/Crystal/Macros/Nop.html&lt;e9/&gt;, &lt;g3&gt;&lt;g4&gt;NilLiteral&lt;/g4&gt;&lt;/g3&gt;https://crystal-lang.org/api/Crystal/Macros/NilLiteral.html&lt;e10/&gt; and a false &lt;g5&gt;&lt;g6&gt;BoolLiteral&lt;/g6&gt;&lt;/g5&gt;https://crystal-lang.org/api/Crystal/Macros/BoolLiteral.html&lt;e11/&gt; are considered &lt;g7&gt;falsey&lt;/g7&gt;, while everything else is considered &lt;g8&gt;truthy&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T090358Z" creationid="makenowjust" creationdate="20200518T090358Z">
        <seg>通常のコードと同様に、&lt;g1&gt;&lt;g2&gt;Nop&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/Crystal/Macros/Nop.html&lt;e9/&gt; と &lt;g3&gt;&lt;g4&gt;NilLiteral&lt;/g4&gt;&lt;/g3&gt;https://crystal-lang.org/api/Crystal/Macros/NilLiteral.html&lt;e10/&gt; そして偽の &lt;g5&gt;&lt;g6&gt;BoolLiteral&lt;/g6&gt;&lt;/g5&gt;https://crystal-lang.org/api/Crystal/Macros/BoolLiteral.html&lt;e11/&gt; は&lt;g7&gt;偽となり&lt;/g7&gt;、それ以外はすべて&lt;g8&gt;真となり&lt;/g8&gt;ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similar to regular code, &lt;g1&gt;&lt;g2&gt;Nop&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Crystal/Macros/Nop.html&lt;e9/&gt;, &lt;g3&gt;&lt;g4&gt;NilLiteral&lt;/g4&gt;&lt;/g3&gt;https://crystal-lang.org/api/latest/Crystal/Macros/NilLiteral.html&lt;e10/&gt; and a false &lt;g5&gt;&lt;g6&gt;BoolLiteral&lt;/g6&gt;&lt;/g5&gt;https://crystal-lang.org/api/latest/Crystal/Macros/BoolLiteral.html&lt;e11/&gt; are considered &lt;g7&gt;falsey&lt;/g7&gt;, while everything else is considered &lt;g8&gt;truthy&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T080603Z" creationid="makenowjust" creationdate="20210324T080603Z">
        <seg>通常のコードと同様に、&lt;g1&gt;&lt;g2&gt;Nop&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Crystal/Macros/Nop.html&lt;e9/&gt; と &lt;g3&gt;&lt;g4&gt;NilLiteral&lt;/g4&gt;&lt;/g3&gt;https://crystal-lang.org/api/latest/Crystal/Macros/NilLiteral.html&lt;e10/&gt;、そして偽の &lt;g5&gt;&lt;g6&gt;BoolLiteral&lt;/g6&gt;&lt;/g5&gt;https://crystal-lang.org/api/latest/Crystal/Macros/BoolLiteral.html&lt;e11/&gt; は&lt;g7&gt;偽となり&lt;/g7&gt;、それ以外はすべて&lt;g8&gt;真となり&lt;/g8&gt;ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similar to regular code, `Nop`, `NilLiteral` and a false `BoolLiteral` are considered *falsey*, while everything else is considered truthy.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040130Z" creationid="hirofumiwakasugi" creationdate="20151001T040008Z">
        <seg>通常のコードと同様に、`Nop` と `NilLiteral` 、そして「偽」の `BoolLiteral` は「偽」で、それ以外はすべて「真」と判断されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similarly, we dropped &lt;g6&gt;Verbose&lt;/g6&gt;, and added &lt;g7&gt;Trace&lt;/g7&gt; and &lt;g8&gt;Notice&lt;/g8&gt; in &lt;g9&gt;#9107&lt;/g9&gt;https://github.com/crystal-lang/crystal/pull/9107&lt;e11/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T153308Z" creationid="makenowjust" creationdate="20200610T153057Z">
        <seg>同様に &lt;g6&gt;Verbose&lt;/g6&gt; を削除して、&lt;g7&gt;Trace&lt;/g7&gt; と &lt;g8&gt;Notice&lt;/g8&gt; を &lt;g9&gt;#9107&lt;/g9&gt;https://github.com/crystal-lang/crystal/pull/9107&lt;e11/&gt;で追加しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Simon George</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084036Z" creationid="makenowjust" creationdate="20200516T084036Z">
        <seg>Simon George</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Simply put, a Shard is a package of Crystal code, made to be shared-with and used-by other projects.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200521T041913Z" creationid="makenowjust" creationdate="20200521T041913Z">
        <seg>簡単に言うと、shard とは Crystal のコードのパッケージで、他のプロジェクトとコードを共有したり他のプロジェクトのコードを使ったりできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T082804Z" creationid="makenowjust" creationdate="20200516T082804Z">
        <seg>開始時期</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since &lt;g1&gt;typeof&lt;/g1&gt; doesn't actually evaluate the expression, it can be
used on methods at compile time, such as in this example, which
recursively forms a union type out of nested generic types:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T074233Z" creationid="makenowjust" creationdate="20210324T074233Z">
        <seg>&lt;g1&gt;typeof&lt;/g1&gt; は実際には式を評価せず、利用されるのはコンパイルのときのみです。
例えば以下の例では、ネストされた型から、再帰的に型の組み合わせ (ユニオン型) を構築しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since &lt;g1&gt;typeof&lt;/g1&gt; doesn't actually evaluate the expression, it can be
used on methods at compile time, such as in this example, which
recursively forms a union type out of nested type parameters:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T121604Z" creationid="makenowjust" creationdate="20200512T121557Z">
        <seg>&lt;g1&gt;typeof&lt;/g1&gt; は実際には式を評価せず、利用されるのはコンパイルのときです。例えば以下の例では、ネストされた型から、再帰的に型の組み合わせ (ユニオン型) を構築しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since &lt;g4&gt;typeof(raise "Empty input")&lt;/g4&gt; is &lt;g5&gt;NoReturn&lt;/g5&gt; the execution would not return to the current scope in that case.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T142807Z" creationid="makenowjust" creationdate="20200430T142539Z">
        <seg>&lt;g4&gt;typeof(raise "Empty input")&lt;/g4&gt; は実行されたとすると返ってこないため、 &lt;g5&gt;NoReturn&lt;/g5&gt; 型となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since `typeof` doesn't actually evaluate the expression, it can be
used on methods at compile time, such as in this example, which
recursively forms a union type out of nested type paramters:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010313Z" creationid="hirofumiwakasugi" creationdate="20150930T062833Z">
        <seg>`typeof` は実際には式を評価せず、利用されるのはコンパイルのときです。例えば以下の例では、ネストされた型から、再帰的に型の組み合わせ (ユニオン型) を構築しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since it’s the first iteration of it, we are eager for feedback.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T112600Z" creationid="makenowjust" creationdate="20200809T112600Z">
        <seg>この機能はまだ初期段階なので、フィードバックをお待ちしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since strings are separated by a single space character (&lt;g2&gt; &lt;/g2&gt;) which must be escaped to use it as a part of a string.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194133Z" creationid="makenowjust" creationdate="20200419T194133Z">
        <seg>もちろん、エスケープされた1つのスペース (&lt;g2&gt; &lt;/g2&gt;) では文字列は区切られません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since the return type of &lt;g1&gt;TupleLiteral&lt;/g1&gt; is iterable, we can rewrite the previous example in a better way.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T111323Z" creationid="makenowjust" creationdate="20200510T111323Z">
        <seg>戻り値の型の &lt;g1&gt;TupleLiteral&lt;/g1&gt; はイテレート可能なので、以前の例をより良い方法で書き直すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since this method returns a &lt;g1&gt;NamedTupleLiteral&lt;/g1&gt;, all of the &lt;g2&gt;methods&lt;/g2&gt; on that type are available for use.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T110624Z" creationid="makenowjust" creationdate="20200510T110624Z">
        <seg>このメソッドは &lt;g1&gt;NamedTupleLiteral&lt;/g1&gt; を返すので、この型にあるすべての&lt;g2&gt;メソッド&lt;/g2&gt;が使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since this method returns a &lt;g1&gt;NamedTupleLiteral&lt;/g1&gt;, all of the &lt;g2&gt;methods&lt;/g2&gt;https://crystal-lang.org/api/Crystal/Macros/NamedTupleLiteral.html&lt;e4/&gt; on that type are available for use.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T082327Z" creationid="makenowjust" creationdate="20200518T082327Z">
        <seg>このメソッドは &lt;g1&gt;NamedTupleLiteral&lt;/g1&gt; を返すので、この型の持つすべての&lt;g2&gt;メソッド&lt;/g2&gt;https://crystal-lang.org/api/Crystal/Macros/NamedTupleLiteral.html&lt;e4/&gt;が使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since this method returns a &lt;g1&gt;NamedTupleLiteral&lt;/g1&gt;, all of the &lt;g2&gt;methods&lt;/g2&gt;https://crystal-lang.org/api/latest/Crystal/Macros/NamedTupleLiteral.html&lt;e4/&gt; on that type are available for use.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T095754Z" creationid="makenowjust" creationdate="20210324T095754Z">
        <seg>このメソッドは &lt;g1&gt;NamedTupleLiteral&lt;/g1&gt; を返すので、この型の持つすべての&lt;g2&gt;メソッド&lt;/g2&gt;https://crystal-lang.org/api/latest/Crystal/Macros/NamedTupleLiteral.html&lt;e4/&gt;が使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since we invoked `Person.new` with a `String` argument, the compiler makes `@name` be a `String` too.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T134342Z" creationid="hirofumiwakasugi" creationdate="20150904T131934Z">
        <seg>ここで、`Person.new` を実行するときにその引数に `String` 型を与えています。そうすると、コンパイラが `@name` も 同様に`String` 型にしてくれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SizeT = Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024033Z" creationid="hirofumiwakasugi" creationdate="20151008T024033Z">
        <seg>SizeT = Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SizeT = Int64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024032Z" creationid="hirofumiwakasugi" creationdate="20151008T024032Z">
        <seg>SizeT = Int64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Slashes must be escaped:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T020149Z" creationid="hirofumiwakasugi" creationdate="20150902T020149Z">
        <seg>スラッシュはエスケープする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Snapcraft</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T113300Z" creationid="makenowjust" creationdate="20200518T113300Z">
        <seg>Snapcraft を使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So everything will keep working until Crystal 1.0.0.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T135834Z" creationid="makenowjust" creationdate="20200610T135814Z">
        <seg>よって、Crystal 1.0.0 まではそのままでも動作し続けるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So first we would need to refactor the code, separating the code necessary for parsing options from the logic.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T185447Z" creationid="makenowjust" creationdate="20200413T185447Z">
        <seg>よって、まずはじめにオプションの解析部分と実際のロジックを分離するリファクタリングを行う必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So here a is Int32.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014510Z" creationid="hirofumiwakasugi" creationdate="20150903T014429Z">
        <seg>ここでは必ず Int32 である</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So how do you choose between a struct and a class? The rule of thumb is that if no instance variable is ever reassigned, i.e. your type is immutable, you can use a struct, otherwise use a class.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055119Z" creationid="hirofumiwakasugi" creationdate="20150913T054534Z">
        <seg>ただ、具体的にクラスと構造体をどのように使い分ければよいのでしょうか？これまでの経験から言うと、もしインスタンス変数への再代入が全く発生しない場合 (例えばその型がイミュータブルな場合など) には構造体を使い、それ以外の場合はクラスを使うのが良いでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So lets add a method that makes a person become older:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T122914Z" creationid="hirofumiwakasugi" creationdate="20150904T121928Z">
        <seg>それでは、person が年齢を重ねることができるようにしてみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So let’s have some fun building our first CLI application in Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T163621Z" creationid="makenowjust" creationdate="20200413T163621Z">
        <seg>それでは、Crystal での最初の CLI の開発を楽しみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So now the question would be: &lt;g1&gt;do we need to implement an options parser?&lt;/g1&gt; No need to, Crystal got us covered with the class &lt;g2&gt;OptionParser&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172302Z" creationid="makenowjust" creationdate="20200413T172302Z">
        <seg>ここで「&lt;g1&gt;オプションの解析部分を実装する必要がある？&lt;/g1&gt;」と疑問を持つことでしょう。その必要はありません。Crystal では&lt;g2&gt;OptionParser&lt;/g2&gt;がその機能を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So replace the last line with:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055359Z" creationid="hirofumiwakasugi" creationdate="20150831T055353Z">
        <seg>その場合、最後の行を以下の通りに変更してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So the CI can use &lt;g2&gt;SHARDS_OPTS=--ignore-crystal-version&lt;/g2&gt; if the &lt;g3&gt;shards install&lt;/g3&gt; command is implicitly run somewhere.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T112143Z" creationid="makenowjust" creationdate="20200809T112143Z">
        <seg>なので、CI のどこかで &lt;g3&gt;shards install&lt;/g3&gt; が実行されている場合は、&lt;g2&gt;SHARDS_OPTS=--ignore-crystal-version&lt;/g2&gt; が利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So you first need to use one of the previous described methods to have a running compiler.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060302Z" creationid="hirofumiwakasugi" creationdate="20150831T060302Z">
        <seg>したがって、まずはこれまでに紹介した方法のいずれかを使ってコンパイラをインストールする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So, a program will spawn multiple fibers and Crystal will make sure to execute them when the time is right.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T064903Z" creationid="akiji" creationdate="20200428T054325Z">
        <seg>そして、プログラムは複数のファイバを生成することができ、Crystalは適切なタイミングでそれらを実行してくれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So, how does all this work?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174126Z" creationid="makenowjust" creationdate="20200413T172722Z">
        <seg>さて、これがどうやって動作するというのでしょうか？　</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So, in general, it's preferable not to specify type restrictions and almost only use them to define different method overloads.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T013634Z" creationid="hirofumiwakasugi" creationdate="20150908T013205Z">
        <seg>したがって、通常は型制約を使わず、メソッドをオーバーロードするときにのみ使用するくらいが好ましいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So, let's add this option handler and merge all these CLI applications into one fabulous CLI application!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T085337Z" creationid="makenowjust" creationdate="20211107T085337Z">
        <seg>それでは、これらのオプションハンドラーを追加して、すべてを1つのすばらしいCLIアプリケーションにマージしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So, let's add this option handlers and merge all this CLI applications into one fabulous CLI application!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180225Z" creationid="makenowjust" creationdate="20200413T180147Z">
        <seg>それでは、これらのオプションハンドラーを追加して、さらにこれまでに作った2つのCLI アプリケーションをまとめて、1つのファビュラスな CLI アプリケーションにしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So, non-abstract structs can't be inherited from.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T175554Z" creationid="makenowjust" creationdate="20200505T175554Z">
        <seg>そのため abstract でない構造体を継承することができないのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So, the above can be simply written like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T142209Z" creationid="makenowjust" creationdate="20200427T142209Z">
        <seg>よって、上記は次のように簡潔に書けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So, the main fiber, the one that spawns the above fiber, finishes its execution and the program exits.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T070515Z" creationid="akiji" creationdate="20200428T074948Z">
        <seg>そのため、上の例でファイバを生成したメインファイバはそのまま終わりに達してプログラムも終了してしまいました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So, we have to test for &lt;g3&gt;Nil&lt;/g3&gt; and for &lt;g4&gt;empty&lt;/g4&gt; and act naturally for each case:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T183058Z" creationid="makenowjust" creationdate="20200413T182754Z">
        <seg>というわけで、&lt;g3&gt;Nil&lt;/g3&gt;もしくは&lt;g4&gt;""&lt;/g4&gt; (空文字列) かをチェックして、自然に動作するようにしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So, you should never do this:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T120853Z" creationid="akiji" creationdate="20200430T120853Z">
        <seg>ですので、以下のようなことは決してしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some compiler optimizations, like having to analyze a method just once, and incremental compilation, are nearly impossible to do.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T132729Z" creationid="makenowjust" creationdate="20200427T132729Z">
        <seg>コンパイル速度の問題。メソッドの解析を一度に処理したり、インクリメンタルコンパイルをすることがほとんど不可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some documentation common to every *id*.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214141Z" creationid="makenowjust" creationdate="20200412T214141Z">
        <seg>Some documentation common to every *id*.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some documentation specific to *id*'s usage within `Child`.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214140Z" creationid="makenowjust" creationdate="20200412T214140Z">
        <seg>Some documentation specific to *id*'s usage within `Child`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some efforts were dedicated to&lt;g1&gt;File&lt;/g1&gt; &amp; &lt;g2&gt;FileUtils&lt;/g2&gt;, to clean them up and to ensure operations are available from both APIs.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T150558Z" creationid="makenowjust" creationdate="20200610T150558Z">
        <seg>いくつかの変更が &lt;g1&gt;File&lt;/g1&gt; と &lt;g2&gt;FileUtils&lt;/g2&gt; にあります。これらは整理されて、強制する操作が両方の API で有効になりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some expressions won't return to the current scope and therefore have no return type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T142758Z" creationid="makenowjust" creationdate="20200430T142217Z">
        <seg>いくつかのメソッドは実行元に戻って来ず、戻り値の型を持たない場合があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some features of the language needed to iterate to work better together.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T132615Z" creationid="makenowjust" creationdate="20200610T132558Z">
        <seg>言語のいくつかの機能はより良い動作のために反芻が必要でした。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some low-level primitives are provided.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T015042Z" creationid="hirofumiwakasugi" creationdate="20150906T033557Z">
        <seg>いくつかの低レベルプリミティブが提供されており、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some of our CI runs here</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T075752Z" creationid="makenowjust" creationdate="20211107T075752Z">
        <seg>いくつかの CI はこちらで実行されています</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some other clean-ups: &lt;g1&gt;Flate&lt;/g1&gt;, &lt;g2&gt;Gzip&lt;/g2&gt;, &lt;g3&gt;Zip&lt;/g3&gt;, and &lt;g4&gt;Zlib&lt;/g4&gt; were moved inside &lt;g5&gt;Compress&lt;/g5&gt; module in &lt;g6&gt;#8886&lt;/g6&gt;https://github.com/crystal-lang/crystal/pull/8886&lt;e11/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T145851Z" creationid="makenowjust" creationdate="20200610T145851Z">
        <seg>その他に整理したものとしては&lt;g6&gt;#8886&lt;/g6&gt;https://github.com/crystal-lang/crystal/pull/8886&lt;e11/&gt;で、&lt;g1&gt;Flate&lt;/g1&gt;、&lt;g2&gt;Gzip&lt;/g2&gt;、&lt;g3&gt;Zip&lt;/g3&gt;、そして&lt;g4&gt;Zlib&lt;/g4&gt; が &lt;g5&gt;Compress&lt;/g5&gt; モジュールに移動されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some syntax sugar that contains the &lt;g1&gt;=&lt;/g1&gt; character is available:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174317Z" creationid="makenowjust" creationdate="20200422T174317Z">
        <seg>&lt;g1&gt;=&lt;/g1&gt; を使った代入のためのシンタックスシュガーがいくつか用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some syntax sugar that contains the `=` character is available:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054415Z" creationid="hirofumiwakasugi" creationdate="20150902T054404Z">
        <seg>`=` を使った代入のためのシンタックスシュガーがいくつか用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some time-consuming operations are delegated to it, and while the event loop waits for that operation to finish the program can continue executing other fibers.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T102638Z" creationid="akiji" creationdate="20200428T055014Z">
        <seg>おかげで、たとえ時間のかかる処理がI/Oに対して行われていてイベントループがその終了を待っている状態でも、プログラムは別のファイバを実行することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some types and methods can be annotated with attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T072033Z" creationid="hirofumiwakasugi" creationdate="20150919T071807Z">
        <seg>いくつかの型やメソッドには、属性を付加することでアノテーションを与えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SomeClass.new {{ @def.annotation(MyAnnotation).named_args.double_splat }}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T110755Z" creationid="makenowjust" creationdate="20200510T110755Z">
        <seg>SomeClass.new {{ @def.annotation(MyAnnotation).named_args.double_splat }}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SomeType.new # OK, same as SomeModule::SomeType
some_method  # OK, 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142557Z" creationid="hirofumiwakasugi" creationdate="20150911T142557Z">
        <seg>SomeType.new # OK, same as SomeModule::SomeType
some_method  # OK, 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sometimes shards might just work with another crystal version than the one declared.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T110700Z" creationid="makenowjust" creationdate="20200809T110700Z">
        <seg>しばしば Shards を指定したものとは異なるバージョンの Crystal と共に動作させたい場合があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sometimes the compiler can't infer the type of a block.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T061819Z" creationid="hirofumiwakasugi" creationdate="20150930T061819Z">
        <seg>コンパイラがブロックの型を推論できない場合があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sometimes you need to work directly with strings built from combining string literals with other values.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T130845Z" creationid="akiji" creationdate="20200430T130845Z">
        <seg>しばしば、文字列リテラルと他の値とを組み合わせて文字列を直接構築しなければならいことがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sometimes, we may need the user to input a value.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180724Z" creationid="makenowjust" creationdate="20200413T180724Z">
        <seg>しばしばユーザーに値を入力してもらいたい場合があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>South America</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092118Z" creationid="makenowjust" creationdate="20201217T092118Z">
        <seg>南アメリカ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Spawning a call</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T080021Z" creationid="akiji" creationdate="20200428T080021Z">
        <seg>メソッド呼び出しをファイバとして生成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Spawning a fiber</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T064131Z" creationid="akiji" creationdate="20200428T064131Z">
        <seg>ファイバの生成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Spawning a fiber and waiting for it to complete</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T080900Z" creationid="akiji" creationdate="20200428T080900Z">
        <seg>ファイバを生成してその終了を待つ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Speaking of features, the &lt;g1&gt;OptionParser&lt;/g1&gt; is now allowed to define sub-commands.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T145720Z" creationid="makenowjust" creationdate="20200610T145720Z">
        <seg>さて、&lt;g1&gt;OptionParser&lt;/g1&gt; がサブコマンドを定義できるようになりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Special macros exist that are invoked in some situations as hooks, at compile time:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224208Z" creationid="makenowjust" creationdate="20200509T224150Z">
        <seg>ある状況においてコンパイル時に呼び出される、フックという特別なマクロがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Special macros exist that are invoked in some situations, as hooks:
`inherited`, `included` and `method_missing`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T012437Z" creationid="hirofumiwakasugi" creationdate="20151002T012437Z">
        <seg>ある状況において実行される特別なマクロがフックとして存在します。それらは、`inherited`、`included` そして `method_missing` です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specification</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T150627Z" creationid="makenowjust" creationdate="20210726T150627Z">
        <seg>仕様</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specification of the language.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T151734Z" creationid="makenowjust" creationdate="20210726T151734Z">
        <seg>言語の仕様</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Splat operators can only be used for destructing tuples in method arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T092116Z" creationid="makenowjust" creationdate="20200502T092116Z">
        <seg>スプラット演算子はタプルを引数に展開するときにのみ利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Splats</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T092053Z" creationid="makenowjust" creationdate="20200502T092053Z">
        <seg>スプラット</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Splats and tuples</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160553Z" creationid="makenowjust" creationdate="20200429T153905Z">
        <seg>スプラット展開とタプル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Splatting a tuple</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160626Z" creationid="makenowjust" creationdate="20200429T154735Z">
        <seg>タプルのスプラット展開</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Standard library</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T141325Z" creationid="makenowjust" creationdate="20200610T141325Z">
        <seg>標準ライブラリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Start learning Crystal with the Language Reference</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210829Z" creationid="makenowjust" creationdate="20200413T210829Z">
        <seg>言語リファレンスで Crystal の学習をはじめましょう</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Starting server ...</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164550Z" creationid="makenowjust" creationdate="20200413T164550Z">
        <seg>Starting server ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>State a method's purpose or functionality in the first line.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140007Z" creationid="hirofumiwakasugi" creationdate="20151010T140007Z">
        <seg>最初の行にメソッドの目的と機能を記載する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Static arrays (&lt;g1&gt;StaticArray(Int32, 8)&lt;/g1&gt;, which can also be written as &lt;g2&gt;Int32[8]&lt;/g2&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T032057Z" creationid="makenowjust" creationdate="20200511T032057Z">
        <seg>静的配列 (&lt;g1&gt;StaticArray(Int32, 8)&lt;/g1&gt;、これは &lt;g2&gt;Int32[8]&lt;/g2&gt; のようにも書けます)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>StaticArray</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T120943Z" creationid="makenowjust" creationdate="20200507T120943Z">
        <seg>静的配列 (StaticArray)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stay tuned for events near your location!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T103244Z" creationid="makenowjust" creationdate="20200516T101321Z">
        <seg>あなたの住む場所でのイベントを心待ちにしていてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T191350Z" creationid="makenowjust" creationdate="20200419T191350Z">
        <seg>文字列 (String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String interpolation is also possible with &lt;g1&gt;String#%&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192404Z" creationid="makenowjust" creationdate="20200419T192357Z">
        <seg>文字列の補間は&lt;g1&gt;String#%&lt;/g1&gt;メソッドでも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String interpolation is also possible with &lt;g1&gt;String#%&lt;/g1&gt;https://crystal-lang.org/api/String.html#%25%28other%29-instance-method&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T064146Z" creationid="makenowjust" creationdate="20201213T064146Z">
        <seg>文字列の補間は &lt;g1&gt;String#%&lt;/g1&gt;https://crystal-lang.org/api/String.html#%25%28other%29-instance-method&lt;e2/&gt; でも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String interpolation is also possible with &lt;g1&gt;String#%&lt;/g1&gt;https://crystal-lang.org/api/latest/String.html#%25%28other%29-instance-method&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T081123Z" creationid="makenowjust" creationdate="20210324T081123Z">
        <seg>文字列の補間は &lt;g1&gt;String#%&lt;/g1&gt;https://crystal-lang.org/api/latest/String.html#%25%28other%29-instance-method&lt;e2/&gt; でも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String |</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071434Z" creationid="hirofumiwakasugi" creationdate="20150919T071434Z">
        <seg>String |</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String.build do |io|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192845Z" creationid="makenowjust" creationdate="20200419T192845Z">
        <seg>String.build do |io|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strings in Crystal always contain UTF-8 encoded bytes.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T024705Z" creationid="akiji" creationdate="20200430T132242Z">
        <seg>Crystalの文字列はUTF-8のコードポイントから構成されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Structs</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T171151Z" creationid="makenowjust" creationdate="20200505T171151Z">
        <seg>構造体 (Struct)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Structs and modules can be generic too.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T060955Z" creationid="hirofumiwakasugi" creationdate="20150924T060938Z">
        <seg>構造体とモジュールをジェネリックにすることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Structs are passed by value, so if you pass one to a method and the method makes changes to it, the caller won't see those changes, so they can be bug-prone.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091208Z" creationid="akiji" creationdate="20200430T132118Z">
        <seg>struct は値渡しされるので、メソッドに渡した構造体がそのメソッド内で変更された場合に、メソッドを呼び出した側がその変更を感知できず、バグの温床となりえます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Structs inherit from &lt;g1&gt;Value&lt;/g1&gt; so they are allocated on the stack and passed by value: when passed to methods, returned from methods or assigned to variables, a copy of the value is actually passed (while classes inherit from &lt;g2&gt;Reference&lt;/g2&gt;, are allocated on the heap and passed by reference).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T171630Z" creationid="makenowjust" creationdate="20200505T171630Z">
        <seg>構造体は &lt;g1&gt;Value&lt;/g1&gt; を継承しているので、このインスタンスはスタックに確保され、値渡しされることになります。値渡しというのは、メソッドに引数として渡すときやメソッドから値が返るとき、変数に代入するときに、値のコピーが実際には渡される、ということです (一方 &lt;g2&gt;Reference&lt;/g2&gt; を継承しているクラスのインスタンスの場合は値はヒープに確保され、参照渡しされます)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Structs inherit from &lt;g1&gt;Value&lt;/g1&gt;https://crystal-lang.org/api/Value.html&lt;e3/&gt; so they are allocated on the stack and passed by value: when passed to methods, returned from methods or assigned to variables, a copy of the value is actually passed (while classes inherit from &lt;g2&gt;Reference&lt;/g2&gt;https://crystal-lang.org/api/Reference.html&lt;e4/&gt;, are allocated on the heap and passed by reference).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T091553Z" creationid="makenowjust" creationdate="20200518T091553Z">
        <seg>構造体は &lt;g1&gt;Value&lt;/g1&gt;https://crystal-lang.org/api/Value.html&lt;e3/&gt; を継承しているので、インスタンスはスタックに確保され、値渡しされることになります。値渡しというのは、メソッドに引数として渡すときやメソッドから値が返るとき、変数に代入するときに、値のコピーが実際には渡される、ということです (一方 &lt;g2&gt;Reference&lt;/g2&gt;https://crystal-lang.org/api/Reference.html&lt;e4/&gt; を継承しているクラスのインスタンスの場合は、値はヒープに確保され、参照渡しされます)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Structs inherit from &lt;g1&gt;Value&lt;/g1&gt;https://crystal-lang.org/api/latest/Value.html&lt;e3/&gt; so they are allocated on the stack and passed by value: when passed to methods, returned from methods or assigned to variables, a copy of the value is actually passed (while classes inherit from &lt;g2&gt;Reference&lt;/g2&gt;https://crystal-lang.org/api/latest/Reference.html&lt;e4/&gt;, are allocated on the heap and passed by reference).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T074852Z" creationid="makenowjust" creationdate="20210324T074707Z">
        <seg>構造体は &lt;g1&gt;Value&lt;/g1&gt;https://crystal-lang.org/api/latest/Value.html&lt;e3/&gt; を継承しているので、インスタンスはスタックに確保され、値渡しされることになります。値渡しというのは、メソッドに引数として渡すときやメソッドから値が返るとき、変数に代入するときに、値のコピーが実際には渡される、ということです (一方 &lt;g2&gt;Reference&lt;/g2&gt;https://crystal-lang.org/api/latest/Reference.html&lt;e4/&gt; を継承しているクラスのインスタンスの場合は、値はヒープに確保され、参照渡しされます)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Summary</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170944Z" creationid="makenowjust" creationdate="20200413T170944Z">
        <seg>Summary</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Supplement it with details and usages after that.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140120Z" creationid="hirofumiwakasugi" creationdate="20151010T140120Z">
        <seg>その後で、詳細と使用方法をその後に記載する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Supporter</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T082551Z" creationid="makenowjust" creationdate="20200516T082551Z">
        <seg>サポーター</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Symbol</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T170733Z" creationid="makenowjust" creationdate="20200420T170733Z">
        <seg>シンボル (Symbol)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Symbols are interpreted at compile time and cannot be created dynamically.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T170934Z" creationid="makenowjust" creationdate="20200420T170934Z">
        <seg>シンボルはコンパイル時に解釈されるもので、動的に生成することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Syntax</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210402Z" creationid="makenowjust" creationdate="20200413T210402Z">
        <seg>構文</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Syntax and Semantics</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T235852Z" creationid="makenowjust" creationdate="20200413T235852Z">
        <seg>構文とその意味</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>T</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061138Z" creationid="hirofumiwakasugi" creationdate="20150924T061138Z">
        <seg>T</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>T
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T030349Z" creationid="hirofumiwakasugi" creationdate="20150908T030349Z">
        <seg>T
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>T
end

foo(1)       # =&gt; Int32
foo("hello") # =&gt; String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T135334Z" creationid="makenowjust" creationdate="20200430T135334Z">
        <seg>T
end

foo(1)       # =&gt; Int32
foo("hello") # =&gt; String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>T
end

foo([1, 2])   # =&gt; Int32
foo([1, "a"]) # =&gt; (Int32 | String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T135755Z" creationid="makenowjust" creationdate="20200430T135755Z">
        <seg>T
end

foo([1, 2])   # =&gt; Int32
foo([1, "a"]) # =&gt; (Int32 | String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>TEN #=&gt; 10
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055815Z" creationid="hirofumiwakasugi" creationdate="20150913T055815Z">
        <seg>TEN #=&gt; 10
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>TEN = begin</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T180248Z" creationid="makenowjust" creationdate="20200505T180248Z">
        <seg>TEN = begin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>TODO</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214458Z" creationid="makenowjust" creationdate="20200412T214458Z">
        <seg>TODO</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tells the compiler how to link a C library.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T072342Z" creationid="hirofumiwakasugi" creationdate="20150919T072342Z">
        <seg>C ライブラリのリンクをコンパイラに指示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tells the compiler to never inline a method call.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120035Z" creationid="hirofumiwakasugi" creationdate="20150919T073205Z">
        <seg>メソッドを呼び出しをインライン化にしないようにコンパイラに指示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ten       = 10</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083715Z" creationid="makenowjust" creationdate="20200512T083715Z">
        <seg>Ten       = 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ten = 10</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052947Z" creationid="hirofumiwakasugi" creationdate="20151007T052947Z">
        <seg>Ten = 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ternary if</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080846Z" creationid="makenowjust" creationdate="20200424T080846Z">
        <seg>3項演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ternary operators</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084405Z" creationid="makenowjust" creationdate="20200502T084405Z">
        <seg>3項演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Test against upstream development of dependencies without complicating the development workflow.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T113933Z" creationid="makenowjust" creationdate="20200809T113933Z">
        <seg>開発ワークフローを複雑にすることなく、依存関係の上流の開発版に対するテストをすることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Test your code.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T155912Z" creationid="makenowjust" creationdate="20200527T155659Z">
        <seg>コードのテストを書きましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Testing</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T184716Z" creationid="makenowjust" creationdate="20200413T184716Z">
        <seg>テスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Testing the Code</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T155646Z" creationid="makenowjust" creationdate="20200527T155646Z">
        <seg>コードのテスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Text blocks, for example to show program output, must be surrounded with triple backticks followed by the "text" keyword.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212107Z" creationid="makenowjust" creationdate="20200412T212107Z">
        <seg>例えばプログラムの出力を示すためのテキストのブロックは、「text」というキーワードをつけた3つのバックティック (バッククォート) で囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thank you very much!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164534Z" creationid="makenowjust" creationdate="20200413T164534Z">
        <seg>貢献よろしくお願いします!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thanks for showing interest in Crystal!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084557Z" creationid="makenowjust" creationdate="20200516T084557Z">
        <seg>Crystal に興味を示していただきありがとうございます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That includes the class scope and bodies of class methods and instance methods of the same type the protected method is defined on, as well as all types including or inherinting that type and all types in that namespace.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T112608Z" creationid="makenowjust" creationdate="20200502T112608Z">
        <seg>これはクラスのスコープやクラスメソッドの本体部分、プロテクテッドメソッドを定義した型のインスタンスメソッドを含み、その型を継承したクラスや同じ名前空間のすべて型に対しても同様です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is certainly unexpected.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T175540Z" creationid="makenowjust" creationdate="20200505T175540Z">
        <seg>これは予想していない挙動です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, &lt;g1&gt;T&lt;/g1&gt; becomes the type that was effectively used to instantiate the method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T135720Z" creationid="makenowjust" creationdate="20200430T135354Z">
        <seg>ここで、&lt;g1&gt;T&lt;/g1&gt; は実体化の際に実際に利用された型となっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, `T` becomes the type that was effectively used to instantiate the method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T035919Z" creationid="hirofumiwakasugi" creationdate="20150908T034753Z">
        <seg>つまり、`T` が型を示すため、メソッドを初期化する際に効果的に利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, a variable’s type is the type of the last expression(s) assigned to it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012353Z" creationid="hirofumiwakasugi" creationdate="20150903T012212Z">
        <seg>つまり、変数の型は最後に代入された式によって決定されるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, inside "lib/{project}" each project's directory exists (&lt;g1&gt;src&lt;/g1&gt;, &lt;g2&gt;spec&lt;/g2&gt;, &lt;g3&gt;README.md&lt;/g3&gt; and so on)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T090926Z" creationid="makenowjust" creationdate="20200427T090255Z">
        <seg>つまり、各 "lib/{project}" が &lt;g1&gt;src&lt;/g1&gt; や &lt;g2&gt;spec&lt;/g2&gt;、&lt;g3&gt;README.md&lt;/g3&gt; があるようなプロジェクトのディレクトリ構造になっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, it behaves in the opposite way of an &lt;g4&gt;if&lt;/g4&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090500Z" creationid="makenowjust" creationdate="20200424T090500Z">
        <seg>要するに、&lt;g4&gt;if&lt;/g4&gt;と反対の動きをします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, it behaves in the opposite way of an `if`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022839Z" creationid="hirofumiwakasugi" creationdate="20150903T022839Z">
        <seg>つまり、`if` と反対の働きをします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, the body might never be executed.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052105Z" creationid="hirofumiwakasugi" creationdate="20150905T052105Z">
        <seg>これはつまり、本体が1度も実行されない場合もあるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, the compiler does global type inference and tells you whenever you make a mistake in the usage of a class or method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T044152Z" creationid="hirofumiwakasugi" creationdate="20150905T043752Z">
        <seg>つまり、コンパイラの型推論はグローバルに働き、クラスやメソッドの誤った使用を常に検知できるようになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, without the penalty of changing and restoring the context of the current fiber.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T030138Z" creationid="makenowjust" creationdate="20200611T025852Z">
        <seg>もちろん、現在のファイバのコンテキストに対する変更や復旧が最小であるものが望ましいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, you can have different methods with the same name and different number of arguments and they will be considered as separate methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071013Z" creationid="hirofumiwakasugi" creationdate="20150906T070908Z">
        <seg>上記からわかるように、同じ名前で引数の数が異なるメソッドを定義することが可能で、それぞれが別のメソッドとして扱われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, you can have different methods with the same name and different number of parameters and they will be considered as separate methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T075744Z" creationid="makenowjust" creationdate="20210324T075744Z">
        <seg>上記からわかるように、同じ名前で引数の数が異なるメソッドを定義することが可能で、それぞれが別のメソッドとして扱われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That leaves only &lt;g6&gt;String&lt;/g6&gt; as resulting type of the expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T142607Z" creationid="makenowjust" creationdate="20200430T142607Z">
        <seg>そのため最終的に &lt;g6&gt;String&lt;/g6&gt; のみが式の結果の型として残ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That logic also doesn't work with proc and method calls, including getters and properties, because nilable (or, more generally, union-typed) procs and methods aren't guaranteed to return the same more-specific type on two successive calls.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010159Z" creationid="hirofumiwakasugi" creationdate="20150903T020527Z">
        <seg>Proc やメソッドの呼び出し (ゲッターやプロパティも含む) の場合にも当てはまりません。なぜなら、Nil を許容する (もしくは、複数の型の組み合わせとなるユニオン型の場合がより一般的でしょう) Proc やメソッドの呼び出しの場合、連続した呼び出しであっても、それらが常に同じ型を返すとは限らないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That means that any type that responds to &lt;g1&gt;[]&lt;/g1&gt; with integers can be unpacked in a block argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T191650Z" creationid="makenowjust" creationdate="20200505T191650Z">
        <seg>整数の渡せる &lt;g1&gt;[]&lt;/g1&gt; メソッドを持つどのような型のブロック引数に対してもアンパックができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That means that any type that responds to &lt;g1&gt;[]&lt;/g1&gt; with integers can be unpacked in a block parameter.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094852Z" creationid="makenowjust" creationdate="20210324T094852Z">
        <seg>整数の渡せる &lt;g1&gt;[]&lt;/g1&gt; メソッドを持つどのような型のブロック引数に対してもアンパックは可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That was easy!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T183334Z" creationid="makenowjust" creationdate="20200413T183334Z">
        <seg>簡単でしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That will add the signing key and the repository configuration.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T053547Z" creationid="hirofumiwakasugi" creationdate="20150831T052935Z">
        <seg>これで、署名用のキーとリポジトリの設定が追加されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That's different from methods and function definitions outside a &lt;g2&gt;lib&lt;/g2&gt;, which must start with a lower case letter.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T031713Z" creationid="makenowjust" creationdate="20200511T031713Z">
        <seg>&lt;g2&gt;lib&lt;/g2&gt; の外では関数名は小文字から始める必要があり、ここは異なっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That's why the instance size ends up being 12 and not 8.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T121039Z" creationid="hirofumiwakasugi" creationdate="20150906T120906Z">
        <seg>したがって、最終的にこのインスタンスのサイズは 8 ではなく 12 となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That's why the recommended mechanism to communicate data is using channels and sending messages between them.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103136Z" creationid="akiji" creationdate="20200428T064012Z">
        <seg>このことが、データのやりとりにチャネルを使い、メッセージをチャネル経由で送受信することが推奨される理由です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The "heredoc" finishes in the line that starts with `IDENT`, ignoring leading whitespace.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T062152Z" creationid="hirofumiwakasugi" creationdate="20160204T062108Z">
        <seg>ヒアドキュメントは `IDENT` から始まる行で終わります。このとき、先頭の空白は無視されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g10&gt;require "gzip"&lt;/g10&gt; is still available but will show a deprecation warning.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T150003Z" creationid="makenowjust" creationdate="20200610T150003Z">
        <seg>&lt;g10&gt;require "gzip"&lt;/g10&gt; は依然として有効ですが、警告メッセージが表示されることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;!&lt;/g1&gt; operator returns a &lt;g2&gt;Bool&lt;/g2&gt; that results from negating the &lt;g3&gt;truthiness&lt;/g3&gt; of a value.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200617T111951Z" creationid="makenowjust" creationdate="20200617T111951Z">
        <seg>否定 (&lt;g1&gt;!&lt;/g1&gt;) 演算子は&lt;g3&gt;真かどうか&lt;/g3&gt;を反転させた &lt;g2&gt;Bool&lt;/g2&gt; 型の値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;!&lt;/g1&gt; operator returns a &lt;g2&gt;Bool&lt;/g2&gt; that results from negating the &lt;g3&gt;truthyness&lt;/g3&gt; of a value.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085543Z" creationid="makenowjust" creationdate="20200424T085543Z">
        <seg>否定 (&lt;g1&gt;!&lt;/g1&gt;) 演算子は&lt;g3&gt;真かどうか&lt;/g3&gt;を反転させた&lt;g2&gt;Bool&lt;/g2&gt;型の値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;--release&lt;/g1&gt; flag can be used to enable optimizations.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150702Z" creationid="makenowjust" creationdate="20200419T150702Z">
        <seg>&lt;g1&gt;--release&lt;/g1&gt;というフラグを付けることで最適化を有効にできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;--static&lt;/g1&gt; flag can be used to build a statically-linked executable:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T152727Z" creationid="makenowjust" creationdate="20200419T152556Z">
        <seg>&lt;g1&gt;--static&lt;/g1&gt;フラグは、静的リンクした実行可能ファイルの生成に用います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;&lt;g2&gt;@type&lt;/g2&gt;&lt;/g1&gt; and &lt;g3&gt;&lt;g4&gt;@def&lt;/g4&gt;&lt;/g3&gt; variables can be used to get a &lt;g5&gt;TypeNode&lt;/g5&gt; or &lt;g6&gt;Def&lt;/g6&gt; object to use the &lt;g7&gt;.annotation&lt;/g7&gt; method on.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T112009Z" creationid="makenowjust" creationdate="20200510T112009Z">
        <seg>&lt;g1&gt;&lt;g2&gt;@type&lt;/g2&gt;&lt;/g1&gt; と &lt;g3&gt;&lt;g4&gt;@def&lt;/g4&gt;&lt;/g3&gt; という変数は &lt;g5&gt;TypeNode&lt;/g5&gt; あるいは &lt;g6&gt;Def&lt;/g6&gt; オブジェクトなので &lt;g7&gt;.annotation&lt;/g7&gt; メソッドを使ってアノテーションを取得できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;&lt;g2&gt;crystal build&lt;/g2&gt;&lt;/g1&gt; command builds a binary executable.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150522Z" creationid="makenowjust" creationdate="20200419T150522Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal build&lt;/g2&gt;&lt;/g1&gt;コマンドで実行可能バイナリがビルドされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;&lt;g2&gt;crystal init&lt;/g2&gt;&lt;/g1&gt; command helps to initialize a Crystal project folder, setting
up a basic project structure.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153501Z" creationid="makenowjust" creationdate="20200419T153501Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal init&lt;/g2&gt;&lt;/g1&gt; コマンドは基本的なディレクトリ構成を持った Crystal プロジェクトの初期化をするのに役に立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;=&lt;/g1&gt; operator syntax sugar is also available to setters and indexers.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174726Z" creationid="makenowjust" creationdate="20200422T174726Z">
        <seg>&lt;g1&gt;=&lt;/g1&gt; のシンタックスシュガーはセッターやインデックス代入に対しても有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;@[Flags]&lt;/g1&gt; annotation makes the first constant's value be &lt;g2&gt;1&lt;/g2&gt;, and successive constants are multiplied by &lt;g3&gt;2&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T090718Z" creationid="makenowjust" creationdate="20210324T090654Z">
        <seg>&lt;g1&gt;@[Flags]&lt;/g1&gt; アノテーションを指定することで、最初の定数の値は &lt;g2&gt;1&lt;/g2&gt; になり、以降は前の値を &lt;g3&gt;2&lt;/g3&gt; 倍したものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;@[Flags]&lt;/g1&gt; attribute makes the first constant's value be &lt;g2&gt;1&lt;/g2&gt;, and successive constants are multiplied by &lt;g3&gt;2&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182253Z" creationid="makenowjust" creationdate="20200505T182253Z">
        <seg>&lt;g1&gt;@[Flags]&lt;/g1&gt; 属性を指定することで、最初の定数の値は &lt;g2&gt;1&lt;/g2&gt; になり、以降は前の値を &lt;g3&gt;2&lt;/g3&gt; 倍したものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;@[Link]&lt;/g1&gt; annotation was slightly redesigned.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T133414Z" creationid="makenowjust" creationdate="20200610T133400Z">
        <seg>&lt;g1&gt;@[Link]&lt;/g1&gt; アノテーションは少しだけ再デザインされました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;@[ThreadLocal]&lt;/g1&gt; annotation can be applied to class variables and C external variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100010Z" creationid="makenowjust" creationdate="20210324T100010Z">
        <seg>&lt;g1&gt;@[ThreadLocal]&lt;/g1&gt; アノテーションはクラス変数と C の外部変数に対して適用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;@[ThreadLocal]&lt;/g1&gt; attribute can be applied to class variables and C external variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T115016Z" creationid="makenowjust" creationdate="20200510T115016Z">
        <seg>&lt;g1&gt;@[ThreadLocal]&lt;/g1&gt; アノテーションはクラス変数とCの外部変数に対して適用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;Array#map&lt;/g1&gt; method uses the block's type as the generic type for the Array.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T115853Z" creationid="makenowjust" creationdate="20200512T115853Z">
        <seg>&lt;g1&gt;Array#map&lt;/g1&gt; メソッドはブロックの返す値の型を配列のジェネリック型とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;JSON.mapping&lt;/g1&gt; and &lt;g2&gt;YAML.mapping&lt;/g2&gt; migrated to their own packages: &lt;g3&gt;github:crystal-lang/json_mapping.cr&lt;/g3&gt;https://github.com/crystal-lang/json_mapping.cr&lt;e8/&gt; and &lt;g4&gt;github:crystal-lang/yaml_mapping.cr&lt;/g4&gt;https://github.com/crystal-lang/yaml_mapping.cr&lt;e9/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T151856Z" creationid="makenowjust" creationdate="20200610T151856Z">
        <seg>&lt;g1&gt;JSON.mapping&lt;/g1&gt; と &lt;g2&gt;YAML.mapping&lt;/g2&gt; を使っている場合は、&lt;g3&gt;github:crystal-lang/json_mapping.cr&lt;/g3&gt;https://github.com/crystal-lang/json_mapping.cr&lt;e8/&gt; と &lt;g4&gt;github:crystal-lang/yaml_mapping.cr&lt;/g4&gt;https://github.com/crystal-lang/yaml_mapping.cr&lt;e9/&gt; に移行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;Nil&lt;/g1&gt; type is used to represent the absence of a value, similar to &lt;g2&gt;null&lt;/g2&gt; in other languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000904Z" creationid="makenowjust" creationdate="20200414T000713Z">
        <seg>&lt;g1&gt;Nil&lt;/g1&gt; 型は値が存在しないことを表す、他の言語にある&lt;g2&gt;null&lt;/g2&gt;のようなものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;Nil&lt;/g1&gt;http://crystal-lang.org/api/Nil.html&lt;e3/&gt; type is used to represent the absence of a value, similar to &lt;g2&gt;null&lt;/g2&gt; in other languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T085546Z" creationid="makenowjust" creationdate="20200518T085546Z">
        <seg>&lt;g1&gt;Nil&lt;/g1&gt;http://crystal-lang.org/api/Nil.html&lt;e3/&gt; 型は値が存在しないことを表す、他の言語にある &lt;g2&gt;null&lt;/g2&gt; のようなものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;Nil&lt;/g1&gt;https://crystal-lang.org/api/latest/Nil.html&lt;e3/&gt; type is used to represent the absence of a value, similar to &lt;g2&gt;null&lt;/g2&gt; in other languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T082333Z" creationid="makenowjust" creationdate="20210324T082333Z">
        <seg>&lt;g1&gt;Nil&lt;/g1&gt;https://crystal-lang.org/api/latest/Nil.html&lt;e3/&gt; 型は値が存在しないことを表す、他の言語にある &lt;g2&gt;null&lt;/g2&gt; のようなものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;TypeNode.instance_vars&lt;/g1&gt; can be used to get an array of instance variable &lt;g2&gt;MetaVar&lt;/g2&gt; objects that would allow reading annotations defined on those instance variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T112244Z" creationid="makenowjust" creationdate="20200510T112244Z">
        <seg>&lt;g1&gt;TypeNode.instance_vars&lt;/g1&gt; を使うとインスタンス変数を表す &lt;g2&gt;MetaVar&lt;/g2&gt; の配列が取得できます。そして、これらのオブジェクトからそのインスタンス変数に与えられたアノテーションを取得することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;allocate&lt;/g1&gt; class method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T093448Z" creationid="makenowjust" creationdate="20200512T093448Z">
        <seg>&lt;g1&gt;allocate&lt;/g1&gt; クラスメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;args&lt;/g1&gt; method can be used to read all positional arguments on an annotation as a &lt;g2&gt;TupleLiteral&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T111237Z" creationid="makenowjust" creationdate="20200510T111237Z">
        <seg>&lt;g1&gt;args&lt;/g1&gt; メソッドを使うと、アノテーションのすべての位置指定の引数を &lt;g2&gt;TupleLiteral&lt;/g2&gt; として取得できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;as&lt;/g1&gt; pseudo-method also allows to cast between pointer types:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T115444Z" creationid="makenowjust" creationdate="20200512T115444Z">
        <seg>&lt;g1&gt;as&lt;/g1&gt; 疑似メソッドはポインタ型同士のキャストも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;as&lt;/g1&gt; pseudo-method can be used to cast an expression to a "bigger" type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T115720Z" creationid="makenowjust" creationdate="20200512T115712Z">
        <seg>&lt;g1&gt;as&lt;/g1&gt; 疑似メソッドは、ある式をより「大きな」型へキャストするために使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;as&lt;/g1&gt; pseudo-method performs a runtime check: if &lt;g2&gt;a&lt;/g2&gt; wasn't an &lt;g3&gt;Int32&lt;/g3&gt;, an &lt;g4&gt;exception&lt;/g4&gt; is raised.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T114507Z" creationid="makenowjust" creationdate="20200512T114420Z">
        <seg>&lt;g1&gt;as&lt;/g1&gt; 疑似メソッドは実行時にチェックを行うため、もし &lt;g2&gt;a&lt;/g2&gt; が &lt;g3&gt;Int32&lt;/g3&gt; ではないときには&lt;g4&gt;例外&lt;/g4&gt;が発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;as&lt;/g1&gt; pseudo-method restricts the types of an expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T114424Z" creationid="makenowjust" creationdate="20200512T114143Z">
        <seg>&lt;g1&gt;as&lt;/g1&gt; 疑似メソッドはある式の型に対して制約を与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;as?&lt;/g1&gt; pseudo-method is similar to &lt;g2&gt;as&lt;/g2&gt;, except that it returns &lt;g3&gt;nil&lt;/g3&gt; instead of raising an exception when the type doesn't match.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T120741Z" creationid="makenowjust" creationdate="20200512T120741Z">
        <seg>&lt;g1&gt;as?&lt;/g1&gt; という疑似メソッドは &lt;g2&gt;as&lt;/g2&gt; に似ていますが、型がマッチしなかった際に例外を投げるのではなく &lt;g3&gt;nil&lt;/g3&gt; を返すという点が異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;conditional operator (&lt;g2&gt;?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085101Z" creationid="makenowjust" creationdate="20200502T084430Z">
        <seg>&lt;g1&gt;条件分岐をする演算子 (&lt;g2&gt;? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;crystal build&lt;/g1&gt; command builds a dynamically-linked binary executable.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155040Z" creationid="makenowjust" creationdate="20200419T155040Z">
        <seg>&lt;g1&gt;crystal build&lt;/g1&gt;コマンドは動的リンクした実行可能バイナリをビルドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;crystal docs&lt;/g1&gt; command generates API documentation from inline docstrings in Crystal files (see &lt;g2&gt;&lt;g3&gt;Documenting Code&lt;/g3&gt;&lt;/g2&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T102028Z" creationid="makenowjust" creationdate="20210324T102028Z">
        <seg>&lt;g1&gt;crystal docs&lt;/g1&gt; コマンドは Crystal のソースコード中のコメントから API ドキュメントを生成します (詳しくは &lt;g2&gt;&lt;g3&gt;コードのドキュメント化&lt;/g3&gt;&lt;/g2&gt; を参照)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;crystal docs&lt;/g1&gt; command generates API documentation from inline docstrings in Crystal files (see &lt;g2&gt;documenting code&lt;/g2&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161638Z" creationid="makenowjust" creationdate="20200419T161638Z">
        <seg>&lt;g1&gt;crystal docs&lt;/g1&gt;コマンドは Crystal のソースコード中のコメントから API ドキュメントを生成します。 (詳しくは&lt;g2&gt;コードのドキュメント化&lt;/g2&gt;を参照).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;crystal env&lt;/g1&gt; command prints environment variables used by Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163204Z" creationid="makenowjust" creationdate="20200419T163204Z">
        <seg>&lt;g1&gt;crystal env&lt;/g1&gt; コマンドは Crystal が使う環境変数を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;crystal eval&lt;/g1&gt; command reads Crystal source code from command line or stdin, compiles it to a binary executable and immediately runs it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155922Z" creationid="makenowjust" creationdate="20200419T155922Z">
        <seg>&lt;g1&gt;crystal eval&lt;/g1&gt;コマンドは Crystal のソースコードをコマンドラインか標準入力から読み込んで、それを実行可能ファイルにコンパイルして即時に実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;crystal init&lt;/g1&gt; command initializes a Crystal project folder.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161040Z" creationid="makenowjust" creationdate="20200419T161040Z">
        <seg>&lt;g1&gt;crystal init&lt;/g1&gt;コマンドは Crystal プロジェクトに使うフォルダを初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;crystal play&lt;/g1&gt; command starts a webserver serving an interactive Crystal playground.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165321Z" creationid="makenowjust" creationdate="20200419T165321Z">
        <seg>&lt;g1&gt;crystal play&lt;/g1&gt; コマンドは対話的な Crystal のプレイグラウンドを提供する Web サーバーを起動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;crystal spec&lt;/g1&gt; command compiles and runs a Crystal spec suite.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163508Z" creationid="makenowjust" creationdate="20200419T163508Z">
        <seg>&lt;g1&gt;crystal spec&lt;/g1&gt; コマンドは Crystal の spec のコンパイルと実行を一度に行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;crystal tool format&lt;/g1&gt; command applies default format to Crystal source files.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165806Z" creationid="makenowjust" creationdate="20200419T165806Z">
        <seg>&lt;g1&gt;crystal tool format&lt;/g1&gt; コマンドは Crystal のソースコードに標準的なフォーマットを適用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;crystal version&lt;/g1&gt; command prints the Crystal version, LLVM version and default target triple.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160737Z" creationid="makenowjust" creationdate="20200419T160737Z">
        <seg>&lt;g1&gt;crystal version&lt;/g1&gt;コマンドは Crystal のバージョンや LLVM のバージョン、そしてデフォルトで使うターゲットトリプルを出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;finalize&lt;/g1&gt; method will only be invoked once the object has been
fully initialized via the &lt;g2&gt;initialize&lt;/g2&gt; method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T140344Z" creationid="makenowjust" creationdate="20200504T140253Z">
        <seg>&lt;g1&gt;finalize&lt;/g1&gt; メソッドが呼び出さされるのは、オブジェクトが &lt;g2&gt;initialize&lt;/g2&gt; メソッド経由で完全に初期化されていた場合に限ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;gets&lt;/g1&gt; calls will block the fibers and tell the Event Loop to continue from there if data comes.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T071442Z" creationid="akiji" creationdate="20200429T134238Z">
        <seg>&lt;g1&gt;gets&lt;/g1&gt; の呼び出しは、そのファイバをブロックして、イベントループに読み出す値が到着したら再開してくれるように伝えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;index&lt;/g1&gt; variable in the above example is optional.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215304Z" creationid="makenowjust" creationdate="20200509T215304Z">
        <seg>上記の &lt;g1&gt;index&lt;/g1&gt; 変数は任意です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;instance_sizeof&lt;/g1&gt; expression returns an &lt;g2&gt;Int32&lt;/g2&gt; with the instance size of a given class.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T015749Z" creationid="makenowjust" creationdate="20200511T015749Z">
        <seg>&lt;g1&gt;instance_sizeof&lt;/g1&gt; は与えられたクラスのインスタンスのサイズを &lt;g2&gt;Int32&lt;/g2&gt; で返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;named_args&lt;/g1&gt; method can be used to read all key/value pairs on an annotation as a &lt;g2&gt;NamedTupleLiteral&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T110407Z" creationid="makenowjust" creationdate="20200510T110407Z">
        <seg>&lt;g1&gt;named_args&lt;/g1&gt; メソッドを使うと、アノテーションのすべてのキー/値のペアを &lt;g2&gt;NamedTupleLiteral&lt;/g2&gt; として取得できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;next&lt;/g1&gt; expression accepts arguments, and these give the value of the &lt;g2&gt;yield&lt;/g2&gt; expression that invoked the block:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190825Z" creationid="makenowjust" creationdate="20200505T190825Z">
        <seg>&lt;g1&gt;next&lt;/g1&gt; 式は引数を受け取ることが可能です。そのとき、受け取った値はそのブロックを実行した &lt;g2&gt;yield&lt;/g2&gt; 式の値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;next&lt;/g1&gt; expression inside a block exits early from the block (not the method).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190735Z" creationid="makenowjust" creationdate="20200505T190735Z">
        <seg>ブロックの中に&lt;g1&gt;next&lt;/g1&gt; 式があるとそこで、 (メソッドではなく) ブロックを抜けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;pointerof&lt;/g1&gt; expression returns a &lt;g2&gt;Pointer&lt;/g2&gt; that points to the contents of a variable or instance variable.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T015205Z" creationid="makenowjust" creationdate="20200511T015205Z">
        <seg>&lt;g1&gt;pointerof&lt;/g1&gt; は、変数やインスタンス変数の格納場所を示す &lt;g2&gt;Pointer&lt;/g2&gt; を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;pointerof&lt;/g1&gt; expression returns a &lt;g2&gt;Pointer&lt;/g2&gt;http://crystal-lang.org/api/Pointer.html&lt;e3/&gt; that points to the contents of a variable or instance variable.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T090947Z" creationid="makenowjust" creationdate="20200518T090947Z">
        <seg>&lt;g1&gt;pointerof&lt;/g1&gt; は、変数やインスタンス変数の格納場所を示す &lt;g2&gt;Pointer&lt;/g2&gt;http://crystal-lang.org/api/Pointer.html&lt;e3/&gt; を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;pointerof&lt;/g1&gt; expression returns a &lt;g2&gt;Pointer&lt;/g2&gt;https://crystal-lang.org/api/latest/Pointer.html&lt;e3/&gt; that points to the contents of a variable or instance variable.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T075628Z" creationid="makenowjust" creationdate="20210324T075628Z">
        <seg>&lt;g1&gt;pointerof&lt;/g1&gt; は、変数やインスタンス変数の格納場所を示す &lt;g2&gt;Pointer&lt;/g2&gt;https://crystal-lang.org/api/latest/Pointer.html&lt;e3/&gt; を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;print_methods&lt;/g1&gt; macro will be run as soon as it is encountered - and will print an empty list as there are no methods defined at that point.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T225049Z" creationid="makenowjust" creationdate="20200509T225027Z">
        <seg>&lt;g1&gt;print_methods&lt;/g1&gt; マクロは現れたところですぐさま実行され、空の配列を表示します。つまり、この時点ではメソッドは何も定義されていないということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;run&lt;/g1&gt; command compiles a source file to a binary executable and immediately runs it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154454Z" creationid="makenowjust" creationdate="20200419T154454Z">
        <seg>&lt;g1&gt;run&lt;/g1&gt;コマンドはソースコードを実行可能バイナリにコンパイルして、即時にそれを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;run&lt;/g1&gt; command compiles the source file &lt;g2&gt;hello_world.cr&lt;/g2&gt; to a binary executable in a temporary location
and immediately executes it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150428Z" creationid="makenowjust" creationdate="20200419T150428Z">
        <seg>&lt;g1&gt;run&lt;/g1&gt;コマンドは&lt;g2&gt;hello_world.cr&lt;/g2&gt;というソースコードをその場限りの実行可能バイナリにコンパイルして、即時にそれを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;sizeof&lt;/g1&gt; expression returns an &lt;g2&gt;Int32&lt;/g2&gt; with the size in bytes of a given type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T015416Z" creationid="makenowjust" creationdate="20200511T015416Z">
        <seg>&lt;g1&gt;sizeof&lt;/g1&gt; は与えられた型のバイト数を &lt;g2&gt;Int32&lt;/g2&gt; で返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;thrice&lt;/g1&gt; method didn't execute the &lt;g2&gt;puts "Before 3"&lt;/g2&gt; expression because of the &lt;g3&gt;break&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190254Z" creationid="makenowjust" creationdate="20200505T190254Z">
        <seg>&lt;g3&gt;break&lt;/g3&gt; があるため、&lt;g1&gt;thrice&lt;/g1&gt; メソッドが &lt;g2&gt;puts "Before 3"&lt;/g2&gt; を実行することはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;typeof&lt;/g1&gt; expression returns the type of an expression:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T121511Z" creationid="makenowjust" creationdate="20200512T121511Z">
        <seg>&lt;g1&gt;typeof&lt;/g1&gt; 式はある式の型を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;underscore&lt;/g1&gt; is also allowed as a block parameter:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094539Z" creationid="makenowjust" creationdate="20210324T094539Z">
        <seg>ブロック引数に&lt;g1&gt;アンダースコア&lt;/g1&gt;も使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;yield&lt;/g1&gt; expression is similar to a call and can receive arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184715Z" creationid="makenowjust" creationdate="20200505T184715Z">
        <seg>&lt;g1&gt;yield&lt;/g1&gt; 式はメソッド呼び出しと似ていて、引数を受け取ることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;yield&lt;/g1&gt; expression itself has a value: the last expression of the block.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185843Z" creationid="makenowjust" creationdate="20200505T185843Z">
        <seg>&lt;g1&gt;yield&lt;/g1&gt; 式自体も値を持っていて、それはブロックの最後の値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g2&gt;--&lt;/g2&gt; will split compiler options from program options.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T131439Z" creationid="makenowjust" creationdate="20200610T131439Z">
        <seg>&lt;g2&gt;--&lt;/g2&gt; はコンパイラのオプションとプログラムのオプションを切り分けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g3&gt;+&lt;/g3&gt; means it's a virtual type, meaning "any class that inherits from &lt;g4&gt;Animal&lt;/g4&gt;, including &lt;g5&gt;Animal&lt;/g5&gt;".</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T110722Z" creationid="makenowjust" creationdate="20200504T110722Z">
        <seg>この &lt;g3&gt;+&lt;/g3&gt; は virtual 型であることを意味しています。これは「&lt;g4&gt;Animal&lt;/g4&gt; を継承している任意のクラス (&lt;g5&gt;Animal&lt;/g5&gt; 型自身を含む)」を表しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g3&gt;HTTP::Request#remote_address&lt;/g3&gt; type was changed to &lt;g4&gt;Socket::Address?&lt;/g4&gt; in &lt;g5&gt;#9210&lt;/g5&gt;https://github.com/crystal-lang/crystal/pull/9210&lt;e7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T152609Z" creationid="makenowjust" creationdate="20200610T152552Z">
        <seg>&lt;g5&gt;#9210&lt;/g5&gt;https://github.com/crystal-lang/crystal/pull/9210&lt;e7/&gt;で、&lt;g3&gt;HTTP::Request#remote_address&lt;/g3&gt; の型を &lt;g4&gt;Socket::Address?&lt;/g4&gt; に変更しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g3&gt;crystal env VARIABLE&lt;/g3&gt; is still the same.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T131720Z" creationid="makenowjust" creationdate="20200610T131720Z">
        <seg>また、&lt;g3&gt;crystal env VARIABLE&lt;/g3&gt; はこれまでの通りです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g3&gt;lib&lt;/g3&gt; directory is now always included by the compiler.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T134642Z" creationid="makenowjust" creationdate="20200610T134642Z">
        <seg>&lt;g3&gt;lib&lt;/g3&gt; ディレクトリはコンパイラによって常に含まれるようになりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g6&gt;Char&lt;/g6&gt; type in Crystal is a unicode codepoint so it is represented by four bytes, making it similar to an &lt;g7&gt;Int32&lt;/g7&gt;, not to an &lt;g8&gt;UInt8&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T071601Z" creationid="makenowjust" creationdate="20201213T071601Z">
        <seg>Crystal の &lt;g6&gt;Char&lt;/g6&gt; 型は Unicode のコードポイントであるため、4バイトで表現されます。つまり &lt;g8&gt;UInt8&lt;/g8&gt; ではなく &lt;g7&gt;Int32&lt;/g7&gt; に近いです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g7&gt;Char&lt;/g7&gt; type in Crystal is a unicode codepoint so it is represented by four bytes, making it similar to an &lt;g8&gt;Int32&lt;/g8&gt;, not to an &lt;g9&gt;UInt8&lt;/g9&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T032629Z" creationid="makenowjust" creationdate="20200511T032629Z">
        <seg>Crystal の &lt;g7&gt;Char&lt;/g7&gt; 型は Unicode のコードポイントであるため、4バイトで表現されます。つまり &lt;g9&gt;UInt8&lt;/g9&gt; ではなく &lt;g8&gt;Int32&lt;/g8&gt; に近いです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C &lt;g2&gt;setjmp&lt;/g2&gt; is an example of such a function.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120133Z" creationid="makenowjust" creationdate="20200510T120133Z">
        <seg>そのような関数としては、C言語の &lt;g2&gt;setjmp&lt;/g2&gt; があげられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C `setjmp` is an example of such a function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073440Z" creationid="hirofumiwakasugi" creationdate="20150919T073440Z">
        <seg>こういった関数の例としては C の `setjmp` があげられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C library will of course store the callback, but Crystal's GC has no way of knowing that.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T091123Z" creationid="makenowjust" creationdate="20200512T091123Z">
        <seg>C のライブラリも当然コールバックを保存しているでしょう。しかし Crystal の GC がそれを知る術はないのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C name can be put in quotes to be able to write a name that is not a valid identifier:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T031850Z" creationid="makenowjust" creationdate="20200511T031850Z">
        <seg>C での名前が有効な識別子ではない場合、ダブルクオートで囲って記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Crystal &lt;g1&gt;Standard Library&lt;/g1&gt; provides macros which simplify the definition of getter and setter methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T124526Z" creationid="makenowjust" creationdate="20200427T124526Z">
        <seg>Crystal の&lt;g1&gt;標準ライブラリ&lt;/g1&gt; にはゲッターとセッターを完結に定義するためのマクロがいくつかあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Crystal &lt;g1&gt;Standard Library&lt;/g1&gt;https://crystal-lang.org/api&lt;e2/&gt; provides macros which simplify the definition of getter and setter methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T090723Z" creationid="makenowjust" creationdate="20200518T090723Z">
        <seg>Crystal の&lt;g1&gt;標準ライブラリ&lt;/g1&gt;https://crystal-lang.org/api&lt;e2/&gt;にはゲッターとセッターを簡潔に定義するためのマクロがいくつかあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Crystal Programming Language</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075420Z" creationid="makenowjust" creationdate="20200516T075420Z">
        <seg>プログラミング言語 Crystal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Crystal compiler doesn't run on Windows &lt;g1&gt;yet&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112609Z" creationid="makenowjust" creationdate="20200518T112609Z">
        <seg>Crystal のコンパイラは&lt;g1&gt;まだ&lt;/g1&gt;Windowsでは動作しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Crystal compiler will by default use &lt;g1&gt;pkg-config&lt;/g1&gt; to find the locations of libraries to link with.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112217Z" creationid="makenowjust" creationdate="20200518T112217Z">
        <seg>Crystal はデフォルトでリンクするライブラリを探すのに &lt;g1&gt;pkg-config&lt;/g1&gt; を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Crystal snap requires to be run in classic confinement.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T113414Z" creationid="makenowjust" creationdate="20200518T113414Z">
        <seg>Crystal の snap は classic な制限環境下を要求します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Crystal standard library includes some pre-defined annotations:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114549Z" creationid="makenowjust" creationdate="20200510T114549Z">
        <seg>Crystal の標準ライブラリにはこれらの事前に定義されたアノテーションがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Event Loop, which is just another fiber, being in charge of async tasks, like for example files, sockets, pipes, signals and timers (like doing a &lt;g1&gt;sleep&lt;/g1&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T065624Z" creationid="akiji" creationdate="20200428T055714Z">
        <seg>ファイルやソケット、パイプ、シグナル、タイマ（&lt;g1&gt;sleep&lt;/g1&gt;したときなど）による非同期タスクを扱うための「イベントループ」（これもファイバの1種）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The OpenSSL client context is now configured by default with less strict ciphers compatibility for convenience.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200621T083915Z" creationid="makenowjust" creationdate="20200621T083915Z">
        <seg>OpenSSL クライアントのコンテキストは利便性のため、デフォルトでやや厳格でない暗号も設定されるようになりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Proc type</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171411Z" creationid="makenowjust" creationdate="20200422T171411Z">
        <seg>Proc の型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Program</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T095903Z" creationid="makenowjust" creationdate="20200427T095903Z">
        <seg>プログラム</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Runtime Scheduler</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T062903Z" creationid="akiji" creationdate="20200428T062903Z">
        <seg>ランタイムスケジューラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Runtime Scheduler will coordinate fibers and channels for their communication.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103706Z" creationid="akiji" creationdate="20200428T055740Z">
        <seg>ラインタイムスケジューラはデータをやりとるするためにファイバとチャネルの間を調整します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Runtime Scheduler, in charge of executing all fibers when the time is right.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T055641Z" creationid="akiji" creationdate="20200428T055641Z">
        <seg>すべてのファイバを適切なタイミングで起動するための「ランタイムスケジューラ」</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The String version just creates a new &lt;g1&gt;Exception&lt;/g1&gt; instance with that message.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103323Z" creationid="makenowjust" creationdate="20200506T103323Z">
        <seg>String の場合は、単純にそのメッセージを含んだ &lt;g1&gt;Exception&lt;/g1&gt; のインスタンスを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The String version just creates a new &lt;g1&gt;Exception&lt;/g1&gt;http://crystal-lang.org/api/Exception.html&lt;e2/&gt; instance with that message.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T084427Z" creationid="makenowjust" creationdate="20200518T084427Z">
        <seg>文字列の場合は、単純にそのメッセージを含んだ &lt;g1&gt;Exception&lt;/g1&gt;http://crystal-lang.org/api/Exception.html&lt;e2/&gt; のインスタンスを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The String version just creates a new &lt;g1&gt;Exception&lt;/g1&gt;https://crystal-lang.org/api/latest/Exception.html&lt;e2/&gt; instance with that message.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T090004Z" creationid="makenowjust" creationdate="20210324T090004Z">
        <seg>文字列の場合は、単純にそのメッセージを含んだ &lt;g1&gt;Exception&lt;/g1&gt;https://crystal-lang.org/api/latest/Exception.html&lt;e2/&gt; のインスタンスを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The String version just creates a new [Exception](http://crystal-lang.org/api/Exception.html) instance with that message.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011436Z" creationid="hirofumiwakasugi" creationdate="20150907T011436Z">
        <seg>String の場合は、単純にそのメッセージを含んだ [Exception](http://crystal-lang.org/api/Exception.html) のインスタンスを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The [Nil](http://crystal-lang.org/api/Nil.html) type has only one possible value:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T050944Z" creationid="hirofumiwakasugi" creationdate="20150901T050932Z">
        <seg>[Nil](http://crystal-lang.org/api/Nil.html) 型にはたった1つの値しか存在しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `+` means it's a virtual type: because a `Dog` and a `Cat` were assigned to `@pet`, instead of having the type be `Dog | Cat` the compiler simplified it to `Animal+`, meaning "any class that inherits from `Animal`, including `Animal`".</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140035Z" creationid="hirofumiwakasugi" creationdate="20151009T140035Z">
        <seg>この `+` は  virtual 型であることを示しています。`@pet` には `Dog` と `Cat` が代入されていますが、このときコンパイラはその型を `Dog | Cat` ではなく `Animal+` と単純化します。これは、`Animal` を継承したすべてのクラス (`Animal` 自身も含む) を意味しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `+` means it's a virtual type: because a `Dog` and a `Cat` were assigned to `@pet`, instead of having the type be `Dog | Cat` the compiler simplified it to `Animal+`, meaning "any class that inhertis from `Animal`, including `Animal`".</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T032803Z" creationid="hirofumiwakasugi" creationdate="20150910T032331Z">
        <seg>この `+` は  virtual 型であることを示しています。`@pet` には `Dog` と `Cat` が代入されていますが、このときコンパイラはその型を `Dog | Cat` ではなく `Animal+` と単純化します。これは、`Animal` を継承したすべてのクラス (`Animal` 自身も含む) を意味しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `=` operator syntax sugar is also available to setters and indexers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054952Z" creationid="hirofumiwakasugi" creationdate="20150902T054952Z">
        <seg>セッターやインデックス指定代入の場合にも、`=` 演算子のシンタックスシュガーを利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `@[Flags]` attribute makes the first constant's value be `1`, and successive constants are multiplied by `2`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150915T045327Z" creationid="hirofumiwakasugi" creationdate="20150914T114732Z">
        <seg>`@[Flags]` 属性を指定すると、最初の定数の値が `1` になり、以降はそれぞれ前の値を2倍したものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `@[ThreadLocal]` attribute can be applied to global variables and class variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T072437Z" creationid="hirofumiwakasugi" creationdate="20150919T072437Z">
        <seg>`@[ThreadLocal]` 属性はグローバル変数とクラス変数に対して適用することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `Array#map` method uses the block's type as the generic type for the Array.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T061539Z" creationid="hirofumiwakasugi" creationdate="20150930T061414Z">
        <seg>`Array#map` メソッドはブロック内の型を配列のジェネリック型とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `Char` type in Crystal is a unicode codepoint so it is represented by four bytes, making it similar to an `Int32`, not to an `UInt8`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T042934Z" creationid="hirofumiwakasugi" creationdate="20151005T042619Z">
        <seg>Crystal  の `Char` 型は Unicode のコードポイントであるため、4バイトで表現されます。つまり、`UInt8` ではなく `Int32` に近いです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `as` expression also allows to cast between pointer types:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T015732Z" creationid="hirofumiwakasugi" creationdate="20150930T015530Z">
        <seg>`as` 式はポインタ型同士のキャストも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `as` expression can be used to cast an expression to a "bigger" type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T061300Z" creationid="hirofumiwakasugi" creationdate="20150930T061006Z">
        <seg>`as` 式は、ある式をより「大きな」型へキャストするために使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `as` expression performs a runtime check: if `a` wasn't an `Int32`, an [exception](exception_handling.html) is raised.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T015301Z" creationid="hirofumiwakasugi" creationdate="20150930T014930Z">
        <seg>`as` 式はランタイムにチェックを行うため、もし `a` が `Int32` ではないときには[例外](exception_handling.html)が発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `as` expression restricts the types of an expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T014200Z" creationid="hirofumiwakasugi" creationdate="20150930T014200Z">
        <seg>`as` 式はある式の型に対して制約を与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `index` variable in the above example is optional.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040412Z" creationid="hirofumiwakasugi" creationdate="20151001T040412Z">
        <seg>上記の `index` 変数はオプションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `instance_sizeof` expression returns an `Int32` with the instance size of a given class.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T120605Z" creationid="hirofumiwakasugi" creationdate="20150906T120605Z">
        <seg>`instance_sizeof` は与えられたクラスのインスタンスのサイズを `Int32` で返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `next` expression accepts arguments, and these give the value of the `yield` expression that invoked the block:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030048Z" creationid="hirofumiwakasugi" creationdate="20150916T030048Z">
        <seg>`next` 式は引数を受け取ることが可能です。そのとき、受け取った値はそのブロックを実行した `yield` 式の値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `next` expression inside a block exits early from the block (not the method).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025657Z" creationid="hirofumiwakasugi" creationdate="20150916T025559Z">
        <seg>ブロックの中に `next` 式があるとそこで (メソッドではなく) ブロックを抜けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `pointerof` expression returns a [Pointer](http://crystal-lang.org/api/Pointer.html) that points to the contents of a variable or instance variable.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035631Z" creationid="hirofumiwakasugi" creationdate="20150906T035018Z">
        <seg>`pointerof` は、変数やインスタンス変数の格納場所を指す[ポインタ](http://crystal-lang.org/api/Pointer.html)を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `sizeof` expression returns an `Int32` with the size in bytes of a given type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035345Z" creationid="hirofumiwakasugi" creationdate="20150906T035227Z">
        <seg>`sizeof` は与えられた型のバイト数を `Int32` で返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `thrice` method didn't execute the `puts "Before 3"` expression because of the `break`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024524Z" creationid="hirofumiwakasugi" creationdate="20150916T024447Z">
        <seg>`break` があるため、`thrice` メソッドが `puts "Before 3"` を実行することはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `typeof` expression returns the type of an expression:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062507Z" creationid="hirofumiwakasugi" creationdate="20150930T062507Z">
        <seg>`typeof` 式は、ある式の型を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `yield` expression is similar to a call and can receive arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T015722Z" creationid="hirofumiwakasugi" creationdate="20150916T015722Z">
        <seg>`yield` 式はメソッド呼び出しと似ていて、引数を受け取ることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `yield` expression itself has a value: the last expression of the block.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023452Z" creationid="hirofumiwakasugi" creationdate="20150916T023452Z">
        <seg>`yield` 式自体も値を持っていて、それはブロックの最後の式となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above **doesn’t** work with instance variables, class variables or global variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022348Z" creationid="hirofumiwakasugi" creationdate="20150903T022348Z">
        <seg>ただ、インスタンス変数、クラス変数、そしてグローバル変数の場合には、上記が **当てはまらない** ことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above &lt;g1&gt;doesn’t&lt;/g1&gt; work with instance variables or class variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083204Z" creationid="makenowjust" creationdate="20200424T083204Z">
        <seg>そしてこれはインスタンス変数やクラス変数では&lt;g1&gt;機能しません&lt;/g1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above also works if there are ands (&lt;g1&gt;&amp;&amp;&lt;/g1&gt;) in the condition:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083611Z" creationid="makenowjust" creationdate="20200424T083119Z">
        <seg>これは、条件でかつ (&lt;g1&gt;&amp;&amp;&lt;/g1&gt;) が使われた場合も同様に機能します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above also works if there are ands (`&amp;&amp;`) in the condition:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022315Z" creationid="hirofumiwakasugi" creationdate="20150903T022220Z">
        <seg>上記は、条件で「かつ (`&amp;&amp;`)」が使われた場合にも同様です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above code captures the block of code passed to &lt;g1&gt;int_to_int&lt;/g1&gt; in the &lt;g2&gt;block&lt;/g2&gt; variable, and returns it from the method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T073702Z" creationid="makenowjust" creationdate="20200506T073702Z">
        <seg>上記のコードでは、&lt;g1&gt;int_to_int&lt;/g1&gt; に渡されたコードブロックを &lt;g2&gt;block&lt;/g2&gt; という変数に捕捉し、それをメソッドの戻り値としています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above code captures the block of code passed to `int_to_int` in the `block` variable, and returns it from the method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T040547Z" creationid="hirofumiwakasugi" creationdate="20150916T040132Z">
        <seg>上記のコードでは、`int_to_int` に渡されたコードブロックを `block` 変数の中に捕捉し、それをメソッドの戻り値として返しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above code gives this compile error:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042919Z" creationid="hirofumiwakasugi" creationdate="20150907T042907Z">
        <seg>このとき以下のコンパイルエラーが発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above code will make sense once you read the whole documentation, but we can already learn some things.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072553Z" creationid="hirofumiwakasugi" creationdate="20150901T072553Z">
        <seg>上記のコードをすべて理解するためにはこのドキュメント全体を読む必要がありますが、ここでいくつかの点について説明しておきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above code will make sense once you read the whole language reference, but we can already learn some things.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T161846Z" creationid="makenowjust" creationdate="20200413T161846Z">
        <seg>上記のコードをすべて理解するためにはこの言語リファレンス全体を読む必要がありますが、ここでいくつかの点について説明しておきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above could also be implemented with a Symbol:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T012132Z" creationid="hirofumiwakasugi" creationdate="20150916T012129Z">
        <seg>上記と同等のコードを、シンボルを使って実装することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above examples use unbuffered channels: when sending a value, if a fiber is waiting on that channel then execution continues on that fiber.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103750Z" creationid="akiji" creationdate="20200429T143759Z">
        <seg>上の例ではバッファのないチャネル、つまり値を送信した際にそのチャネルの値を待っているファイバがあればそちらに処理が移るもの、を使用しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above happens even if &lt;g1&gt;something_dangerous_that_returns_Int32&lt;/g1&gt; never raises, or if &lt;g2&gt;a&lt;/g2&gt; was assigned a value and then a method that potentially raises is executed:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T104547Z" creationid="makenowjust" creationdate="20200506T104547Z">
        <seg>このとき、もし &lt;g1&gt;something_dangerous_that_returns_Int32&lt;/g1&gt; が例外を発生させない場合であってもエラーが発生します。さらに &lt;g2&gt;a&lt;/g2&gt; に先に値に代入されて、それから例外を発生させる可能性があるメソッドが実行された場合であってもエラーとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above happens even if `something_dangerous_that_returns_Int32` never raises, or if `a` was assigned a value and then a method that potentially raises is executed:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T022454Z" creationid="hirofumiwakasugi" creationdate="20150907T020303Z">
        <seg>このとき、もし `something_dangerous_that_returns_Int32`が例外を発生させない場合であってもエラーが発生します。さらに、`a` に先に値が代入されて、それから例外を発生させる可能性があるメソッドが実行された場合であったとしてもエラーとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above is equivalent to:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173732Z" creationid="makenowjust" creationdate="20200420T173732Z">
        <seg>よって、上の例は以下と等しいものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above is just syntax sugar and doesn't have any performance penalty.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153119Z" creationid="hirofumiwakasugi" creationdate="20160115T153049Z">
        <seg>これは単なるシンタックスシュガーであり、パフォーマンス上の欠点はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above is perfectly valid, because there's no type restriction in the `value=` method, and so we have just "broken" our class.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T065549Z" creationid="hirofumiwakasugi" creationdate="20150912T065136Z">
        <seg>`value=` メソッドに型制約が設定されていないため、このコードは完全に正当なコードです。ただ、クラスとしては「壊れ」てしまっていると言えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above is simply rewritten to:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075515Z" creationid="makenowjust" creationdate="20200506T075515Z">
        <seg>上記は簡単に以下に書き換えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above is simply syntax sugar of this:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T191536Z" creationid="makenowjust" creationdate="20200505T191536Z">
        <seg>上の例は以下のシンタックスシュガーになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above is simpy rewritten to:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025014Z" creationid="hirofumiwakasugi" creationdate="20150917T025014Z">
        <seg>上記は単純に以下に書き換えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above is useful for providing overloads based on types, not instances:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025809Z" creationid="hirofumiwakasugi" creationdate="20150908T025809Z">
        <seg>これは、インスタンスではなく型によってメソッドをオーバーロードしたい場合に便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above logic **doesn’t** work with instance variables, class variables or global variables:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T015431Z" creationid="hirofumiwakasugi" creationdate="20150903T015309Z">
        <seg>ただ、インスタンス変数、クラス変数、そしてグローバル変数の場合には、上記が **当てはまらない** ことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above logic works &lt;g1&gt;only for local variables&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081723Z" creationid="makenowjust" creationdate="20200424T081723Z">
        <seg>これまで書いてきたことは&lt;g1&gt;ローカル変数に対してのみ機能します&lt;/g1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above makes it impossible to deal with a single box of a fixed type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T060953Z" creationid="hirofumiwakasugi" creationdate="20150912T060523Z">
        <seg>こうなると、この箱を1つの決まった型として扱うことが不可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above might not seem to be useful, but it is when, for example, mapping an array of elements:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T061344Z" creationid="hirofumiwakasugi" creationdate="20150930T061303Z">
        <seg>上記では一体何が嬉しいのかわからないかもしれません。では、以下のように配列の要素を map する場合ではどうでしょう？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above now works, because `MyBox` is now not a single type, but a family of types identified with a `T` type: `MyBox(Int32)` is a different type than `MyBox(String)`, and their `@value` variable is not shared.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063000Z" creationid="hirofumiwakasugi" creationdate="20150912T062410Z">
        <seg>これで動くようになりました。理由は、この場合 `MyBox` はもはや単一の型ではなく、複数の同じ種類の型の中である1つの型を示すものとなっているからです。そして、それぞれの型は `T` の型によって識別されます。つまり、`MyBox(Int32)` と `MyBox(String)` は同じ種類ですが別の型として扱われます。そして、それぞれの `@value` が共有されることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above outputs "nil" twice.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022615Z" creationid="hirofumiwakasugi" creationdate="20150916T022615Z">
        <seg>上記では「nil」が2回出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above prints "2" and "3".</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185859Z" creationid="hirofumiwakasugi" creationdate="20150916T023552Z">
        <seg>上記では "2" と "3" が出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above prints "Before 1" and "Before 2".</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190223Z" creationid="hirofumiwakasugi" creationdate="20150916T024405Z">
        <seg>上記は "Before 1" そして "Before 2" を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above prints "Got 1" and "Got 2".</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184730Z" creationid="hirofumiwakasugi" creationdate="20150916T015755Z">
        <seg>上記を実行すると "Got 1" そして "Got 2" と出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above program prints "10" ten times.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T080154Z" creationid="akiji" creationdate="20200428T080154Z">
        <seg>上のプログラムは "10" を10回出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above program prints "Hello!" twice, once for each &lt;g1&gt;yield&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184038Z" creationid="makenowjust" creationdate="20200505T184038Z">
        <seg>上記のプログラムでは各 &lt;g1&gt;yield&lt;/g1&gt; ごとに、計2回の "Hello!" が出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above program prints "Hello!" twice, once for each `yield`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T013638Z" creationid="hirofumiwakasugi" creationdate="20150916T013623Z">
        <seg>上記のプログラムでは、`yield` ごとに「Hello!」が出力されるので、「Hello!」が計2回出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above program spawns two fibers.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T141659Z" creationid="akiji" creationdate="20200429T132703Z">
        <seg>このプログラムは2つのファイバを生成しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above program works but has a big performance problem: on every iteration a new array is created for &lt;g1&gt;["crystal", "ruby", "java"]&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T131543Z" creationid="akiji" creationdate="20200430T131543Z">
        <seg>上記のプログラムはちゃんと動作しますが、繰り返しのたびに&lt;g1&gt;["crystal", "ruby", "java"]&lt;/g1&gt;を新しい配列として生成するという大きなパフォーマンス上の問題を抱えています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above works because when we do `MyBox(Int32)`, `T` becomes `Int32`, and when we invoke the constructor, the value passed to it must match `T`, which is `Int32`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T064851Z" creationid="hirofumiwakasugi" creationdate="20150912T063956Z">
        <seg>これで欠点が解消しました。`MyBox(Int32)` としたとき、`T` の型は `Int32` になります。そして、コンストラクタを呼び出した際に、渡される値は `T` の型、つまり `Int32` に合致している必要があるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The advantage of being cooperative is that a lot of the overhead of doing a context switch (switching between threads) is gone.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T150639Z" creationid="akiji" creationdate="20200428T062422Z">
        <seg>こうした協調動作の利点は、コンテキスト切り替え（スレッド間の切り替え）によるオーバーヘッドの大部分をなくすことができることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The annotation can then be applied to various items, including:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T104535Z" creationid="makenowjust" creationdate="20200510T104535Z">
        <seg>アノテーションは次のものに与えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The annotation itself could also be used to store metadata about the column, such as if it is nullable, the name of the column, or if it is the primary key.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T113731Z" creationid="makenowjust" creationdate="20200510T105809Z">
        <seg>また、nilを許容することや、カラムの名前、主キーかどうかなどのカラムに関するメタデータをアノテーション自身に格納することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The answer is that when we defined an &lt;g1&gt;initialize&lt;/g1&gt; method Crystal defined a &lt;g2&gt;new&lt;/g2&gt; method for us, like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T121036Z" creationid="makenowjust" creationdate="20200427T121036Z">
        <seg>実は、&lt;g1&gt;initialize&lt;/g1&gt; メソッドを定義したとき、Crystal は同時に&lt;g2&gt;new&lt;/g2&gt; メソッドも定義しているのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The answer is that when we defined an `initialize` method Crystal defined a `new` method for us, like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060124Z" creationid="hirofumiwakasugi" creationdate="20150904T060013Z">
        <seg>実は、`initialize` メソッドを定義したとき、Crystal は同時に `new` メソッドも定義しているのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The answer is: yes!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T192129Z" creationid="makenowjust" creationdate="20200505T192129Z">
        <seg>答えは YES です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The argument to sizeof is a &lt;g1&gt;type&lt;/g1&gt; and is often combined with &lt;g2&gt;typeof&lt;/g2&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T015538Z" creationid="makenowjust" creationdate="20200511T015538Z">
        <seg>sizeof の引数は&lt;g1&gt;型&lt;/g1&gt;なので&lt;g2&gt;typeof&lt;/g2&gt;とあわせて使うことが多いでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The argument to sizeof is a [type](type_grammar.html) and is often combined with [typeof](typeof.html):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T040057Z" creationid="hirofumiwakasugi" creationdate="20150906T040057Z">
        <seg>sizeof の引数は [type](type_grammar.html) なので、[typeof](typeof.html) とあわせて使うことが多いでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The argument to the expression is a &lt;g1&gt;type&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T114734Z" creationid="makenowjust" creationdate="20200512T114728Z">
        <seg>また、式に与える引数は&lt;g1&gt;型&lt;/g1&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The argument to the expression is a [type](type_grammar.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T015334Z" creationid="hirofumiwakasugi" creationdate="20150930T014930Z">
        <seg>式に与える引数は[型](type_grammar.html)です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The arguments are packed into a &lt;g1&gt;&lt;g2&gt;TupleLiteral&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Crystal/Macros/TupleLiteral.html&lt;e3/&gt; and passed to the macro.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T080649Z" creationid="makenowjust" creationdate="20210324T080649Z">
        <seg>引数は &lt;g1&gt;&lt;g2&gt;TupleLiteral&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Crystal/Macros/TupleLiteral.html&lt;e3/&gt; に変換されてマクロに渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The arguments are packed into an &lt;g1&gt;&lt;g2&gt;ArrayLiteral&lt;/g2&gt;&lt;/g1&gt; and passed to the macro.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215412Z" creationid="makenowjust" creationdate="20200509T215412Z">
        <seg>引数は &lt;g1&gt;&lt;g2&gt;ArrayLiteral&lt;/g2&gt;&lt;/g1&gt; に変換されてマクロに渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The arguments are packed into an &lt;g1&gt;&lt;g2&gt;ArrayLiteral&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/Crystal/Macros/ArrayLiteral.html&lt;e3/&gt; and passed to the macro.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T090455Z" creationid="makenowjust" creationdate="20200518T090455Z">
        <seg>引数は &lt;g1&gt;&lt;g2&gt;ArrayLiteral&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/Crystal/Macros/ArrayLiteral.html&lt;e3/&gt; に変換されてマクロに渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The arguments are packed into an `ArrayLiteral` and passed to the macro.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040803Z" creationid="hirofumiwakasugi" creationdate="20151001T040740Z">
        <seg>引数は `ArrayLiteral` に変換されてマクロに渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The array's generic type argument &lt;g1&gt;T&lt;/g1&gt; is inferred from the types of the elements inside the literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T172952Z" creationid="makenowjust" creationdate="20200420T172952Z">
        <seg>配列のジェネリック型引数&lt;g1&gt;T&lt;/g1&gt;はリテラルの要素の型から推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The assignment operator &lt;g1&gt;=&lt;/g1&gt; assigns the value of the second operand to the first
operand.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T094357Z" creationid="makenowjust" creationdate="20200502T094348Z">
        <seg>代入演算子 &lt;g1&gt;=&lt;/g1&gt; は2番目のオペランドの値を最初のオペランドの示す先に代入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The assignment operator &lt;g1&gt;=&lt;/g1&gt; is the basis for all operators that combine an
operator with assignment.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T094603Z" creationid="makenowjust" creationdate="20200502T094603Z">
        <seg>代入 &lt;g1&gt;=&lt;/g1&gt; は演算子と代入を組み合わせたものの基礎となっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The attribute list is fixed, but eventually (maybe) there will be user-defined attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T072305Z" creationid="hirofumiwakasugi" creationdate="20150919T071911Z">
        <seg>付加することのできる属性は決まっていますが、将来的には (おそらく) ユーザーが独自の属性を定義できるようになる予定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The begin and end values do not necessarily need to be of the same type: &lt;g1&gt;true..1&lt;/g1&gt; is a valid range, although pretty useless &lt;g2&gt;Enumerable&lt;/g2&gt; methods won't work with incompatible types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T035445Z" creationid="makenowjust" creationdate="20200421T035445Z">
        <seg>右と左の値は必ずしも同じ型である必要はありません。例えば &lt;g1&gt;true..1&lt;/g1&gt; は有効な範囲です。しかしこの場合2つの型は比較不能のため、 &lt;g2&gt;Enumerable&lt;/g2&gt; のメソッド群がほとんど使えず、あまり便利な場面はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The begin and end values do not necessarily need to be of the same type: &lt;g1&gt;true..1&lt;/g1&gt; is a valid range, although pretty useless since &lt;g2&gt;Enumerable&lt;/g2&gt; methods won't work with incompatible types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T081528Z" creationid="makenowjust" creationdate="20210324T081528Z">
        <seg>左右の値は必ずしも同じ型である必要はありません。例えば &lt;g1&gt;true..1&lt;/g1&gt; は有効な範囲リテラルです。しかし、この場合2つの型は比較不能のため &lt;g2&gt;Enumerable&lt;/g2&gt; のメソッド群がほとんど使えず、あまり便利な場面はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The best examples of this are &lt;g2&gt;Enumerable#map&lt;/g2&gt; and &lt;g3&gt;Enumerable#select&lt;/g3&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185946Z" creationid="makenowjust" creationdate="20200505T185946Z">
        <seg>その最もわかりやすい例は &lt;g2&gt;Enumerable#map&lt;/g2&gt; と &lt;g3&gt;Enumerable#select&lt;/g3&gt; でしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The best examples of this are &lt;g2&gt;Enumerable#map&lt;/g2&gt;https://crystal-lang.org/api/Enumerable.html#map%28%26block%3AT-%3EU%29forallU-instance-method&lt;e4/&gt; and &lt;g3&gt;Enumerable#select&lt;/g3&gt;https://crystal-lang.org/api/Enumerable.html#select%28%26block%3AT-%3E%29-instance-method&lt;e5/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T082930Z" creationid="makenowjust" creationdate="20200518T082930Z">
        <seg>その最もわかりやすい例は &lt;g2&gt;Enumerable#map&lt;/g2&gt;https://crystal-lang.org/api/Enumerable.html#map%28%26block%3AT-%3EU%29forallU-instance-method&lt;e4/&gt; と &lt;g3&gt;Enumerable#select&lt;/g3&gt;https://crystal-lang.org/api/Enumerable.html#select%28%26block%3AT-%3E%29-instance-method&lt;e5/&gt; でしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The best examples of this are &lt;g2&gt;Enumerable#map&lt;/g2&gt;https://crystal-lang.org/api/latest/Enumerable.html#map%28%26block%3AT-%3EU%29forallU-instance-method&lt;e4/&gt; and &lt;g3&gt;Enumerable#select&lt;/g3&gt;https://crystal-lang.org/api/latest/Enumerable.html#select%28%26block%3AT-%3E%29-instance-method&lt;e5/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094749Z" creationid="makenowjust" creationdate="20210324T094749Z">
        <seg>その最もわかりやすい例は &lt;g2&gt;Enumerable#map&lt;/g2&gt;https://crystal-lang.org/api/latest/Enumerable.html#map%28%26block%3AT-%3EU%29forallU-instance-method&lt;e4/&gt; と &lt;g3&gt;Enumerable#select&lt;/g3&gt;https://crystal-lang.org/api/latest/Enumerable.html#select%28%26block%3AT-%3E%29-instance-method&lt;e5/&gt; でしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The best examples of this are [Enumerable#map](http://crystal-lang.org/api/Enumerable.html#map%28%26block%20%3A%20T%20-%3E%20U%29-instance-method) and [Enumerable#select](http://crystal-lang.org/api/Enumerable.html#select%28%26block%20%3A%20T%20-%3E%20%29-instance-method):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023811Z" creationid="hirofumiwakasugi" creationdate="20150916T023734Z">
        <seg>その最もわかりやすい例は [Enumerable#map](http://crystal-lang.org/api/Enumerable.html#map%28%26block%20%3A%20T%20-%3E%20U%29-instance-method) と [Enumerable#select](http://crystal-lang.org/api/Enumerable.html#select%28%26block%20%3A%20T%20-%3E%20%29-instance-method) でしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The best thing to do is to only use structs with immutable objects, especially if they are small.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091213Z" creationid="akiji" creationdate="20200430T132150Z">
        <seg>構造体は不変なオブジェクトで、特にそれが小さい場合にのみ使用するのが最適な方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The binary executable is stored in a temporary location between compiling and running.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160050Z" creationid="makenowjust" creationdate="20200419T160050Z">
        <seg>コンパイルと実行の間、生成された実行可能ファイルは一時的な場所に保存されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The block variable &lt;g1&gt;second&lt;/g1&gt; also includes the &lt;g2&gt;Nil&lt;/g2&gt; type because the last &lt;g3&gt;yield&lt;/g3&gt; expression didn't include a second argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184914Z" creationid="makenowjust" creationdate="20200505T184914Z">
        <seg>ブロック引数 &lt;g1&gt;second&lt;/g1&gt; は &lt;g2&gt;Nil&lt;/g2&gt; を含んでいます。これは、最後の &lt;g3&gt;yield&lt;/g3&gt; 式に2番目の引数が指定されていないためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The block variable `second` also includes the `Nil` type because the last `yield` expression didn't include a second argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023329Z" creationid="hirofumiwakasugi" creationdate="20150916T023208Z">
        <seg>ブロック変数 `second` は `Nil` 型を含んでいます。これは、最後の `yield` 式に2番目の引数が指定されていないためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The buffer is allocated on the stack, avoiding a heap allocation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T115943Z" creationid="hirofumiwakasugi" creationdate="20150906T115731Z">
        <seg>このとき、バッファはヒープではなくスタックに割り当てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The chained assignment is not only available to &lt;g1&gt;local variables&lt;/g1&gt; but also to &lt;g2&gt;instance variables&lt;/g2&gt;, &lt;g3&gt;class variables&lt;/g3&gt; and setter methods (methods that end with &lt;g4&gt;=&lt;/g4&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175303Z" creationid="makenowjust" creationdate="20200422T175154Z">
        <seg>連続した代入は&lt;g1&gt;ローカル変数&lt;/g1&gt;に限らず&lt;g2&gt;インスタンス変数&lt;/g2&gt;や&lt;g3&gt;クラス変数&lt;/g3&gt;、セッターメソッド (名前が &lt;g4&gt;=&lt;/g4&gt; で終わるメソッド) に対して利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The child method can use &lt;g1&gt;:inherit:&lt;/g1&gt; to explicitly copy the parent's documentation, without the &lt;g2&gt;Description copied from ...&lt;/g2&gt; text.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215133Z" creationid="makenowjust" creationdate="20200412T213657Z">
        <seg>子クラスのメソッドで親クラスからドキュメントをコピーすることを明示するために&lt;g1&gt;:inherit:&lt;/g1&gt;が利用できます。この場合 &lt;g2&gt;Description copied from ...&lt;/g2&gt;というメッセージは生成されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The classic "hello world" program looks like this in Crystal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072503Z" creationid="hirofumiwakasugi" creationdate="20150901T072444Z">
        <seg>伝統的な「hello world」プログラムを Crystal で書くと次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The cleanup probably should have happened before.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T141723Z" creationid="makenowjust" creationdate="20200610T141723Z">
        <seg>このような整理は以前にもあったはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The closing delimiter may be followed by a number of optional modifiers to adjust the matching behaviour of the regular expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T041719Z" creationid="makenowjust" creationdate="20200421T041613Z">
        <seg>区切り文字を閉じたあとに、いくつかの修飾子を続けることで、正規表現のマッチの挙動を変更できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The code generated by the macro consists solely of two &lt;g2&gt;when&lt;/g2&gt; expressions which, by themselves, is not valid Crystal code.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221818Z" creationid="makenowjust" creationdate="20200509T221818Z">
        <seg>マクロによって生成されたコードは2つの孤立した &lt;g2&gt;when&lt;/g2&gt; 節からなりますが、これは有効な Crystal のコードではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The code you write is up to you, but how you write it impacts whether people want to use your library and/or help you maintain it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T155638Z" creationid="makenowjust" creationdate="20200527T155638Z">
        <seg>どんなコードを書こうとも自由ですが、どのようなコードを書いたかは、そのライブラリを使おうとしている、もしくはライブラリにコントリビュートしたいという人にとって影響のあることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The command creates a static website in &lt;g1&gt;output_dir&lt;/g1&gt; (default &lt;g2&gt;./docs&lt;/g2&gt;), consisting of HTML files for each Crystal type,
in a folder structure mirroring the Crystal namespaces.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161832Z" creationid="makenowjust" creationdate="20200419T161832Z">
        <seg>このコマンドは&lt;g1&gt;output_dir&lt;/g1&gt; (デフォルトでは &lt;g2&gt;./docs&lt;/g2&gt;) に、 Crystal での名前を反映したディレクトリ構造で、各 HTML ファイルが1つ1つの型に対応するような、静的な Web サイトを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compile-time type can be seen by using &lt;g1&gt;typeof&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T143914Z" creationid="makenowjust" creationdate="20200429T143914Z">
        <seg>コンパイル時の型は &lt;g1&gt;typeof&lt;/g1&gt; を使うことで確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiled binary is in &lt;g3&gt;bin/shards&lt;/g3&gt; and should be added to &lt;g4&gt;PATH&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T095112Z" creationid="makenowjust" creationdate="20200419T173527Z">
        <seg>コンパイルされたバイナリは &lt;g3&gt;bin/shards&lt;/g3&gt; にあるので、&lt;g4&gt;PATH&lt;/g4&gt; にそれを追加してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler could infer its type from all uses of the &lt;g3&gt;Person&lt;/g3&gt; class.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T125953Z" creationid="makenowjust" creationdate="20200427T125953Z">
        <seg>&lt;g3&gt;Person&lt;/g3&gt; クラスでのすべての使われ方から型を推論することは不可能ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler doesn't do an exahustive analysis of this: it just assumes that if a variable is captured by a proc, the time of that proc invocation is unknown.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T060231Z" creationid="hirofumiwakasugi" creationdate="20150918T055821Z">
        <seg>このことに対して、コンパイラが綿密な分析をすることはありません。コンパイラはただ、proc に変数が捕捉されていたら、その proc がいつどこで実行されるかは未知である、として扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler doesn't do an exhaustive analysis of this: it just assumes that if a variable is captured by a proc, the time of that proc invocation is unknown.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T081230Z" creationid="hirofumiwakasugi" creationdate="20151009T023752Z">
        <seg>このことに対して、コンパイラが綿密な分析をすることはありません。コンパイラはただ、Proc に変数が捕捉されていたら、その proc がいつどこで実行されるかは未知である、として扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler infers this annotation for a method if it invokes a method that is marked as &lt;g1&gt;@[Raises]&lt;/g1&gt; or raises (recursively).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094100Z" creationid="makenowjust" creationdate="20210324T094049Z">
        <seg>コンパイラは &lt;g1&gt;@[Raises]&lt;/g1&gt; が指定されたメソッドを実行するメソッドや、例外を発生させるメソッドに対しても (再帰的に) このアノテーションが指定されているものとして扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler infers this attribute for a method if it invokes a method that is marked as &lt;g1&gt;@[Raises]&lt;/g1&gt; or raises (recursively).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T092449Z" creationid="makenowjust" creationdate="20200512T091416Z">
        <seg>コンパイラは、&lt;g1&gt;@[Raises]&lt;/g1&gt; が指定されたメソッドを実行するメソッドや、例外を発生させるメソッドに対しても (再帰的に) このアノテーションが指定されているものと推論します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler infers this attribute for a method if it invokes a method that is marked as `@[Raises]` or raises (recursively).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053313Z" creationid="hirofumiwakasugi" creationdate="20151008T051453Z">
        <seg>コンパイラは、`@[Raises]` が指定されたメソッドを実行するメソッドや、例外を発生させるメソッドに対しても (再帰的に) この属性が指定されているものと推論します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler is usually moderately smart about the type of local variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T054336Z" creationid="hirofumiwakasugi" creationdate="20150918T054303Z">
        <seg>ローカル変数の型に対して、コンパイラは「それなりに」賢く解釈します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler knows that after the block, &lt;g1&gt;x&lt;/g1&gt; can be Int32 or String (it could know that it will always be String because the method always yields; this may improve in the future).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T080826Z" creationid="makenowjust" creationdate="20200506T080826Z">
        <seg>コンパイラは、ブロックのあとに &lt;g1&gt;x&lt;/g1&gt; が Int32 か String であると判断できます (ただ、この場合だとメソッドは必ず yield するので、常に String であることは明白です。将来的にはそこまで判断できるように改善するつもりです)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler knows that after the block, `x` can be Int32 or String (it could know that it will always be String because the method always yields, this will maybe improve in the future).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T054917Z" creationid="hirofumiwakasugi" creationdate="20150918T054652Z">
        <seg>コンパイラは、ブロックの後に `x` が Int32 か String であることを判断できます (ただ、この場合だとメソッドは必ず yield するので、常に String であることは明白です。将来的にはそこまで判断できるように改善するつもりです) 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler made `@name` have all types assigned to it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T042832Z" creationid="hirofumiwakasugi" creationdate="20150904T140006Z">
        <seg>このように、コンパイラは `@name` が与えられたすべての型を持つようにしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler needs the block's type for the generic type of the Array created by `Array#map`, but since `Person` was never instantiated, the compiler doesn't know the type of `@name`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062133Z" creationid="hirofumiwakasugi" creationdate="20150930T062111Z">
        <seg>コンパイラは、`Array#map` によって作られる配列のジェネリック型として、ブロックの型を必要としています。しかし、`Person` が1度もインスタンス化されていないため、コンパイラは `@name` の型を知ることができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler neither sets nor reads it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T170838Z" creationid="makenowjust" creationdate="20200419T170838Z">
        <seg>これを明示的にセットすることもできず、コンパイラはこの変数を実際には利用しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler recognizes that in case &lt;g1&gt;string&lt;/g1&gt; is &lt;g2&gt;Nil&lt;/g2&gt;, the right hand side of the expression &lt;g3&gt;string || raise&lt;/g3&gt; will be evaluated.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T142416Z" creationid="makenowjust" creationdate="20200430T142416Z">
        <seg>&lt;g1&gt;string&lt;/g1&gt; が &lt;g2&gt;Nil&lt;/g2&gt; のときは &lt;g3&gt;string || raise&lt;/g3&gt; の右辺を評価するものというようにコンパイラは解釈します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler transforms it to an &lt;g3&gt;if&lt;/g3&gt; expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084600Z" creationid="makenowjust" creationdate="20200502T084600Z">
        <seg>コンパイラは内部的にこれを &lt;g3&gt;if&lt;/g3&gt; 式に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler uses the &lt;g1&gt;CRYSTAL_LIBRARY_PATH&lt;/g1&gt; environment variable as a first lookup destination for static and dynamic libraries that are to be linked.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153208Z" creationid="makenowjust" creationdate="20200419T153037Z">
        <seg>コンパイラは&lt;g1&gt;CRYSTAL_LIBRARY_PATH&lt;/g1&gt;という環境変数を、静的もしくは動的にリンクするライブラリを最初に探索する場所とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler will always do this for classes and structs under the same hierarchy: it will find the first superclass from which all types inherit from (excluding &lt;g1&gt;Reference&lt;/g1&gt;, &lt;g2&gt;Value&lt;/g2&gt;, &lt;g3&gt;Int&lt;/g3&gt; and &lt;g4&gt;Float&lt;/g4&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T111112Z" creationid="makenowjust" creationdate="20200504T111112Z">
        <seg>コンパイラは、&lt;g1&gt;Reference&lt;/g1&gt;、&lt;g2&gt;Value&lt;/g2&gt;、&lt;g3&gt;Int&lt;/g3&gt;、&lt;g4&gt;Float&lt;/g4&gt;のいずれのクラスの場合を除いて、共有するスーパークラスがある場合に常にこのようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler will always do this for classes under the same hierarchy: it will find the first superclass that's not `Reference` from which all types inherit from.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T033013Z" creationid="hirofumiwakasugi" creationdate="20150910T032332Z">
        <seg>コンパイラは、すべての型の継承元である `Reference` を例外として、同一階層下のクラスであれば常にこのように解釈します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler will always resolve a type union to a virtual type if they are under the same hierarchy:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T110942Z" creationid="makenowjust" creationdate="20200504T110942Z">
        <seg>コンパイラは常に、同一のクラス階層下のユニオン型を virtual 型に解決します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler will automatically declare a &lt;g1&gt;status_ptr&lt;/g1&gt; variable of type &lt;g2&gt;Int32&lt;/g2&gt;, because the argument is an &lt;g3&gt;Int32*&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T082314Z" creationid="makenowjust" creationdate="20200512T082314Z">
        <seg>このとき、引数が &lt;g3&gt;Int32*&lt;/g3&gt; であるため、コンパイラは自動的に &lt;g2&gt;Int32&lt;/g2&gt; 方の &lt;g1&gt;status_ptr&lt;/g1&gt; 変数を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler will automatically declare a &lt;g1&gt;status_ptr&lt;/g1&gt; variable of type &lt;g2&gt;Int32&lt;/g2&gt;, because the parameter's type is &lt;g3&gt;Int32*&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T093411Z" creationid="makenowjust" creationdate="20210324T093411Z">
        <seg>このとき、引数の型が &lt;g3&gt;Int32*&lt;/g3&gt; であるため、&lt;g2&gt;Int32&lt;/g2&gt; 型の変数 &lt;g1&gt;status_ptr&lt;/g1&gt; を自動的に宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler will automatically declare a `status_ptr` variable of type `Int32`, because the argument is an `Int32*`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044028Z" creationid="hirofumiwakasugi" creationdate="20151005T044005Z">
        <seg>このとき、引数が `Int32*` であるため、コンパイラは自動的に `Int32` 型の `status_ptr` 変数を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler will even give an error if you first use a variable assuming it has a type and later you change that type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043743Z" creationid="hirofumiwakasugi" creationdate="20150905T043651Z">
        <seg>さらに、後から変数の型を変更されるときには、変更する前の時点でも同様のエラーが発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler will try to be as smart as possible to require less explicit type restrictions.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T143343Z" creationid="makenowjust" creationdate="20200427T143343Z">
        <seg>なるべく明示的な型制約を少なくできるよう、コンパイラは賢く動作しようとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The components of a program are:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T055543Z" creationid="akiji" creationdate="20200428T055543Z">
        <seg>プログラムを構成するコンポーネントは以下の通りです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The condition is first tested and, if *truthy*, the body is executed.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052059Z" creationid="hirofumiwakasugi" creationdate="20150905T052059Z">
        <seg>まず条件に対して判定が行われ、もし「真」であれば本体が実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The condition is first tested and, if &lt;g1&gt;truthy&lt;/g1&gt;, the body is executed.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094757Z" creationid="makenowjust" creationdate="20200424T094757Z">
        <seg>まず条件式に対して判定が行なわれて、&lt;g1&gt;真であった&lt;/g1&gt;ときに本体が実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The contents of the block are transferred "as is", essentially as a string, until re-examined by the compiler.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220919Z" creationid="makenowjust" creationdate="20200509T220919Z">
        <seg>ブロックの中身は「そのまま」文字列のようにコンパイラに渡され、再度検査されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The core documentation of the Crystal language, standard library, and tooling.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T151720Z" creationid="makenowjust" creationdate="20210726T151720Z">
        <seg>Crystal の構文や、標準ライブラリ、ツールについての主要なドキュメントです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The deb repository declared with &lt;g1&gt;deb_distribution=all&lt;/g1&gt; and &lt;g2&gt;deb_component&lt;/g2&gt; is used for the channel.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T092936Z" creationid="makenowjust" creationdate="20210130T092936Z">
        <seg>&lt;g1&gt;deb_distribution=all&lt;/g1&gt; と &lt;g2&gt;deb_component&lt;/g2&gt; と共に選言された deb リポジトリがチャンネルに利用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default receiver within a captured block can't be changed by using &lt;g1&gt;with ... yield&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T074124Z" creationid="makenowjust" creationdate="20200506T074124Z">
        <seg>捕捉されたブロックのレシーバは&lt;g1&gt;with ... yield&lt;/g1&gt;を使って変更することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default receiver within a captured block can't be changed by using `with ... yield`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T062029Z" creationid="hirofumiwakasugi" creationdate="20150918T062028Z">
        <seg>捕捉されたブロック内のデフォルトのレシーバは、`with ... yield` を使用して変更することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default value can also be a &lt;g1&gt;Type.new(...)&lt;/g1&gt; method or a class method with a return type restriction.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T142749Z" creationid="makenowjust" creationdate="20200427T142749Z">
        <seg>デフォルト値は &lt;g1&gt;Type.new(...)&lt;/g1&gt; の形や戻り値の型制約のあるクラスメソッドでもよいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default value can be overwritten:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024400Z" creationid="hirofumiwakasugi" creationdate="20150914T024252Z">
        <seg>それらのデフォルト値を上書きすることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default value is extracted from &lt;g2&gt;shard.yml&lt;/g2&gt; if available.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T162642Z" creationid="makenowjust" creationdate="20200419T162547Z">
        <seg>可能な場合&lt;g2&gt;shard.yml&lt;/g2&gt;にある名前をデフォルト値として利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default value is extracted from current git commit or &lt;g2&gt;shard.yml&lt;/g2&gt; if available.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T162753Z" creationid="makenowjust" creationdate="20200419T162753Z">
        <seg>可能な場合&lt;g2&gt;shard.yml&lt;/g2&gt;に指定されたものかgitのコミットからバージョンを取り出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The definition of an object boils down to these points:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T012919Z" creationid="hirofumiwakasugi" creationdate="20150904T012820Z">
        <seg>オブジェクトの定義は、突き詰めると以下に要約することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The definitions of "concurrency" and "parallelism" sometimes get mixed up, but they are not the same.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T145820Z" creationid="akiji" creationdate="20200428T053338Z">
        <seg>しばしば混同されますが、「並行処理（concurrency）」と「並列処理（parallelism）」という言葉の定義は同じではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The delimiter character &lt;g1&gt;/&lt;/g1&gt; must be escaped inside slash-delimited regular expression literals.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T041224Z" creationid="makenowjust" creationdate="20200421T041137Z">
        <seg>区切り文字である &lt;g1&gt;/&lt;/g1&gt; は正規表現中ではエスケープされる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The difference between using &lt;g1&gt;do ... end&lt;/g1&gt; and &lt;g2&gt;{ ... }&lt;/g2&gt; is that &lt;g3&gt;do ... end&lt;/g3&gt; binds to the left-most call, while &lt;g4&gt;{ ... }&lt;/g4&gt; binds to the right-most call:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184350Z" creationid="makenowjust" creationdate="20200505T184304Z">
        <seg>&lt;g1&gt;do ... end&lt;/g1&gt; と &lt;g2&gt;{ ... }&lt;/g2&gt; の違いは、&lt;g3&gt;do ... end&lt;/g3&gt; は最も左の呼び出しに渡されますが、&lt;g4&gt;{ ... }&lt;/g4&gt; は最も右にある呼び出しに渡されるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The differences between a struct and a class are:
* Invoking `new` on a struct allocates it on the stack instead of the heap
* A struct is [passed by value](http://crystal-lang.org/api/Value.html) while a class is passed by reference
* A struct implicitly inherits from [Struct](http://crystal-lang.org/api/Struct.html), which inherits from [Value](http://crystal-lang.org/api/Value.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T054126Z" creationid="hirofumiwakasugi" creationdate="20150913T053835Z">
        <seg>構造体とクラスには以下の違いがあります。
* 構造体に対して `new` を実行するとヒープではなくスタック領域が割り当てられる
* クラスが参照渡しであるのに対して、構造体は[値渡し](http://crystal-lang.org/api/Value.html)である
* 構造体は暗黙的に [Struct](http://crystal-lang.org/api/Struct.html) を継承し、Struct は [Value](http://crystal-lang.org/api/Value.html) を継承している。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The documentation for &lt;g1&gt;Child#id&lt;/g1&gt; would be:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214138Z" creationid="makenowjust" creationdate="20200412T214138Z">
        <seg>&lt;g1&gt;Child#id&lt;/g1&gt;のドキュメントは次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The documentation for &lt;g1&gt;Unicorn#name&lt;/g1&gt; would be:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213941Z" creationid="makenowjust" creationdate="20200412T213315Z">
        <seg>&lt;g1&gt;Unicorn#name&lt;/g1&gt;のドキュメントは次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The documentation of a method is included into the method summary and the method details.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T211714Z" creationid="makenowjust" creationdate="20200412T211714Z">
        <seg>メソッドのドキュメントは、メソッドの概要、およびメソッドの詳細の内容となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The documentation of the function says:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043407Z" creationid="hirofumiwakasugi" creationdate="20151005T043407Z">
        <seg>この関数のドキュメントは以下の内容です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The dot (&lt;g1&gt;.&lt;/g1&gt;) usually put between receiver and method name
(i.e. the &lt;g2&gt;operator&lt;/g2&gt;) can be omitted.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T081204Z" creationid="makenowjust" creationdate="20200502T081204Z">
        <seg>レシーバとメソッド名 (つまり&lt;g2&gt;演算子名&lt;/g2&gt;) の間に置くドット (&lt;g1&gt;.&lt;/g1&gt;) は省略できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The easiest, but probably most tedious, way is to use explicit type restrictions.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T133242Z" creationid="makenowjust" creationdate="20200427T133242Z">
        <seg>もっとも単純で、そしておそらくもっとも面白くない方法が、明示的に型制約を指定することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The entire API docs are also stored as a JSON document in &lt;g4&gt;$output_dir/index.json&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T162112Z" creationid="makenowjust" creationdate="20200419T162107Z">
        <seg>API ドキュメント全体は JSON として &lt;g4&gt;$output_dir/index.json&lt;/g4&gt; に保存されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The entrypoint &lt;g3&gt;docs/index.html&lt;/g3&gt; can be opened by any web browser.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T162021Z" creationid="makenowjust" creationdate="20200419T162021Z">
        <seg>Web ブラウザで見る際のエントリーポイントは &lt;g3&gt;docs/index.html&lt;/g3&gt; になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The enum's body contains the values.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T181752Z" creationid="hirofumiwakasugi" creationdate="20150914T024231Z">
        <seg>列挙型はその本体に値を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The event loop is currently implemented with &lt;g1&gt;libevent&lt;/g1&gt;, which is an abstraction of other event mechanisms like &lt;g2&gt;epoll&lt;/g2&gt; and &lt;g3&gt;kqueue&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T063308Z" creationid="akiji" creationdate="20200428T063308Z">
        <seg>現時点では、イベントループは&lt;g2&gt;epoll&lt;/g2&gt;や&lt;g3&gt;kqueue&lt;/g3&gt;と言ったイベント方式を抽象化した&lt;g1&gt;libevent&lt;/g1&gt;を使用して実装されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The event loop: which is another fiber.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T063024Z" creationid="akiji" creationdate="20200428T063024Z">
        <seg>イベントループ（別のファイバ）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The example above translates to:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T131344Z" creationid="akiji" creationdate="20200430T131336Z">
        <seg>上の例はこのように変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The expression &lt;g4&gt;"sum: #{a} + #{b} = #{a + b}"&lt;/g4&gt; is equivalent to:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192844Z" creationid="makenowjust" creationdate="20200419T192844Z">
        <seg>式&lt;g4&gt;"sum: #{a} + #{b} = #{a + b}"&lt;/g4&gt;は次に等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The expression above will result in no output.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221214Z" creationid="makenowjust" creationdate="20200509T221214Z">
        <seg>上記の式は何も出力しないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The external name is the one used when passing an argument as a named argument, and the internal name is the one used inside the method definition:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T161117Z" creationid="makenowjust" creationdate="20200501T161117Z">
        <seg>外部名は名前付き引数として渡す際に使う名前で、内部名はメソッド定義の本体で使う名前となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The external name is the one used when passing an argument as a named argument, and the internal name is the one used to refer to the parameter inside the method definition:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T092347Z" creationid="makenowjust" creationdate="20210324T092347Z">
        <seg>外部名は名前付き引数として渡す際に使う名前で、内部名はメソッド定義の本体で使う名前となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The feature was implemented in &lt;g1&gt;#422&lt;/g1&gt;https://github.com/crystal-lang/shards/pull/422&lt;e3/&gt; and it’s motivation is explained in &lt;g2&gt;#412&lt;/g2&gt;https://github.com/crystal-lang/shards/issues/412&lt;e4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T113055Z" creationid="makenowjust" creationdate="20200809T113055Z">
        <seg>この機能は&lt;g1&gt;#422&lt;/g1&gt;https://github.com/crystal-lang/shards/pull/422&lt;e3/&gt;で実装され、動機は&lt;g2&gt;#412&lt;/g2&gt;https://github.com/crystal-lang/shards/issues/412&lt;e4/&gt;で説明されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The featured feature of this release is shards overrides.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T112220Z" creationid="makenowjust" creationdate="20200809T112220Z">
        <seg>このリリースの特筆すべき機能は shards のオーバライドです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The file's contents are explained in the &lt;g5&gt;&lt;g6&gt;Writing a Shard&lt;/g6&gt; guide&lt;/g5&gt; and a detailed description of the file format is provided by the &lt;g7&gt;shard.yml specification&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T173857Z" creationid="makenowjust" creationdate="20200419T173814Z">
        <seg>そのファイル内容は&lt;g5&gt;&lt;g6&gt;Shardの書き方&lt;/g6&gt;というガイド&lt;/g5&gt;で説明されていて、詳細な説明は&lt;g7&gt;shard.yml の仕様 (英語)&lt;/g7&gt;にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The file's contents are explained in the &lt;g5&gt;&lt;g6&gt;Writing a Shard&lt;/g6&gt; guide&lt;/g5&gt; and a detailed description of the file format is provided by the &lt;g7&gt;shard.yml specification&lt;/g7&gt;https://github.com/crystal-lang/shards/blob/master/SPEC.md&lt;e8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T092817Z" creationid="makenowjust" creationdate="20200518T092817Z">
        <seg>そのファイルの内容は &lt;g5&gt;&lt;g6&gt;Shard の書き方&lt;/g6&gt;というガイド&lt;/g5&gt;で説明されていて、詳細な説明は &lt;g7&gt;shard.yml の仕様 (英語)&lt;/g7&gt;https://github.com/crystal-lang/shards/blob/master/SPEC.md&lt;e8/&gt; にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The file's contents are explained in the &lt;g5&gt;&lt;g6&gt;Writing a Shard&lt;/g6&gt; guide&lt;/g5&gt; and a detailed description of the file format is provided by the &lt;g7&gt;shard.yml specification&lt;/g7&gt;https://github.com/crystal-lang/shards/blob/master/docs/shard.yml.adoc&lt;e8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T101824Z" creationid="makenowjust" creationdate="20210324T073836Z">
        <seg>そのファイルの内容は &lt;g5&gt;&lt;g6&gt;Shard の書き方&lt;/g6&gt;というガイド&lt;/g5&gt;で説明されていて、詳細な説明は&lt;g7&gt;shard.yml の仕様 (英語)&lt;/g7&gt;https://github.com/crystal-lang/shards/blob/master/docs/shard.yml.adoc&lt;e8/&gt; にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first alternative is long and cumbersome, while the second one is much easier.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T050605Z" creationid="hirofumiwakasugi" creationdate="20150909T050605Z">
        <seg>最初の方法は非常に時間がかかり面倒ですが、それに比べて2番目の方法ずっとは簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first argument is either &lt;g1&gt;lib&lt;/g1&gt; or &lt;g2&gt;app&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161107Z" creationid="makenowjust" creationdate="20200419T161107Z">
        <seg>最初の引数は&lt;g1&gt;lib&lt;/g1&gt;か&lt;g2&gt;app&lt;/g2&gt;のいずれかです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first call's value is 3 because the last expression of the &lt;g1&gt;twice&lt;/g1&gt; method is &lt;g2&gt;yield&lt;/g2&gt;, which gets the value of the block.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190356Z" creationid="makenowjust" creationdate="20200505T190356Z">
        <seg>最初の呼び出しのときの値は、&lt;g1&gt;twice&lt;/g1&gt; メソッドが &lt;g2&gt;yield&lt;/g2&gt; されているためブロックの値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first call's value is 3 because the last expression of the `twice` method is `yield`, which gets the value of the block.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024826Z" creationid="hirofumiwakasugi" creationdate="20150916T024826Z">
        <seg>最初の呼び出しのときの値は、`twice` メソッドが `yield` されているため、ブロックの値である3になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first one creates a TCPServer, accepts one connection and reads lines from it, sending them to the channel.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103723Z" creationid="akiji" creationdate="20200429T132835Z">
        <seg>1つ目のファイバはTCPサーバを立ててコネクションを1つ受け入れ、そこから行を読み込んでチャネルに渡すもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first operand is either a variable (in this case the operator can't
be redefined) or a call (in this case the operator can be redefined).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T094436Z" creationid="makenowjust" creationdate="20200502T094436Z">
        <seg>最初のオペランドは変数 (この場合は再定義できません) もしくはメソッド呼び出し (この場合は再定義できます) のどちらかになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first operand is the
receiver &lt;g1&gt;self&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T083816Z" creationid="makenowjust" creationdate="20200502T083816Z">
        <seg>1つ目のオペランドは&lt;g1&gt;self&lt;/g1&gt;として受け取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first two operators also have inversion operators (&lt;g1&gt;!=&lt;/g1&gt; and &lt;g2&gt;!~&lt;/g2&gt;) whose
semantical intention is just the inverse of the base operator: &lt;g3&gt;a != b&lt;/g3&gt; is
supposed to be equivalent to &lt;g4&gt;!(a == b)&lt;/g4&gt; and &lt;g5&gt;a !~ b&lt;/g5&gt; to &lt;g6&gt;!(a =~ b)&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091152Z" creationid="makenowjust" creationdate="20200502T091030Z">
        <seg>最初の2つに関しては結果を反転させたものも存在します (&lt;g1&gt;!=&lt;/g1&gt; と &lt;g2&gt;!~&lt;/g2&gt;)。&lt;g3&gt;a != b&lt;/g3&gt; は &lt;g4&gt;!(a == b)&lt;/g4&gt; と同じだと考えられて、&lt;g5&gt;a !~ b&lt;/g5&gt; は &lt;g6&gt;!(a =~ b)&lt;/g6&gt; と同じだと考えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first use case is using keywords as named arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T161157Z" creationid="makenowjust" creationdate="20200501T161157Z">
        <seg>1つはキーワードを名前付き引数として使いたい場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first use case is using keywords as named parameters:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T092403Z" creationid="makenowjust" creationdate="20210324T092403Z">
        <seg>1つはキーワードを名前付き引数として使いたい場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The fix is easy, we can use a [type restriction](type_restrictions.html):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063731Z" creationid="hirofumiwakasugi" creationdate="20150912T063517Z">
        <seg>これは簡単に修正できます。[型制約](type_restrictions.html)を利用すればいいのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following environment variables are used by the Crystal compiler if set in the environment.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T170016Z" creationid="makenowjust" creationdate="20200419T170016Z">
        <seg>これらの環境変数は、もしセットされていれば Crystal のコンパイラによって利用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example demonstrates the &lt;g1&gt;Vector2&lt;/g1&gt; type as a two-dimensional
vector with a binary operator method &lt;g2&gt;+&lt;/g2&gt; for vector addition.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T083908Z" creationid="makenowjust" creationdate="20200502T083836Z">
        <seg>次の例は2次元のベクトルを表す&lt;g1&gt;Vector2&lt;/g1&gt;に、2項演算子&lt;g2&gt;+&lt;/g2&gt;を2つのベクトルを足し合わせるものとして定義したものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example demonstrates the &lt;g1&gt;Vector2&lt;/g1&gt; type as a two-dimensional
vector with a unary operator method &lt;g2&gt;-&lt;/g2&gt; for vector inversion.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T083840Z" creationid="makenowjust" creationdate="20200502T083638Z">
        <seg>次の例は2次元のベクトルを表す&lt;g1&gt;Vector2&lt;/g1&gt;に、単項演算子の&lt;g2&gt;-&lt;/g2&gt;をベクトルの反転させるものとして定義したものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example is the classic Hello World.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080816Z" creationid="makenowjust" creationdate="20200516T080808Z">
        <seg>次の例は典型的な Hello World プログラムです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example shows how to bind the C function name &lt;g1&gt;SDL_Init&lt;/g1&gt; as &lt;g2&gt;LibSDL.init&lt;/g2&gt; in Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T031819Z" creationid="makenowjust" creationdate="20200511T031819Z">
        <seg>次は &lt;g1&gt;SDL_Init&lt;/g1&gt; という名前の C の関数を Crystal では &lt;g2&gt;LibSDL.init&lt;/g2&gt; としてバインディングする例です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following options can be combined to filter the list of specs to run.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164935Z" creationid="makenowjust" creationdate="20200419T164539Z">
        <seg>次のオプションは実行する spec の一覧をフィルターするために組み合わせられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following packages are compliant with crystal-db</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T190028Z" creationid="daiki" creationdate="20200705T190028Z">
        <seg>次のパッケージ群は crystal-db に準拠しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following packages are not required, but recommended for using the respective features in the standard library:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T102919Z" creationid="makenowjust" creationdate="20200518T102919Z">
        <seg>次のパッケージは必ずしも必要なわけではありません。ですが、標準ライブラリの対応する機能を利用するのであればインストールを推奨します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following rules only mention instance variables, but they apply to class variables as well.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T135409Z" creationid="makenowjust" creationdate="20200427T134932Z">
        <seg>これらの規則はインスタンス変数に関するものとして記述されていますが、クラス変数に対しても同様に扱われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following sample connects to a local mysql database named test with user root and password blank.</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200706T094835Z" creationid="daiki" creationdate="20200705T192517Z">
        <seg>次のサンプルでは、root ユーザーを空パスワードで、 test という名前のローカルの mysql データベースに接続しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following works just fine:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122930Z" creationid="hirofumiwakasugi" creationdate="20150904T122836Z">
        <seg>つまり、以下の場合でも問題なく動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The formatter also applies to Crystal code blocks in comments (see &lt;g1&gt;&lt;g2&gt;Documenting Code&lt;/g2&gt;&lt;/g1&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T102107Z" creationid="makenowjust" creationdate="20210324T102107Z">
        <seg>フォーマッタはコメント中の Crystal のコードブロックにも適用されます (see &lt;g1&gt;&lt;g2&gt;コードのドキュメント化&lt;/g2&gt;&lt;/g1&gt; を参照)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The formatter is also fast, so very little time is lost if you format the
entire project instead of a single file.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T220434Z" creationid="makenowjust" creationdate="20200412T220434Z">
        <seg>フォーマッタは十分に早く、もし単一のファイルでなくプロジェクト全体のフォーマットをしたとしても、損う時間はほとんどありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The former includes only the first line, the latter includes the entire documentation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144131Z" creationid="hirofumiwakasugi" creationdate="20151010T135852Z">
        <seg>前者が含むのは最初の1行のみで、後者はドキュメント全体を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The former is a hash-like structure of &lt;g4&gt;Symbol&lt;/g4&gt; to &lt;g5&gt;Log::Metadata::Value&lt;/g5&gt; with some allocation and algorithmic optimizations.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T153950Z" creationid="makenowjust" creationdate="20200610T153950Z">
        <seg>前者は&lt;g4&gt;Symbol&lt;/g4&gt; から &lt;g5&gt;Log::Metadata::Value&lt;/g5&gt; へのハッシュのようなデータ構造ですが、アロケーションやアルゴリズム的な最適化がされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The fourth rule is the second rule applied to the third rule.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T090441Z" creationid="makenowjust" creationdate="20200427T090429Z">
        <seg>4番目の規則は2番目の規則に3番目の規則を適用したものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The general form is &lt;g2&gt;a &lt;op&gt;= b&lt;/g2&gt; and the compiler
transform that into &lt;g3&gt;a = a &lt;op&gt; b&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T094620Z" creationid="makenowjust" creationdate="20200502T094620Z">
        <seg>一般的な形は &lt;g2&gt;a &lt;op&gt;= b&lt;/g2&gt; で、コンパイラはこれを &lt;g3&gt;a = a &lt;op&gt; b&lt;/g3&gt; に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The generated code must
be valid Crystal code, meaning that you can't for example generate
a `def` without a matching `end`, or a single `when` expression of a
`case`, since both of them are not complete valid expressions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T015414Z" creationid="hirofumiwakasugi" creationdate="20151001T014916Z">
        <seg>生成されたコードは正しい Crystal コードでなくてはいけません。例えば、対応する `end` のない `def` や、`case` の `when` 式単体のものなどは、完全な式として正しいものではないので生成することができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The generated code must be valid Crystal code, meaning that you can't for example generate a &lt;g1&gt;def&lt;/g1&gt; without a matching &lt;g2&gt;end&lt;/g2&gt;, or a single &lt;g3&gt;when&lt;/g3&gt; expression of a &lt;g4&gt;case&lt;/g4&gt;, since both of them are not complete valid expressions.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T140455Z" creationid="makenowjust" creationdate="20200507T140455Z">
        <seg>生成されたコードは正しい Crystal コードでなくてはいけません。例えば、対応する &lt;g2&gt;end&lt;/g2&gt; の無い &lt;g1&gt;def&lt;/g1&gt; や、&lt;g4&gt;case&lt;/g4&gt; 式の &lt;g3&gt;when&lt;/g3&gt; 部分だけのものなどは、完全な式として正しいものではないので生成することができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The generic type arguments for keys &lt;g1&gt;K&lt;/g1&gt; and values &lt;g2&gt;V&lt;/g2&gt; are inferred from the types of the keys or values inside the literal, respectively.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T175514Z" creationid="makenowjust" creationdate="20200420T175514Z">
        <seg>キーの型の &lt;g1&gt;K&lt;/g1&gt; と値の型の &lt;g2&gt;V&lt;/g2&gt; というジェネリック型引数は、それぞれリテラル中のキーと値の型から推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The heredoc starts in the following line and ends with the next line that contains &lt;g4&gt;only&lt;/g4&gt; the heredoc identifier, optionally preceeded by whitespace.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T090800Z" creationid="makenowjust" creationdate="20210130T090800Z">
        <seg>ヒアドメントは続く行から開始して、次の行に最初に指定した識別子&lt;g4&gt;のみ&lt;/g4&gt;を含む行で終了します。オプションで先頭に空白文字を入れることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The heredoc starts in the following line and ends with the next line that starts with the heredoc identifier (ignoring leading whitespace) and is either followed by a newline or a non-alphanumeric character.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T033757Z" creationid="makenowjust" creationdate="20200420T033551Z">
        <seg>ヒアドキュメントは続く行から開始して、最初に指定した識別子のみを含む行 (先頭の空白は無視されます) で終了します。また、ヒアドキュメントのあとには改行の他にアルファベットと数字の文字以外の文字が続く場合があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The hierarchy graph now shows:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T054227Z" creationid="hirofumiwakasugi" creationdate="20150905T054227Z">
        <seg>このプログラムの階層グラフは以下となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The identifier may optionally be enclosed in double quotes (&lt;g2&gt;"&lt;/g2&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171049Z" creationid="makenowjust" creationdate="20200420T171049Z">
        <seg>識別子の部分はダブルクォート (&lt;g2&gt;"&lt;/g2&gt;) で囲むこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The install command may fail if a locked version doesn't match a requirement, but may succeed if a new dependency was added, as long as it doesn't generate a conflict, thus generating a new &lt;g2&gt;shard.lock&lt;/g2&gt; file.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181020Z" creationid="makenowjust" creationdate="20200419T180911Z">
        <seg>ロックされたバージョンが要求に一致しない場合、コマンドは失敗することがあります。しかし、衝突することなく新しい依存関係を追加できれば、新たな&lt;g2&gt;shard.lock&lt;/g2&gt;ファイルを生成してコマンドは成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The install script accepts optional arguments to install or update to a release of another channel.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T092623Z" creationid="makenowjust" creationdate="20210130T092623Z">
        <seg>インストールスクリプトはその他のチャンネルのリリースをインストール、もしくは更新するためのオプション引数を受け付けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The installed versions are written into a &lt;g3&gt;shard.lock&lt;/g3&gt; file for using the exact same dependency versions when running &lt;g4&gt;shards install&lt;/g4&gt; again.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T095200Z" creationid="makenowjust" creationdate="20200419T174033Z">
        <seg>&lt;g4&gt;shards install&lt;/g4&gt; がもう一度実行されたときに同じバージョンがインストールされるために、インストールしたバージョンは &lt;g3&gt;shard.lock&lt;/g3&gt; に書き出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The intended change was more disruptive than we wanted.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200621T073613Z" creationid="makenowjust" creationdate="20200621T073613Z">
        <seg>この意図的な変更は想定以上に破壊的でした。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The language comes with other &lt;g1&gt;syntax&lt;/g1&gt; as well to create arrays, hashes, ranges, tuples and more:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170236Z" creationid="makenowjust" creationdate="20200413T162646Z">
        <seg>Crystalはその他にも多くの&lt;g1&gt;シンタックス&lt;/g1&gt;があります。例えば配列やハッシュ、そして範囲やタプルなどです</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The language comes with other [syntax](../syntax_and_semantics/literals.html) as well to create arrays, hashes, ranges, tuples and more:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072711Z" creationid="hirofumiwakasugi" creationdate="20150901T072711Z">
        <seg>Crystal にはその他にも多くの[シンタックス](../syntax_and_semantics/literals.html)があります。例えば、array や hash、そして range や tuple などです</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The latest files can be found on the &lt;g1&gt;Releases page at GitHub&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T070727Z" creationid="makenowjust" creationdate="20200518T070727Z">
        <seg>最新のファイルは &lt;g1&gt;GitHub のリリースページ&lt;/g1&gt;から入手できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The latest files can be found on the &lt;g1&gt;Releases page at GitHub&lt;/g1&gt;https://github.com/crystal-lang/crystal/releases&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093319Z" creationid="makenowjust" creationdate="20200518T093319Z">
        <seg>最新のファイルは&lt;g1&gt;GitHub のリリースページ&lt;/g1&gt;https://github.com/crystal-lang/crystal/releases&lt;e2/&gt;から入手できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The latest files can be found on the Releases page at GitHub: https://github.com/manastech/crystal/releases</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055658Z" creationid="hirofumiwakasugi" creationdate="20150831T055658Z">
        <seg>最新のファイルは [GitHub のリリースページ](https://github.com/manastech/crystal/releases)から入手することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The list of valid call conventions is:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T074512Z" creationid="hirofumiwakasugi" creationdate="20150919T074401Z">
        <seg>有効な呼出規約は以下のとおりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The literal &lt;g1&gt;x..y&lt;/g1&gt; is semantically equivalent to the explicit constructor &lt;g2&gt;Range.new(x, y)&lt;/g2&gt; and &lt;g3&gt;x...y&lt;/g3&gt; to &lt;g4&gt;Range.new(x, y, true)&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T035300Z" creationid="makenowjust" creationdate="20200421T035300Z">
        <seg>明示的にコンストラクタを呼ぶ場合、&lt;g1&gt;x..y&lt;/g1&gt; は &lt;g2&gt;Range.new(x, y)&lt;/g2&gt; と等しく、 &lt;g3&gt;x...y&lt;/g3&gt; は&lt;g4&gt;Range.new(x, y, true)&lt;/g4&gt; と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The lookup goes like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T145808Z" creationid="hirofumiwakasugi" creationdate="20150905T145642Z">
        <seg>ファイルの探索は以下の流れで処理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The main fiber reads the first 3 messages sent to the channel, either from the socket or stdin, then the program exits.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103726Z" creationid="akiji" creationdate="20200429T133441Z">
        <seg>メインファイバは、ソケットから読み込まれたのか標準入力から読み込まれたのかにかかわらず、チャネルに渡されたメッセージを3回読み込んだら終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The main story in the doc generator tool is the support to show a version picker.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T032612Z" creationid="makenowjust" creationdate="20200611T032612Z">
        <seg>主要な変更はドキュメントジェネレータで、バージョンピッカーをサポートするようになりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The main thing you need to know is that the &lt;g1&gt;crystal:&lt;/g1&gt; property is &lt;g2&gt;effectively mandatory&lt;/g2&gt; now.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T135223Z" creationid="makenowjust" creationdate="20200610T135223Z">
        <seg>今回の把握すべき主要な変更は &lt;g1&gt;crystal:&lt;/g1&gt; プロパティが&lt;g2&gt;効果的に機能する&lt;/g2&gt;ようになった点です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The main trick is to use a generic type to avoid runtime method dispatch.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T073247Z" creationid="hirofumiwakasugi" creationdate="20150912T073219Z">
        <seg>これは、ジェネリック型を利用することで、実行時にメソッドのディスパッチが発生しないようにするということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The main work was done in &lt;g6&gt;#9227&lt;/g6&gt;https://github.com/crystal-lang/crystal/pull/9227&lt;e9/&gt; and &lt;g7&gt;#9295&lt;/g7&gt;https://github.com/crystal-lang/crystal/pull/9295&lt;e10/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T154041Z" creationid="makenowjust" creationdate="20200610T154003Z">
        <seg>これらは主に&lt;g6&gt;#9227&lt;/g6&gt;https://github.com/crystal-lang/crystal/pull/9227&lt;e9/&gt;と&lt;g7&gt;#9295&lt;/g7&gt;https://github.com/crystal-lang/crystal/pull/9295&lt;e10/&gt;で実装されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The method &lt;g1&gt;&lt;g2&gt;gets&lt;/g2&gt;&lt;/g1&gt; will &lt;g3&gt;pause&lt;/g3&gt; the execution of the application, until the user finishes entering the input (pressing the &lt;g4&gt;Enter&lt;/g4&gt; key).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182042Z" creationid="makenowjust" creationdate="20200413T182025Z">
        <seg> &lt;g1&gt;&lt;g2&gt;gets&lt;/g2&gt;&lt;/g1&gt;メソッドはアプリケーションの実行を、ユーザーの入力が終了する (&lt;g4&gt;Enter&lt;/g4&gt;が押される) まで&lt;g3&gt;停止&lt;/g3&gt;させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The method &lt;g1&gt;&lt;g2&gt;gets&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/toplevel.html#gets%28*args,**options%29-class-method&lt;e7/&gt; will &lt;g3&gt;pause&lt;/g3&gt; the execution of the application until the user finishes entering the input (pressing the &lt;g4&gt;Enter&lt;/g4&gt; key).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T090042Z" creationid="makenowjust" creationdate="20211107T085638Z">
        <seg>メソッド &lt;g1&gt;&lt;g2&gt;gets&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/toplevel.html#gets%28*args,**options%29-class-method&lt;e7/&gt; は、ユーザーが入力を完了する (&lt;g4&gt;Enter&lt;/g4&gt; キーを押す) まで、アプリケーションの実行を&lt;g3&gt;一時停止&lt;/g3&gt;します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The method &lt;g1&gt;&lt;g2&gt;gets&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/toplevel.html#gets%28*args,**options%29-class-method&lt;e7/&gt; will &lt;g3&gt;pause&lt;/g3&gt; the execution of the application, until the user finishes entering the input (pressing the &lt;g4&gt;Enter&lt;/g4&gt; key).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T101555Z" creationid="makenowjust" creationdate="20200809T101555Z">
        <seg>&lt;g1&gt;&lt;g2&gt;gets&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/toplevel.html#gets%28*args,**options%29-class-method&lt;e7/&gt; メソッドはアプリケーションの実行を、ユーザーの入力が終了する (&lt;g4&gt;Enter&lt;/g4&gt; が押される) まで&lt;g3&gt;停止&lt;/g3&gt;させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The name and type of the instance variable can be read off the &lt;g1&gt;TypeNode&lt;/g1&gt; in addition to the annotation; removing the need for any ORM specific macro.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T105804Z" creationid="makenowjust" creationdate="20200510T105804Z">
        <seg>インスタンス変数の型と名前は &lt;g1&gt;TypeNode&lt;/g1&gt; から読み出すことができます。これによってORMに固有のマクロを無くすことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The names of required named arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T150359Z" creationid="makenowjust" creationdate="20200429T150359Z">
        <seg>必要な名前つき引数の名前が異なる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The names of required named parameters</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T075809Z" creationid="makenowjust" creationdate="20210324T075809Z">
        <seg>必要な名前付き引数の名前が異なる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The need for this cast is even more rare than the previous one, but allows to implement some core types (like String) in Crystal itself, and it also allows passing a Reference type to C functions by casting it to a void pointer.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T022518Z" creationid="hirofumiwakasugi" creationdate="20150930T022200Z">
        <seg>このキャストが必要になるケースは前述のものよりも稀です。ただ、これによって (String などの) コアとなる型を Crystal 自身で実装することが可能になっており、また、Reference 型を void ポインタにキャストすることで C の関数に渡すこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new compiler will be placed at `.build/crystal`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060627Z" creationid="hirofumiwakasugi" creationdate="20150831T060619Z">
        <seg>ビルドされたコンパイラは `.build/crystal` に格納されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next section talks about the &lt;g2&gt;.class&lt;/g2&gt; suffix in type restrictions.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T161642Z" creationid="makenowjust" creationdate="20200429T161600Z">
        <seg>次で型制約における &lt;g2&gt;.class&lt;/g2&gt; サフィックスについては説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next section talks about the `.class` suffix in type restrictions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025355Z" creationid="hirofumiwakasugi" creationdate="20150908T025355Z">
        <seg>次のセクションで型制約における `.class` サフィックスについて記載します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next sections will assume you know what &lt;g1&gt;object oriented programming&lt;/g1&gt; is, as well as the concepts of &lt;g2&gt;classes&lt;/g2&gt; and &lt;g3&gt;methods&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T082253Z" creationid="makenowjust" creationdate="20200427T095206Z">
        <seg>ここからの章では&lt;g1&gt;オブジェクト指向プログラミング&lt;/g1&gt;についての基本的な知識として、&lt;g2&gt;クラス&lt;/g2&gt;や&lt;g3&gt;メソッド&lt;/g3&gt;といった概念を理解していることを前提としています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next sections will assume you know what &lt;g1&gt;object oriented programming&lt;/g1&gt;http://en.wikipedia.org/wiki/Object-oriented_programming&lt;e4/&gt; is, as well as the concepts of &lt;g2&gt;classes&lt;/g2&gt;http://en.wikipedia.org/wiki/Class_%28computer_programming%29&lt;e5/&gt; and &lt;g3&gt;methods&lt;/g3&gt;http://en.wikipedia.org/wiki/Method_%28computer_programming%29&lt;e6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093033Z" creationid="makenowjust" creationdate="20200518T093033Z">
        <seg>ここからの章は&lt;g1&gt;オブジェクト指向プログラミング&lt;/g1&gt;http://en.wikipedia.org/wiki/Object-oriented_programming&lt;e4/&gt;についての基本的な知識として、&lt;g2&gt;クラス&lt;/g2&gt;http://en.wikipedia.org/wiki/Class_%28computer_programming%29&lt;e5/&gt;や&lt;g3&gt;メソッド&lt;/g3&gt;http://en.wikipedia.org/wiki/Method_%28computer_programming%29&lt;e6/&gt;といった概念を理解していることを前提としています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next sections will assume you know what [object oriented programming](http://en.wikipedia.org/wiki/Object-oriented_programming) is, as well as the concepts of [classes](http://en.wikipedia.org/wiki/Class_%28computer_programming%29) and [methods](http://en.wikipedia.org/wiki/Method_%28computer_programming%29).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T024543Z" creationid="hirofumiwakasugi" creationdate="20150904T012446Z">
        <seg>この章では、[クラス](http://en.wikipedia.org/wiki/Class_%28computer_programming%29)や[メソッド](http://en.wikipedia.org/wiki/Method_%28computer_programming%29)といった[オブジェクト指向プログラミング](http://en.wikipedia.org/wiki/Object-oriented_programming)についての基本的な知識を持っていることを前提としています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The nilable variant &lt;g1&gt;[]?&lt;/g1&gt; is supposed to return &lt;g2&gt;nil&lt;/g2&gt; when
the index is not found, while the non-nilable variant raises in that case.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T101254Z" creationid="makenowjust" creationdate="20200502T101254Z">
        <seg>nil を受け入れるもの &lt;g1&gt;[]?&lt;/g1&gt; はもしインデックスに対応する値が存在しなかった場合に &lt;g2&gt;nil&lt;/g2&gt; を返すものです。nil を受け入れない場合はその場合にはエラーを起こします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T150431Z" creationid="makenowjust" creationdate="20200429T150331Z">
        <seg>引数の数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of arguments must match the proc's type:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172007Z" creationid="hirofumiwakasugi" creationdate="20150902T021953Z">
        <seg>そのとき引数の型は Proc の型と一致している必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of parameters</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T075750Z" creationid="makenowjust" creationdate="20210324T075750Z">
        <seg>引数の数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of these must be at least the number of positional arguments without a default value.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T155119Z" creationid="makenowjust" creationdate="20200501T154807Z">
        <seg>このようにマッチした引数の数は、少なくともデフォルト値のない位置指定の引数の数である必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of these must be at least the number of positional parameters without a default value.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T091450Z" creationid="makenowjust" creationdate="20210324T091450Z">
        <seg>このようにマッチした引数の数は、少なくともデフォルト値のない位置指定の引数の数である必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The only difference is that the first error message is a little more clear, but both definitions are safe in that you will get a compile time error anyway.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T013509Z" creationid="hirofumiwakasugi" creationdate="20150908T013300Z">
        <seg>前者のエラーメッセージの方がより明快であるという少しの違いはあるものの、コンパイル時にエラーが発生するという点では、これらはどちらも安全な定義のしかたであると言えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The only exception is &lt;g2&gt;self&lt;/g2&gt; as a receiver:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T105413Z" creationid="makenowjust" creationdate="20200502T105413Z">
        <seg>例外として、&lt;g2&gt;self&lt;/g2&gt; をレシーバとすることはできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The only falsey values are &lt;g1&gt;nil&lt;/g1&gt;, &lt;g2&gt;false&lt;/g2&gt; and null pointers (pointers whose memory address is zero).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T060546Z" creationid="makenowjust" creationdate="20200424T060546Z">
        <seg>&lt;g1&gt;nil&lt;/g1&gt;と&lt;g2&gt;false&lt;/g2&gt;そしてヌルポインタ (メモリのアドレスが0のポインタ) のみが偽の値となり、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The only falsey values are `nil`, `false` and null pointers (pointers whose memory address is zero).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T005747Z" creationid="hirofumiwakasugi" creationdate="20150903T005731Z">
        <seg>`nil` と `false`、そしてヌルポインタ (メモリのアドレスが0のポインタ) のみが偽の値となり、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The only supported &lt;g1&gt;{ARCH}&lt;/g1&gt; for rpm is &lt;g2&gt;x86_64&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T093650Z" creationid="makenowjust" creationdate="20210130T093648Z">
        <seg>この rpm では &lt;g1&gt;{ARCH}&lt;/g1&gt; としては &lt;g2&gt;x86_64&lt;/g2&gt; のみをサポートしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The only way to create a Symbol is by using a symbol literal, denoted by a colon (&lt;g1&gt;:&lt;/g1&gt;) followed by an identifier.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171027Z" creationid="makenowjust" creationdate="20200420T171027Z">
        <seg>シンボルを生成する唯一の方法はシンボルリテラルを使うことです。それは、コロン (&lt;g1&gt;:&lt;/g1&gt;) のあとに識別子を続けて記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The order of the keys will be the ones from the tuple on the left hand side.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T145436Z" creationid="makenowjust" creationdate="20200429T145412Z">
        <seg>キーの順序は左辺の型の順序のものとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The output file has the same name as the source file minus the extension &lt;g3&gt;.cr&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150601Z" creationid="makenowjust" creationdate="20200419T150601Z">
        <seg>出力されるファイルのファイル名はソースコードのファイル名から&lt;g3&gt;.cr&lt;/g3&gt;という拡張子を除いたものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The overflow detection was fixed to correctly handle operations with mixed sign operands.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T151733Z" creationid="makenowjust" creationdate="20200610T151733Z">
        <seg>符号付きと符号無しの数値の混ざった演算のオーバーフローの検出が修正されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The package &lt;g1&gt;crystal-lang/crystal-db&lt;/g1&gt;https://github.com/crystal-lang/crystal-db&lt;e2/&gt; offers a unified api across different drivers.</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T190540Z" creationid="daiki" creationdate="20200705T185548Z">
        <seg>&lt;g1&gt;crystal-lang/crystal-db&lt;/g1&gt;https://github.com/crystal-lang/crystal-db&lt;e2/&gt; パッケージは異なるドライバーに対して統一された API を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The parser got a lot of love.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T131956Z" creationid="makenowjust" creationdate="20200610T131956Z">
        <seg>パーサーはたくさんの愛を受けました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The passed arguments become a &lt;g1&gt;Tuple&lt;/g1&gt; in the method's body:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T083554Z" creationid="makenowjust" creationdate="20200429T154212Z">
        <seg>渡された引数はメソッドの中で &lt;g1&gt;Tuple&lt;/g1&gt; として扱うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The passed arguments become a &lt;g1&gt;Tuple&lt;/g1&gt;http://crystal-lang.org/api/Tuple.html&lt;e2/&gt; in the method's body:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T091429Z" creationid="makenowjust" creationdate="20200518T091429Z">
        <seg>渡された引数はメソッドの中で &lt;g1&gt;Tuple&lt;/g1&gt;http://crystal-lang.org/api/Tuple.html&lt;e2/&gt; として扱えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The passed arguments become a &lt;g1&gt;Tuple&lt;/g1&gt;https://crystal-lang.org/api/latest/Tuple.html&lt;e2/&gt; in the method's body:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T075118Z" creationid="makenowjust" creationdate="20210324T075118Z">
        <seg>渡された引数はメソッドの中で &lt;g1&gt;Tuple&lt;/g1&gt;https://crystal-lang.org/api/latest/Tuple.html&lt;e2/&gt; として扱えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The passed arguments become a [Tuple](http://crystal-lang.org/api/Tuple.html) in the method's body:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042155Z" creationid="hirofumiwakasugi" creationdate="20150907T042150Z">
        <seg>渡された引数はメソッドの中で[タプル (Tuple)](http://crystal-lang.org/api/Tuple.html) として扱うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pipe (&lt;g1&gt;|&lt;/g1&gt;) in types creates a union type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T120358Z" creationid="makenowjust" creationdate="20200507T120358Z">
        <seg>型でパイプ記号 (&lt;g1&gt;|&lt;/g1&gt;) を使うと、ユニオン型となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pipe (`|`) in types creates a union type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010514Z" creationid="hirofumiwakasugi" creationdate="20151009T010514Z">
        <seg>型でパイプ (`|`) を使うと、型の組み合わせ (ユニオン型) となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The port of the HTTP server is set by using the method bind_tcp on the object HTTP::Server (the port set to 8080).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162432Z" creationid="makenowjust" creationdate="20200413T162059Z">
        <seg>HTTP サーバーのポート番号は HTTP::Server オブジェクトの bind_tcp メソッドによってセットされます (ポート番号を 8080 にセット)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The problem is that there's only one variable &lt;g1&gt;i&lt;/g1&gt; that all spawned fibers refer to, and when &lt;g2&gt;Fiber.yield&lt;/g2&gt; is executed its value is 10.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103356Z" creationid="akiji" creationdate="20200428T080252Z">
        <seg>ここでの問題は、1つの変数 &lt;g1&gt;i&lt;/g1&gt; を全てのファイバが参照していて、&lt;g2&gt;Fiber.yield&lt;/g2&gt; が実行された頃にはその値が10になってしまっている点です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The program is a global object in which you can define types, methods and file-local variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T015126Z" creationid="hirofumiwakasugi" creationdate="20150904T015126Z">
        <seg>プログラムはそれ自体がグローバルオブジェクトです。その中で、型やメソッド、そしてファイルローカルな変数の定義を行うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The program’s source code must be encoded in UTF-8.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T050358Z" creationid="hirofumiwakasugi" creationdate="20150901T050314Z">
        <seg>プログラムのソースコードは UTF-8 でエンコードされている必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pseudo-method &lt;g1&gt;is_a?&lt;/g1&gt; determines whether an expression's runtime type inherits or includes another type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T112935Z" creationid="makenowjust" creationdate="20200512T112935Z">
        <seg>&lt;g1&gt;is_a?&lt;/g1&gt; という疑似メソッドを使うと、ある他の型を継承、もしくはインクルードしているしていることを判定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pseudo-method &lt;g1&gt;nil?&lt;/g1&gt; determines whether an expression's runtime type is &lt;g2&gt;Nil&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="tobias" changedate="20200501T143151Z" creationid="tobias" creationdate="20200501T143151Z">
        <seg>&lt;g1&gt;nil?&lt;/g1&gt;という疑似メソッドを使うと、ある式の実行時の型が&lt;g2&gt;Nil&lt;/g2&gt;かどうかを判定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pseudo-method &lt;g1&gt;responds_to?&lt;/g1&gt; determines whether a type has a method with the given name.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T113710Z" creationid="makenowjust" creationdate="20200512T113710Z">
        <seg>&lt;g1&gt;responds_to?&lt;/g1&gt; という疑似メソッドを使うと、ある名前のメソッドを持っているかどうかを判定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pseudo-method `is_a?` determines whether a type inherits or includes another type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T013807Z" creationid="hirofumiwakasugi" creationdate="20150930T005326Z">
        <seg>`is_a?` という擬似メソッドを使うと、ある他の型を継承、もしくはインクルードしていることを判定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pseudo-method `responds_to?` determines whether a type has a method with the given name.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T013857Z" creationid="hirofumiwakasugi" creationdate="20150930T013756Z">
        <seg>`responds_to?` という擬似メソッドを使うと、ある名前のメソッドを持っているかどうかを判定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The purpose of comments is documenting the code.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T093008Z" creationid="makenowjust" creationdate="20210324T093008Z">
        <seg>コメントの目的はコードをドキュメント化することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The range operators are used in &lt;g1&gt;Range&lt;/g1&gt;
literals.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T092000Z" creationid="makenowjust" creationdate="20200502T091955Z">
        <seg>&lt;g1&gt;Range&lt;/g1&gt; リテラルに範囲演算子は使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The real reason the compiler does this is to be able to compile programs faster by not creating all kinds of different similar unions, also making the generated code smaller in size.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010333Z" creationid="hirofumiwakasugi" creationdate="20150910T033359Z">
        <seg>コンパイラがこの仕様となっている本当の理由は、同じ種類の型の組み合わせ (ユニオン型) をいくつも作らないことでプログラムのコンパイルを高速化し、生成されたコードのサイズを小さくするためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reason for this is that a fiber is not executed as soon as it is spawned.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T074717Z" creationid="akiji" creationdate="20200428T074717Z">
        <seg>その理由は、ファイバーが生成された時点で即座に実行されるわけではないためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reason for this is that performance without full optimizations is still pretty good and provides fast compile times, so you can use the `crystal` command almost as if it were an interpreter.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072131Z" creationid="hirofumiwakasugi" creationdate="20150901T072131Z">
        <seg>このような動作となっている理由は、完全最適化をしない場合にも、ある程度十分なパフォーマンスを維持したままで高速なコンパイルが可能であるため、まるでインタープリタのように `crystal` コマンドを使用することができるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reason for this is to allow creating Domain Specific Languages (DSLs) using &lt;g1&gt;do ... end&lt;/g1&gt; to have them be read as plain English:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184452Z" creationid="makenowjust" creationdate="20200505T184452Z">
        <seg>このようになっている理由はドメイン固有言語 (DSL) を作成する際に、&lt;g1&gt;do ... end&lt;/g1&gt; が自然な英語のように読み下せるようにするためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reason is that if we don't do it, and our code doesn't reference it anymore, the GC will collect it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T091041Z" creationid="makenowjust" creationdate="20200512T091041Z">
        <seg>この理由は、そうしなければどこからも参照していると見なされず、GC がそれを回収してしまうからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reason is that the compiler will also look at a class method's body and if it can apply one of the previous rules (it's a &lt;g2&gt;new&lt;/g2&gt; method, or it's a literal, etc.) it will infer the type from that expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T142154Z" creationid="makenowjust" creationdate="20200427T142154Z">
        <seg>なぜなら、コンパイラはクラスメソッドの本体を見て、これまで説明してきた規則 (&lt;g2&gt;new&lt;/g2&gt; メソッドの呼び出し、単純なリテラル、など) が適用できる場合に、式の型を推論するためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reason is that understanding how arguments are matched becomes very difficult; positional arguments are easier to reason about in this case.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T083400Z" creationid="makenowjust" creationdate="20200429T153020Z">
        <seg>これはスプラット展開がどのような引数にマッチしたかどうかを把握するのが困難なためです。引数を順番に渡した場合は簡単なので、動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reason why &lt;g1&gt;socket.gets&lt;/g1&gt; and &lt;g2&gt;sleep&lt;/g2&gt; behave like this is because their implementations talk directly with the Runtime Scheduler and the Event Loop, there's nothing magical about it.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T071126Z" creationid="akiji" creationdate="20200428T071126Z">
        <seg>&lt;g1&gt;socket.gets&lt;/g1&gt;や&lt;g2&gt;sleep&lt;/g2&gt;がこのように動作する理由は、それらがラインタイムスケジューラやイベントループと直接会話できるように実装されているからで、魔法でもなんでもありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The receiver can't be anything else than a variable or call.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100046Z" creationid="makenowjust" creationdate="20200502T100046Z">
        <seg>レシーバは変数もしくは呼び出し以外にはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The recommended thing to do is to use enums whenever possible, only use symbols for the internal implementation of an API, and avoid symbols for public APIs.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T183231Z" creationid="hirofumiwakasugi" creationdate="20150916T012326Z">
        <seg>したがって、列挙型を利用できるときには常に列挙型を利用することを推奨します。シンボルを使うのは API の内部的な実装に留めて、公開する API ではシンボルを使わないようにしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result is that on every &lt;g5&gt;major&lt;/g5&gt; release there will be some maintenance burden.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T140830Z" creationid="makenowjust" creationdate="20200610T140830Z">
        <seg>この結果、任意の&lt;g5&gt;メジャー&lt;/g5&gt;リリースで何らかの対応が必要になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result of the last expression is &lt;g1&gt;2&lt;/g1&gt; because the last expression of the &lt;g2&gt;transform&lt;/g2&gt; method is &lt;g3&gt;yield&lt;/g3&gt;, whose value is the last expression of the block.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190042Z" creationid="makenowjust" creationdate="20200505T190042Z">
        <seg>この最後の式の実行結果は &lt;g1&gt;2&lt;/g1&gt; になります。&lt;g2&gt;transform&lt;/g2&gt; メソッドの最後の式は &lt;g3&gt;yield&lt;/g3&gt; であり、そしてその値はブロックの最後の式になるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result of the last expression is `2` because the last expression of the `transform` method is `yield`, whose value is the last expression of the block.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024256Z" creationid="hirofumiwakasugi" creationdate="20150916T024256Z">
        <seg>この最後の式の実行結果は `2` になります。`transform` メソッドの最後の式は `yield` であり、そしてその値はブロックの最後の式の値になるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The return type follows the &lt;g1&gt;type grammar&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T141214Z" creationid="makenowjust" creationdate="20200430T141214Z">
        <seg>戻り値の型は&lt;g1&gt;型の文法&lt;/g1&gt;の記法に従います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The return type follows the [type grammar](type_grammar.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T024720Z" creationid="hirofumiwakasugi" creationdate="20150909T024710Z">
        <seg>戻り値の型は[型文法](type_grammar.html)の記法にしたがいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The return type is inferred from the proc's body.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171338Z" creationid="hirofumiwakasugi" creationdate="20150902T021428Z">
        <seg>戻り値の型は Proc の内容から推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The rules are many, but usually the first three are most used.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T134503Z" creationid="makenowjust" creationdate="20200427T134503Z">
        <seg>規則はいくつかありますが、ほとんどの場合最初のものを利用することになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The same &lt;g1&gt;escaping&lt;/g1&gt; and &lt;g2&gt;interpolation rules&lt;/g2&gt; apply as for regular strings.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172608Z" creationid="makenowjust" creationdate="20200422T172608Z">
        <seg>&lt;g1&gt;エスケープシーケンス&lt;/g1&gt;と&lt;g2&gt;補間&lt;/g2&gt;は通常の文字列と同様に利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The scheduler has a queue of:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T062922Z" creationid="akiji" creationdate="20200428T062922Z">
        <seg>ランタイムスケジューラは以下のキューを持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The schema of the uri determines the expected driver.</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T192306Z" creationid="daiki" creationdate="20200705T192306Z">
        <seg>uri のスキーマは期待されるドライバーを決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second call's value is "hello" because a &lt;g3&gt;break&lt;/g3&gt; was performed.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190431Z" creationid="makenowjust" creationdate="20200505T190431Z">
        <seg>一方2番目の呼び出しでは &lt;g3&gt;break&lt;/g3&gt; が実行されているため、値が "hello" となっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second call's value is "hello" because a `break` was performed.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024925Z" creationid="hirofumiwakasugi" creationdate="20150916T024913Z">
        <seg>一方で2番目の呼び出しでは、`break` が実行されているために値が "hello" となっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second fiber is executed, there's a value on the channel, it's obtained, and execution continues, first with the first fiber, then with the main fiber, because &lt;g2&gt;Fiber.yield&lt;/g2&gt; puts a fiber at the end of the execution queue.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103732Z" creationid="akiji" creationdate="20200429T142452Z">
        <seg>2つ目のファイバが実行されると、チャネルにすでに値があるのでそれを受け取って実行を続け、その後まず1つ目のファイバが実行され、最後にメインファイバが実行されます。こうした順序になる理由は、&lt;g2&gt;Fiber.yield&lt;/g2&gt;がそのファイバを実行キューの最後に置くためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second point has a reason to it: a struct has a very well defined memory layout.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T174928Z" creationid="makenowjust" creationdate="20200505T174928Z">
        <seg>2番目のものには、構造体はメモリレイアウトが厳密に定まっていないといけない、という事情があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second rule is very convenient because of the typical directory structure of a project:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155844Z" creationid="hirofumiwakasugi" creationdate="20150905T155824Z">
        <seg>特に2番目のルールは、プロジェクトの典型的なデイレクトリ構造にマッチしているためとても便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second rule means that in addition to having this:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085850Z" creationid="makenowjust" creationdate="20200427T085319Z">
        <seg>2番目の規則は、次のようになっているときに、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second use case is making a method argument more readable inside a method body:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T161347Z" creationid="makenowjust" creationdate="20200501T161347Z">
        <seg>2つ目のユースケースは、メソッド本体での可読性を向上させるため、です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second use case is making a method parameter more readable inside a method body:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T092424Z" creationid="makenowjust" creationdate="20210324T092424Z">
        <seg>2つ目のユースケースはメソッド本体での可読性を向上させるため、です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The semantic for `next` and `return` inside captured blocks [might swap in the future](https://github.com/manastech/crystal/issues/420).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T062022Z" creationid="hirofumiwakasugi" creationdate="20150918T062022Z">
        <seg>捕捉されたブロックにおける `next` と `return` の動作は[将来的に入れ替わるかもしれません](https://github.com/manastech/crystal/issues/420)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The semantics of the &lt;g1&gt;crystal:&lt;/g1&gt; property though is slightly different from dependencies’ version: &lt;g2&gt;crystal: x.y.z&lt;/g2&gt; is interpreted as &lt;g3&gt;~&gt; x.y, &gt;= x.y.z&lt;/g3&gt; (ie: &lt;g4&gt;&gt;= x.y.z, &lt; (x+1).0.0&lt;/g4&gt;) for convenience.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T140730Z" creationid="makenowjust" creationdate="20200610T140730Z">
        <seg>&lt;g1&gt;crystal:&lt;/g1&gt; プロパティの動作は依存関係のバージョン指定とほとんど同じように動作します。違いは、利便性のため &lt;g2&gt;crystal: x.y.z&lt;/g2&gt; が &lt;g3&gt;~&gt; x.y, &gt;= x.y.z&lt;/g3&gt; のように (つまり、 &lt;g4&gt;&gt;= x.y.z, &lt; (x+1).0.0&lt;/g4&gt;) 解釈されることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The setup of logging got simpler.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T153120Z" creationid="makenowjust" creationdate="20200610T153120Z">
        <seg>ログのセットアップがよりシンプルになりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The shards command</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T172801Z" creationid="makenowjust" creationdate="20200419T172801Z">
        <seg>shards コマンド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The special variable &lt;g1&gt;$?&lt;/g1&gt; holds the exit status of the command as a &lt;g2&gt;&lt;g3&gt;Process::Status&lt;/g3&gt;&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172819Z" creationid="makenowjust" creationdate="20200422T172742Z">
        <seg>特殊変数 &lt;g1&gt;$?&lt;/g1&gt; はコマンドの実行結果の &lt;g2&gt;&lt;g3&gt;Process::Status&lt;/g3&gt;&lt;/g2&gt; オブジェクトになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The special variable &lt;g1&gt;$?&lt;/g1&gt; holds the exit status of the command as a &lt;g2&gt;&lt;g3&gt;Process::Status&lt;/g3&gt;&lt;/g2&gt;https://crystal-lang.org/api/0.27.0/Process/Status.html&lt;e4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T084900Z" creationid="makenowjust" creationdate="20200518T084900Z">
        <seg>特殊変数 &lt;g1&gt;$?&lt;/g1&gt; はコマンドの実行結果の &lt;g2&gt;&lt;g3&gt;Process::Status&lt;/g3&gt;&lt;/g2&gt;https://crystal-lang.org/api/0.27.0/Process/Status.html&lt;e4/&gt; オブジェクトになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The special variable &lt;g1&gt;$?&lt;/g1&gt; holds the exit status of the command as a &lt;g2&gt;&lt;g3&gt;Process::Status&lt;/g3&gt;&lt;/g2&gt;https://crystal-lang.org/api/latest/Process/Status.html&lt;e4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T084417Z" creationid="makenowjust" creationdate="20210324T084417Z">
        <seg>特殊変数 &lt;g1&gt;$?&lt;/g1&gt; はコマンドの実行結果の &lt;g2&gt;&lt;g3&gt;Process::Status&lt;/g3&gt;&lt;/g2&gt;https://crystal-lang.org/api/latest/Process/Status.html&lt;e4/&gt; オブジェクトになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The splat argument can also be left unnamed, with the meaning "after this, named arguments follow":</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T083615Z" creationid="makenowjust" creationdate="20200429T154722Z">
        <seg>スプラット指定された引数は名前をつけないこともできて、その場合、以降の引数は「名前付き引数として渡さなければいけない」ということになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The splat parameter can also be left unnamed, with the meaning "after this, named parameters follow":</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T075343Z" creationid="makenowjust" creationdate="20210324T075343Z">
        <seg>スプラット指定された引数は名前をつけないこともできて、その場合はそれ以降の引数は「名前付き引数として渡さなければいけない」ということになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The standard library defines the &lt;g1&gt;LibC&lt;/g1&gt; lib with aliases for common C types, like &lt;g2&gt;int&lt;/g2&gt;, &lt;g3&gt;short&lt;/g3&gt;, &lt;g4&gt;size_t&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T032505Z" creationid="makenowjust" creationdate="20200511T032505Z">
        <seg>標準ライブラリには &lt;g1&gt;LibC&lt;/g1&gt; ライブラリが定義されていて、&lt;g2&gt;int&lt;/g2&gt; や &lt;g3&gt;short&lt;/g3&gt;、&lt;g4&gt;size_t&lt;/g4&gt; といった一般的な C の型のエイリアスを提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The standard library defines the &lt;g1&gt;LibC&lt;/g1&gt;https://github.com/crystal-lang/crystal/blob/master/src/lib_c.cr&lt;e5/&gt; lib with aliases for common C types, like &lt;g2&gt;int&lt;/g2&gt;, &lt;g3&gt;short&lt;/g3&gt;, &lt;g4&gt;size_t&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T083454Z" creationid="makenowjust" creationdate="20200518T083454Z">
        <seg>標準ライブラリには &lt;g1&gt;LibC&lt;/g1&gt;https://github.com/crystal-lang/crystal/blob/master/src/lib_c.cr&lt;e5/&gt; ライブラリが定義されており、&lt;g2&gt;int&lt;/g2&gt; や &lt;g3&gt;short&lt;/g3&gt;、&lt;g4&gt;size_t&lt;/g4&gt; といった一般的な C の型のエイリアスを提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The standard library defines the [LibC](https://github.com/manastech/crystal/blob/master/src/libc.cr) lib with aliases for common C types, like `int`, `short`, `size_t`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T042542Z" creationid="hirofumiwakasugi" creationdate="20151005T042542Z">
        <seg>標準ライブラリには [LibC](https://github.com/manastech/crystal/blob/master/src/libc.cr) ライブラリが定義されており、`int`/`short`/`size_t` といった一般的な C の型のエイリアスを提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The standard library is designed in a way to help you do that.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T025328Z" creationid="akiji" creationdate="20200430T120429Z">
        <seg>標準ライブラリはそのようにデザインされているので参考になるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The standard library usually doesn't have a namespace as its types and methods are very common, to avoid writing long names.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T132615Z" creationid="hirofumiwakasugi" creationdate="20150911T131641Z">
        <seg>ただし、標準ライブラリには基本的に名前空間が設定されていません。これは、標準ライブラリの型やメソッドはごく一般的に利用されるものなので、そのたびに長い名前を書かずに済むようにするためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The standard library usually provides a couple of methods to accomplish something: one raises, one returns &lt;g1&gt;nil&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T105027Z" creationid="makenowjust" creationdate="20200506T104844Z">
        <seg>そこで、標準ライブラリでは、例外を発生する方法に加えて、&lt;g1&gt;nil&lt;/g1&gt; を返す方法も用意しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The standard library usually provides a couple of methods to accomplish something: one raises, one returns `nil`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T023812Z" creationid="hirofumiwakasugi" creationdate="20150907T023528Z">
        <seg>そこで、標準ライブラリでは、例外を発生する方法に加えて、`nil` を返す方法も用意しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The status information from the child process is stored in the object
that status_ptr points to, unless status_ptr is a null pointer.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T081924Z" creationid="makenowjust" creationdate="20200512T081924Z">
        <seg>status_ptr が指すオブジェクトに保持されている子プロセスからのステータス情報</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The std-lib and language version is also a dependency.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T140613Z" creationid="makenowjust" creationdate="20200610T140613Z">
        <seg>そして、標準ライブラリや言語のバージョンもまた依存関係なのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The story is not yet complete, but in &lt;g1&gt;#8538&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/8538&lt;e3/&gt; a huge step forward was made.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T133145Z" creationid="makenowjust" creationdate="20200610T133145Z">
        <seg>この改善はまだ完了してはいませんが、&lt;g1&gt;#8538&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/8538&lt;e3/&gt;で大きな一歩を踏み出すことができました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The supported flag keywords are:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214450Z" creationid="makenowjust" creationdate="20200412T214450Z">
        <seg>次のキーワードがサポートされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The syntax for using query parameters depends on the database driver because they are typically just passed through to the database.</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200706T001556Z" creationid="daiki" creationdate="20200705T234317Z">
        <seg>クエリパラメータを使用するための構文はデータベースドライバに依存します。なぜならそれらは通常データベースに渡されるだけだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The techniques described above for instance variables will also work for proc and method calls.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T021445Z" creationid="hirofumiwakasugi" creationdate="20150903T021336Z">
        <seg>こういった Proc やメソッド呼び出しの場合にも、上記でインスタンス変数に関して記載したテクニックが有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The ternary &lt;g1&gt;if&lt;/g1&gt; allows writing an &lt;g2&gt;if&lt;/g2&gt; in a shorter way:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080927Z" creationid="makenowjust" creationdate="20200424T080927Z">
        <seg>&lt;g2&gt;if&lt;/g2&gt;をより簡潔に書く方法として、3項演算子という構文があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The ternary `if` allows writing an `if` in a shorter way:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013720Z" creationid="hirofumiwakasugi" creationdate="20150903T013720Z">
        <seg>3項演算子を使うことで、`if` 文をより簡潔に書くことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The third rule is very convenient because of the typical directory structure of a project:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T090051Z" creationid="makenowjust" creationdate="20200427T090051Z">
        <seg>3番目の規則はプロジェクトの典型的なディレクトリ構造にマッチしているためとても便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The time is #{Time.local}"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162735Z" creationid="makenowjust" creationdate="20200413T162735Z">
        <seg>The time is #{Time.local}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The time is #{Time.local}"
end

address = server.bind_tcp 8080
puts "Listening on http://#{address}"
server.listen</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T161816Z" creationid="makenowjust" creationdate="20200413T161816Z">
        <seg>The time is #{Time.local}"
end

address = server.bind_tcp 8080
puts "Listening on http://#{address}"
server.listen</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type after the &lt;g1&gt;uninitialized&lt;/g1&gt; keyword follows the &lt;g2&gt;type grammar&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T020844Z" creationid="makenowjust" creationdate="20200511T020844Z">
        <seg>&lt;g1&gt;uninitialized&lt;/g1&gt; キーワードに続く型は &lt;g2&gt;型の文法&lt;/g2&gt;にしたがって書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type after the `uninitialized` keyword follows the [type grammar](type_grammar.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061700Z" creationid="hirofumiwakasugi" creationdate="20160204T061700Z">
        <seg>`uninitialized` キーワードに続く型は[型文法](type_grammar.html)にしたがって書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type after the two colons (`::`) follows the [type grammar](type_grammar.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T120341Z" creationid="hirofumiwakasugi" creationdate="20150906T115851Z">
        <seg>2つのコロン (`::`) に続く型は[型文法](type_grammar.html)にしたがって書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type arguments can be explicitly specified as part of the type name:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173756Z" creationid="makenowjust" creationdate="20200420T173756Z">
        <seg>型引数は型名の部分で明示的に指定することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type is not obvious for a human reading the code: they would also have to check all uses of &lt;g1&gt;Person&lt;/g1&gt; to find this out.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T132556Z" creationid="makenowjust" creationdate="20200427T132556Z">
        <seg>コード読む際に型が明確でない。型を知るためには&lt;g1&gt;Person&lt;/g1&gt;中でどのように使われているかすべてを確認する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of &lt;g3&gt;proc&lt;/g3&gt; is &lt;g4&gt;&lt;g5&gt;Proc(Int32, Int32)&lt;/g5&gt;&lt;/g4&gt;https://crystal-lang.org/api/latest/Proc.html&lt;e8/&gt;, a function that accepts a single &lt;g6&gt;Int32&lt;/g6&gt; argument and returns an &lt;g7&gt;Int32&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T101234Z" creationid="makenowjust" creationdate="20210324T101234Z">
        <seg>このとき &lt;g3&gt;proc&lt;/g3&gt; の型は &lt;g4&gt;&lt;g5&gt;Proc(Int32, Int32)&lt;/g5&gt;&lt;/g4&gt;https://crystal-lang.org/api/latest/Proc.html&lt;e8/&gt; で、これは単一の &lt;g6&gt;Int32&lt;/g6&gt; を引数に取り、&lt;g7&gt;Int32&lt;/g7&gt; を返す関数となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of &lt;g3&gt;proc&lt;/g3&gt; is &lt;g4&gt;Proc(Int32, Int32)&lt;/g4&gt;, a function that accepts a single &lt;g5&gt;Int32&lt;/g5&gt; argument and returns an &lt;g6&gt;Int32&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T073754Z" creationid="makenowjust" creationdate="20200506T073754Z">
        <seg>このとき &lt;g3&gt;proc&lt;/g3&gt; の型は &lt;g4&gt;Proc(Int32, Int32)&lt;/g4&gt; で、これは単一の  &lt;g5&gt;Int32&lt;/g5&gt; の引数を受け取り、 &lt;g6&gt;Int32&lt;/g6&gt; を返す関数となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of &lt;g3&gt;proc&lt;/g3&gt; is &lt;g4&gt;Proc(Int32, Int32)&lt;/g4&gt;http://crystal-lang.org/api/Proc.html&lt;e7/&gt;, a function that accepts a single &lt;g5&gt;Int32&lt;/g5&gt; argument and returns an &lt;g6&gt;Int32&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T083639Z" creationid="makenowjust" creationdate="20200518T083639Z">
        <seg>このとき、&lt;g3&gt;proc&lt;/g3&gt; の型は &lt;g4&gt;Proc(Int32, Int32)&lt;/g4&gt;http://crystal-lang.org/api/Proc.html&lt;e7/&gt; で、これは単一の &lt;g5&gt;Int32&lt;/g5&gt; を引数に取り、&lt;g6&gt;Int32&lt;/g6&gt; を返す関数となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of `proc` is [Proc(Int32, Int32)](http://crystal-lang.org/api/Proc.html), a function that accepts a single `Int32` argument and returns an `Int32`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061901Z" creationid="hirofumiwakasugi" creationdate="20150916T040308Z">
        <seg>このとき、`proc` の型は [Proc(Int32, Int32)](http://crystal-lang.org/api/Proc.html) で、単一の `Int32` の引数を受け取り、`Int32` の戻り値を返す関数となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of a variable after a &lt;g1&gt;while&lt;/g1&gt; depends on the type it had before the &lt;g2&gt;while&lt;/g2&gt; and the type it had before leaving the &lt;g3&gt;while&lt;/g3&gt;'s body:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095118Z" creationid="makenowjust" creationdate="20200424T095118Z">
        <seg>&lt;g1&gt;while&lt;/g1&gt;を実行したあとの変数の型は、&lt;g2&gt;while&lt;/g2&gt;以前の型と、&lt;g3&gt;while&lt;/g3&gt;を抜ける直前の型によって決まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of a variable after a `while` depends on the type it had before the `while` and the type it had before leaving the `while`'s body:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052141Z" creationid="hirofumiwakasugi" creationdate="20150905T052141Z">
        <seg>`while` の後である変数の型が何であるかは、`while` 以前の型と、そして `while` の本体を抜ける前の型によって決まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of a variable or expression can consist of multiple types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T143609Z" creationid="makenowjust" creationdate="20200429T143602Z">
        <seg>変数や式の型は複数の式から構成されることがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of an enum member is &lt;g1&gt;Int32&lt;/g1&gt; by default, even if you specify a different type in a constant value:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083928Z" creationid="makenowjust" creationdate="20200512T083833Z">
        <seg>列挙型の要素の型はデフォルトで &lt;g1&gt;Int32&lt;/g1&gt; です。これは、定数の値に別の型を指定した場合であっても同様です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of an enum member is `Int32` by default, even if you specify a different type in a constant value:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053220Z" creationid="hirofumiwakasugi" creationdate="20151007T053220Z">
        <seg>enum の要素の型はデフォルトで `Int32` です。これは、定数の値に別の型を指定した場合であっても同様です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of the argument is a &lt;g2&gt;NamedTuple&lt;/g2&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T155104Z" creationid="makenowjust" creationdate="20200429T155104Z">
        <seg>この引数の型は &lt;g2&gt;NamedTuple&lt;/g2&gt; となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of the block in a method that uses &lt;g1&gt;yield&lt;/g1&gt; can be restricted using the &lt;g2&gt;&amp;block&lt;/g2&gt; syntax.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190145Z" creationid="makenowjust" creationdate="20200505T190145Z">
        <seg>&lt;g1&gt;yield&lt;/g1&gt; で使うブロックの型を &lt;g2&gt;&amp;block&lt;/g2&gt; によって制約することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of the method call is the union type of the return types of those methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T144405Z" creationid="makenowjust" creationdate="20200429T144405Z">
        <seg>また、その呼び出しの型は、すべての型での呼び出し結果の型のユニオン型になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of the parameter is a &lt;g2&gt;NamedTuple&lt;/g2&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T075424Z" creationid="makenowjust" creationdate="20210324T075424Z">
        <seg>この引数の型は &lt;g2&gt;NamedTuple&lt;/g2&gt; となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of the value is &lt;g1&gt;Int32&lt;/g1&gt; by default but can be changed:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182052Z" creationid="makenowjust" creationdate="20200505T182052Z">
        <seg>この値の型は &lt;g1&gt;Int32&lt;/g1&gt; ですが、変更することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of the value is `Int32` by default but can be changed:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024636Z" creationid="hirofumiwakasugi" creationdate="20150914T024636Z">
        <seg>デフォルトでは値は `Int32` 型ですが、変更することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of this variable is &lt;g2&gt;&lt;g3&gt;Def&lt;/g3&gt;&lt;/g2&gt; unless the macro is outside of a method, in this case it's &lt;g4&gt;&lt;g5&gt;NilLiteral&lt;/g5&gt;&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220108Z" creationid="makenowjust" creationdate="20200509T220108Z">
        <seg>この変数の型は &lt;g2&gt;&lt;g3&gt;Def&lt;/g3&gt;&lt;/g2&gt; で、もしマクロがメソッドの外で実行されていた場合は &lt;g4&gt;&lt;g5&gt;NilLiteral&lt;/g5&gt;&lt;/g4&gt; となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of this variable is &lt;g2&gt;&lt;g3&gt;Def&lt;/g3&gt;&lt;/g2&gt;https://crystal-lang.org/api/Crystal/Macros/Def.html&lt;e6/&gt; unless the macro is outside of a method, in this case it's &lt;g4&gt;&lt;g5&gt;NilLiteral&lt;/g5&gt;&lt;/g4&gt;https://crystal-lang.org/api/Crystal/Macros/NilLiteral.html&lt;e7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T095022Z" creationid="makenowjust" creationdate="20200518T095022Z">
        <seg>この変数の型は &lt;g2&gt;&lt;g3&gt;Def&lt;/g3&gt;&lt;/g2&gt;https://crystal-lang.org/api/Crystal/Macros/Def.html&lt;e6/&gt; で、もしマクロがメソッドの外で実行されていた場合は &lt;g4&gt;&lt;g5&gt;NilLiteral&lt;/g5&gt;&lt;/g4&gt;https://crystal-lang.org/api/Crystal/Macros/NilLiteral.html&lt;e7/&gt; となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of this variable is &lt;g2&gt;&lt;g3&gt;Def&lt;/g3&gt;&lt;/g2&gt;https://crystal-lang.org/api/latest/Crystal/Macros/Def.html&lt;e6/&gt; unless the macro is outside of a method, in this case it's &lt;g4&gt;&lt;g5&gt;NilLiteral&lt;/g5&gt;&lt;/g4&gt;https://crystal-lang.org/api/latest/Crystal/Macros/NilLiteral.html&lt;e7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T080459Z" creationid="makenowjust" creationdate="20210324T080459Z">
        <seg>この変数の型は &lt;g2&gt;&lt;g3&gt;Def&lt;/g3&gt;&lt;/g2&gt;https://crystal-lang.org/api/latest/Crystal/Macros/Def.html&lt;e6/&gt; で、もしマクロがメソッドの外で実行されていた場合は &lt;g4&gt;&lt;g5&gt;NilLiteral&lt;/g5&gt;&lt;/g4&gt;https://crystal-lang.org/api/latest/Crystal/Macros/NilLiteral.html&lt;e7/&gt; となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of this variable is &lt;g2&gt;&lt;g3&gt;TypeNode&lt;/g3&gt;&lt;/g2&gt;, which gives you access to type information at compile time.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215757Z" creationid="makenowjust" creationdate="20200509T215757Z">
        <seg>この変数の型は &lt;g2&gt;&lt;g3&gt;TypeNode&lt;/g3&gt;&lt;/g2&gt; で、コンパイル時の型情報にアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of this variable is &lt;g2&gt;&lt;g3&gt;TypeNode&lt;/g3&gt;&lt;/g2&gt;https://crystal-lang.org/api/Crystal/Macros/TypeNode.html&lt;e4/&gt;, which gives you access to type information at compile time.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T090603Z" creationid="makenowjust" creationdate="20200518T090603Z">
        <seg>この変数の型は &lt;g2&gt;&lt;g3&gt;TypeNode&lt;/g3&gt;&lt;/g2&gt;https://crystal-lang.org/api/Crystal/Macros/TypeNode.html&lt;e4/&gt; で、コンパイル時の型情報にアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of this variable is &lt;g2&gt;&lt;g3&gt;TypeNode&lt;/g3&gt;&lt;/g2&gt;https://crystal-lang.org/api/latest/Crystal/Macros/TypeNode.html&lt;e4/&gt;, which gives you access to type information at compile time.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T080800Z" creationid="makenowjust" creationdate="20210324T080800Z">
        <seg>この変数の型は &lt;g2&gt;&lt;g3&gt;TypeNode&lt;/g3&gt;&lt;/g2&gt;https://crystal-lang.org/api/latest/Crystal/Macros/TypeNode.html&lt;e4/&gt; で、コンパイル時の型情報にアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of this variable is `TypeNode`, which gives you access to type information at compile time.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T041330Z" creationid="hirofumiwakasugi" creationdate="20151001T041330Z">
        <seg>この変数の型は `TypeNode` で、コンパイル時の型情報にアクセスすることを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type restrictions applied to arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T150444Z" creationid="makenowjust" creationdate="20200429T150339Z">
        <seg>引数に指定されている型制約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type restrictions applied to parameters</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T075756Z" creationid="makenowjust" creationdate="20210324T075756Z">
        <seg>引数に指定されている型制約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The types of the arguments are mandatory, except when directly sending a proc literal to a lib &lt;g1&gt;fun&lt;/g1&gt; in C bindings.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171259Z" creationid="makenowjust" creationdate="20200422T171259Z">
        <seg>引数の型指定は必須です。ただし、C原語バインディングの &lt;g1&gt;fun&lt;/g1&gt; に対して直接 Proc リテラルを渡すときだけは例外です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The types of the arguments are mandatory, except when directly sending a proc literal to a lib `fun` in C bindings.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021347Z" creationid="hirofumiwakasugi" creationdate="20150902T021123Z">
        <seg>引数の型指定は必須です。ただし、C バインディングでライブラリの `fun` に直接 Proc リテラルを渡すときだけは例外です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The types of the parameters are mandatory, except when directly sending a proc literal to a lib &lt;g1&gt;fun&lt;/g1&gt; in C bindings.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T081735Z" creationid="makenowjust" creationdate="20210324T081735Z">
        <seg>引数の型指定は必須です。ただし C言語バインディングの &lt;g1&gt;fun&lt;/g1&gt; に対して直接 Proc リテラルを渡すときだけは例外です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The underscore &lt;g1&gt;_&lt;/g1&gt; before the suffix is optional.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182543Z" creationid="makenowjust" creationdate="20200419T182543Z">
        <seg>サフィックスの前のアンダースコア (&lt;g1&gt;_&lt;/g1&gt;) はオプションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The underscore `_` before the suffix is optional.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052345Z" creationid="hirofumiwakasugi" creationdate="20150901T052342Z">
        <seg>サフィックスの前のアンダースコア (`_`) はオプションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The underscore can appear on the left-hand side of any assignment.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T095032Z" creationid="makenowjust" creationdate="20210324T095032Z">
        <seg>アンダースコアを任意の代入の左辺に置くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The union of two named tuples with the same keys (regardless of their order) results in a named tuple type that has the union of the types in each key.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T145420Z" creationid="makenowjust" creationdate="20200429T145406Z">
        <seg>キーの同じ(順序は考慮しない)名前付きタプル同士のユニオン型は、名前付きタプルの対応するキーの型同士のユニオン型となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The union of two tuples of the same size results in a tuple type that has the union of the types in each position.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T083203Z" creationid="makenowjust" creationdate="20200429T145249Z">
        <seg>同じ大きさのタプル同士のユニオン型は、タプルの各型のユニオン型を取ったものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The url of the repo is &lt;g1&gt;https://dl.bintray.com/crystal/rpm/{DISTRO}/{ARCH}/{CHANNEL}&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T093608Z" creationid="makenowjust" creationdate="20210130T093608Z">
        <seg>リポジトリの URL は &lt;g1&gt;https://dl.bintray.com/crystal/rpm/{DISTRO}/{ARCH}/{CHANNEL}&lt;/g1&gt; です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The usual convention is to provide an alternative "question" method to signal that this variant of the method returns &lt;g1&gt;nil&lt;/g1&gt; instead of raising.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T105053Z" creationid="makenowjust" creationdate="20200506T104932Z">
        <seg>慣習として、メソッドが例外を発生させる代わりに &lt;g1&gt;nil&lt;/g1&gt; を返すことができる場合は、それを示すためにクエスチョンマークのついたメソッドとして提供することになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The usual convention is to provide an alternative "question" method to signal that this variant of the method returns `nil` instead of raising.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T024200Z" creationid="hirofumiwakasugi" creationdate="20150907T024044Z">
        <seg>慣習として、メソッドが例外を発生させる代わりに `nil` を返すことができる場合は、それを’示すために「? (クエスチョン)」メソッドとして提供することになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The valid &lt;g1&gt;{CHANNEL}&lt;/g1&gt; values are &lt;g2&gt;stable&lt;/g2&gt;, &lt;g3&gt;unstable&lt;/g3&gt;, or &lt;g4&gt;nightly&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T093712Z" creationid="makenowjust" creationdate="20210130T093712Z">
        <seg>有効な &lt;g1&gt;{CHANNEL}&lt;/g1&gt; の値は &lt;g2&gt;stable&lt;/g2&gt;、&lt;g3&gt;unstable&lt;/g3&gt;、もしくは &lt;g4&gt;nightly&lt;/g4&gt; です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The valid &lt;g1&gt;{DISTRO}&lt;/g1&gt; values are &lt;g2&gt;el6&lt;/g2&gt; and &lt;g3&gt;all&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T093626Z" creationid="makenowjust" creationdate="20210130T093626Z">
        <seg>有効な &lt;g1&gt;{DISTRO}&lt;/g1&gt; の値は &lt;g2&gt;el6&lt;/g2&gt; と &lt;g3&gt;all&lt;/g3&gt; となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The valid channels are &lt;g1&gt;stable&lt;/g1&gt;, &lt;g2&gt;unstable&lt;/g2&gt;, or &lt;g3&gt;nightly&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T093000Z" creationid="makenowjust" creationdate="20210130T093000Z">
        <seg>有効なチャンネル名は &lt;g1&gt;stable&lt;/g1&gt;、&lt;g2&gt;unstable&lt;/g2&gt;、もしくは &lt;g3&gt;nightly&lt;/g3&gt; です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The valid types to use in C bindings are:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T032017Z" creationid="makenowjust" creationdate="20200511T032017Z">
        <seg>C バインディング中で有効な型は、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The valid types to use in C bindings are:
* Primitive types (`Int8`, ..., `Int64`, `UInt8`, ..., `UInt64`, `Float32`, `Float64`)
* Pointer types (`Pointer(Int32)`, which can also be written as `Int32*`)
* Static arrays (`StaticArray(Int32, 8)`, which can also be written as `Int32[8]`)
* Function types (`Function(Int32, Int32)`, which can also be written as `Int32 -&gt; Int32`)
* Other `struct`, `union`, `enum`, `type` or `alias` declared previously.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T042120Z" creationid="hirofumiwakasugi" creationdate="20151005T041850Z">
        <seg>C バインディングで利用できる型は以下の通りです。
* プリミティブ型 (`Int8`, ..., `Int64`, `UInt8`, ..., `UInt64`, `Float32`, `Float64`)
* ポインタ型 (`Pointer(Int32)`, which can also be written as `Int32*`)
* 静的配列 (`StaticArray(Int32, 8)`, which can also be written as `Int32[8]`)
* 関数型 (`Function(Int32, Int32)`, which can also be written as `Int32 -&gt; Int32`)
* その他、事前に宣言されている `struct`/`union`/`enum`/`type`/`alias`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of an &lt;g1&gt;if&lt;/g1&gt; is the value of the last expression found in each of its branches:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080439Z" creationid="makenowjust" creationdate="20200424T080439Z">
        <seg>&lt;g1&gt;if&lt;/g1&gt;は式としても利用できて、その値は評価された分岐節の最後の式の値になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of an `if` is the value of the last expression found in each of its branches:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T025825Z" creationid="hirofumiwakasugi" creationdate="20150903T013128Z">
        <seg>`if` は式としても機能し、その値は、該当する分岐節の最後の式の値になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of these kinds of variables could potentially be affected by another fiber after the condition was checked, rendering it &lt;g2&gt;nil&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081847Z" creationid="makenowjust" creationdate="20200424T081847Z">
        <seg>なぜならこれらの変数の値は別のファイバーによって&lt;g2&gt;nil&lt;/g2&gt;に変更される可能性があるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The values of annotation key/value pairs can be accessed at compile time via the &lt;g1&gt;&lt;g2&gt;[]&lt;/g2&gt;&lt;/g1&gt; method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T110333Z" creationid="makenowjust" creationdate="20200510T110333Z">
        <seg>アノテーションに格納したキー/値のペアの値はコンパイル時に &lt;g1&gt;&lt;g2&gt;[]&lt;/g2&gt;&lt;/g1&gt; メソッド経由でアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The values of annotation key/value pairs can be accessed at compile time via the &lt;g1&gt;&lt;g2&gt;[]&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/Crystal/Macros/Annotation.html#%5B%5D%28name%3ASymbolLiteral%7CStringLiteral%7CMacroId%29%3AASTNode-instance-method&lt;e3/&gt; method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T082253Z" creationid="makenowjust" creationdate="20200518T082253Z">
        <seg>アノテーションの格納したキー/値のペアの値はコンパイル時に &lt;g1&gt;&lt;g2&gt;[]&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/Crystal/Macros/Annotation.html#%5B%5D%28name%3ASymbolLiteral%7CStringLiteral%7CMacroId%29%3AASTNode-instance-method&lt;e3/&gt; メソッド経由でアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The values of annotation key/value pairs can be accessed at compile time via the &lt;g1&gt;&lt;g2&gt;[]&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Crystal/Macros/Annotation.html#%5B%5D%28name%3ASymbolLiteral%7CStringLiteral%7CMacroId%29%3AASTNode-instance-method&lt;e3/&gt; method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T095715Z" creationid="makenowjust" creationdate="20210324T095715Z">
        <seg>アノテーションの格納したキー/値のペアはコンパイル時に &lt;g1&gt;&lt;g2&gt;[]&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Crystal/Macros/Annotation.html#%5B%5D%28name%3ASymbolLiteral%7CStringLiteral%7CMacroId%29%3AASTNode-instance-method&lt;e3/&gt; メソッド経由でアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The way this really works is by making each type have a list of ancestors, or parents.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T140039Z" creationid="hirofumiwakasugi" creationdate="20150911T134914Z">
        <seg>この仕組みは、それぞれの型に対して、その親や先祖のリストを持たせることで機能しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The way to improve performance in this case is to either use one of the iteration methods (&lt;g1&gt;each_char&lt;/g1&gt;, &lt;g2&gt;each_byte&lt;/g2&gt;, &lt;g3&gt;each_codepoint&lt;/g3&gt;), or use the more low-level &lt;g4&gt;Char::Reader&lt;/g4&gt; struct.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091330Z" creationid="akiji" creationdate="20200430T132807Z">
        <seg>この場合にパフォーマンスを向上させる手段は、繰り返し処理用のメソッド（&lt;g1&gt;each_char&lt;/g1&gt;や&lt;g2&gt;each_byte&lt;/g2&gt;、&lt;g3&gt;each_codepoint&lt;/g3&gt;など）のいずれかを使用するか、より低レベルの&lt;g4&gt;Char::Reader&lt;/g4&gt;を使用することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The whole type definition must be defined separately.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T043730Z" creationid="hirofumiwakasugi" creationdate="20150909T043730Z">
        <seg>そのため、その全体を定義するためにはそれぞれ個別に定義する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Their type is inferred from their usage, not only from their initializer.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060632Z" creationid="hirofumiwakasugi" creationdate="20150902T051932Z">
        <seg>ローカル変数の型は、初期化されるときだけではなく、その用途にしたがって推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Their type is inferred using the &lt;g1&gt;global type inference algorithm&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T134437Z" creationid="makenowjust" creationdate="20200504T134437Z">
        <seg>これらの型は&lt;g1&gt;グローバル型推論アルゴリズム&lt;/g1&gt;によって推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Their type is the combined type of all expressions that were assigned to them.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053719Z" creationid="hirofumiwakasugi" creationdate="20150902T053719Z">
        <seg>型は代入された式の型を組み合わせたものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Their values can be inspected using &lt;g1&gt;&lt;g2&gt;crystal env&lt;/g2&gt;&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T170120Z" creationid="makenowjust" creationdate="20200419T170120Z">
        <seg>これらの値は&lt;g1&gt;&lt;g2&gt;crystal env&lt;/g2&gt;&lt;/g1&gt;を使うことで確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then &lt;g1&gt;add&lt;/g1&gt; &amp; &lt;g2&gt;commit&lt;/g2&gt; to start tracking the files with Git:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T154844Z" creationid="makenowjust" creationdate="20200527T154844Z">
        <seg>そして、&lt;g1&gt;add&lt;/g1&gt; と &lt;g2&gt;commit&lt;/g2&gt; をして、ファイルを Git にトラッキングされるようにしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then &lt;g2&gt;channel.send(nil)&lt;/g2&gt; is invoked, and so execution continues at &lt;g3&gt;channel.receive&lt;/g3&gt;, which was waiting for a value.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T081343Z" creationid="akiji" creationdate="20200428T081343Z">
        <seg>そして、&lt;g2&gt;channel.send(nil)&lt;/g2&gt; が実行されると、値が渡されるのを待っていた&lt;g3&gt;channel.receive&lt;/g3&gt;が実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then `initialize` is invoked on it and then you get the instance.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060852Z" creationid="hirofumiwakasugi" creationdate="20150904T060852Z">
        <seg>そのオブジェクトに対して `initialize` が実行され、初期化されたインスタンスを得ることができる、という流れになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then clone the repository:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060509Z" creationid="hirofumiwakasugi" creationdate="20150831T060509Z">
        <seg>それから、リポジトリをクローンします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then it can be get and set:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053825Z" creationid="hirofumiwakasugi" creationdate="20151007T053825Z">
        <seg>そして、以下のように参照と設定ができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then named arguments are matched, by name, with any argument in the method (it can be before or after the splat method argument).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T155151Z" creationid="makenowjust" creationdate="20200501T155036Z">
        <seg>続けて、名前付き引数がその名前によって、対応する引数にマッチします。このマッチする引数はスプラット指定された引数の前でも後でも構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then named arguments are matched, by name, with any parameter in the method (it can be before or after the splat parameter).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T091638Z" creationid="makenowjust" creationdate="20210324T091638Z">
        <seg>続けて、名前付き引数がその名前によって、対応する仮引数にマッチします。このマッチする引数はスプラット展開指定された引数の前でも後でも構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then the main fiber continues executing and finishes, so the program exits without giving the other fiber a chance to print "After send".</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T132442Z" creationid="akiji" creationdate="20200429T132442Z">
        <seg>その後、メインファイバは実行を続けて終了してしまうため、プログラムは "After send" を出力する機会のないまま終了してしまいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then you can invoke the compiler by just typing `crystal`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060004Z" creationid="hirofumiwakasugi" creationdate="20150831T060004Z">
        <seg>こうしておけば、`crystal` と入力するだけでコンパイラを起動することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then you can invoke the compiler by just typing:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T070808Z" creationid="makenowjust" creationdate="20200518T070808Z">
        <seg>こうしておけば、次のようにするだけでコンパイラを実行できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then you can pass a function (a &lt;g1&gt;Proc&lt;/g1&gt;) like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T085618Z" creationid="makenowjust" creationdate="20200512T085613Z">
        <seg>そうすると、以下のように関数 (&lt;g1&gt;Proc&lt;/g1&gt;) を渡せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then you can pass a function (a &lt;g1&gt;Proc&lt;/g1&gt;http://crystal-lang.org/api/Proc.html&lt;e2/&gt;) like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T083359Z" creationid="makenowjust" creationdate="20200518T083359Z">
        <seg>それから、以下のように関数 (&lt;g1&gt;Proc&lt;/g1&gt;http://crystal-lang.org/api/Proc.html&lt;e2/&gt;) を渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then you can pass a function (a &lt;g1&gt;Proc&lt;/g1&gt;https://crystal-lang.org/api/latest/Proc.html&lt;e2/&gt;) like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T093813Z" creationid="makenowjust" creationdate="20210324T093813Z">
        <seg>それから、以下のように関数 (&lt;g1&gt;Proc&lt;/g1&gt;https://crystal-lang.org/api/latest/Proc.html&lt;e2/&gt;) を渡せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then you can pass a function (a [Proc](http://crystal-lang.org/api/Proc.html)) like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024247Z" creationid="hirofumiwakasugi" creationdate="20151008T024247Z">
        <seg>それから、以下のように関数 ([Proc](http://crystal-lang.org/api/Proc.html)) を渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then you instantiate it like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T062105Z" creationid="hirofumiwakasugi" creationdate="20150912T062020Z">
        <seg>これは以下のようにしてインスタンス化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then, add a link in the &lt;g1&gt;SUMMARY.md&lt;/g1&gt; file which acts as the navigation for the language reference.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T055842Z" creationid="makenowjust" creationdate="20201213T055842Z">
        <seg>そして、言語リファレンスのナビゲーションである&lt;g1&gt;SUMMARY.md&lt;/g1&gt;にリンクを追加してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then, add a link in the &lt;g2&gt;SUMMARY.md&lt;/g2&gt; file which acts as the navigation for the language reference.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164919Z" creationid="makenowjust" creationdate="20200413T164919Z">
        <seg>そして、言語リファレンスのナビゲーションである&lt;g2&gt;SUMMARY.md&lt;/g2&gt;にリンクを追加してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ther server context enforces a more secure set.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200621T083927Z" creationid="makenowjust" creationdate="20200621T083927Z">
        <seg>サーバーのコンテキストはよりセキュアなものになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are &lt;g1&gt;13 commits since 0.35.0&lt;/g1&gt;https://github.com/crystal-lang/crystal/compare/0.35.0...0.35.1&lt;e2/&gt; by 5 contributors.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200621T073309Z" creationid="makenowjust" creationdate="20200621T073309Z">
        <seg>5人のコントリビュータによって&lt;g1&gt;0.35.0から13のコミットが&lt;/g1&gt;https://github.com/crystal-lang/crystal/compare/0.35.0...0.35.1&lt;e2/&gt;ありました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are &lt;g1&gt;242 commits since 0.34.0&lt;/g1&gt;https://github.com/crystal-lang/crystal/compare/0.34.0...0.35.0&lt;e2/&gt; by 38 contributors.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T123527Z" creationid="makenowjust" creationdate="20200610T123527Z">
        <seg>38人のコントリビューターによって&lt;g1&gt;0.34.0から242のコミット&lt;/g1&gt;https://github.com/crystal-lang/crystal/compare/0.34.0...0.35.0&lt;e2/&gt;がありました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are a couple of &lt;g1&gt;Log.setup*&lt;/g1&gt; methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T153132Z" creationid="makenowjust" creationdate="20200610T153132Z">
        <seg>&lt;g1&gt;Log.setup*&lt;/g1&gt; 系の2つのメソッドがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are a couple of breaking-changes in &lt;g1&gt;HTTP::Server&lt;/g1&gt; though.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T152555Z" creationid="makenowjust" creationdate="20200610T152451Z">
        <seg>そして、&lt;g1&gt;HTTP::Server&lt;/g1&gt;に2つの破壊的な変更があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are five signed integer types, and five unsigned integer types:</seg>
      </tuv>
      <tuv lang="JA" changeid="uni" changedate="20221107T030951Z" creationid="uni" creationdate="20221107T030951Z">
        <seg>5つの符号付き整数と5つの符号なし整数があります。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are four signed integer types, and four unsigned integer types:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182014Z" creationid="makenowjust" creationdate="20200419T182014Z">
        <seg>4つ符号付き整数型と、4つの符号無し整数型が存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are four signed integer types: [Int8](http://crystal-lang.org/api/Int8.html), [Int16](http://crystal-lang.org/api/Int16.html), [Int32](http://crystal-lang.org/api/Int32.html) and [Int64](http://crystal-lang.org/api/Int64.html), being able to represent numbers of 8, 16, 32 and 64 bits respectively.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T073354Z" creationid="hirofumiwakasugi" creationdate="20150901T051549Z">
        <seg>符号付き整数 (Integer) 型には4種類のものがあります。それは、[Int8](http://crystal-lang.org/api/Int8.html)、[Int16](http://crystal-lang.org/api/Int16.html)、[Int32](http://crystal-lang.org/api/Int32.html) そして [Int64](http://crystal-lang.org/api/Int64.html)で、それぞれ 8/16/32/64 ビットの数値を表現することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are four unsigned integer types: [UInt8](http://crystal-lang.org/api/UInt8.html), [UInt16](http://crystal-lang.org/api/UInt16.html), [UInt32](http://crystal-lang.org/api/UInt32.html) and [UInt64](http://crystal-lang.org/api/UInt64.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T051737Z" creationid="hirofumiwakasugi" creationdate="20150901T051628Z">
        <seg>符号なし整数型にも、[UInt8](http://crystal-lang.org/api/UInt8.html)、[UInt16](http://crystal-lang.org/api/UInt16.html)、[UInt32](http://crystal-lang.org/api/UInt32.html) そして [UInt64](http://crystal-lang.org/api/UInt64.html) の4種類が存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are however some special rules regarding operator syntax:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T081111Z" creationid="makenowjust" creationdate="20200502T081111Z">
        <seg>しかし、演算子の構文に関してはいくつか特別な規則があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are many channels to discuss any kinds of topics related to the language." link_text="Crystal Programming" url="https://discord.gg/YS7YvQy" icon="discord" custom_icon=true %} {% include community_row.html title="General Announcements and Events" divId="twitter" content="The Twitter account will often tweet general announcements on releases and events, and retweet any interesting articles from the tweetosphere.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201203T132820Z" creationid="makenowjust" creationdate="20201203T122853Z">
        <seg>ここには様々な種類のこの言語に関する話題をするチャンネルがあります。'
  link_text='Crystal Programming'
  url='https://discord.gg/YS7YvQy'
  icon='discord'
  custom_icon=true %}

{% include community_row.html
   title='総合的なアナウンスやイベントの通知'
   divId='twitter'
   content='Twitter アカウントは総合的なリリースのアナウンスや、興味深い記事のリツイートをします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are many channels to discuss any kinds of topics related to the language." link_text="Crystal Programming" url="https://discord.gg/YS7YvQy" icon="discord" custom_icon=true continues=true %} {% include community_row.html title="" content="Small but brave community to help each other with Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T081646Z" creationid="makenowjust" creationdate="20211107T081646Z">
        <seg>ここには様々な種類のこの言語に関する話題をするチャンネルがあります。'
  link_text='Crystal Programming'
  url='https://discord.gg/YS7YvQy'
  icon='discord'
  custom_icon=true
  continues=true %}

{% include community_row.html
  title=''
  content='小さいながらも Crystal について互いに助けあっている勇敢なコミュニティです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are many convenient query methods built on top of &lt;g1&gt;#query&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T235853Z" creationid="daiki" creationdate="20200705T235853Z">
        <seg>最上位の &lt;g1&gt;#query&lt;/g1&gt; には、多くの便利なクエリメソッドが構築されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are people looking for the &lt;g1&gt;exact&lt;/g1&gt; functionality of our library and the &lt;g2&gt;general&lt;/g2&gt; functionality of our library.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T163139Z" creationid="makenowjust" creationdate="20200527T163139Z">
        <seg>&lt;g1&gt;精確な&lt;/g1&gt;機能からライブラリを探す人と、&lt;g2&gt;一般的な&lt;/g2&gt;機能からライブラリを探す人がいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are several changes that, though they are indeed breaking-changes, do not affect the main APIs.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T152737Z" creationid="makenowjust" creationdate="20200610T152737Z">
        <seg>破壊的な変更を含むいくつかの変更点がありますが、それらは主要な API には影響しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are several ways to avoid heap memory allocations.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T120358Z" creationid="akiji" creationdate="20200430T120358Z">
        <seg>ヒープメモリの割り当てを回避する方法はいくつかあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are several ways to let Crystal know this.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T133022Z" creationid="makenowjust" creationdate="20200427T133022Z">
        <seg>Crystal に型を理解させる方法はいくつかあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are two floating point types, &lt;g1&gt;Float32&lt;/g1&gt; and &lt;g2&gt;Float64&lt;/g2&gt;,
which correspond to the &lt;g3&gt;binary32&lt;/g3&gt;
and &lt;g4&gt;binary64&lt;/g4&gt;
types defined by IEEE.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182924Z" creationid="makenowjust" creationdate="20200419T182924Z">
        <seg>浮動小数点数には&lt;g1&gt;Float32&lt;/g1&gt;と&lt;g2&gt;Float64&lt;/g2&gt;という2つ型があり、
それぞれIEEEで定義されている&lt;g3&gt;binary32&lt;/g3&gt;と&lt;g4&gt;binary64&lt;/g4&gt;に対応しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are two floating point types, &lt;g1&gt;Float32&lt;/g1&gt;http://crystal-lang.org/api/Float32.html&lt;e5/&gt; and &lt;g2&gt;Float64&lt;/g2&gt;http://crystal-lang.org/api/Float64.html&lt;e6/&gt;,
which correspond to the &lt;g3&gt;binary32&lt;/g3&gt;http://en.wikipedia.org/wiki/Single_precision_floating-point_format&lt;e7/&gt;
and &lt;g4&gt;binary64&lt;/g4&gt;http://en.wikipedia.org/wiki/Double_precision_floating-point_format&lt;e8/&gt;
types defined by IEEE.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T085331Z" creationid="makenowjust" creationdate="20200518T085331Z">
        <seg>浮動小数点数 (Float) には2つの種類があります。それは &lt;g1&gt;Float32&lt;/g1&gt;http://crystal-lang.org/api/Float32.html&lt;e5/&gt; と &lt;g2&gt;Float64&lt;/g2&gt;http://crystal-lang.org/api/Float64.html&lt;e6/&gt; で、それぞれ IEEE によって定義されている &lt;g3&gt;binary32&lt;/g3&gt;http://en.wikipedia.org/wiki/Single_precision_floating-point_format&lt;e7/&gt; と &lt;g4&gt;binary64&lt;/g4&gt;http://en.wikipedia.org/wiki/Double_precision_floating-point_format&lt;e8/&gt; に対応しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are two floating point types, &lt;g1&gt;Float32&lt;/g1&gt;https://crystal-lang.org/api/latest/Float32.html&lt;e5/&gt; and &lt;g2&gt;Float64&lt;/g2&gt;https://crystal-lang.org/api/latest/Float64.html&lt;e6/&gt;,
which correspond to the &lt;g3&gt;binary32&lt;/g3&gt;http://en.wikipedia.org/wiki/Single_precision_floating-point_format&lt;e7/&gt;
and &lt;g4&gt;binary64&lt;/g4&gt;http://en.wikipedia.org/wiki/Double_precision_floating-point_format&lt;e8/&gt;
types defined by IEEE.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T084347Z" creationid="makenowjust" creationdate="20210324T084347Z">
        <seg>浮動小数点数 (Float) には2つの種類があります。それは &lt;g1&gt;Float32&lt;/g1&gt;https://crystal-lang.org/api/latest/Float32.html&lt;e5/&gt; と &lt;g2&gt;Float64&lt;/g2&gt;https://crystal-lang.org/api/latest/Float64.html&lt;e6/&gt; で、それぞれ IEEE によって定義されている &lt;g3&gt;binary32&lt;/g3&gt;http://en.wikipedia.org/wiki/Single_precision_floating-point_format&lt;e7/&gt;
と &lt;g4&gt;binary64&lt;/g4&gt;http://en.wikipedia.org/wiki/Double_precision_floating-point_format&lt;e8/&gt; に対応しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are two floating point types, [Float32](http://crystal-lang.org/api/Float32.html) and [Float64](http://crystal-lang.org/api/Float64.html),
which correspond to the [binary32](http://en.wikipedia.org/wiki/Single_precision_floating-point_format)
and [binary64](http://en.wikipedia.org/wiki/Double_precision_floating-point_format)
types defined by IEEE.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T073612Z" creationid="hirofumiwakasugi" creationdate="20150901T073309Z">
        <seg>浮動小数点数 (Float) には2つの種類があります。それは、[Float32](http://crystal-lang.org/api/Float32.html) と [Float64](http://crystal-lang.org/api/Float64.html) で、それぞれ IEEE によって定義されている [binary32](http://en.wikipedia.org/wiki/Single_precision_floating-point_format) と [binary64](http://en.wikipedia.org/wiki/Double_precision_floating-point_format) に対応しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are two main topics when building a CLI application:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T163850Z" creationid="makenowjust" creationdate="20200413T163645Z">
        <seg>CLI アプリケーションの開発には、主なトピックが2つあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are two ways to solve this:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T131610Z" creationid="akiji" creationdate="20200430T131610Z">
        <seg>これを解決するには2つの方法があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There can be reasonable exceptions though.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084245Z" creationid="makenowjust" creationdate="20200502T084245Z">
        <seg>ですが、妥当な例外も中には存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is also a docker environment to avoid installing dependencies globally:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164714Z" creationid="makenowjust" creationdate="20200413T164714Z">
        <seg>依存関係をシステム全体にインストールしないで、Docker 環境を利用することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is another special case when &lt;g1&gt;a&lt;/g1&gt; is an index accessor (&lt;g2&gt;[]&lt;/g2&gt;), it is
changed to the nilable variant (&lt;g3&gt;[]?&lt;/g3&gt; on the right hand side:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T095816Z" creationid="makenowjust" creationdate="20200502T095326Z">
        <seg>その他に、これまでの例の &lt;g1&gt;a&lt;/g1&gt; がインデクッス指定の代入 (&lt;g2&gt;[]&lt;/g2&gt;) の場合も、nil を受け入れるものに変換されます (右側では &lt;g3&gt;[]?&lt;/g3&gt; が使われます)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is no &lt;g1&gt;public&lt;/g1&gt; keyword for this reason.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T103644Z" creationid="makenowjust" creationdate="20200502T103644Z">
        <seg>そのため &lt;g1&gt;public&lt;/g1&gt; キーワードは存在しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is no need to explicitly require &lt;g1&gt;crystal-lang/crystal-db&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T191233Z" creationid="daiki" creationdate="20200705T191233Z">
        <seg>&lt;g1&gt;crystal-lang/crystal-db&lt;/g1&gt; を明示的に追加する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There was a lot of activity iterating in some recent additions and more cleanups.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T122223Z" creationid="makenowjust" creationdate="20200610T121321Z">
        <seg>この中には最近のいくつかの追加やより洗練された実装の繰り返しといった、多くの活動があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There's a second fiber reading lines from standard input.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T141816Z" creationid="akiji" creationdate="20200429T133004Z">
        <seg>2つ目のファイバは標準入力から行を読み込むものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There's a second problem with the above: computing the &lt;g1&gt;size&lt;/g1&gt; of a String is also slow, because it's not simply the number of bytes in the string (the &lt;g2&gt;bytesize&lt;/g2&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T024828Z" creationid="akiji" creationdate="20200430T132719Z">
        <seg>実は上記のコードは、「文字列の &lt;g1&gt;size&lt;/g1&gt;（文字数）が単純に&lt;g2&gt;bytesize&lt;/g2&gt;（バイト数）からは得られないため、その計算にも時間がかかる」という2つ目の問題を含んでいます。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There's a simpler way to write the above by using an &lt;g1&gt;out&lt;/g1&gt; parameter:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T082228Z" creationid="makenowjust" creationdate="20200512T082228Z">
        <seg>上記は &lt;g1&gt;out&lt;/g1&gt; パラメータを使うことでよりシンプルに書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There's a simpler way to write the above by using an `out` parameter:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043924Z" creationid="hirofumiwakasugi" creationdate="20151005T043854Z">
        <seg>上記は、`out` パラメータを使うことでよりシンプルに書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There's also the alias &lt;g10&gt;LibC::Char&lt;/g10&gt; if in doubt.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T032703Z" creationid="makenowjust" creationdate="20200511T032703Z">
        <seg>もし気になるのであれば、 &lt;g10&gt;LibC::Char&lt;/g10&gt; というエイリアスが定義されていることを確認してみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There's also the alias &lt;g9&gt;LibC::Char&lt;/g9&gt; if in doubt.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T071623Z" creationid="makenowjust" creationdate="20201213T071623Z">
        <seg>もし気になるのであれば、&lt;g9&gt;LibC::Char&lt;/g9&gt; というエイリアスが定義されていることを確認してみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There's also the alias `LibC::Char` if in doubt.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043234Z" creationid="hirofumiwakasugi" creationdate="20151005T042734Z">
        <seg>もし気になるのであれば、`LibC::Char` というエイリアスが定義されていることを確認してみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There's also the issue that &lt;g2&gt;break&lt;/g2&gt; and &lt;g3&gt;next&lt;/g3&gt; are not allowed inside captured blocks, so the following won't work when using &lt;g4&gt;&amp;block&lt;/g4&gt; forwarding:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075800Z" creationid="makenowjust" creationdate="20200506T075800Z">
        <seg>加えて、捕捉されたブロックでは &lt;g2&gt;break&lt;/g2&gt; と &lt;g3&gt;next&lt;/g3&gt; を使用することができない、という問題もあります。例えば、以下は &lt;g4&gt;&amp;block&lt;/g4&gt; でフォワーディングした場合には動作しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There's also the issue that `break` and `next` are not allowed inside captured blocks, so the following won't work when using `&amp;block` forwarding:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T032352Z" creationid="hirofumiwakasugi" creationdate="20150917T032352Z">
        <seg>加えて、捕捉されたブロックでは `break` と `next` を使用することができないという問題もあります。例えば、以下は `&amp;block` でフォワーディングした場合には動作しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There's also the possibility of making a method only receive named arguments (and list them), by placing the star at the beginning:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160237Z" creationid="makenowjust" creationdate="20200501T160237Z">
        <seg>最初にアスタリスクを置くことで、すべての引数を名前付き引数として渡さなければいけないようなメソッドを作ることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There's an optimization that Crystal's &lt;g3&gt;String&lt;/g3&gt; does here: if it knows all the characters in the string are ASCII, then &lt;g4&gt;String#[]&lt;/g4&gt; can be implemented in &lt;g5&gt;O(1)&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T132621Z" creationid="akiji" creationdate="20200430T132423Z">
        <seg>こうした場合にCrystalの &lt;g3&gt;String&lt;/g3&gt;は最適化を行っていて、文字列にASCII文字しか含まれていなければ、&lt;g4&gt;String#[]&lt;/g4&gt;を&lt;g5&gt;O(1)&lt;/g5&gt;オーダーで処理できるよう実装されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There's no need to define a "main" function or something similar.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080908Z" creationid="makenowjust" creationdate="20200516T080908Z">
        <seg>"main" 関数のような関数を定義する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There's no need to remember them all.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T134518Z" creationid="makenowjust" creationdate="20200427T134518Z">
        <seg>他のものは記憶しなくてもよいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There, one can spawn many other fibers.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T072617Z" creationid="akiji" creationdate="20200428T055527Z">
        <seg>そして、そのメインファイバは、さらに多くの他のファイバを生成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore structs are mostly useful for immutable data types and/or stateless wrappers of other types, usually for performance reasons to avoid lots of small memory allocations when passing small copies might be more efficient (for more details, see the &lt;g1&gt;performance guide&lt;/g1&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T172516Z" creationid="makenowjust" creationdate="20200505T172420Z">
        <seg>そのため、構造体は変更されない (immutable) データ型や、状態を持たない他の型のラッパーなどに使われます。小さいコピーを渡す方がより効率的であるとき、構造体を使うと、わずかなメモリ割り当てが大量に発生することを避けられるため、パフォーマンス上有利です (より詳細には&lt;g1&gt;パフォーマンスガイド&lt;/g1&gt;を参照してください)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore structs are mostly useful for immutable data types and/or stateless wrappers of other types, usually for performance reasons to avoid lots of small memory allocations when passing small copies might be more efficient (for more details, see the &lt;g1&gt;performance guide&lt;/g1&gt;https://crystal-lang.org/docs/guides/performance.html#use-structs-when-possible&lt;e2/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T091634Z" creationid="makenowjust" creationdate="20200518T091634Z">
        <seg>そのため、構造体は変更されない (immutable) データ型や、状態を持たない他の型のラッパーなどに使われます。小さいコピーを渡す方がより効率的であるとき、構造体を使うと、わずかなメモリ割り当てが大量に発生することを避けられるため、パフォーマンス上有利です (より詳細には&lt;g1&gt;パフォーマンスガイド&lt;/g1&gt;https://ja.crystal-lang.org/docs/guides/performance.html#use-structs-when-possible&lt;e2/&gt;を参照してください)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These applications look awesome!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175416Z" creationid="makenowjust" creationdate="20200413T175416Z">
        <seg>アプリケーションが段々といい感じになってきました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are defined without arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025724Z" creationid="hirofumiwakasugi" creationdate="20150909T025724Z">
        <seg>これらは引数を持たないものとして定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are especially useful when writing &lt;g1&gt;C bindings&lt;/g1&gt;, but can be used in any of the above locations.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T120320Z" creationid="makenowjust" creationdate="20200507T120320Z">
        <seg>これらは特に &lt;g1&gt;C バインディング&lt;/g1&gt;を書くときに有効ですが、上記した箇所であればどこでも利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are especially useful when writing [C bindings](c_bindings/index.html), but can be used in any of the above locations.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T005940Z" creationid="hirofumiwakasugi" creationdate="20151009T005833Z">
        <seg>これらは特に [C バインディング](c_bindings/index.html)を書くときに有効ですが、上記した箇所であればどこでも利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are handy to write regular expressions that include slashes which would have to be escaped in slash-delimited literals.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T042412Z" creationid="makenowjust" creationdate="20200421T042412Z">
        <seg>スラッシュを含むような正規表現を書くのにこれらのリテラルは便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are handy to write strings that include double quotes which would have to be escaped in double-quoted strings.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T193500Z" creationid="makenowjust" creationdate="20200419T193500Z">
        <seg>ダブルクォートを含むような文字列を書くのにこれらのリテラルはお手軽です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are the companies and individuals contributing a monthly amount to help sustain Crystal's development.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083321Z" creationid="makenowjust" creationdate="20200516T083321Z">
        <seg>これらの企業や個人は、Crystal の発展を維持するために、毎月一定の金額を寄付してくれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are the only places that are looked up.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T145628Z" creationid="hirofumiwakasugi" creationdate="20150905T145532Z">
        <seg>探索の対象となるディレクトリはこれらのみです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These can be included into classes:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141841Z" creationid="makenowjust" creationdate="20200504T141841Z">
        <seg>これらをクラスにインクルードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These flags are by default read from the hosts &lt;g1&gt;LLVM Target Triple&lt;/g1&gt;, split on &lt;g2&gt;-&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T022859Z" creationid="makenowjust" creationdate="20200511T022859Z">
        <seg>デフォルトではホストの &lt;g1&gt;LLVM ターゲット&lt;/g1&gt;を &lt;g2&gt;-&lt;/g2&gt; で区切ったものがフラグとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These flags are by default read from the hosts &lt;g1&gt;LLVM Target Triple&lt;/g1&gt;http://llvm.org/docs/LangRef.html#target-triple&lt;e4/&gt;, split on &lt;g2&gt;-&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T083908Z" creationid="makenowjust" creationdate="20200518T083908Z">
        <seg>デフォルトではホストの &lt;g1&gt;LLVM ターゲットトリプル&lt;/g1&gt;http://llvm.org/docs/LangRef.html#target-triple&lt;e4/&gt; を &lt;g2&gt;-&lt;/g2&gt; で区切ったものがフラグとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These flags are by default the result of executing `uname -m -s`, split by whitespace and lowercased.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T042959Z" creationid="hirofumiwakasugi" creationdate="20150908T042946Z">
        <seg>デフォルトでは、`uname -m -s` を実行した結果を空白で分割し、すべてを小文字にしたものがフラグとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These flags are generally used in C bindings to conditionally define types and functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043645Z" creationid="hirofumiwakasugi" creationdate="20150908T043540Z">
        <seg>これらのフラグは、一般的に C 言語のバインディングにおいて、型や関数を条件に応じて定義するときに利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These instructions and courses help you get to know the language and how to use it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T151253Z" creationid="makenowjust" creationdate="20210726T151253Z">
        <seg>これらの文書やコースは言語やその使い方に詳しくなるのを助けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These materials help humans understand the language and its ecosystem.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T151002Z" creationid="makenowjust" creationdate="20210726T151002Z">
        <seg>この資料はみなさんの言語やそのエコシステムの理解を助けるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These methods are documented in a ficticious [Macros](http://crystal-lang.org/api/Macros.html) module.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035716Z" creationid="hirofumiwakasugi" creationdate="20151001T035654Z">
        <seg>これらのメソッドは [Macros](http://crystal-lang.org/api/Macros.html) という「フェイクの」モジュールでドキュメント化されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These methods are documented in a fictitious &lt;g2&gt;Crystal::Macros&lt;/g2&gt; module.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T214845Z" creationid="makenowjust" creationdate="20200509T214845Z">
        <seg>これらのメソッドは&lt;g2&gt;Crystal::Macros&lt;/g2&gt;というフェクトのモジュールでドキュメント化されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These methods are documented in a fictitious &lt;g2&gt;Crystal::Macros&lt;/g2&gt;http://crystal-lang.org/api/Crystal/Macros.html&lt;e3/&gt; module.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T090213Z" creationid="makenowjust" creationdate="20200518T090213Z">
        <seg>これらのメソッドは &lt;g2&gt;Crystal::Macros&lt;/g2&gt;http://crystal-lang.org/api/Crystal/Macros.html&lt;e3/&gt; というフェイクのモジュールでドキュメントされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These methods are documented in a fictitious &lt;g2&gt;Crystal::Macros&lt;/g2&gt;https://crystal-lang.org/api/latest/Crystal/Macros.html&lt;e3/&gt; module.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T080250Z" creationid="makenowjust" creationdate="20210324T080250Z">
        <seg>これらのメソッドは &lt;g2&gt;Crystal::Macros&lt;/g2&gt;https://crystal-lang.org/api/latest/Crystal/Macros.html&lt;e3/&gt; というフェイクのモジュールでドキュメントされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These methods usually imply a side effect.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T141732Z" creationid="makenowjust" creationdate="20200430T141732Z">
        <seg>このようなにすることは通常、メソッドに副作用があることを仄めかしています</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These parts of the language are considered unsafe:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012609Z" creationid="hirofumiwakasugi" creationdate="20151009T012440Z">
        <seg>本言語において、以下は安全でない (unsafe) とされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These refactors also drop the immutability guarantee in the &lt;g8&gt;Log::Metadata::Value&lt;/g8&gt; that was achieved via cloning.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T154240Z" creationid="makenowjust" creationdate="20200610T154132Z">
        <seg>これらのリファクタリングによって、クローンによって獲得していた &lt;g8&gt;Log::Metadata::Value&lt;/g8&gt; の不変性 (immutability) が無くなりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They allow communicating data between fibers without sharing memory and without having to worry about locks, semaphores or other special structures.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T102708Z" creationid="akiji" creationdate="20200428T055322Z">
        <seg>チャネルによって、メモリの共有やロックやセマフォなどといった特別な機構を気にかけることなく、異なるファイバ間でのデータのやりとりが可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are constructed using the following literals:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T001142Z" creationid="makenowjust" creationdate="20200414T001142Z">
        <seg>次のようなリテラルで利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are constructed using these literals:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T051223Z" creationid="hirofumiwakasugi" creationdate="20150901T051038Z">
        <seg>以下のようなリテラルで利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are declared when you first assign them a value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053532Z" creationid="hirofumiwakasugi" creationdate="20150902T051744Z">
        <seg>その宣言は、はじめて値が代入されたときに行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are explained &lt;g1&gt;here&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120254Z" creationid="makenowjust" creationdate="20200510T120254Z">
        <seg>これらの詳細は&lt;g1&gt;ここ&lt;/g1&gt;で確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are explained &lt;g1&gt;here&lt;/g1&gt;http://llvm.org/docs/LangRef.html#calling-conventions&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T082818Z" creationid="makenowjust" creationdate="20200518T082818Z">
        <seg>詳しい説明は&lt;g1&gt;こちら&lt;/g1&gt;http://llvm.org/docs/LangRef.html#calling-conventions&lt;e2/&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are explained [here](http://llvm.org/docs/LangRef.html#calling-conventions).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T074727Z" creationid="hirofumiwakasugi" creationdate="20150919T074727Z">
        <seg>詳しい説明は[こちら](http://llvm.org/docs/LangRef.html#calling-conventions)の参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are mostly useful for interfacing with C libraries and for low-level code.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T015046Z" creationid="hirofumiwakasugi" creationdate="20150906T033606Z">
        <seg>C 言語ライブラリとのインターフェースや、低レベルのコードを書くときに役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are plenty.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T124442Z" creationid="makenowjust" creationdate="20200610T123856Z">
        <seg>たくさんの紹介するものがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are prefixed with two "at" signs (&lt;g1&gt;@@&lt;/g1&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T134402Z" creationid="makenowjust" creationdate="20200504T134402Z">
        <seg>クラス変数は先頭に2つのアットマーク (&lt;g1&gt;@@&lt;/g1&gt;) が付きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are prefixed with two "at" signs (`@@`).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040744Z" creationid="hirofumiwakasugi" creationdate="20150910T040511Z">
        <seg>先頭に2つのアットマーク (`@@`) が付きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T135327Z" creationid="makenowjust" creationdate="20200427T135327Z">
        <seg>紹介していきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They can also be defined in classes and modules, and are only visible in those scopes.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T015710Z" creationid="hirofumiwakasugi" creationdate="20151001T015616Z">
        <seg>クラスやモジュール内で定義することも可能で、その場合はそれらのスコープ内でのみアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They can also be defined in classes and modules, and are visible in those scopes.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T214326Z" creationid="makenowjust" creationdate="20200509T214326Z">
        <seg>クラスやモジュール内で定義することも可能で、それはそのスコープ内でアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They must start with a capital letter:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055321Z" creationid="hirofumiwakasugi" creationdate="20150913T055321Z">
        <seg>定数の先頭は大文字である必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They need at least to be comparable.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T035513Z" creationid="makenowjust" creationdate="20200421T035508Z">
        <seg>2つの型は少なくとも比較可能である方が好ましいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They served well but in the presence of &lt;g5&gt;JSON::Serializable&lt;/g5&gt; and &lt;g6&gt;YAML::Serializable&lt;/g6&gt; it’s better to remove them from the std-lib.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T151944Z" creationid="makenowjust" creationdate="20200610T151944Z">
        <seg>これらの機能は十分なものでしたが、現在は &lt;g5&gt;JSON::Serializable&lt;/g5&gt; と &lt;g6&gt;YAML::Serializable&lt;/g6&gt; がより良いものとしてあるため、標準ライブラリから削除されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They should be separated from
the other arguments by a double dash (&lt;g2&gt;--&lt;/g2&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164331Z" creationid="makenowjust" creationdate="20200419T164236Z">
        <seg>これらは他の引数とは &lt;g2&gt;--&lt;/g2&gt; で区切る必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They will return &lt;g2&gt;Nil&lt;/g2&gt; as before.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200621T073420Z" creationid="makenowjust" creationdate="20200621T073420Z">
        <seg>以前のように&lt;g2&gt;Nil&lt;/g2&gt;を返すことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ThirtyTwo = 1 &lt;&lt; 5</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052948Z" creationid="hirofumiwakasugi" creationdate="20151007T052948Z">
        <seg>ThirtyTwo = 1 &lt;&lt; 5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This
can be useful for example to improve performance (non-equality can often be
proven faster than equality).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091251Z" creationid="makenowjust" creationdate="20200502T091251Z">
        <seg>等価でないことを確認することが等価であることを確認するよりも高速な場合に、パフォーマンスを改善するのに役に立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This affects &lt;g6&gt;#underscore&lt;/g6&gt;, &lt;g7&gt;#titleize&lt;/g7&gt;, &lt;g8&gt;#capitalize&lt;/g8&gt;, &lt;g9&gt;#upcase&lt;/g9&gt;, and &lt;g10&gt;#downcase&lt;/g10&gt; methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T143055Z" creationid="makenowjust" creationdate="20200610T143055Z">
        <seg>この影響を受けるのは &lt;g6&gt;#underscore&lt;/g6&gt;、&lt;g7&gt;#titleize&lt;/g7&gt;、&lt;g8&gt;#capitalize&lt;/g8&gt;、&lt;g9&gt;#upcase&lt;/g9&gt;、そして&lt;g10&gt;#downcase&lt;/g10&gt; といったメソッドです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This allocates the struct on the stack.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T050014Z" creationid="hirofumiwakasugi" creationdate="20151007T050014Z">
        <seg>これによって、スタックに構造体が割り当てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This allocates the union on the stack.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052244Z" creationid="hirofumiwakasugi" creationdate="20151007T052244Z">
        <seg>これによって、スタックに共用体が割り当てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This allows you to define arrays and methods based on module type instead of class:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T142013Z" creationid="makenowjust" creationdate="20200504T142013Z">
        <seg>これによって、クラスの代わりにモジュールに基づく配列を作ったりすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This allows you to define helper methods in a file that will only be known in that file.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T040907Z" creationid="hirofumiwakasugi" creationdate="20150909T040840Z">
        <seg>このことで、あるファイルの中でのみ利用できるヘルパーメソッドを定義することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This also applies when a variable is assigned in an &lt;g1&gt;if&lt;/g1&gt;'s condition:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081423Z" creationid="makenowjust" creationdate="20200424T081410Z">
        <seg>&lt;g1&gt;if&lt;/g1&gt;の条件式中で変数への代入が行われた場合にも、この判断がなされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This also applies when a variable is assigned in an `if`'s condition:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014720Z" creationid="hirofumiwakasugi" creationdate="20150903T014453Z">
        <seg>このことは、`if` の条件で変数への代入が行われた場合にも当てはまります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This also happens with regular proc literals, even if it's evident that the proc wasn't invoked or stored:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T081235Z" creationid="hirofumiwakasugi" creationdate="20150918T060005Z">
        <seg>これは通常の Proc リテラルにも当てはまります。そして、その proc が実行も保持もされないことが明白であっても同様です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This also is applied to generic types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T140040Z" creationid="makenowjust" creationdate="20200427T140040Z">
        <seg>この規則はジェネリック型にも適用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This applies to every class and struct except for &lt;g2&gt;Reference&lt;/g2&gt;, &lt;g3&gt;Value&lt;/g3&gt;, &lt;g4&gt;Int&lt;/g4&gt; and &lt;g5&gt;Float&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T110459Z" creationid="makenowjust" creationdate="20200504T110459Z">
        <seg>この仕組みは &lt;g2&gt;Reference&lt;/g2&gt;、&lt;g3&gt;Value&lt;/g3&gt;、&lt;g4&gt;Int&lt;/g4&gt; そして &lt;g5&gt;Float&lt;/g5&gt; を除くすべてのクラスに適用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This applies to every class except for `Reference`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031448Z" creationid="hirofumiwakasugi" creationdate="20150910T031441Z">
        <seg>この仕組みは `Reference` を除くすべてのクラスに適用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This argument is syntactically equivalent to the block variants.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185422Z" creationid="makenowjust" creationdate="20200505T185403Z">
        <seg>この引数は意味的にはブロックと同様です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can also be used to give shorter, nicer names to C functions, as these tend to be long and are usually prefixed with the library name.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201120T105515Z" creationid="makenowjust" creationdate="20200511T031957Z">
        <seg>C の関数名は長い傾向があり、ライブラリ名で修飾されている場合もあるため、より短かく分かりやすい名前をつけるためにこれを使うこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can also be used to give shorter, nicer names to C functions, as these tend to be long and usually be prefixed with the library name.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T041847Z" creationid="hirofumiwakasugi" creationdate="20151005T041831Z">
        <seg>C の関数名は長い傾向があり、ライブラリ名で修飾されている場合が多いため、それらにより短くてわかりやすい名前をつけることにもこれを利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can be circumvented by assigning the value to a new local variable:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T082054Z" creationid="makenowjust" creationdate="20200424T082032Z">
        <seg>この制約は値をローカル変数に代入することで回避できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can be seen by invoking the &lt;g4&gt;class&lt;/g4&gt; method:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T143854Z" creationid="makenowjust" creationdate="20200429T143854Z">
        <seg>この型は &lt;g4&gt;class&lt;/g4&gt; メソッドを呼び出すことで確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can be used to provide static versions of libraries that are also available as dynamic libraries.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153315Z" creationid="makenowjust" creationdate="20200419T153315Z">
        <seg>これは動的ライブラリとしても有効な、静的なバージョンのライブラリを提供することに使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can happen in recursive calls that depend on each other.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T120330Z" creationid="makenowjust" creationdate="20200512T120330Z">
        <seg>これは互いに依存した再帰的な呼び出しで起こります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can sometimes be useful to avoid repetitive code by actually accessing and reading/writing local variables, but can also overwrite local variables by mistake.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T015932Z" creationid="hirofumiwakasugi" creationdate="20151002T015912Z">
        <seg>これは、ローカル変数にアクセスし読み書きする際にコードを繰り返し書くのを避けることに有効ですが、一方で誤ってローカル変数を上書きしてしまう可能性もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can sometimes be useful to avoid repetitive code by deliberately reading/writing local variables, but can also overwrite local variables by mistake.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T225856Z" creationid="makenowjust" creationdate="20200509T225856Z">
        <seg>これは、故意にローカル変数を読み書きするコードを繰り返し書くのを避けることに有効ですが、一方で誤ってローカル変数を上書きしてしまう可能性もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This change affects the &lt;g5&gt;:warning&lt;/g5&gt; and configuration via environment variables mostly.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T153033Z" creationid="makenowjust" creationdate="20200610T153033Z">
        <seg>この変更は &lt;g5&gt;:warning&lt;/g5&gt; やほとんどの環境変数経由での設定に影響します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This changes the default values:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T114622Z" creationid="hirofumiwakasugi" creationdate="20150914T114443Z">
        <seg>これを指定するとデフォルトの値が変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This check is good to add as a step in &lt;g1&gt;continuous integration&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100215Z" creationid="makenowjust" creationdate="20210324T100215Z">
        <seg>この確認を&lt;g1&gt;継続的インテグレーション&lt;/g1&gt;の1ステップとして追加すると良いでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This command ensures all dependencies are installed, so it is not necessary to run &lt;g2&gt;shards install&lt;/g2&gt; before.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T095243Z" creationid="makenowjust" creationdate="20200419T180243Z">
        <seg>このコマンドはビルド前に依存関係をインストールするので、&lt;g2&gt;shards install&lt;/g2&gt; を事前に実行することは必要ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This command will write &lt;g1&gt;hello&lt;/g1&gt; and subsequently delete all files and folders in the current working directory.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T173213Z" creationid="makenowjust" creationdate="20200422T173213Z">
        <seg>このコマンドは &lt;g1&gt;hello&lt;/g1&gt; と出力したあとに現在のディレクトリのファイルとフォルダを全て削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This covers two uses cases.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T161144Z" creationid="makenowjust" creationdate="20200501T161144Z">
        <seg>これには2つのユースケースがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This custom data is then sent as an argument to the callback.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090040Z" creationid="makenowjust" creationdate="20200512T090040Z">
        <seg>その独自のデータは引数としてコールバックに渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This decision stays closer to a more familiar &lt;g1&gt;case ...  when&lt;/g1&gt; semantics and will allow further iteration on the exhaustive case constructs without affecting existing code.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T125806Z" creationid="makenowjust" creationdate="20200610T125806Z">
        <seg>この決定によって &lt;g1&gt;case ...  when&lt;/g1&gt; の意味は身近なままとなり、既存のコードに影響することなく網羅性チェックをする case 文を洗練させていくことが可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This doesn't happen with block arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T080820Z" creationid="akiji" creationdate="20200428T080820Z">
        <seg>こうした問題はブロック引数では発生しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This ends up invoking `Object#to_s(IO)` on each expression enclosed by `#{...}`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T105524Z" creationid="hirofumiwakasugi" creationdate="20150901T105524Z">
        <seg>このとき、`#{...}` で囲まれた式に対して、`Object#to_s(IO)` が実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This error isn't very frequent, and is usually gone if a `Person` is instantiated before the map call:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062320Z" creationid="hirofumiwakasugi" creationdate="20150930T062320Z">
        <seg>このエラーに出会うことはあまりないでしょう。もし `Person` が map の呼び出し前にインスタンス化されていればエラーにはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This evaluation applies to both interpolation and directives.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221137Z" creationid="makenowjust" creationdate="20200509T221137Z">
        <seg>この評価は埋め込みだけでなくディレクティブに対してもはたらきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This explanation should include a few examples along with subheadings.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T161348Z" creationid="makenowjust" creationdate="20200527T161331Z">
        <seg>この説明にはいくつかの例を適切に章立てして含めるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This expression is also available in the &lt;g1&gt;type grammar&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T121626Z" creationid="makenowjust" creationdate="20200512T121626Z">
        <seg>この式は&lt;g1&gt;型の文法&lt;/g1&gt;で使うこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This expression is also available in the [type grammar](type_grammar.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063302Z" creationid="hirofumiwakasugi" creationdate="20150930T063230Z">
        <seg>この式は[型文法](type_grammar.html)で利用することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This extra rule is very convenient because it's very common to have "constructor-like" class methods in addition to &lt;g1&gt;new&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T142340Z" creationid="makenowjust" creationdate="20200427T142340Z">
        <seg>この追加の規則は、よくある&lt;g1&gt;new&lt;/g1&gt;を呼ぶだけのコンストラクタ的なメソッドに対して動作するため非常に便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This fiber wants to sleep for 5 seconds, so the Event Loop is told to continue with this fiber in 5 seconds.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T070307Z" creationid="akiji" creationdate="20200428T070307Z">
        <seg>こちらのファイバは5秒間スリープし、イベントループに5秒経ったらこちらのファイバを再開するよう伝えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This file describes the project and lists dependencies that are required to build it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T173704Z" creationid="makenowjust" creationdate="20200419T173704Z">
        <seg>このファイルはプロジェクトの説明と、ビルドに必要な依存関係のリストを含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This form allows you to specify the return type and to check it against the proc's body.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021835Z" creationid="hirofumiwakasugi" creationdate="20150902T021555Z">
        <seg>この形式の場合、戻り値の型を指定することができるため、Proc の本体の戻り値が正しい型であるかをチェックすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This guide presents the api of crystal-db, the sql commands might need to be adapted for the concrete driver due to differences between postgres, mysql and sqlite.</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T190414Z" creationid="daiki" creationdate="20200705T190301Z">
        <seg>このガイドでは、crystal-db の API を紹介していますが、 postgres 、 mysql 、 sqlite の違いにより、具体的なドライバに合わせてsqlコマンドを変更する必要があるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This has no effect if the method yields, since functions which yield are always inlined.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120032Z" creationid="makenowjust" creationdate="20200510T120032Z">
        <seg>これはメソッドが yield する場合には効果がありません。なぜならその場合は常にインライン化されるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This has no effect if the method yields.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073222Z" creationid="hirofumiwakasugi" creationdate="20150919T073222Z">
        <seg>メソッドが yield する場合には効果がありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is &lt;g1&gt;Int#times&lt;/g1&gt; definition:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T192142Z" creationid="makenowjust" creationdate="20200505T192142Z">
        <seg>&lt;g1&gt;Int#times&lt;/g1&gt; は以下のように定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is &lt;g1&gt;unsafe&lt;/g1&gt; code and is almost always used in low-level code for declaring uninitialized &lt;g2&gt;StaticArray&lt;/g2&gt; buffers without a performance penalty:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T020707Z" creationid="makenowjust" creationdate="20200511T020707Z">
        <seg>これは&lt;g1&gt;安全でない&lt;/g1&gt;コードで、特に低レベルなコードにおいて、未初期化の &lt;g2&gt;StaticArray&lt;/g2&gt; バッファをパフォーマンスの劣化なく定義するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is &lt;g1&gt;unsafe&lt;/g1&gt; code and is almost always used in low-level code for declaring uninitialized &lt;g2&gt;StaticArray&lt;/g2&gt;http://crystal-lang.org/api/StaticArray.html&lt;e3/&gt; buffers without a performance penalty:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T084145Z" creationid="makenowjust" creationdate="20200518T084145Z">
        <seg>これは&lt;g1&gt;安全でない&lt;/g1&gt;コードで、特に低レベルなコードにおいて、未初期化の &lt;g2&gt;StaticArray&lt;/g2&gt;http://crystal-lang.org/api/StaticArray.html&lt;e3/&gt; バッファをパフォーマンスの劣化なく定義するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is &lt;g1&gt;unsafe&lt;/g1&gt; code and is almost always used in low-level code for declaring uninitialized &lt;g2&gt;StaticArray&lt;/g2&gt;https://crystal-lang.org/api/latest/StaticArray.html&lt;e3/&gt; buffers without a performance penalty:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T092727Z" creationid="makenowjust" creationdate="20210324T092727Z">
        <seg>これは&lt;g1&gt;安全でない&lt;/g1&gt;コードで、特に低レベルなコードにおいて、未初期化の &lt;g2&gt;StaticArray&lt;/g2&gt;https://crystal-lang.org/api/latest/StaticArray.html&lt;e3/&gt; バッファをパフォーマンスの劣化なく定義するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is [unsafe](unsafe.html) code and is almost always used in low-level code for declaring uninitialized [StaticArray](http://crystal-lang.org/api/StaticArray.html) buffers without a peformance penalty:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T120114Z" creationid="hirofumiwakasugi" creationdate="20150906T115142Z">
        <seg>これは「安全でない ([unsafe](unsafe.html))」なコードで、特にローレベルなコードにおいて、未初期化の [StaticArray](http://crystal-lang.org/api/StaticArray.html)  バッファをパフォーマンスの劣化なく定義するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is `Int#times` definition:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T032021Z" creationid="hirofumiwakasugi" creationdate="20150916T032021Z">
        <seg>`Int#times` は以下のように定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a &lt;g2&gt;class method&lt;/g2&gt; that belongs to the &lt;g3&gt;class&lt;/g3&gt; &lt;g4&gt;Person&lt;/g4&gt;, not to particular instances of that class.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T121300Z" creationid="makenowjust" creationdate="20200427T121242Z">
        <seg>これは&lt;g2&gt;クラスメソッド&lt;/g2&gt;といって、&lt;g4&gt;Person&lt;/g4&gt;&lt;g3&gt;クラス&lt;/g3&gt;自体に属すメソッドを表しています。特定のインスタンスに対してではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a low-level primitive and only useful if a C API needs to directly interface with the data layout of a Crystal type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T020254Z" creationid="makenowjust" creationdate="20200511T020254Z">
        <seg>これは低レベルプリミティブで、C 言語の API が Crystal の型のデータレイアウトを必要とする場合に限って有用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is allowed:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063345Z" creationid="hirofumiwakasugi" creationdate="20150912T063138Z">
        <seg>それは、以下が許されてしまうということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is because a Reference's memory is allocated on the heap and a pointer to it is passed around.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T115910Z" creationid="hirofumiwakasugi" creationdate="20150906T035842Z">
        <seg>この理由は、Reference のメモリはヒープに割り当てられ、渡されるのはそこを指すポインタになるためです。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is because any method call could potentially affect that instance variable, rendering it `nil`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T015713Z" creationid="hirofumiwakasugi" creationdate="20150903T015334Z">
        <seg>これは、インスタンス変数はどんなメソッドの実行によっても影響を受ける可能性があるため、それが `nil` になる場合もあるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is because the &lt;g1&gt;sleep&lt;/g1&gt; call will schedule the main fiber to be executed in a second, and then executes another "ready to execute" fiber, which in this case is the one above.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T070530Z" creationid="akiji" creationdate="20200428T075237Z">
        <seg>これは &lt;g1&gt;sleep&lt;/g1&gt;によってメインファイバが1秒後に再開するようスケジューリングされ、その間に他の "実行可能な" （この場合はすぐ上で生成されていた）ファイバが実行されるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is because the captured block could have been potentially stored in a class or instance variable and invoked in a separate thread in between the instructions.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T081227Z" creationid="makenowjust" creationdate="20200506T081227Z">
        <seg>この理由は、捕捉されたブロックはグローバル変数やクラス変数、そしてインスタンス変数に保持されることもあり、そして別のスラッドで実行される可能性もあるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is because the captured block could have been potentially stored in a global, class or instance variable and invoked in a separate thread in between the instructions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T055727Z" creationid="hirofumiwakasugi" creationdate="20150918T055727Z">
        <seg>この理由は、捕捉されたブロックはグローバル変数やクラス変数、そしてインスタンス変数に保持されることもあり、そして別々のスレッドで実行される可能性もあるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is because there's nothing relating the `T` in the type with the instance variable `@value`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063635Z" creationid="hirofumiwakasugi" creationdate="20150912T063326Z">
        <seg>これは、`T` の型とインスタンス変数 `@value` の型に関連性がないことが原因です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is because when you invoke &lt;g1&gt;add&lt;/g1&gt;, it is instantiated with the types of the arguments: every method invocation with a different type combination results in a different method instantiation.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T083738Z" creationid="makenowjust" creationdate="20200429T160250Z">
        <seg>この理由は、&lt;g1&gt;add&lt;/g1&gt; を呼び出すとき、そのメソッドは引数の型にしたがって実体化されるためです。異なる型を与えたメソッドは、それぞれ別のものとして実体化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is because when you invoke `add`, it is instantiated with the types of the arguments: every method invocation with a different type combination results in a different method instantiation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T043530Z" creationid="hirofumiwakasugi" creationdate="20150907T043119Z">
        <seg>この理由は、`add` を実行するとき、そのメソッドは引数の型にしたがって初期化される、ということによります。つまり、異なる型を与えてメソッドを実行すると、メソッドを初期化した結果もそれぞれ異なるものとなるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is better understood with an example:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061531Z" creationid="hirofumiwakasugi" creationdate="20150918T053648Z">
        <seg>例を見てみるとわかりやすいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is called *method overloading*.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071037Z" creationid="hirofumiwakasugi" creationdate="20150906T071037Z">
        <seg>これを「メソッドのオーバーロード」と呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is called &lt;g1&gt;method overloading&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T150321Z" creationid="makenowjust" creationdate="20200429T150321Z">
        <seg>これを&lt;g1&gt;メソッドのオーバーロード&lt;/g1&gt;と呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is called a union type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T143614Z" creationid="makenowjust" creationdate="20200429T143614Z">
        <seg>これをユニオン型と呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is called a virtual type, which basically means the compiler will now see the type as being &lt;g10&gt;Parent&lt;/g10&gt; or any of its subtypes.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T145025Z" creationid="makenowjust" creationdate="20200429T145025Z">
        <seg>この型はバーチャル型と呼ばれるものです。コンパイラはこれを、&lt;g10&gt;Parent&lt;/g10&gt; もしくはそのサブクラスを表すものと見なします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is different than the above named tuple &lt;g6&gt;type&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T122620Z" creationid="makenowjust" creationdate="20200507T122620Z">
        <seg>これは上記の名前付きタプル&lt;g6&gt;型&lt;/g6&gt;とは異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is different than the above tuple **type**.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011306Z" creationid="hirofumiwakasugi" creationdate="20151009T011306Z">
        <seg>これは上記のタプル**型**とは異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is different than the above tuple &lt;g4&gt;type&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T122346Z" creationid="makenowjust" creationdate="20200507T122346Z">
        <seg>これは上記のタプル&lt;g4&gt;型&lt;/g4&gt;とは異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is done automatically when &lt;g1&gt;crystal tool format&lt;/g1&gt; is invoked, which
will automatically format all &lt;g2&gt;.cr&lt;/g2&gt; files in current directory.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215625Z" creationid="makenowjust" creationdate="20200412T215625Z">
        <seg>&lt;g1&gt;crystal tool format&lt;/g1&gt;すれば、現在のディレクトリのすべての&lt;g2&gt;.cr&lt;/g2&gt;のドキュメンテーションコメントもフォーマットされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is everything you can know about an object: its type and whether it responds to some method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T101513Z" creationid="hirofumiwakasugi" creationdate="20150904T012907Z">
        <seg>「型を持っていて、メソッドに応答する」もの。これがオブジェクトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is explained in the &lt;g1&gt;lib&lt;/g1&gt; section.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120421Z" creationid="makenowjust" creationdate="20200510T114613Z">
        <seg>詳細は &lt;g1&gt;lib&lt;/g1&gt; のセクションを参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is explained in the &lt;g2&gt;callbacks&lt;/g2&gt; section.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120427Z" creationid="makenowjust" creationdate="20200510T120217Z">
        <seg>詳細は &lt;g2&gt;コールバック&lt;/g2&gt; のセクションを参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is explained in the [callbacks](c_bindings/callbacks.html) section.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073558Z" creationid="hirofumiwakasugi" creationdate="20150919T073555Z">
        <seg>詳細は[コールバック](c_bindings/callbacks.html)のセクションを参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is explained in the [lib](c_bindings/lib.html) section.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T072357Z" creationid="hirofumiwakasugi" creationdate="20150919T072357Z">
        <seg>詳細は [lib](c_bindings/lib.html) セクションを参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is expressed as the special return type &lt;g1&gt;NoReturn&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T142240Z" creationid="makenowjust" creationdate="20200430T142240Z">
        <seg>そのようなものは &lt;g1&gt;NoReturn&lt;/g1&gt; という特別な型によって表現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is for example useful for deconstructing union types:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T142340Z" creationid="makenowjust" creationdate="20200430T142340Z">
        <seg>これはユニオン型を分解する際に便利なことがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is in general necessary when dealing with a collection of objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T061129Z" creationid="hirofumiwakasugi" creationdate="20150912T060711Z">
        <seg>これは特にオブジェクトのコレクションを扱う場合に必要になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is just one type (Array) and one operation (assignment), the logic of the above will be applied differently for other types and assignments, in general &lt;x1/&gt;Covariance and Contravariance&lt;x2/&gt;&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt; is not fully supported.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T105912Z" creationid="makenowjust" creationdate="20200504T105912Z">
        <seg>この例は特定の型 (配列) と特定の操作 (代入) に対するもので、上記の方法は他の型の場合や代入意外の操作の場合にも同様に適用できるわけではありません。一般的な&lt;x1/&gt;共変性と反変性&lt;x2/&gt;&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;は完全にはサポートされていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is mostly useful with local variables that change at iterations.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T070910Z" creationid="akiji" creationdate="20200428T080804Z">
        <seg>この方法は、繰り返し処理の中でローカル変数の値が変化するような場合には便利な方法です。。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is similar to what other languages do, and serves to account for the position in the stream while writing in it, without additional calls.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T144752Z" creationid="makenowjust" creationdate="20200610T144712Z">
        <seg>これは他の言語でもそのようになっており、書き込み中に追加の呼び出しなく現在のストリームを位置を把握できるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the documentation for the Crystal programming language.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T083707Z" creationid="hirofumiwakasugi" creationdate="20150831T050600Z">
        <seg>本ドキュメントは「Crystal」というプログラミング言語について記載するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the formal specification of method and call arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T143831Z" creationid="makenowjust" creationdate="20200430T143831Z">
        <seg>これはメソッドの引数と呼び出しの形式的な仕様です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the formal specification of method parameters and call arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T090853Z" creationid="makenowjust" creationdate="20210324T090853Z">
        <seg>これはメソッドの引数と呼び出しの形式的な仕様です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the language reference for the Crystal programming language.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T221000Z" creationid="makenowjust" creationdate="20200412T221000Z">
        <seg>本ドキュメントは「Crystal」というプログラミング言語について記載するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is typically only needed if the C library explicitly uses packed structs.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T115950Z" creationid="makenowjust" creationdate="20200510T115950Z">
        <seg>C のライブラリがパックされた構造体を利用する場合に、これは必要になるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is useful for two reasons:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T141342Z" creationid="makenowjust" creationdate="20200430T141342Z">
        <seg>これは次の2つの点で有用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is useful to avoid duplication, but also to avoid the &lt;g2&gt;Nil&lt;/g2&gt; type when reopening a class and adding instance variables to it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T125354Z" creationid="makenowjust" creationdate="20200427T125354Z">
        <seg>これは重複を避けることができるだけでなく、クラスを再オープンしてインスタンス変数を追加する際に&lt;g2&gt;Nil&lt;/g2&gt;型になることを防ぐことにも役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is useful to avoid duplication, but also to avoid the `Nil` type when reopening a class and adding instance variables to it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T093208Z" creationid="hirofumiwakasugi" creationdate="20150905T055242Z">
        <seg>これは、重複を避けることができるだけではなく、クラスを再オープンしてインスタンス変数を追加する際に`Nil` 型になるのを防ぐことにも役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is very useful for defining wrappers of C types without having to explicitly transform them to their wrapped values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T045041Z" creationid="hirofumiwakasugi" creationdate="20151005T044954Z">
        <seg>これは、C の型のラッパーを定義する際に、明示的にそれらをラップされる型に変換する必要がないために便利に利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is very useful for lazily initialized variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T143659Z" creationid="makenowjust" creationdate="20200427T143659Z">
        <seg>これは初期化が遅延される場合に便利でしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is why we can do &lt;g5&gt;Person.new&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T121315Z" creationid="makenowjust" creationdate="20200427T121315Z">
        <seg>これによって &lt;g5&gt;Person.new&lt;/g5&gt; とできるわけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is why we can do `Person.new`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060415Z" creationid="hirofumiwakasugi" creationdate="20150904T060228Z">
        <seg>このことによって、`Person.new` としてメソッドを実行することができるのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This lets the user choose whether she wants to deal with exceptions or with &lt;g2&gt;nil&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T105116Z" creationid="makenowjust" creationdate="20200506T105116Z">
        <seg>こうすることで、ユーザーが例外を利用するか &lt;g2&gt;nil&lt;/g2&gt; を利用するかを選択することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This lets the user choose whether she wants to deal with exceptions or with `nil`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T024302Z" creationid="hirofumiwakasugi" creationdate="20150907T024302Z">
        <seg>こうすることで、ユーザーが例外を利用するか `nil` を利用するかを選択することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This library allows developers to create &lt;g2&gt;graphical&lt;/g2&gt; user interfaces in the terminal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T190433Z" creationid="makenowjust" creationdate="20200413T190433Z">
        <seg>このライブラリは端末で&lt;g2&gt;グラフィカルな&lt;/g2&gt;ユーザーインターフェースを開発することを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This list is sorted by precedence, so upper entries bind stronger than lower
ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084633Z" creationid="makenowjust" creationdate="20200502T084633Z">
        <seg>次の表は優先順位の高いものから低いものへ順ににソートされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This literal can be used with any type as long as it has an argless constructor and responds to &lt;g1&gt;&lt;&lt;&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180221Z" creationid="makenowjust" creationdate="20200420T173552Z">
        <seg>引数を持たないコンストラクタと&lt;g1&gt;&lt;&lt;&lt;/g1&gt;メソッドを持つ任意の型に対して、この構文は利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This literal can be used with any type as long as it has an argless constructor and responds to &lt;g1&gt;[]=&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180154Z" creationid="makenowjust" creationdate="20200420T180154Z">
        <seg>引数を持たないコンストラクタと&lt;g1&gt;[]=&lt;/g1&gt;メソッドを持つ任意の型に対して、この構文は利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This logic also applies if there are ands (&lt;g1&gt;&amp;&amp;&lt;/g1&gt;) in the condition:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081513Z" creationid="makenowjust" creationdate="20200424T081513Z">
        <seg>条件式でかつ (&lt;g1&gt;&amp;&amp;&lt;/g1&gt;) が使われた場合にも同様です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This logic also applies if there are ands (`&amp;&amp;`) in the condition:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014801Z" creationid="hirofumiwakasugi" creationdate="20150903T014801Z">
        <seg>条件で「かつ (`&amp;&amp;`)」が使われた場合にも同様です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This looks up "filename" in the require path.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T091101Z" creationid="hirofumiwakasugi" creationdate="20150905T144805Z">
        <seg>このように記述した場合、require パスの中で "filename" に対応するファイルを探します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This looks up "filename" relative to the file containing the require expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T091047Z" creationid="hirofumiwakasugi" creationdate="20150905T155934Z">
        <seg>このように記述した場合、require を実行したファイルから相対的に "filename" に対応するファイルを探します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This looks very fancy, but is it as fast as a C for loop?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T192121Z" creationid="makenowjust" creationdate="20200505T192121Z">
        <seg>とても読みやすいですが、これは C にループのように高速に動くのでしょうか？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This looks very fancy, but is it as fast as a C for loop? The answer is: yes!</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T031954Z" creationid="hirofumiwakasugi" creationdate="20150916T031954Z">
        <seg>とても読みやすいと思いませんか？でも、これは C のループのように高速に動くのでしょうか？その答えは「yes」です！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This may be used to provide relevant documentation for expansions:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221042Z" creationid="makenowjust" creationdate="20200509T221042Z">
        <seg>これは関係するドキュメントコメントを生成するのに使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means it’s safe to &lt;g2&gt;eval "$(crystal env)"&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T131707Z" creationid="makenowjust" creationdate="20200610T131707Z">
        <seg>つまり、&lt;g2&gt;eval "$(crystal env)"&lt;/g2&gt; が安全にできるようになったということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that the following gives a compile time error:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155223Z" creationid="hirofumiwakasugi" creationdate="20150905T054412Z">
        <seg>このとき、以下はコンパイルエラーが発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that the method belongs to the **class** `Person`, not to particular instances of that class.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060336Z" creationid="hirofumiwakasugi" creationdate="20150904T060226Z">
        <seg>これは、このメソッドが `Person` という**クラス**自体に属していることを意味します。クラスの特定のインスタンスに対してではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T031407Z" creationid="hirofumiwakasugi" creationdate="20150916T031407Z">
        <seg>これは次のことを意味しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means the arguments affect only the program to run and not the compiler.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T131330Z" creationid="makenowjust" creationdate="20200610T130806Z">
        <seg>このとき、引数はプログラムにだけ影響して、コンパイラに影響しない、ということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means, for example, a macro cannot generate a one or more &lt;g1&gt;when&lt;/g1&gt; expressions of a &lt;g2&gt;case&lt;/g2&gt; statement unless &lt;g3&gt;case&lt;/g3&gt; was a part of the generated code.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221712Z" creationid="makenowjust" creationdate="20200509T221635Z">
        <seg>要するに、例えば、マクロは冒頭の &lt;g3&gt;case&lt;/g3&gt; が生成するコードに含まれていないような&lt;g2&gt;case&lt;/g2&gt; 式の &lt;g1&gt;when&lt;/g1&gt; 節を生成することはできない、ということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is defined on all annotations by default, and is unique to each applied annotation.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T111036Z" creationid="makenowjust" creationdate="20200510T110452Z">
        <seg>このメソッドはデフォルトですべてのアノテーションに定義されていて、その結果は各アノテーションごとに一意です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is mainly intended to convert integers from C to enums in Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182754Z" creationid="hirofumiwakasugi" creationdate="20150916T011206Z">
        <seg>これは主に C の整数を Crystal の列挙型に変換する用途で利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method return an &lt;g8&gt;&lt;g9&gt;Annotation&lt;/g9&gt;&lt;/g8&gt; object representing the applied annotation of the supplied type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T111841Z" creationid="makenowjust" creationdate="20200510T111815Z">
        <seg>このメソッドは与えられた型の適用されたアノテーションを表す &lt;g8&gt;&lt;g9&gt;Annotation&lt;/g9&gt;&lt;/g8&gt; オブジェクトを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method return an &lt;g8&gt;&lt;g9&gt;Annotation&lt;/g9&gt;&lt;/g8&gt;https://crystal-lang.org/api/master/Crystal/Macros/Annotation.html&lt;e13/&gt; object representing the applied annotation of the supplied type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T082720Z" creationid="makenowjust" creationdate="20200518T082720Z">
        <seg>このメソッドは与えられた型の適用されたアノテーションを表す &lt;g8&gt;&lt;g9&gt;Annotation&lt;/g9&gt;&lt;/g8&gt;https://crystal-lang.org/api/master/Crystal/Macros/Annotation.html&lt;e13/&gt; オブジェクトを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This month</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T082557Z" creationid="makenowjust" creationdate="20200516T082557Z">
        <seg>今月</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This new file does not need to be tracked.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T141207Z" creationid="makenowjust" creationdate="20200610T141207Z">
        <seg>この新しいファイルはバージョン管理システムでトラックする必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This of course also works with the short syntax:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T142718Z" creationid="makenowjust" creationdate="20200427T142718Z">
        <seg>これは短かい書き方をしても同様に動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This operator is applied in &lt;g3&gt;case ... when&lt;/g3&gt;
conditions.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091041Z" creationid="makenowjust" creationdate="20200502T091007Z">
        <seg>この演算子は &lt;g3&gt;case ... when&lt;/g3&gt; の条件分岐でも用いられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This overwrites the inferred type and can be used for example to create an array that holds only some types initially but can accept other types later.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T174023Z" creationid="makenowjust" creationdate="20200420T173237Z">
        <seg>これは推論された型を置き換えるので、生成時には同じ型しか入っていないけれど、あとで別の型が入ってくるような場合に対応できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This overwrites the inferred types and can be used for example to create a hash that holds only some types initially but can accept other types as well.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T175810Z" creationid="makenowjust" creationdate="20200420T175810Z">
        <seg>これは推論された型を置き換えるので、初期化時には同じ型のみを持っているが、他の型も受け入れる必要があるようなハッシュを生成したい場合に対応できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This patch release is needed to iterate on some recent additions and fix a couple of regressions.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200621T073244Z" creationid="makenowjust" creationdate="20200621T073244Z">
        <seg>このパッチリリースは最近の追加や2つのリグレッションの修正を反映させるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This path is also used to temporarily store executables when Crystal programs are run with &lt;g2&gt;&lt;g3&gt;crystal run&lt;/g3&gt;&lt;/g2&gt; rather than &lt;g4&gt;&lt;g5&gt;crystal build&lt;/g5&gt;&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T170456Z" creationid="makenowjust" creationdate="20200419T170456Z">
        <seg>このパスは&lt;g2&gt;&lt;g3&gt;crystal run&lt;/g3&gt;&lt;/g2&gt;で一時的に保存される実行可能ファイルを保存する先としても利用されます (&lt;g4&gt;&lt;g5&gt;crystal build&lt;/g5&gt;&lt;/g4&gt; では利用しません)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This philosophy of appending to an IO instead of returning an intermediate string results in better performance than handling intermediate strings.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T022708Z" creationid="akiji" creationdate="20200430T130255Z">
        <seg>「中間文字列を返すのではなくIOに追加する」というこの哲学は、中間的な文字列を扱うよりも結果的に良いパフォーマンスを実現します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This prints:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T081008Z" creationid="akiji" creationdate="20200428T080953Z">
        <seg>このコードの出力は以下の通りです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This procedure is usually done with the compiler itself to port it to new platforms where a compiler is not yet available.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T050134Z" creationid="hirofumiwakasugi" creationdate="20150909T045815Z">
        <seg>通常、まだコンパイラを入手できない新しいプラットフォームにコンパイラ自体を移植する際にこの手順を利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This program will now print "Hello!" for one second and then exit.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T075302Z" creationid="akiji" creationdate="20200428T075053Z">
        <seg>今回のプログラムは1秒間 "Hello!" と出力し続けてから終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This relative is mostly used inside a project to refer to other files inside it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T160344Z" creationid="hirofumiwakasugi" creationdate="20150905T160229Z">
        <seg>この相対パス参照はプロジェクトの中で他のファイルを参照するときによく使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This release is not as exciting as 0.35.0 if you missed that announcement &lt;g1&gt;read it first&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200621T073104Z" creationid="makenowjust" creationdate="20200621T073104Z">
        <seg>このリリースは0.35.0ほど刺激的なものではありません。もしこちらのアナウンスを見ていなければ、&lt;g1&gt;こちらをまず読んでください&lt;/g1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This release of shards is focused on solving some papercuts issues and adding features that will come in handy to enable a healthy package ecosystem that will work against different versions of the language, plus reducing the friction of working on fixes here and there.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T104817Z" creationid="makenowjust" creationdate="20200809T104556Z">
        <seg>この Shards のリリースではいくつかのかすり傷のような問題を解決して、言語の異なるバージョンに対して機能する健全なパッケージエコシステムを手軽に可能にする機能を追加し、加えてあちこちを修正する際の摩擦を減らすことにフォーカスしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This removes debug symbols reducing file size, but obviously making debugging more difficult.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154021Z" creationid="makenowjust" creationdate="20200419T152527Z">
        <seg>これはファイルサイズを減らすためにデバッグシンボルをファイルから削除しますが、一方、当然にデバッグは困難になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This restriction might be lifted in the future.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T043813Z" creationid="hirofumiwakasugi" creationdate="20150909T043813Z">
        <seg>ただし、将来はこの制限が撤廃される可能性もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This results in more generic, reusable code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T013654Z" creationid="hirofumiwakasugi" creationdate="20150908T013654Z">
        <seg>その方がより汎用的で、再利用しやすいコードになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This rule, and every following rule, will also be applied in methods other than &lt;g1&gt;initialize&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T135606Z" creationid="makenowjust" creationdate="20200427T135606Z">
        <seg>この規則やその他すべての規則は、&lt;g1&gt;initialize&lt;/g1&gt;以外のメソッドに対しても適用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This scenario was not being handled correctly in multiple commands and should be fixed now.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T105447Z" creationid="makenowjust" creationdate="20200809T105447Z">
        <seg>このシナリオは複数のコマンドで適切に処理されていませんでしたが、今回のリリースで修正されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This script will execute the global installed compiler or the one that you just compiled (if present).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T061628Z" creationid="hirofumiwakasugi" creationdate="20150831T060757Z">
        <seg>このスクリプトは、グローバルにインストールされたコンパイラ、もしくは自分でビルドしたコンパイラがあればそれを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This should solve unfortunate surprises in some scenarios.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T133049Z" creationid="makenowjust" creationdate="20200610T132843Z">
        <seg>これはいくつかの場合の予期しない残念な挙動を解決するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This sometimes leads to code that is more natural to read.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013000Z" creationid="hirofumiwakasugi" creationdate="20150903T013000Z">
        <seg>この方がコードが読みやすくなる場合もあるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This style is used in the standard library.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010055Z" creationid="hirofumiwakasugi" creationdate="20151010T010055Z">
        <seg>このコーディングスタイルは標準ライブラリで使われているものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This time &lt;g1&gt;Fiber.yield&lt;/g1&gt; will tell the scheduler to execute the other fiber.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T070615Z" creationid="akiji" creationdate="20200428T075336Z">
        <seg>今度は &lt;g1&gt;Fiber.yield&lt;/g1&gt; がスケジューラに対して他のファイバを実行して良いと伝えています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This topic covers all things related to:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T181130Z" creationid="makenowjust" creationdate="20200413T163844Z">
        <seg>このトピックでは、次の話題に関連することを扱っていきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This union type is created automatically by the compiler.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T143822Z" creationid="makenowjust" creationdate="20200429T143822Z">
        <seg>ユニオン型はコンパイラによって自動的に作られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will allow future stories for tweaking the shards installation path.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T134903Z" creationid="makenowjust" creationdate="20200610T134903Z">
        <seg>将来的には shaeds のインストールパスを細かく設定できるようにしたいと考えています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will allow us to focus on future stories for tweaking linking, yet providing good defaults.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T134925Z" creationid="makenowjust" creationdate="20200610T134306Z">
        <seg>これによって将来、デフォルト値をいい感じに提供しつつ、リンクを詳細に設定できるようにすることを見据えています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will be the last 0.x release.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T122416Z" creationid="makenowjust" creationdate="20200610T122416Z">
        <seg>このリリースが最後のバージョン 0.x のリリースになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will create a `doc` directory, with a `doc/index.html` entry point.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144445Z" creationid="hirofumiwakasugi" creationdate="20151010T144315Z">
        <seg>これで、`doc` ディレクトリが作られ、そのエントリポイントは `doc/index.html` となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will create a `some_program` file that you can execute:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072037Z" creationid="hirofumiwakasugi" creationdate="20150901T072037Z">
        <seg>上記では、`some_program` という実行ファイルが作成され、以下のようにして実行することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will generate a &lt;g1&gt;.o&lt;/g1&gt; (&lt;g2&gt;Object file&lt;/g2&gt;) and will print a line with a command to execute on the system we are trying to cross-compile to.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T024152Z" creationid="makenowjust" creationdate="20200511T024152Z">
        <seg>これで、&lt;g1&gt;.o&lt;/g1&gt; (&lt;g2&gt;オブジェクトファイル&lt;/g2&gt;) が生成され、クロスコンパイルの対象システム上で実行すべきコマンドが表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will generate a &lt;g1&gt;.o&lt;/g1&gt; (&lt;g2&gt;Object file&lt;/g2&gt;http://en.wikipedia.org/wiki/Object_file&lt;e3/&gt;) and will print a line with a command to execute on the system we are trying to cross-compile to.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T084055Z" creationid="makenowjust" creationdate="20200518T084055Z">
        <seg>これで &lt;g1&gt;.o&lt;/g1&gt; (&lt;g2&gt;オブジェクトファイル&lt;/g2&gt;http://en.wikipedia.org/wiki/Object_file&lt;e3/&gt;) が生成され、クロスコンパイルの対象システム上で実行すべきコマンドが表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will generate a `.o` ([Object file](http://en.wikipedia.org/wiki/Object_file)) and will print a line with a command to execute on the system we are trying to cross-compile to.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T045601Z" creationid="hirofumiwakasugi" creationdate="20150909T045431Z">
        <seg>これで、`.o` ([オブジェクトファイル](http://en.wikipedia.org/wiki/Object_file)) が生成され、クロスコンパイルの対象システム上で実行すべきコマンドが表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will initialize &lt;g1&gt;@age&lt;/g1&gt; to zero in every constructor.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T125308Z" creationid="makenowjust" creationdate="20200427T125308Z">
        <seg>このとき &lt;g1&gt;@age&lt;/g1&gt; はどのコンストラクタでも0で初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will initialize `@age` to zero in every constructor.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T092918Z" creationid="hirofumiwakasugi" creationdate="20150905T055147Z">
        <seg>上記の例では、`@age` はすべてのコンストラクタで0に初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will print "Hello!" until the standard output blocks (the system call will tell us we have to wait until the output is ready), and then execution continues with the main fiber and the program exits.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T075600Z" creationid="akiji" creationdate="20200428T075437Z">
        <seg>その結果、標準出力がブロックされる（システムコールが標準出力の準備ができるまで待つよう伝えてくる）まで "Hello!" と出力し続けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will work for any &lt;g1&gt;fun&lt;/g1&gt; parameter, as long as its type is a pointer (and, of course, as long as the function does fill the value the pointer is pointing to).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T093516Z" creationid="makenowjust" creationdate="20210324T093516Z">
        <seg>これは、&lt;g1&gt;fun&lt;/g1&gt; の引数がその型のポインタである場合には、どのような型に対しても有効です (もちろん、ポインタが差す値が関数によって設定されることが前提です)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will work for any type, as long as the argument is a pointer of that type (and, of course, as long as the function does fill the value the pointer is pointing to).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044201Z" creationid="hirofumiwakasugi" creationdate="20151005T044201Z">
        <seg>これは、引数がその型のポインタである場合には、どのような型に対しても有効です (もちろん、ポインタが指す値が関数によって設定されることが前提です) 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will work on anything that &lt;g2&gt;.annotation(type : TypeNode)&lt;/g2&gt; would, but instead returns an &lt;g3&gt;ArrayLiteral(Annotation)&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T112642Z" creationid="makenowjust" creationdate="20200510T112550Z">
        <seg>これは &lt;g2&gt;.annotation(type : TypeNode)&lt;/g2&gt; がするように動作しますが、&lt;g3&gt;ArrayLiteral(Annotation)&lt;/g3&gt; を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This works, but it has a flaw: it creates an intermediate string, in heap memory, only to write it and then discard it.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T022338Z" creationid="akiji" creationdate="20200430T120739Z">
        <seg>そうした方法でも動作はしますが、そのためには書き込んだら廃棄するだけの中間的な文字列が、ヒープメモリ上に生成されることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This, involves a heap memory allocation and gives a bit of work to the GC.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T022434Z" creationid="akiji" creationdate="20200430T120805Z">
        <seg>これにより、ヒープメモリの割り当てが発生し、GCにちょっとした負荷がかかります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153019Z" creationid="hirofumiwakasugi" creationdate="20160115T153019Z">
        <seg>例えば、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ThreadLocal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114951Z" creationid="makenowjust" creationdate="20200510T114951Z">
        <seg>ThreadLocal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ThreadLocal is used in the standard library to implement the runtime and shouldn't be
needed or used outside it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T115341Z" creationid="makenowjust" creationdate="20200510T115341Z">
        <seg>ThreadLocal は標準ライブラリでランタイムを実装するのに使われていますが、その外で使うことはないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Threads are pre-emptive: the operating system might interrupt a thread at any time and start executing another one.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T062215Z" creationid="akiji" creationdate="20200428T062215Z">
        <seg>スレッドはプリエンプティブ（非同期マルチタスク）なので，OSはいつでもスレッドに割り込んで別のスレッドを実行することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Three</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052629Z" creationid="hirofumiwakasugi" creationdate="20151007T052629Z">
        <seg>Three</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Three base operators test equality:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090613Z" creationid="makenowjust" creationdate="20200502T090613Z">
        <seg>基本となる等価性の検査の方法として次のものがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, a &lt;g1&gt;type&lt;/g1&gt; declaration is useful for opaque types that are created by the C library you are wrapping.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T092151Z" creationid="makenowjust" creationdate="20200512T084726Z">
        <seg>したがって、ラップしようとしている C ライブラリの生成する opaque な型に対して &lt;g1&gt;type&lt;/g1&gt; 宣言を有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, a `type` declaration is useful for opaque types that are created by the C library you are wrapping.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023545Z" creationid="hirofumiwakasugi" creationdate="20151008T023545Z">
        <seg>したがって、ラップしようとしている C ライブラリによって生成された不透明な型 (opaque type) に対して、`type` 宣言を有効に利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, a method implementation receives
exactly one argument representing the second operand.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T083804Z" creationid="makenowjust" creationdate="20200502T083804Z">
        <seg>そして、メソッドとしての実装ではちょうど1つの引数を取り、それが2番目のオペランドに対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, a method implementation receives no arguments and only operates on &lt;g1&gt;self&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T083533Z" creationid="makenowjust" creationdate="20200502T083533Z">
        <seg>そして、メソッドとしての実装は引数を取らず&lt;g1&gt;self&lt;/g1&gt;に対して作用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Time</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T151957Z" creationid="makenowjust" creationdate="20200610T151957Z">
        <seg>時刻</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Time.local
...
address = server.bind_tcp 8080
...
puts "Listening on http://#{address}"
...
server.listen</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162447Z" creationid="makenowjust" creationdate="20200413T162447Z">
        <seg>Time.local
...
address = server.bind_tcp 8080
...
puts "Listening on http://#{address}"
...
server.listen</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Time.now</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072631Z" creationid="hirofumiwakasugi" creationdate="20150901T072631Z">
        <seg>Time.now</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To access a relational database you will need a shard designed for the database server you want to use.</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T190307Z" creationid="daiki" creationdate="20200705T185018Z">
        <seg>リレーショナルデータベースにアクセスするには、使用したいデータベースサーバー用に設計された Shard が必要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To access the rescued exception you can specify a variable in the &lt;g1&gt;rescue&lt;/g1&gt; clause:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103505Z" creationid="makenowjust" creationdate="20200506T103505Z">
        <seg>捕捉された例外にアクセスしたいときは、&lt;g1&gt;rescue&lt;/g1&gt; 節に変数を指定することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To access the rescued exception you can specify a variable in the `rescue` clause:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013116Z" creationid="hirofumiwakasugi" creationdate="20150907T012004Z">
        <seg>捕捉された例外にアクセスしたいときは、`rescue` 節に変数を指定することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To achieve concurrency, Crystal has fibers.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T150107Z" creationid="akiji" creationdate="20200428T054055Z">
        <seg>並行処理を行うために、Crystal はファイバを利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a page, create a Markdown file in the desired location.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T055814Z" creationid="makenowjust" creationdate="20201213T055814Z">
        <seg>ページを追加する場合、Markdown ファイルを希望の場所に配置してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a page, create a markdown file in the desired location.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164817Z" creationid="makenowjust" creationdate="20200413T164817Z">
        <seg>ページを追加する場合、Markdown ファイルを希望の場所に配置してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To automatically link to methods in other types, do &lt;g1&gt;OtherType#method(arg1, arg2)&lt;/g1&gt; or just &lt;g2&gt;OtherType#method&lt;/g2&gt;, and enclose it with single backticks.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212554Z" creationid="makenowjust" creationdate="20200412T212510Z">
        <seg>他の型のメソッドに対して自動的にリンクさせたい場合は、&lt;g1&gt;OtherType#method(arg1, arg2)&lt;/g1&gt;のようにするかa、または単純に&lt;g2&gt;OtherType#method&lt;/g2&gt;として、1つのバックティック (バッククォート) で囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To automatically link to methods of the currently documented type, use a hash like &lt;g1&gt;#horns&lt;/g1&gt; or &lt;g2&gt;#index(char)&lt;/g2&gt;, and enclose it with single backticks.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212307Z" creationid="makenowjust" creationdate="20200412T212307Z">
        <seg>現在の型のメソッドに対して自動的にリンクさせたい場合は、&lt;g1&gt;#horns&lt;/g1&gt;や&lt;g2&gt;#index(char)&lt;/g2&gt;のようにハッシュ記号をつけて、1つのバックティック (バッククォート) で囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To automatically link to other types, enclose them with single backticks.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212123Z" creationid="makenowjust" creationdate="20200412T212123Z">
        <seg>自動的に他の型にリンクさせたい場合は、1つのバックティック (バッククォート) で囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To avoid &lt;g1&gt;SQL injection&lt;/g1&gt;https://owasp.org/www-community/attacks/SQL_Injection&lt;e5/&gt; values can be provided as query parameters.</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200706T094906Z" creationid="daiki" creationdate="20200705T234148Z">
        <seg>&lt;g1&gt;SQL インジェクション&lt;/g1&gt;https://owasp.org/www-community/attacks/SQL_Injection&lt;e5/&gt; を避けるため、クエリパラメータとして値を与えることが出来ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To avoid all this boilerplate, the standard library provides a &lt;g1&gt;spawn&lt;/g1&gt; macro that accepts a call expression and basically rewrites it to do the above.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T080704Z" creationid="akiji" creationdate="20200428T080704Z">
        <seg>上記のようなボイラープレートコードを回避するために、標準ライブラリは式の呼び出しを受け取って上記コードに展開する&lt;g1&gt;spawn&lt;/g1&gt; マクロを用意しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To avoid building LLVM from source (which can take a long time), you can first install it from binary packages if you don't have it installed yet:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111424Z" creationid="makenowjust" creationdate="20200518T111424Z">
        <seg>LLVM をビルドするのを避けるため (これはとても時間がかかります)、まず最初にバイナリパッケージをインストールすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To avoid this a string can be split into multiple lines
by joining multiple literals with a backslash:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194654Z" creationid="makenowjust" creationdate="20200419T194654Z">
        <seg>これを防ぐために、文字列リテラルを行毎に分割して、バックスラッシュで結合するという手段を取ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To avoid this initialization you can use &lt;g1&gt;uninitialized&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T082757Z" creationid="makenowjust" creationdate="20200512T082743Z">
        <seg>このように初期化されることを避けたい場合は &lt;g1&gt;uninitialized&lt;/g1&gt; を利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To avoid this initialization you can use `::`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T050313Z" creationid="hirofumiwakasugi" creationdate="20151007T050218Z">
        <seg>このように初期化されることを避けたい場合は、`::` を利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To avoid this initialization you can use `uninitialized`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061506Z" creationid="hirofumiwakasugi" creationdate="20160204T061457Z">
        <seg>このように初期化されることを避けたい場合は、`uninitialized` を利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To avoid this, command literals should generally not be used with interpolated user input.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T173241Z" creationid="makenowjust" creationdate="20200422T173241Z">
        <seg>これを避けるには、コマンドリテラルの補間にユーザーの入力した値を用いないようにする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To avoid this, fresh variables can be declared with &lt;g1&gt;%name&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T225918Z" creationid="makenowjust" creationdate="20200509T225918Z">
        <seg>このような自体を避けるため、フレッシュ変数と呼ばれるものを &lt;g1&gt;%name&lt;/g1&gt; で宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To avoid this, you can split a string into multiple lines
by joining multiple literals with a backslash:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104022Z" creationid="hirofumiwakasugi" creationdate="20150901T104022Z">
        <seg>これを避けたければ、複数行の文字列リテラルをバックスラッシュで結合することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To build your own version of the compiler, run `make`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060550Z" creationid="hirofumiwakasugi" creationdate="20150831T060550Z">
        <seg>コンパイラをビルドするときは、`make` を実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To capture a block you must specify it as a method's block argument, give it a name and specify the input and output types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T040352Z" creationid="hirofumiwakasugi" creationdate="20150916T035838Z">
        <seg>ブロックを捕捉するには、メソッドにブロック引数を設定し、その名前とインプット/アウトプットの型を指定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To capture a block you must specify it as a method's block parameter, give it a name and specify the input and output types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T101158Z" creationid="makenowjust" creationdate="20210324T101158Z">
        <seg>ブロックを捕捉するには、メソッドにブロック引数を設定し、その名前とインプット/アウトプットの型を指定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To check if your code is formatted correctly, or to check if using the formatter wouldn't produce any changes, simply add &lt;g1&gt;--check&lt;/g1&gt; to the end of this command.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T162137Z" creationid="makenowjust" creationdate="20200527T162137Z">
        <seg>&lt;g1&gt;--check&lt;/g1&gt; をコマンドの末尾につけることで、コードが正しくフォーマットされているかを確かめる、要するにフォーマッタがコードを変更しないことを確かめられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To compile Crystal, you need Crystal :).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T064721Z" creationid="makenowjust" creationdate="20200518T064721Z">
        <seg>Crystal をコンパイルするには、Crystal 自身が必要なのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To compile and run a program in a single shot you can invoke `crystal` with a single filename:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T071951Z" creationid="hirofumiwakasugi" creationdate="20150901T071951Z">
        <seg>ファイル名を1つ指定して `crystal` コマンドを実行することで、プログラムのコンパイルと実行を一発で行うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To compile and run a program in a single shot, invoke &lt;g1&gt;&lt;g2&gt;crystal run&lt;/g2&gt;&lt;/g1&gt; with a single filename:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150246Z" creationid="makenowjust" creationdate="20200419T150246Z">
        <seg>ファイル名を1つ指定して&lt;g1&gt;&lt;g2&gt;crystal run&lt;/g2&gt;&lt;/g1&gt;コマンドを実行することで、プログラムのコンパイルと実行を一発で行うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To compile and run the program in a single shot you can invoke `crystal` with a single filename:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T130436Z" creationid="hirofumiwakasugi" creationdate="20150901T130436Z">
        <seg>To compile and run the program in a single shot you can invoke `crystal` with a single filename:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a String with embedded expressions, you can use string interpolation:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T105432Z" creationid="hirofumiwakasugi" creationdate="20150901T105432Z">
        <seg>文字列の中には式を埋め込むことが可能です。これを文字列埋め込み (文字列補完/String Interpolation
) といいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a method that accepts a type name, rather than an instance of a type, append &lt;g1&gt;.class&lt;/g1&gt; to a free variable in the type restriction:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T135851Z" creationid="makenowjust" creationdate="20200430T135851Z">
        <seg>インスタンスの型ではなくクラスの型を受け取るメソッドの場合、自由変数に &lt;g1&gt;.class&lt;/g1&gt; を付けたものを型制約に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a method that accepts a type name, rather than an instance of a type, append `.class` to a free variable in the type restriction:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T040533Z" creationid="hirofumiwakasugi" creationdate="20150908T040233Z">
        <seg>型のインスタンスではなく、型自体の名前を利用したい場合は、型制約の自由変数に `.class` を追加してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create an empty tuple use &lt;g1&gt;Tuple.new&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T164934Z" creationid="makenowjust" creationdate="20200422T164934Z">
        <seg>空のタプルを作るには&lt;g1&gt;Tuple.new&lt;/g1&gt;を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create an empty tuple use &lt;g1&gt;Tuple.new&lt;/g1&gt;https://crystal-lang.org/api/Tuple.html#new%28%2Aargs%3A%2AT%29-class-method&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T090115Z" creationid="makenowjust" creationdate="20200518T090115Z">
        <seg>空のタプルを作るには &lt;g1&gt;Tuple.new&lt;/g1&gt;https://crystal-lang.org/api/Tuple.html#new%28%2Aargs%3A%2AT%29-class-method&lt;e2/&gt; を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create an empty tuple use &lt;g1&gt;Tuple.new&lt;/g1&gt;https://crystal-lang.org/api/latest/Tuple.html#new%28%2Aargs%3A%2AT%29-class-method&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T081016Z" creationid="makenowjust" creationdate="20210324T081016Z">
        <seg>空のタプルを作りたい場合は、&lt;g1&gt;Tuple.new&lt;/g1&gt;https://crystal-lang.org/api/latest/Tuple.html#new%28%2Aargs%3A%2AT%29-class-method&lt;e2/&gt;を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create an empty tuple use [Tuple.new](http://crystal-lang.org/api/Tuple.html#new%28%2Aargs%29-class-method).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T020813Z" creationid="hirofumiwakasugi" creationdate="20150902T020813Z">
        <seg>空のタプルを作りたい場合は、[Tuple.new](http://crystal-lang.org/api/Tuple.html#new%28%2Aargs%29-class-method) を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create an executable use the `build` command:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072028Z" creationid="hirofumiwakasugi" creationdate="20150901T072028Z">
        <seg>実行ファイルを作成するには `build` コマンドを使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create an instance of a struct use &lt;g1&gt;new&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T082730Z" creationid="makenowjust" creationdate="20200512T082730Z">
        <seg>構造体のインスタンスを生成するには &lt;g1&gt;new&lt;/g1&gt; を利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create an instance of a struct use `new`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045950Z" creationid="hirofumiwakasugi" creationdate="20151007T045941Z">
        <seg>構造体のインスタンスを生成するには `new` を利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create an instance of a union use &lt;g1&gt;new&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083339Z" creationid="makenowjust" creationdate="20200512T083339Z">
        <seg>共用体のインスタンスを生成するには &lt;g1&gt;new&lt;/g1&gt; を利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create an instance of a union use `new`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052231Z" creationid="hirofumiwakasugi" creationdate="20151007T052231Z">
        <seg>共用体のインスタンスを生成するには `new` を利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To deal with `Nil`, and generally with union types, you have several options: use an [if var](if_var.html), [if var.is_a?](if_varis_a.html), [case](case.html) and [is_a?](is_a.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010229Z" creationid="hirofumiwakasugi" creationdate="20150905T054635Z">
        <seg>`Nil` や型の組み合わせ (ユニオン型) を扱うときには、[if var](if_var.html)/[if var.is_a?](if_varis_a.html)/[case](case.html)/[is_a?](is_a.html) を利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To declare recursive structs you can forward-declare them:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045902Z" creationid="hirofumiwakasugi" creationdate="20151007T045902Z">
        <seg>再帰的な構造体は、宣言フォワーディング (forward-declare) によって宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To define a custom exception type, just subclass from &lt;g1&gt;Exception&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103421Z" creationid="makenowjust" creationdate="20200506T103421Z">
        <seg>独自の例外型を定義したい場合には、&lt;g1&gt;Exception&lt;/g1&gt; からサブクラスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To define a custom exception type, just subclass from &lt;g1&gt;Exception&lt;/g1&gt;http://crystal-lang.org/api/Exception.html&lt;e2/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T084450Z" creationid="makenowjust" creationdate="20200518T084450Z">
        <seg>独自の例外を定義したい場合には、&lt;g1&gt;Exception&lt;/g1&gt;http://crystal-lang.org/api/Exception.html&lt;e2/&gt; からサブクラスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To define a custom exception type, just subclass from &lt;g1&gt;Exception&lt;/g1&gt;https://crystal-lang.org/api/latest/Exception.html&lt;e2/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T090023Z" creationid="makenowjust" creationdate="20210324T090023Z">
        <seg>独自の例外を定義したい場合には、&lt;g1&gt;Exception&lt;/g1&gt;https://crystal-lang.org/api/latest/Exception.html&lt;e2/&gt; からサブクラスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To define a custom exception type, just subclass from [Exception](http://crystal-lang.org/api/Exception.html):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011644Z" creationid="hirofumiwakasugi" creationdate="20150907T011610Z">
        <seg>独自の例外型を定義したい場合には、[Exception](http://crystal-lang.org/api/Exception.html) からサブクラスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To define a flag, simply use the &lt;g1&gt;--define&lt;/g1&gt; or &lt;g2&gt;-D&lt;/g2&gt; option, like so:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T023002Z" creationid="makenowjust" creationdate="20200511T023002Z">
        <seg>フラグを定義するには、&lt;g1&gt;--define&lt;/g1&gt; もしくは &lt;g2&gt;-D&lt;/g2&gt; オプションを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To define a method that receives a block, simply use &lt;g1&gt;yield&lt;/g1&gt; inside it and the compiler will know.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184149Z" creationid="makenowjust" creationdate="20200505T184149Z">
        <seg>ブロックを受け取るメソッドを定義するには、単純に &lt;g1&gt;yield&lt;/g1&gt; をメソッド内で使います。そうするとコンパイラはそれをブロックを受け取るメソッドであると認識します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To define a method that receives a block, simply use `yield` inside it and the compiler will know.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T014400Z" creationid="hirofumiwakasugi" creationdate="20150916T014258Z">
        <seg>ブロックを受け取るメソッドを定義するには、単純に `yield` をメソッド内で使います。そうするとコンパイラはブロックを受け取るメソッドであることを理解します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To denote a Proc type you can write:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171424Z" creationid="makenowjust" creationdate="20200422T171424Z">
        <seg>Proc の型は次のようにして書けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To denote a heredoc without interpolation or escapes, the opening heredoc identifier is enclosed in single quotes:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T034422Z" creationid="makenowjust" creationdate="20200420T034147Z">
        <seg>ヒアドキュメントの中で補間やエスケープを禁止したい場合、ヒアドキュメント冒頭の識別子をシングルクォートで囲ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To denote a named tuple type you can write:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T165946Z" creationid="makenowjust" creationdate="20200422T165946Z">
        <seg>名前付きタプルの型は次のようにして書けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To denote a tuple type you can write:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T164944Z" creationid="makenowjust" creationdate="20200422T164944Z">
        <seg>タプルの型は次のようして書けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To do something with `@a` only when it is not `nil` you have two options:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T020031Z" creationid="hirofumiwakasugi" creationdate="20150903T015913Z">
        <seg>`@a` が `nil` ではない場合のみにある処理を実行したい場合、方法は2つあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To easily install Crystal on Mac you can use [Homebrew](http://brew.sh/).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151220T002417Z" creationid="hirofumiwakasugi" creationdate="20151220T002417Z">
        <seg>[Homebrew](http://brew.sh/) を利用すると、簡単に Mac に Crystal をインストールすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To easily install Crystal on macOS you can use &lt;g1&gt;Homebrew&lt;/g1&gt;http://brew.sh/&lt;e2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111915Z" creationid="makenowjust" creationdate="20200518T111915Z">
        <seg>&lt;g1&gt;Homebrew&lt;/g1&gt;http://brew.sh/&lt;e2/&gt; を利用すると、簡単に macOS に Crystal をインストールできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To easily install Crystall on Mac you can use [Homebrew](http://brew.sh/).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T025728Z" creationid="hirofumiwakasugi" creationdate="20151102T024211Z">
        <seg>[Homebrew](http://brew.sh/) を利用すると、簡単に Mac に Crystal をインストールすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To easily install Crystall on Mac you can use our [Homebrew](http://brew.sh/) [tap](https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/brew-tap.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021631Z" creationid="hirofumiwakasugi" creationdate="20151009T021631Z">
        <seg>Mac に Crystal をインストールする場合、[Homebrew](http://brew.sh/) の [tap](https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/brew-tap.md) を用意しているので、それを利用すると簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To easily install Crystall on Mac you can use our [Homebrew](http://brew.sh/) [tap](https://github.com/Homebrew/homebrew/wiki/brew-tap)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055250Z" creationid="hirofumiwakasugi" creationdate="20150831T055250Z">
        <seg>Mac に Crystal をインストールする場合、[Homebrew](http://brew.sh/) の [tap](https://github.com/Homebrew/homebrew/wiki/brew-tap) を用意しているので、それを利用すると簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To execute sql statements you can use &lt;g1&gt;Database#exec&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200706T001530Z" creationid="daiki" creationdate="20200705T233943Z">
        <seg>sql 文を実行するには &lt;g1&gt;Database#exec&lt;/g1&gt; を利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To format a single file:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215749Z" creationid="makenowjust" creationdate="20200412T215749Z">
        <seg>単一のファイルをフォーマットするには以下のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To format all &lt;g1&gt;.cr&lt;/g1&gt; files within a directory:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215822Z" creationid="makenowjust" creationdate="20200412T215822Z">
        <seg>ディレクトリに含まれる&lt;g1&gt;.cr&lt;/g1&gt;ファイルをすべてフォーマットするには以下のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To forward captured blocks, you use a block argument, prefixing an expression with &lt;g1&gt;&amp;&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075339Z" creationid="makenowjust" creationdate="20200506T075339Z">
        <seg>捕捉したブロックをフォワーディングするには、式の先頭に &lt;g1&gt;&amp;&lt;/g1&gt; を付けたブロック引数を利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To forward captured blocks, you use a block argument, prefixing an expression with `&amp;`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025314Z" creationid="hirofumiwakasugi" creationdate="20150917T023916Z">
        <seg>捕捉したブロックをフォワーディングするには、先頭文字が `&amp;` のブロック引数を利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To forward non-captured blocks, you must use &lt;g1&gt;yield&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075559Z" creationid="makenowjust" creationdate="20200506T075559Z">
        <seg>捕捉されないブロックをフォワーディングするには &lt;g1&gt;yield&lt;/g1&gt; を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To forward non-captured blocks, you must use `yield`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025906Z" creationid="hirofumiwakasugi" creationdate="20150917T025542Z">
        <seg>捕捉されないブロックをフォワーディングするには `yield` を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To generate documentation for a project, invoke &lt;g1&gt;crystal docs&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T211324Z" creationid="makenowjust" creationdate="20200412T211324Z">
        <seg>プロジェクトのドキュメントを生成するには&lt;g1&gt;crystal docs&lt;/g1&gt;を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To generate documentation for a project, invoke `crystal doc`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144313Z" creationid="hirofumiwakasugi" creationdate="20151010T144310Z">
        <seg>プロジェクトのドキュメントを生成するには、`crystal doc` を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To get the &lt;g1&gt;--target&lt;/g1&gt; flags you can execute &lt;g2&gt;llvm-config --host-target&lt;/g2&gt; using an installed LLVM 3.5.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T023805Z" creationid="makenowjust" creationdate="20200511T023754Z">
        <seg>&lt;g1&gt;--target&lt;/g1&gt; フラグを得るには、インストールされたLLVM 3.5を使って &lt;g2&gt;llvm-config --host-target&lt;/g2&gt; を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To get the `--cross-compile` flags you can execute `uname -m -s` on a unix system.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T044941Z" creationid="hirofumiwakasugi" creationdate="20150909T044804Z">
        <seg>`--cross-compile` フラグは、UNIX システムでは `uname -m -s` を実行した結果から知ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To get the `--target` flags you can execute `llvm-config --host-target` using an installed LLVM 3.5.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T045218Z" creationid="hirofumiwakasugi" creationdate="20150909T045218Z">
        <seg>一方、`--target` フラグを得るには、LLVM 3.5 を使って `llvm-config --host-target` を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To get the effective size of a class, use &lt;g1&gt;instance_sizeof&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T015506Z" creationid="makenowjust" creationdate="20200511T015506Z">
        <seg>実際のクラスのサイズを得るには、&lt;g1&gt;instance_sizeof&lt;/g1&gt; を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To get the effective size of a class, use [instance_sizeof](instance_sizeof.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T040002Z" creationid="hirofumiwakasugi" creationdate="20150906T040002Z">
        <seg>実際のクラスのサイズを得るには [instance_sizeof](instance_sizeof.html) を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To get the target you can execute &lt;g3&gt;llvm-config --host-target&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T022927Z" creationid="makenowjust" creationdate="20200511T022927Z">
        <seg>実際のターゲットを得るには &lt;g3&gt;llvm-config --host-target&lt;/g3&gt; を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To get the underlying value you invoke &lt;g1&gt;value&lt;/g1&gt; on it:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182034Z" creationid="makenowjust" creationdate="20200505T182034Z">
        <seg>紐付いている値を参照するには &lt;g1&gt;value&lt;/g1&gt; を呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To get the underlying value you invoke `value` on it:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024558Z" creationid="hirofumiwakasugi" creationdate="20150914T024558Z">
        <seg>その値を参照するには `value` を実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To have something returned, either specify the return type or use an underscore to allow any return type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061950Z" creationid="hirofumiwakasugi" creationdate="20150918T061950Z">
        <seg>何か返して欲しい場合には、戻り値の型を指定するか、もしくはすべての型を許容したいときはアンダースコアを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To illustrate the problem let’s try the following: we want the input entered by the user to be sang loudly:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182406Z" creationid="makenowjust" creationdate="20200413T182406Z">
        <seg>これがどういう問題なのか説明するために、入力された値を叫ばせて (大文字にして表示して) みましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To illustrate the problem let’s try the following: we want the input entered by the user to be sung loudly:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T090944Z" creationid="makenowjust" creationdate="20211107T090944Z">
        <seg>この場合の問題を説明するために次のようにしてみましょう。ユーザーが入力した文字を大文字にしてみます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To install from source, download or clone &lt;g1&gt;the repository&lt;/g1&gt; and run &lt;g2&gt;make CRFLAGS=--release&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T173505Z" creationid="makenowjust" creationdate="20200419T173505Z">
        <seg>ソースコードからインストールするには、&lt;g1&gt;リポジトリ&lt;/g1&gt;からソースコードをダウンロードかクローンしてきて、&lt;g2&gt;make CRFLAGS=--release&lt;/g2&gt;を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To install from source, download or clone &lt;g1&gt;the repository&lt;/g1&gt;https://github.com/crystal-lang/shards&lt;e5/&gt; and run &lt;g2&gt;make CRFLAGS=--release&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T092722Z" creationid="makenowjust" creationdate="20200518T092722Z">
        <seg>ソースコードからインストールするには、&lt;g1&gt;リポジトリ&lt;/g1&gt;https://github.com/crystal-lang/shards&lt;e5/&gt;からソースコードをダウンロードかクローンしてきて、&lt;g2&gt;make CRFLAGS=--release&lt;/g2&gt; を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To install latest stable Crystal release from the official Crystal repository hosted on &lt;g1&gt;Bintray&lt;/g1&gt;https://bintray.com/beta/#/crystal/deb?tab=packages&lt;e2/&gt; run in your command line:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T092545Z" creationid="makenowjust" creationdate="20210130T092545Z">
        <seg>&lt;g1&gt;Bintray&lt;/g1&gt;https://bintray.com/beta/#/crystal/deb?tab=packages&lt;e2/&gt; でホストされている Crystal 公式の deb リポジトリから最新の安定板の Crystal のリリースをインストールするには、コマンドラインで次のように入力してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To install latest stable Crystal release from the official Crystal repository hosted on &lt;g1&gt;Bintray&lt;/g1&gt;https://bintray.com/beta/#/crystal/rpm?tab=packages&lt;e2/&gt; run in your command line:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T093408Z" creationid="makenowjust" creationdate="20210130T093408Z">
        <seg>&lt;g1&gt;Bintray&lt;/g1&gt;https://bintray.com/beta/#/crystal/rpm?tab=packages&lt;e2/&gt; でホストされている Crystal 公式のリポジトリから最新の安定板の Crystal のリリースをインストールするには、コマンドラインで次のように入力してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To install latest stable Crystal release from the official Crystal repository hosted on the &lt;g1&gt;Open Build Service&lt;/g1&gt;https://build.opensuse.org&lt;e2/&gt; run in your command line:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210504T120208Z" creationid="makenowjust" creationdate="20210504T120208Z">
        <seg>&lt;g1&gt;Open Build Service&lt;/g1&gt;https://build.opensuse.org&lt;e2/&gt; でホストされている Crystal 公式の deb リポジトリから最新の安定板の Crystal のリリースをインストールするには、コマンドラインで次のように入力してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To invoke a Proc, you invoke the &lt;g1&gt;call&lt;/g1&gt; method on it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171948Z" creationid="makenowjust" creationdate="20200422T171948Z">
        <seg>Proc を呼び出す (実行する) ためには、&lt;g1&gt;call&lt;/g1&gt; メソッドを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To invoke a Proc, you invoke the `call` method on it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021926Z" creationid="hirofumiwakasugi" creationdate="20150902T021916Z">
        <seg>Proc を実行するときは `call` メソッドを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To invoke a method and pass a block, you use &lt;g1&gt;do ... end&lt;/g1&gt; or &lt;g2&gt;{ ... }&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184258Z" creationid="makenowjust" creationdate="20200505T184258Z">
        <seg>ブロックを渡してメソッドを呼び出すには、&lt;g1&gt;do ... end&lt;/g1&gt; か &lt;g2&gt;{ ... }&lt;/g2&gt; を利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To invoke a method and pass a block, you use `do ... end` or `{ ... }`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T014747Z" creationid="hirofumiwakasugi" creationdate="20150916T014747Z">
        <seg>ブロックを渡してメソッドを実行するには、`do ... end` もしくは `{ ... }` を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To iterate a &lt;g1&gt;&lt;g2&gt;HashLiteral&lt;/g2&gt;&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215327Z" creationid="makenowjust" creationdate="20200509T215312Z">
        <seg>&lt;g1&gt;&lt;g2&gt;HashLiteral&lt;/g2&gt;&lt;/g1&gt; の各要素に対して繰り返し実行するには、次のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To iterate a &lt;g1&gt;&lt;g2&gt;HashLiteral&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/Crystal/Macros/HashLiteral.html&lt;e3/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T090414Z" creationid="makenowjust" creationdate="20200518T090414Z">
        <seg>&lt;g1&gt;&lt;g2&gt;HashLiteral&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/Crystal/Macros/HashLiteral.html&lt;e3/&gt; を繰り返すには次のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To iterate a &lt;g1&gt;&lt;g2&gt;HashLiteral&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Crystal/Macros/HashLiteral.html&lt;e3/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T080629Z" creationid="makenowjust" creationdate="20210324T080629Z">
        <seg>&lt;g1&gt;&lt;g2&gt;HashLiteral&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Crystal/Macros/HashLiteral.html&lt;e3/&gt; を繰り返すには次のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To iterate a `HashLiteral`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040427Z" creationid="hirofumiwakasugi" creationdate="20151001T040427Z">
        <seg>`HashLiteral` をイテレートするには以下のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To iterate an &lt;g1&gt;&lt;g2&gt;ArrayLiteral&lt;/g2&gt;&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215315Z" creationid="makenowjust" creationdate="20200509T215242Z">
        <seg>&lt;g1&gt;&lt;g2&gt;ArrayLiteral&lt;/g2&gt;&lt;/g1&gt; の各要素に対して繰り返し実行するには、次のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To iterate an &lt;g1&gt;&lt;g2&gt;ArrayLiteral&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/Crystal/Macros/ArrayLiteral.html&lt;e3/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T090427Z" creationid="makenowjust" creationdate="20200518T090427Z">
        <seg>&lt;g1&gt;&lt;g2&gt;ArrayLiteral&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/Crystal/Macros/ArrayLiteral.html&lt;e3/&gt; を繰り返すには次のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To iterate an &lt;g1&gt;&lt;g2&gt;ArrayLiteral&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Crystal/Macros/ArrayLiteral.html&lt;e3/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T080615Z" creationid="makenowjust" creationdate="20210324T080615Z">
        <seg>&lt;g1&gt;&lt;g2&gt;ArrayLiteral&lt;/g2&gt;&lt;/g1&gt;https://crystal-lang.org/api/latest/Crystal/Macros/ArrayLiteral.html&lt;e3/&gt; を繰り返すには次のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To keep backward compatibility if the &lt;g1&gt;crystal:&lt;/g1&gt; property in the &lt;g2&gt;shard.yml&lt;/g2&gt; is missing, it will be interpreted as &lt;g3&gt;&lt; 1.0.0&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T135758Z" creationid="makenowjust" creationdate="20200610T135758Z">
        <seg>後方互換性のために &lt;g1&gt;crystal:&lt;/g1&gt; プロパティが &lt;g2&gt;shard.yml&lt;/g2&gt; に無かった場合、&lt;g3&gt;&lt; 1.0.0&lt;/g3&gt;として解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make it appear in documentation comments</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T024637Z" creationid="hirofumiwakasugi" creationdate="20150909T024613Z">
        <seg>ドキュメンテーションコメントに表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make it more explicit that an &lt;g1&gt;Animal&lt;/g1&gt; must define a &lt;g2&gt;talk&lt;/g2&gt; method, we can add it to &lt;g3&gt;Animal&lt;/g3&gt; as an abstract method:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T112532Z" creationid="makenowjust" creationdate="20200504T112532Z">
        <seg>これをより明確に示すために、 &lt;g1&gt;Animal&lt;/g1&gt; に abstract メソッドとして &lt;g2&gt;talk&lt;/g2&gt; メソッドを &lt;g3&gt;Animal&lt;/g3&gt; に追加することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make it more explicit that an `Animal` must define a `talk` method, we can add it to `Animal` as an abstract method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040124Z" creationid="hirofumiwakasugi" creationdate="20150910T040116Z">
        <seg>これをより明確に示すために `Animal` に abstract メソッドとして `talk` メソッドを定義することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make it simpler to use, you can create a symbolic link available in the path:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055933Z" creationid="hirofumiwakasugi" creationdate="20150831T055850Z">
        <seg>実行ファイルに対して、パスの通った場所のシンボリックを貼っておけば、より簡単に利用することができるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make sure that the method returns the type that you want</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T141140Z" creationid="makenowjust" creationdate="20200430T141140Z">
        <seg>メソッドが返す戻り値の型を明確にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make sure that the method returns the type that you want
2.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T024533Z" creationid="hirofumiwakasugi" creationdate="20150909T024523Z">
        <seg>メソッドが返す戻り値の型を明確にする
2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make the compiler process other files you use &lt;g1&gt;require "..."&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T084358Z" creationid="makenowjust" creationdate="20200427T084358Z">
        <seg>コンパイラに別のファイルを処理させたいときは&lt;g1&gt;require "..."&lt;/g1&gt;を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make the compiler process other files you use `require "..."`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T143946Z" creationid="hirofumiwakasugi" creationdate="20150905T143819Z">
        <seg>コンパイラに別のファイルを処理させたいときは `require "..."` を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make this change, we needed to make &lt;g1&gt;in&lt;/g1&gt; a proper keyword.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T125910Z" creationid="makenowjust" creationdate="20200610T125910Z">
        <seg>この変更によって &lt;g1&gt;in&lt;/g1&gt; が正式なキーワードとなりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make this more explicit, you can add a dummy &lt;g2&gt;&amp;block&lt;/g2&gt; argument at the end:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T151717Z" creationid="makenowjust" creationdate="20200429T151717Z">
        <seg>より明示的にそのことを示したい場合は、&lt;g2&gt;&amp;block&lt;/g2&gt; という引数をダミーとして引数の最後に指定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make this more explicit, you can add a dummy &lt;g2&gt;&amp;block&lt;/g2&gt; parameter at the end:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T075846Z" creationid="makenowjust" creationdate="20210324T075846Z">
        <seg>より明示的にそのことを示したい場合は、&lt;g2&gt;&amp;block&lt;/g2&gt; という引数をダミーとして引数の最後に指定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make this more explicit, you can add a dummy `&amp;block` argument at the end:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072147Z" creationid="hirofumiwakasugi" creationdate="20150906T072122Z">
        <seg>より明示的にそのことを示したい場合は、`&amp;block` という引数をダミーとして引数の最後に指定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To perform a query and get the result set use &lt;g1&gt;Database#query&lt;/g1&gt;, arguments can be used as in &lt;g2&gt;Database#exec&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200706T001636Z" creationid="daiki" creationdate="20200705T234916Z">
        <seg>クエリを実行し結果セットを得るために &lt;g1&gt;Database#query&lt;/g1&gt; を使用します。引数は &lt;g2&gt;Database#exec&lt;/g2&gt; と同様です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To print a number to the standard output you write:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T120524Z" creationid="akiji" creationdate="20200430T120524Z">
        <seg>数値を標準出力へ書き出す際にはこう書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To properly define a wrapper for this function we must send the Proc as the callback data, and then convert that callback data to the Proc and finally invoke it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090324Z" creationid="makenowjust" creationdate="20200512T090324Z">
        <seg>この関数のまっとうなラッパーを定義するために、 Proc をコールバックのデータとして渡し、コールバック中で元の Proc に戻し、それを呼び出す、というようにする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To reduce the binary size for distributable files, the &lt;g1&gt;--no-debug&lt;/g1&gt; flag can be used.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T152346Z" creationid="makenowjust" creationdate="20200419T152346Z">
        <seg>配布するファイルのサイズを減らすには、&lt;g1&gt;--no-debug&lt;/g1&gt;フラグを用いることが有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To rescue any exception use a &lt;g1&gt;begin ... rescue ... end&lt;/g1&gt; expression:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103440Z" creationid="makenowjust" creationdate="20200506T103440Z">
        <seg>例外を捕捉するには、&lt;g1&gt;begin ... rescue ... end&lt;/g1&gt; の構文を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To rescue any exception use a `begin ... rescue ... end` expression:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013109Z" creationid="hirofumiwakasugi" creationdate="20150907T011929Z">
        <seg>例外を捕捉するには、`begin ... rescue ... end` の構文を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To rescue just one type of exception (or any of its subclasses):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013123Z" creationid="hirofumiwakasugi" creationdate="20150907T012241Z">
        <seg>ある型の例外 (そのサブクラスも含む) のみ捕捉したい場合には以下のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To see the available options for a particuar command, use `--help` after a command:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072224Z" creationid="hirofumiwakasugi" creationdate="20150901T072224Z">
        <seg>あるコマンドに対して有効なオプションを確認するには、コマンドに続けて `--help` を入力してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To see the available options for a particular command, use &lt;g1&gt;--help&lt;/g1&gt; after a command.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175541Z" creationid="makenowjust" creationdate="20200419T175541Z">
        <seg>特定のコマンドの有効なオプションを確認したい場合は、コマンド名のあとに&lt;g1&gt;--help&lt;/g1&gt;を付けて実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To see the available options for a particular command, use &lt;g1&gt;--help&lt;/g1&gt; after a command:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154425Z" creationid="makenowjust" creationdate="20200419T154425Z">
        <seg>特定のコマンドの有効なオプションを確認したい場合は、コマンド名のあとに&lt;g1&gt;--help&lt;/g1&gt;を付けて実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To see the full set of commands, invoke `crystal` without arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072209Z" creationid="hirofumiwakasugi" creationdate="20150901T072209Z">
        <seg>すべてのコマンドを確認するには、`crystal` コマンドを引数なしで実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To see the ongoing efforts don’t miss the &lt;g1&gt;wiki page&lt;/g1&gt;https://github.com/crystal-lang/crystal/wiki/Porting-to-Windows&lt;e3/&gt; and &lt;g2&gt;#5430&lt;/g2&gt;https://github.com/crystal-lang/crystal/issues/5430&lt;e4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T032002Z" creationid="makenowjust" creationdate="20200611T032002Z">
        <seg>現在進行中の取り組みを見るには &lt;g1&gt;Wiki ページ&lt;/g1&gt;https://github.com/crystal-lang/crystal/wiki/Porting-to-Windows&lt;e3/&gt;や&lt;g2&gt;#5430&lt;/g2&gt;https://github.com/crystal-lang/crystal/issues/5430&lt;e4/&gt;を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To show the value of an expression inside code blocks, use &lt;g1&gt;# =&gt;&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215049Z" creationid="makenowjust" creationdate="20200412T212606Z">
        <seg>コードブロックの中で式の値を示したい場合は、&lt;g1&gt;# =&gt;&lt;/g1&gt;を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To solve this, we can do this:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T080313Z" creationid="akiji" creationdate="20200428T080313Z">
        <seg>これを解決するにはこのようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To spawn a fiber you use &lt;g1&gt;spawn&lt;/g1&gt; with a block:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T064249Z" creationid="akiji" creationdate="20200428T064249Z">
        <seg>ファイバを生成するにはブロック付きで&lt;g1&gt;spawn&lt;/g1&gt;を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To specify a Proc without arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011352Z" creationid="hirofumiwakasugi" creationdate="20151009T011352Z">
        <seg>引数を持たない Proc を指定するには以下のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To specify a Proc without parameters:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T074628Z" creationid="makenowjust" creationdate="20210324T074628Z">
        <seg>引数を持たない Proc を指定するには以下のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To specify multiple arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011403Z" creationid="hirofumiwakasugi" creationdate="20151009T011403Z">
        <seg>複数の引数を持つ Proc を指定するには以下のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To specify multiple parameters:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T074643Z" creationid="makenowjust" creationdate="20210324T074641Z">
        <seg>複数の引数を持つ Proc を指定するには以下のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To specify the values of arguments that have default values you can also use their names in the invocation:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T113559Z" creationid="hirofumiwakasugi" creationdate="20150906T112945Z">
        <seg>デフォルト値を設定した引数に対して、メソッドの実行時にその名前を指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To switch to &lt;g1&gt;latest&lt;/g1&gt; for quicker updates, create a file &lt;g2&gt;/usr/local/etc/pkg/repos/FreeBSD.conf&lt;/g2&gt; with the following contents:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111145Z" creationid="makenowjust" creationdate="20200518T111145Z">
        <seg>クオーター毎の更新を &lt;g1&gt;latest&lt;/g1&gt; に切り替えるには、&lt;g2&gt;/usr/local/etc/pkg/repos/FreeBSD.conf&lt;/g2&gt; を次の内容で作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To turn optimizations on, use the `--release` flag:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072106Z" creationid="hirofumiwakasugi" creationdate="20150901T072106Z">
        <seg>最適化を有効にしたければ、`--release` フラグを与える必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To understand why this is useful, let's look at this example:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T080122Z" creationid="akiji" creationdate="20200428T080122Z">
        <seg>なぜこれが便利なのかを理解するために、次の例をみてみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To use a module as a partial type you use &lt;g1&gt;include&lt;/g1&gt; or &lt;g2&gt;extend&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141150Z" creationid="makenowjust" creationdate="20200504T141150Z">
        <seg>モジュールを部分的な型として使いたい場合、&lt;g1&gt;include&lt;/g1&gt; もしくは &lt;g2&gt;extend&lt;/g2&gt; を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To use a module as a partial type you use `include` or `extend`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T132729Z" creationid="hirofumiwakasugi" creationdate="20150911T132232Z">
        <seg>モジュールを部分的な型として利用する場合、`include` または `extend` を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To use a value:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052917Z" creationid="hirofumiwakasugi" creationdate="20151007T052914Z">
        <seg>値は以下のように利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To work with these, first assign them to a variable:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022436Z" creationid="hirofumiwakasugi" creationdate="20150903T022436Z">
        <seg>それらの場合には、まず変数への代入を行ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To write a chain of if-else-if you use &lt;g1&gt;elsif&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074254Z" creationid="makenowjust" creationdate="20200424T074254Z">
        <seg>複数の条件分岐を連続させるには&lt;g1&gt;elsif&lt;/g1&gt;を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To write a chain of if-else-if you use `elsif`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T010634Z" creationid="hirofumiwakasugi" creationdate="20150903T010134Z">
        <seg>複数の条件分岐を組み合わせた「if-else-if」の文を書くには `elsif` を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Together they bring additional functionality and improved performance in some use cases.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T152921Z" creationid="makenowjust" creationdate="20200610T152921Z">
        <seg>これらを組み合わせることで、追加の機能といくつかのユースケースでのパーフォマンスの改善を達成しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tools</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T155621Z" creationid="makenowjust" creationdate="20200611T032329Z">
        <seg>ツール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Total</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T092122Z" creationid="makenowjust" creationdate="20201217T092122Z">
        <seg>合計</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Totally fine
case 1 || "a"
when Int32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T125831Z" creationid="makenowjust" creationdate="20200610T125831Z">
        <seg>Totally fine
case 1 || "a"
when Int32
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Troubleshooting</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112046Z" creationid="makenowjust" creationdate="20200518T112046Z">
        <seg>トラブルシューティング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Truthy and falsey values</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T060248Z" creationid="makenowjust" creationdate="20200424T060248Z">
        <seg>真になる値と偽になる値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Try to avoid forwarding blocks like this if doing &lt;g1&gt;yield&lt;/g1&gt; is enough.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075723Z" creationid="makenowjust" creationdate="20200506T075723Z">
        <seg>&lt;g1&gt;yield&lt;/g1&gt; で十分な場合には、このようなブロックのフォワーディングが使わないようにしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Try to avoid forwarding blocks like this if doing `yield` is enough.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T030646Z" creationid="hirofumiwakasugi" creationdate="20150917T030547Z">
        <seg>もし `yield` で十分な場合には、このようなブロックのフォワーディングは使わないようにしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tuple</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T164905Z" creationid="makenowjust" creationdate="20200422T164905Z">
        <seg>タプル (Tuple)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tuple literal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094307Z" creationid="makenowjust" creationdate="20200424T093339Z">
        <seg>タプルリテラルの利用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tuple size must match</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094329Z" creationid="makenowjust" creationdate="20200424T093449Z">
        <seg>タプルの大きさは等しい必要があります</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tutorials</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T155706Z" creationid="makenowjust" creationdate="20210726T150805Z">
        <seg>チュートリアル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Twenty    = 10 * 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083718Z" creationid="makenowjust" creationdate="20200512T083718Z">
        <seg>Twenty    = 10 * 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Twenty = 10 * 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052948Z" creationid="hirofumiwakasugi" creationdate="20151007T052948Z">
        <seg>Twenty = 10 * 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052629Z" creationid="hirofumiwakasugi" creationdate="20151007T052629Z">
        <seg>Two</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two  = 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083837Z" creationid="makenowjust" creationdate="20200512T083837Z">
        <seg>Two  = 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two = 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053245Z" creationid="hirofumiwakasugi" creationdate="20151007T053245Z">
        <seg>Two = 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two methods with different required named arguments overload between each other:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T154618Z" creationid="makenowjust" creationdate="20200429T154618Z">
        <seg>2つの引数の名前のみが違うメソッドはおたがいにオーバーロードされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two methods with different required named parameters overload between each other:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T075309Z" creationid="makenowjust" creationdate="20210324T075309Z">
        <seg>2つの引数の名前のみが違うメソッドはおたがいにオーバーロードされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two methods, one that yields and another that doesn't, are considered different overloads, as explained in the &lt;g1&gt;overloading&lt;/g1&gt; section.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184650Z" creationid="makenowjust" creationdate="20200505T184650Z">
        <seg>&lt;g1&gt;オーバーロード&lt;/g1&gt;で説明したように、ブロックを取るメソッドとそうでないメソッドは別のオーバーロードであると解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two methods, one that yields and another that doesn't, are considered different overloads, as explained in the [overloading](overloading.html) section.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022820Z" creationid="hirofumiwakasugi" creationdate="20150916T015525Z">
        <seg>[オーバーロード](overloading.html)で説明したように、2つのメソッドがあって、一方は yield するメソッドで、もう一方はしないメソッドであるとき、それらは別のオーバーオードと解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182018Z" creationid="makenowjust" creationdate="20200419T182018Z">
        <seg>型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type grammar</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T115741Z" creationid="makenowjust" creationdate="20200507T115741Z">
        <seg>型の文法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type inference</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T125716Z" creationid="makenowjust" creationdate="20200427T125716Z">
        <seg>型推論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type information</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215534Z" creationid="makenowjust" creationdate="20200509T215534Z">
        <seg>型の情報</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type of closured variables</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T080655Z" creationid="makenowjust" creationdate="20200506T080655Z">
        <seg>クロージャの変数の型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type reflection</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T112841Z" creationid="makenowjust" creationdate="20200512T112841Z">
        <seg>型のリフレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type restrictions</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T155913Z" creationid="makenowjust" creationdate="20200429T155913Z">
        <seg>型制約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type restrictions are applied to method arguments to restrict the types accepted by that method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T160041Z" creationid="makenowjust" creationdate="20200429T160041Z">
        <seg>型制約はメソッドの引数に適用されて、受け取ることができる型を制約するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type restrictions are applied to method parameters to restrict the types accepted by that method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T074321Z" creationid="makenowjust" creationdate="20210324T074321Z">
        <seg>型制約はメソッドの引数に適用されて、受け取ることができる型を制約するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type restrictions are type annotations put to method arguments to restrict the types accepted by that method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042629Z" creationid="hirofumiwakasugi" creationdate="20150907T042601Z">
        <seg>メソッドの引数に型アノテーションを指定することで、メソッドが受け取ることができる型を制約することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type restrictions in a generic type's constructor are free variables when type arguments were not specified, and then are used to infer them.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T072234Z" creationid="hirofumiwakasugi" creationdate="20150912T070257Z">
        <seg>もし型引数が指定されなかった場合、ジェネリック型のコンストラクタに設定された型制約は自由変数として扱われ、それが型推論に利用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type restrictions in splats</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T084126Z" creationid="makenowjust" creationdate="20200429T161813Z">
        <seg>スプラット展開での型制約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type system</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210835Z" creationid="makenowjust" creationdate="20200413T210835Z">
        <seg>型システム</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type variables inference</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T142821Z" creationid="makenowjust" creationdate="20200504T142821Z">
        <seg>型変数の推論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Types and methods</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T095054Z" creationid="makenowjust" creationdate="20200427T095054Z">
        <seg>型とメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Types in C Bindings</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T032004Z" creationid="makenowjust" creationdate="20200511T032004Z">
        <seg>C バインディング中の型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Types, methods and generally any part of your code can be conditionally defined based on some flags available at compile time.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043620Z" creationid="hirofumiwakasugi" creationdate="20150908T042427Z">
        <seg>型やメソッドなど、基本的にはコードのどの部分であっても、コンパイル時に指定可能なフラグによる条件に応じて定義することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Types, methods and instance variables may be annotated.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T104416Z" creationid="makenowjust" creationdate="20200510T104255Z">
        <seg>型、メソッド、そしてインスタンス変数にアノテーションを与えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Typical examples for non-returning methods and keywords are &lt;g1&gt;return&lt;/g1&gt;, &lt;g2&gt;exit&lt;/g2&gt;, &lt;g3&gt;raise&lt;/g3&gt;, &lt;g4&gt;next&lt;/g4&gt;, and &lt;g5&gt;break&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T142316Z" creationid="makenowjust" creationdate="20200430T142316Z">
        <seg>&lt;g1&gt;return&lt;/g1&gt; や &lt;g2&gt;exit&lt;/g2&gt;、&lt;g3&gt;raise&lt;/g3&gt;、&lt;g4&gt;next&lt;/g4&gt;、そして &lt;g5&gt;break&lt;/g5&gt; といったキーワードがこの型になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>U I</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111619Z" creationid="makenowjust" creationdate="20200518T111619Z">
        <seg>U I</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UTF-8 is a variable-length encoding: a character may be represented by several bytes, although characters in the ASCII range are always represented by a single byte.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T024533Z" creationid="akiji" creationdate="20200430T132245Z">
        <seg>UTF-8は可変長のエンコーディングで、アスキー文字の範囲では1文字を1バイトで表現しますが、そうでなければ1文字を複数バイトで表現します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ubuntu</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071333Z" creationid="makenowjust" creationdate="20200518T071333Z">
        <seg>Ubuntu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unary</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T084700Z" creationid="makenowjust" creationdate="20200502T084700Z">
        <seg>単項演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unary operators</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T083331Z" creationid="makenowjust" creationdate="20200502T083331Z">
        <seg>単項演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unary operators are written in prefix notation and have only a single operand.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T083505Z" creationid="makenowjust" creationdate="20200502T083505Z">
        <seg>単項演算子はプレフィックスの記法として書かれ、1つのオペランドを取るものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Underscore</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T123132Z" creationid="makenowjust" creationdate="20200507T123132Z">
        <seg>アンダースコア</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Underscore allowed</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094335Z" creationid="makenowjust" creationdate="20200424T093620Z">
        <seg>アンダースコアが利用できます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Underscores are allowed at the beginning of a variable name, but these names are reserved for the compiler, so their use is not recommended (and it also makes the code uglier to read).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053355Z" creationid="hirofumiwakasugi" creationdate="20150902T052940Z">
        <seg>アンダースコアを変数名の先頭につけることも可能ですが、それらの名前はコンパイラによって予約されているため、先頭がアンダースコアの変数名は推奨されません (コードの見た目や読みやすさという点でもあまり美しくないですよね) 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Underscores can be used to make some numbers more readable:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052402Z" creationid="hirofumiwakasugi" creationdate="20150901T052402Z">
        <seg>アンダースコアは、数値を読みやすくするためにも利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unescaped hash characters &lt;g3&gt;#&lt;/g3&gt; denote the start of a comment ranging to the end of the line.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T042159Z" creationid="makenowjust" creationdate="20200421T042159Z">
        <seg>また、エスケープされていないハッシュ &lt;g3&gt;#&lt;/g3&gt; は行コメントの始まりと見なされ、次の改行文字まで飛ばしてマッチを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Uninitialized variable declaration</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T020619Z" creationid="makenowjust" creationdate="20200511T020619Z">
        <seg>初期化しない変数宣言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Union</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T120339Z" creationid="makenowjust" creationdate="20200507T120339Z">
        <seg>ユニオン型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Union of classes and structs under the same hierarchy</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T144729Z" creationid="makenowjust" creationdate="20200429T144729Z">
        <seg>継承元の同じクラス/構造体のユニオン型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Union of named tuples with the same keys</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T145314Z" creationid="makenowjust" creationdate="20200429T145314Z">
        <seg>キーの同じ名前付きタプルのユニオン型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Union of tuples of the same size</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T145210Z" creationid="makenowjust" creationdate="20200429T145130Z">
        <seg>同じ大きさのタプルのユニオン型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Union types</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T143540Z" creationid="makenowjust" creationdate="20200429T143540Z">
        <seg>ユニオン型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Union types rules</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T144545Z" creationid="makenowjust" creationdate="20200429T144545Z">
        <seg>ユニオン型に関する規則</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unless specified, the resuling binary will have the same name as the source file minus the extension &lt;g1&gt;.cr&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155127Z" creationid="makenowjust" creationdate="20200419T155127Z">
        <seg>明示的に指定しなければ、生成されるバイナリはソースコードのファイル名から&lt;g1&gt;.cr&lt;/g1&gt;という拡張子を除いたものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unless specified, the resulting binary will have the same name as the source file minus the extension &lt;g1&gt;.cr&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T101911Z" creationid="makenowjust" creationdate="20200809T101911Z">
        <seg>明示的に指定しなければ、生成されるバイナリはソースコードのファイル名から &lt;g1&gt;.cr&lt;/g1&gt; という拡張子を除いたものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike C, &lt;g1&gt;Int32&lt;/g1&gt; and &lt;g2&gt;MyInt&lt;/g2&gt; are not interchangeable:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T084524Z" creationid="makenowjust" creationdate="20200512T084524Z">
        <seg>C とは異なり、&lt;g1&gt;Int32&lt;/g1&gt; と &lt;g2&gt;MyInt&lt;/g2&gt; を相互に交換して使うことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike C, `Int32` and `MyInt` are not interchangeable:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023152Z" creationid="hirofumiwakasugi" creationdate="20151008T023152Z">
        <seg>C とは異なり、`Int32` と `MyInt` を相互に交換することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike other keywords, &lt;g2&gt;raise&lt;/g2&gt; is a regular method with two overloads: &lt;g3&gt;one accepting a String&lt;/g3&gt; and another &lt;g4&gt;accepting an Exception instance&lt;/g4&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103259Z" creationid="makenowjust" creationdate="20200506T103251Z">
        <seg>他のキーワードとは異なり、&lt;g2&gt;raise&lt;/g2&gt; は通常のメソッドであり、2つのオーバーロードがあります。その1つは&lt;g3&gt;String を受け取るもの&lt;/g3&gt;で、もう1つは&lt;g4&gt;例外オブジェクトを受け取るもの&lt;/g4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike other keywords, &lt;g2&gt;raise&lt;/g2&gt; is a regular method with two overloads: &lt;g3&gt;one accepting a String&lt;/g3&gt;https://crystal-lang.org/api/toplevel.html#raise%28exception%3AException%29%3ANoReturn-class-method&lt;e5/&gt; and another &lt;g4&gt;accepting an Exception instance&lt;/g4&gt;https://crystal-lang.org/api/toplevel.html#raise%28message%3AString%29%3ANoReturn-class-method&lt;e6/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T084357Z" creationid="makenowjust" creationdate="20200518T084357Z">
        <seg>他のキーワードと異なり、&lt;g2&gt;raise&lt;/g2&gt; は通常のメソッドであり、2つのオーバーロードがあります。その1つは&lt;g3&gt;文字列を受け取るもの&lt;/g3&gt;https://crystal-lang.org/api/toplevel.html#raise%28exception%3AException%29%3ANoReturn-class-method&lt;e5/&gt;で、もう1つは&lt;g4&gt;例外オブジェクトを受け取るもの&lt;/g4&gt;https://crystal-lang.org/api/toplevel.html#raise%28message%3AString%29%3ANoReturn-class-method&lt;e6/&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike other keywords, `raise` is a regular method with two overloads: [one accepting a String](http://crystal-lang.org/api/toplevel.html#raise%28message%20%3A%20String%29-class-method) and another [accepting an Exception instance](http://crystal-lang.org/api/toplevel.html#raise%28ex%20%3A%20Exception%29-class-method):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011338Z" creationid="hirofumiwakasugi" creationdate="20150907T010924Z">
        <seg>他のキーワードとは異なり、`raise` は通常のメソッドであり、2つのオーバーロードがあります。その1つは [String を受け取るもの](http://crystal-lang.org/api/toplevel.html#raise%28message%20%3A%20String%29-class-method)で、もう1つは[例外 (Exception) クラスを受け取るもの](http://crystal-lang.org/api/toplevel.html#raise%28ex%20%3A%20Exception%29-class-method)です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unpacking block arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T191457Z" creationid="makenowjust" creationdate="20200505T191457Z">
        <seg>ブロック引数のアンパック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unpacking block parameters</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094807Z" creationid="makenowjust" creationdate="20210324T094807Z">
        <seg>ブロック引数のアンパック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unsafe code</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T093417Z" creationid="makenowjust" creationdate="20200512T093417Z">
        <seg>安全でない (unsafe) コード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Upgrade</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T101756Z" creationid="makenowjust" creationdate="20200518T101756Z">
        <seg>アップグレード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Usage</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T173541Z" creationid="makenowjust" creationdate="20200419T173541Z">
        <seg>使い方</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Usage for casting to a bigger type</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T115555Z" creationid="makenowjust" creationdate="20200512T115555Z">
        <seg>大きな型へのキャストの利用方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Usage for when the compiler can't infer the type of a block</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T120311Z" creationid="makenowjust" creationdate="20200512T120311Z">
        <seg>コンパイラがブロックの型を推論できないときに使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use --error-trace for full trace.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182449Z" creationid="makenowjust" creationdate="20200413T182449Z">
        <seg>Use --error-trace for full trace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use &lt;g1&gt;:ditto:&lt;/g1&gt; to use the same comment as in the previous declaration.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215045Z" creationid="makenowjust" creationdate="20200412T212640Z">
        <seg>前の定義と同じコメントを使いたい場合は、&lt;g1&gt;:ditto:&lt;/g1&gt; (同上の意味) を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use &lt;g1&gt;:nodoc:&lt;/g1&gt; to hide public declarations from the generated documentation.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212938Z" creationid="makenowjust" creationdate="20200412T212816Z">
        <seg>公開APIであることを生成されたドキュメントでは隠したい場合、&lt;g1&gt;:nodoc:&lt;/g1&gt;を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use &lt;g1&gt;bin/crystal&lt;/g1&gt; to run your crystal files.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T065449Z" creationid="makenowjust" creationdate="20200518T065449Z">
        <seg>これで、&lt;g1&gt;bin/crystal&lt;/g1&gt; が Crystal ファイルの実行に使えるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use &lt;g1&gt;standard coding style&lt;/g1&gt; so your project will be navigable and readable to others.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T220557Z" creationid="makenowjust" creationdate="20200412T220557Z">
        <seg>&lt;g1&gt;標準コーディングスタイル&lt;/g1&gt;を利用してください。そうすればあなたのプロジェクトは他の人にとって追いかけやすく読みやすいものになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use &lt;g1&gt;two spaces&lt;/g1&gt; to indent code inside namespaces, methods, blocks or other nested contexts.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T072115Z" creationid="makenowjust" creationdate="20200412T204940Z">
        <seg>名前空間やメソッド、ブロックやその他のネストされた内容をインデントするには &lt;g1&gt;スペース2つ&lt;/g1&gt; を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use Crystal's code formatter</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214825Z" creationid="makenowjust" creationdate="20200412T214825Z">
        <seg>Crystal のコードフォーマッタの利用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use __two spaces__ to indent code inside namespaces, methods, blocks or other nested contexts.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011933Z" creationid="hirofumiwakasugi" creationdate="20151010T011933Z">
        <seg>名前空間やメソッド、そしてブロックやその他のネストされた内容をインデントするには、「スペース2つ」を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use a tuple.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T131624Z" creationid="akiji" creationdate="20200430T131624Z">
        <seg>タプルを使う。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use an explicit type restriction if &lt;g5&gt;@name&lt;/g5&gt; isn't supposed to be a &lt;g6&gt;String&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T070035Z" creationid="makenowjust" creationdate="20200427T141558Z">
        <seg>&lt;g5&gt;@name&lt;/g5&gt; が &lt;g6&gt;String&lt;/g6&gt; と推測されるべきでない場合は、明示的な型制約を利用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use it!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T160005Z" creationid="makenowjust" creationdate="20200527T160005Z">
        <seg>それを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use string interpolation instead of concatenation</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T130834Z" creationid="akiji" creationdate="20200430T130834Z">
        <seg>文字列の結合ではなく式展開を使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use structs when possible</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091148Z" creationid="akiji" creationdate="20200430T132001Z">
        <seg>可能な場合には構造体を使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the Crystal logos as your brand, company or app image.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T085945Z" creationid="makenowjust" creationdate="20200516T085945Z">
        <seg>Crystal のロゴをあなた自身や企業のものとして使う、もしくはアプリケーションのイメージ画像として使うこと</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the `init` command to create a Crystal project with the standard directory structure.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160119T161946Z" creationid="hirofumiwakasugi" creationdate="20150901T072144Z">
        <seg>`init` コマンドを使用すると、標準的なディレクトリ構成を持った Crystal プロジェクトを作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the logo in a way that could suggest sponsorship or endorsement by Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T090118Z" creationid="makenowjust" creationdate="20200516T090118Z">
        <seg>Crystal のスポンサーシップや支持を示唆するような方法でロゴを使うこと</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the third person: &lt;g1&gt;Returns the number of horns this unicorn has&lt;/g1&gt; instead of &lt;g2&gt;Return the number of horns this unicorn has&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214946Z" creationid="makenowjust" creationdate="20200412T211824Z">
        <seg>3人称を使ってください。つまり、&lt;g2&gt;Return the number of horns this unicorn has&lt;/g2&gt;ではなく&lt;g1&gt;Returns the number of horns this unicorn has&lt;/g1&gt;とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use them for educational purposes, as long as it’s available for free.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T085518Z" creationid="makenowjust" creationdate="20200516T085518Z">
        <seg>教育目的での利用 (非商用に限る)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use them in bindings like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T042603Z" creationid="hirofumiwakasugi" creationdate="20151005T042603Z">
        <seg>それらはバインディングで以下のように利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use them in blog posts, articles or news about Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T085445Z" creationid="makenowjust" creationdate="20200516T085445Z">
        <seg>Crystal に関するブログ投稿や記事、ニュースへの利用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use them in presentations, papers and talks.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T085333Z" creationid="makenowjust" creationdate="20200516T085333Z">
        <seg>プレゼンテーションや論文、講演での利用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use them to advertise something you’ve created with Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T085423Z" creationid="makenowjust" creationdate="20200516T085423Z">
        <seg>Crystal で作ったものの宣伝のための利用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to release resources allocated by external libraries that are
not directly managed by Crystal garbage collector.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T085245Z" creationid="makenowjust" creationdate="20200504T140028Z">
        <seg>外部ライブラリによって確保された、Crystalのガベージコレクタによって直接管理されていないリソースを解放するためにこのメソッドは使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this tool to unify code styles and to submit documentation improvements to
Crystal itself.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T220257Z" creationid="makenowjust" creationdate="20200412T220257Z">
        <seg>このツールを使ってコーディングスタイルを統一し、ドキュメントの改善をCrystal 自身に従わせてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>User-defined annotations, such as the standard library's &lt;g1&gt;JSON::Field&lt;/g1&gt;, are defined using the &lt;g2&gt;annotation&lt;/g2&gt; keyword.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T104339Z" creationid="makenowjust" creationdate="20200510T104335Z">
        <seg>標準ライブラリの&lt;g1&gt;JSON::Field&lt;/g1&gt;のようなユーザー定義のアノテーションは、&lt;g2&gt;annotation&lt;/g2&gt; キーワードで定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>User-defined annotations, such as the standard library's &lt;g1&gt;JSON::Field&lt;/g1&gt;https://crystal-lang.org/api/JSON/Field.html&lt;e4/&gt;, are defined using the &lt;g2&gt;annotation&lt;/g2&gt; keyword.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T082211Z" creationid="makenowjust" creationdate="20200518T082211Z">
        <seg>標準ライブラリの &lt;g1&gt;JSON::Field&lt;/g1&gt;https://crystal-lang.org/api/JSON/Field.html&lt;e4/&gt; のようなユーザー定義のアノテーションは、&lt;g2&gt;annotation&lt;/g2&gt; キーワードで定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>User-defined annotations, such as the standard library's &lt;g1&gt;JSON::Field&lt;/g1&gt;https://crystal-lang.org/api/latest/JSON/Field.html&lt;e4/&gt;, are defined using the &lt;g2&gt;annotation&lt;/g2&gt; keyword.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T095450Z" creationid="makenowjust" creationdate="20210324T095450Z">
        <seg>標準ライブラリの &lt;g1&gt;JSON::Field&lt;/g1&gt;https://crystal-lang.org/api/latest/JSON/Field.html&lt;e4/&gt; のようなユーザ定義のアノテーションは &lt;g2&gt;annotation&lt;/g2&gt; キーワードで定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Users can define their own annotations using the &lt;g1&gt;annotation&lt;/g1&gt; keyword, which works similarly to defining a &lt;g2&gt;class&lt;/g2&gt; or &lt;g3&gt;struct&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T113342Z" creationid="makenowjust" creationdate="20200510T104413Z">
        <seg>ユーザーは &lt;g2&gt;class&lt;/g2&gt; や &lt;g3&gt;struct&lt;/g3&gt; を定義するのと同じように、独自のアノテーションを &lt;g1&gt;annotation&lt;/g1&gt; キーワードを使って定義できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using &lt;g1&gt;%x&lt;/g1&gt; in the above example, we declare a variable whose name is guaranteed not to conflict with local variables in the current scope.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T230001Z" creationid="makenowjust" creationdate="20200509T230001Z">
        <seg>上記の例では &lt;g1&gt;%x&lt;/g1&gt; として変数を宣言しています。こうすることで、現在のスコープのローカル変数と名前が衝突しないことを保証できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using &lt;g1&gt;Readline&lt;/g1&gt; and &lt;g2&gt;NCurses&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T185719Z" creationid="makenowjust" creationdate="20200413T185719Z">
        <seg>&lt;g1&gt;Readline&lt;/g1&gt;と&lt;g2&gt;NCurses&lt;/g2&gt;の利用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using &lt;g1&gt;Void&lt;/g1&gt; is the same, but &lt;g2&gt;Nil&lt;/g2&gt; is more idiomatic: &lt;g3&gt;Void&lt;/g3&gt; is preferred in C bindings.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T141902Z" creationid="makenowjust" creationdate="20200430T141902Z">
        <seg>&lt;g1&gt;Void&lt;/g1&gt; を使っても同様の結果を得られますが、&lt;g3&gt;Void&lt;/g3&gt; は C バインディング向けの型のため、&lt;g2&gt;Nil&lt;/g2&gt; を使う方が自然です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using `%x` in the above example we declare a variable whose name is guaranteed not to conflict with local varaibles in the current scope.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T020204Z" creationid="hirofumiwakasugi" creationdate="20151002T020117Z">
        <seg>上記の例では `%x` として変数を宣言しています。こうすることで、現在のスコープのローカル変数と名前が衝突しないことを保証できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using an &lt;g1&gt;out&lt;/g1&gt; lib expression</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T143021Z" creationid="makenowjust" creationdate="20200427T143021Z">
        <seg>lib 式の &lt;g1&gt;out&lt;/g1&gt; の利用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using it, we end up with:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T080717Z" creationid="akiji" creationdate="20200428T080717Z">
        <seg>それを使い、最終的にはこうなりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using the compiler</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150106Z" creationid="makenowjust" creationdate="20200419T150106Z">
        <seg>コンパイラの使い方</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using the shorter syntax to assign an instance variable from a method argument has the same effect:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T142425Z" creationid="makenowjust" creationdate="20200427T140721Z">
        <seg>より簡潔に、メソッドの引数にインスタンス変数を指定しても同じ結果を得られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using these two, we can compile a program in a Mac that will run on that Linux like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T045355Z" creationid="hirofumiwakasugi" creationdate="20150909T045301Z">
        <seg>これらの2つのフラグを使うことで、Linux で動作するプログラムを Mac 上でコンパイルすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using this you will not be able to use any variable interpolation but will not need to escape the inner macro characters.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220538Z" creationid="makenowjust" creationdate="20200509T220538Z">
        <seg>これを使うことで、内側のマクロをエスケープする必要がなくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using tuples is the preferred way.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T131800Z" creationid="akiji" creationdate="20200430T131800Z">
        <seg>タプルを使用する方が推奨される方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using, for example, &lt;g1&gt;Int32&lt;/g1&gt; as a type restriction makes the method only accept instances of &lt;g2&gt;Int32&lt;/g2&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T161650Z" creationid="makenowjust" creationdate="20200429T161640Z">
        <seg>例えば &lt;g1&gt;Int32&lt;/g1&gt; を型制約に指定したとき、メソッドは &lt;g2&gt;Int32&lt;/g2&gt; のインスタンスのみしか受け入れません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using, for example, `Int32` as a type restriction makes the method only accept instances of `Int32`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025540Z" creationid="hirofumiwakasugi" creationdate="20150908T025529Z">
        <seg>例えば、`Int32` の型に制約したとき、メソッドは `Int32` のインスタンスのみしか受け入れません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Utilize Crystal's &lt;g1&gt;built-in code formatter&lt;/g1&gt; to automatically format all &lt;g2&gt;.cr&lt;/g2&gt; files in a directory.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T162029Z" creationid="makenowjust" creationdate="20200527T162000Z">
        <seg>Crystal &lt;g1&gt;組み込みのフォーマッタ&lt;/g1&gt;を活用して、すべての &lt;g2&gt;.cr&lt;/g2&gt; ファイルをフォーマットしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>VALUES = [1, 2, 3]

{% for value in VALUES %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220123Z" creationid="makenowjust" creationdate="20200509T220123Z">
        <seg>VALUES = [1, 2, 3]

{% for value in VALUES %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Valid delimiters are as same as &lt;g3&gt;percent string literals&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T193932Z" creationid="makenowjust" creationdate="20200419T193932Z">
        <seg>有効な区切り文字は&lt;g3&gt;パーセント文字列リテラル&lt;/g3&gt;のときと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Valid delimiters are parentheses &lt;g2&gt;()&lt;/g2&gt;, square brackets &lt;g3&gt;[]&lt;/g3&gt;, curly braces &lt;g4&gt;{}&lt;/g4&gt;, angles &lt;g5&gt;&lt;&gt;&lt;/g5&gt; and pipes &lt;g6&gt;||&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T193151Z" creationid="makenowjust" creationdate="20200419T193151Z">
        <seg>有効な区切り文字は、括弧&lt;g2&gt;()&lt;/g2&gt;、角括弧&lt;g3&gt;[]&lt;/g3&gt;、ひげ括弧&lt;g4&gt;{}&lt;/g4&gt;、三角括弧&lt;g5&gt;&lt;&gt;&lt;/g5&gt;そしてパイプ文字&lt;g6&gt;||&lt;/g6&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Valid delimiters are parentheses &lt;g3&gt;()&lt;/g3&gt;, square brackets &lt;g4&gt;[]&lt;/g4&gt;, curly braces &lt;g5&gt;{}&lt;/g5&gt;, angles &lt;g6&gt;&lt;&gt;&lt;/g6&gt; and pipes &lt;g7&gt;||&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T172050Z" creationid="makenowjust" creationdate="20200420T172050Z">
        <seg>有効な区切り文字は、括弧&lt;g3&gt;()&lt;/g3&gt;、角括弧&lt;g4&gt;[]&lt;/g4&gt;、ひげ括弧&lt;g5&gt;{}&lt;/g5&gt;、三角括弧&lt;g6&gt;&lt;&gt;&lt;/g6&gt;そしてパイプ文字&lt;g7&gt;||&lt;/g7&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Values start with the value &lt;g2&gt;0&lt;/g2&gt; and are incremented by one.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T181842Z" creationid="makenowjust" creationdate="20200505T181842Z">
        <seg>値は最初に &lt;g2&gt;0&lt;/g2&gt; から始まって、1ずつ増えていきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Values start with the value `0` and are incremented by one.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024407Z" creationid="hirofumiwakasugi" creationdate="20150914T024251Z">
        <seg>値は最初が `0` で始まって1ずつ増えていきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Values that don't correspond to an enum's constants are allowed: the value will still be of type &lt;g1&gt;Color&lt;/g1&gt;, but when printed you will get the underlying value:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182737Z" creationid="makenowjust" creationdate="20200505T182737Z">
        <seg>列挙型の定数にない値を指定することも可能です。その場合は、あくまでも型は &lt;g1&gt;Color&lt;/g1&gt; となりますが、出力してときにはその値がそのまま出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Values that don't correspond to an enum's constants are allowed: the value will still be of type `Color`, but when printed you will get the underlying value:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011345Z" creationid="hirofumiwakasugi" creationdate="20150916T011123Z">
        <seg>Enum の定数にない値を指定することも可能です。その場合、あくまでも型は `Color` となりますが、出力したときにはその値がそのまま出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Variables</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T092050Z" creationid="makenowjust" creationdate="20200512T084030Z">
        <seg>変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Variables declared in a program are not visible inside methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021521Z" creationid="hirofumiwakasugi" creationdate="20150904T021431Z">
        <seg>プログラムに定義された変数に対して、メソッドの中からアクセスすることはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Variables declared inside the &lt;g1&gt;begin&lt;/g1&gt; part of an exception handler also get the &lt;g2&gt;Nil&lt;/g2&gt; type when considered inside a &lt;g3&gt;rescue&lt;/g3&gt; or &lt;g4&gt;ensure&lt;/g4&gt; body.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T104439Z" creationid="makenowjust" creationdate="20200506T104439Z">
        <seg>例外処理において、&lt;g1&gt;begin&lt;/g1&gt; 節の中で宣言された変数は &lt;g3&gt;rescue&lt;/g3&gt; または &lt;g4&gt;ensure&lt;/g4&gt; 内においては &lt;g2&gt;Nil&lt;/g2&gt; t型を持っているものとして扱われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Variables declared inside the `begin` part of an exception handler also get the `Nil` type when considered inside a `rescue` or `ensure` body.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T020141Z" creationid="hirofumiwakasugi" creationdate="20150907T020141Z">
        <seg>例外処理において、`begin` 節の中で宣言された変数は、`rescue` または `ensure` 内においては `Nil` 型を持っているとして解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Variables exposed by a C library can be declared inside a &lt;g1&gt;lib&lt;/g1&gt; declaration using a global-variable-like declaration:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T084056Z" creationid="makenowjust" creationdate="20200512T084056Z">
        <seg>C のライブラリで公開される変数は、&lt;g1&gt;lib&lt;/g1&gt; の内部でグローバル変数に似た記法を使って宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Variables exposed by a C library can be declared inside a `lib` declaration using a global-variable-like declaration:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053747Z" creationid="hirofumiwakasugi" creationdate="20151007T053524Z">
        <seg>C のライブラリで公開される変数は、`lib` の内部で、グローバル変数に似た記法を使って宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Variadic arguments and splatting</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215349Z" creationid="makenowjust" creationdate="20200509T215349Z">
        <seg>可変長引数とスプラット展開</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Vector2.new(-x, -y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025727Z" creationid="hirofumiwakasugi" creationdate="20150909T025727Z">
        <seg>Vector2.new(-x, -y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Vector2.new(x + other.x, y + other.y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025212Z" creationid="hirofumiwakasugi" creationdate="20150909T025212Z">
        <seg>Vector2.new(x + other.x, y + other.y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Verifies that all dependencies are installed and requirements are satisfied.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180407Z" creationid="makenowjust" creationdate="20200419T180407Z">
        <seg>すべての依存関係がインストールされていて、要求を満たしているか検証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Videos 🍿</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T091837Z" creationid="makenowjust" creationdate="20201217T091837Z">
        <seg>ビデオ 🍿</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Virtual and abstract types</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T110355Z" creationid="makenowjust" creationdate="20200504T110355Z">
        <seg>virtual 型と abstract 型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Visibility</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T103627Z" creationid="makenowjust" creationdate="20200502T103627Z">
        <seg>可視性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Want to become a sponsor?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083133Z" creationid="makenowjust" creationdate="20200516T083133Z">
        <seg>スポンサーになりたいですか？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Watch all the talks of the event on YouTube</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T091407Z" creationid="makenowjust" creationdate="20201217T091407Z">
        <seg>YouTube でイベントの動画を閲覧できます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We acknowledge that there were a lot of cleanups in the last couple of releases.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T034104Z" creationid="makenowjust" creationdate="20200611T033949Z">
        <seg>ここ数回のリリースで修正が多かったことは認めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We added &lt;g1&gt;Int#digits&lt;/g1&gt; but along the way it was mandatory to reverse the output of &lt;g2&gt;BigInt#digits&lt;/g2&gt; for consistency.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T151814Z" creationid="makenowjust" creationdate="20200610T151814Z">
        <seg>&lt;g1&gt;Int#digits&lt;/g1&gt; というメソッドが追加されて、一貫性のため &lt;g2&gt;BigInt#digits&lt;/g2&gt; の出力が反転されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We also accept posts from guest writers, so if you have something awesome you have built with Crystal, &lt;a10&gt;contact us&lt;/a10&gt; and we'll be happy to have you featured on the blog.' link_text="Crystal Blog" url="/blog" icon="chat_bubble_outline" internal_link="true" %} {% include community_row.html title="Chat Rooms" divId="chat" content="The Gitter room is the official chat room for Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20220525T091707Z" creationid="makenowjust" creationdate="20220525T090405Z">
        <seg>ゲストからの投稿も受け付けています。もし Crystal で何か驚くものを作った場合は、&lt;a10&gt;私たちに連絡して&lt;/a10&gt;ください。あなたのことをブログで取り上げられることを楽しみにしています。'
  link_text="Crystal ブログ"
  url="/blog"
  icon="chat_bubble_outline"
  internal_link="true" %}

{% include community_row.html
   title="チャットルーム (英語)"
   divId="chat"
   content='Gitter が Crystal 公式のチャットルームです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We also accept posts from guest writers, so if you have something awesome you have built with Crystal, &lt;a7&gt;contact us&lt;/a7&gt; and we'll be happy to have you featured on the blog." link_text="Crystal Blog" url="/blog" icon="chat_bubble_outline" internal_link="true" %} {% include community_row.html title="Chat Room" divId="chat" content="The Gitter room is the official chat room for Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T093058Z" creationid="makenowjust" creationdate="20200516T093058Z">
        <seg>ゲストからの投稿も受け付けています。もし Crystal で何か驚くものを作った場合は、&lt;a7&gt;私たちに連絡して&lt;/a7&gt;ください。あなたのことをブログで取り上げられることを楽しみにしています。"
  link_text="Crystal ブログ"
  url="/blog"
  icon="chat_bubble_outline"
  internal_link="true" %}

{% include community_row.html
   title="チャットルーム (英語)"
   divId="chat"
   content="Gitter が Crystal 公式のチャットルームです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We also deprecated the top-level &lt;g1&gt;fork&lt;/g1&gt;, since it won’t be available in multi-threading.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T031335Z" creationid="makenowjust" creationdate="20200611T031335Z">
        <seg>また &lt;g1&gt;fork&lt;/g1&gt; も非推奨となりました。これはマルチスレッド環境では有効ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We also want a Person to come into existence with a name of our choice and an age of zero.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T120450Z" creationid="makenowjust" creationdate="20200427T120450Z">
        <seg>また Person のインスタンスが生成されるとき、名前は指定されたものに、年齢は0歳の状態になっているようにしたいと思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We also want a Person to come to existence with a name of our choice and an age of zero.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055435Z" creationid="hirofumiwakasugi" creationdate="20150904T055215Z">
        <seg>また、Person が生まれる (インスタンスとして生成される) とき、名前は指定した名前で、年齢は0歳の状態になっているようにしたいと思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We are going to use the second way:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174321Z" creationid="makenowjust" creationdate="20200413T174321Z">
        <seg>今回は2番目の方法でいきたいと思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We are introducing the &lt;g1&gt;@[Experimental]&lt;/g1&gt; annotation to mark which parts of the std-lib, language, or shard should be used with extra care.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T145411Z" creationid="makenowjust" creationdate="20200610T145411Z">
        <seg>&lt;g1&gt;@[Experimental]&lt;/g1&gt; アノテーションという、ライブラリや言語、shardの部分に細心の注意と共に使う必要のあるという指定をするためのものが導入されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We are making a breaking-change in the compiler CLI to make it more comfortable for shebang &lt;g1&gt;#!&lt;/g1&gt; scripts.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T130238Z" creationid="makenowjust" creationdate="20200610T130238Z">
        <seg>コンパイラに破壊的な変更があり、コンパイラの CLI がシバン &lt;g1&gt;#!&lt;/g1&gt; によるスクリプトをより安心して動作させられるようになりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We believe that dependency versions need to be stated clearly for better expectations on consumers.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T140559Z" creationid="makenowjust" creationdate="20200610T140559Z">
        <seg>利用者の期待を高めるには、依存するバージョンを明示する必要があると考えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can also use channels to communicate values between fibers:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103714Z" creationid="akiji" creationdate="20200429T132617Z">
        <seg>チャネルを使って以下のようにファイバ間で値を受け渡すこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can define a &lt;g1&gt;become_older&lt;/g1&gt; method that accepts a number indicating the years to grow:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T070158Z" creationid="makenowjust" creationdate="20200429T150142Z">
        <seg>これから、何歳をとるかを数値で指定できる &lt;g1&gt;become_older&lt;/g1&gt; メソッドを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can define a `become_older` method that accepts a number indicating the years to grow:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T070837Z" creationid="hirofumiwakasugi" creationdate="20150905T130944Z">
        <seg>これから、何歳年をとるかを数値で指定できる `become_older` メソッドを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can quickly see that &lt;g1&gt;@age&lt;/g1&gt; is an integer, but we don't know the type of &lt;g2&gt;@name&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T125901Z" creationid="makenowjust" creationdate="20200427T125901Z">
        <seg>&lt;g1&gt;@age&lt;/g1&gt;が整数型だということは一目で分かりますが、&lt;g2&gt;@name&lt;/g2&gt;の型は分かりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can read all about &lt;g1&gt;OptionParser&lt;/g1&gt; in &lt;g2&gt;the official API documentation&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T173723Z" creationid="makenowjust" creationdate="20200413T173723Z">
        <seg>&lt;g1&gt;OptionParser&lt;/g1&gt;のすべてを&lt;g2&gt;公式の API ドキュメント&lt;/g2&gt;によって確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can read all about &lt;g1&gt;OptionParser&lt;/g1&gt; in &lt;g2&gt;the official API documentation&lt;/g2&gt;https://crystal-lang.org/api/latest/OptionParser.html&lt;e3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T080954Z" creationid="makenowjust" creationdate="20200518T080954Z">
        <seg>&lt;g1&gt;OptionParser&lt;/g1&gt; のすべてを&lt;g2&gt;公式の API ドキュメント&lt;/g2&gt;https://crystal-lang.org/api/latest/OptionParser.html&lt;e3/&gt;によって確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can see that now `@name` has a type `(String | Int32)`, which is read as a *union* of `String` and `Int32`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010212Z" creationid="hirofumiwakasugi" creationdate="20150904T135724Z">
        <seg>`@name` の型が `(String | Int32)` となっていますね。これは、`String` と `Int32` 型の「組み合わせ (ユニオン)」を意味しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can simplify our constructor by using a shorter syntax for assigning a method argument to an instance variable:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T121925Z" creationid="hirofumiwakasugi" creationdate="20150904T121925Z">
        <seg>コンストラクタの引数にインスタンス変数を指定する短縮記法を使うと、インスタンス変数への代入をより簡潔に書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can simplify our constructor by using a shorter syntax for assigning a method parameter to an instance variable:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T080135Z" creationid="makenowjust" creationdate="20210324T080135Z">
        <seg>コンストラクタの引数にインスタンス変数を指定する短縮記法を使うと、インスタンス変数への代入をより簡潔に書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can then type check against instances of these classes with not only their class, but the
included modules as well:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141922Z" creationid="makenowjust" creationdate="20200504T141922Z">
        <seg>このとき、クラスによって型検査をするだけではなく、モジュールで型検査をすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can use a channel for this:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103712Z" creationid="akiji" creationdate="20200428T080929Z">
        <seg>そのような時にもチャネルが使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can use this function like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043715Z" creationid="hirofumiwakasugi" creationdate="20151005T043715Z">
        <seg>この関数を以下のように利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can't do much with &lt;g1&gt;person&lt;/g1&gt;, so let's add some concepts to it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T102616Z" creationid="makenowjust" creationdate="20200427T102616Z">
        <seg>しかし &lt;g1&gt;person&lt;/g1&gt; に対してできることはほとんどありません。そこで、いくつかの機能を追加してみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can't do much with `person`, so lets add some concepts to it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T052628Z" creationid="hirofumiwakasugi" creationdate="20150904T022348Z">
        <seg>ただ、`person` インスタンスにはまだほとんど何の機能もありません。そこで、いくつかの機能を追加してみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can't pass &lt;g2&gt;proc&lt;/g2&gt; directly to it because &lt;g3&gt;invoke&lt;/g3&gt; doesn't receive regular arguments, just a block argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075428Z" creationid="makenowjust" creationdate="20200506T075428Z">
        <seg>このとき、&lt;g2&gt;proc&lt;/g2&gt; をそのまま渡すことはできません。なぜなら &lt;g3&gt;invoke&lt;/g3&gt; が受け取るのはブロック引数であり、通常の引数ではないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can't pass `proc` directly to it because `invoke` doesn't receive regular arguments, just a block argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024509Z" creationid="hirofumiwakasugi" creationdate="20150917T024243Z">
        <seg>このとき、`proc` をそのまま渡すことはできません。なぜなら `invoke` が受け取るのはブロック引数であり、通常の引数ではないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We checkout the latest version of the compiler written in Ruby, and from that compiler we compile the next versions until the current one.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T024351Z" creationid="makenowjust" creationdate="20200511T024351Z">
        <seg>Ruby で書かれた最新のコンパイラを入手しコンパイラをコンパイルし、それを現在のバージョンまで繰り返す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We code the "come into existence" part with a special &lt;g7&gt;initialize&lt;/g7&gt; method, which is normally called a &lt;g8&gt;constructor&lt;/g8&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T120604Z" creationid="makenowjust" creationdate="20200427T120604Z">
        <seg>インスタンスが生成されるときの処理は&lt;g7&gt;initialize&lt;/g7&gt;メソッドに定義します (このメソッドは&lt;g8&gt;コンストラクタ&lt;/g8&gt;と呼ぶこともあります)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We code the "come to existence" part with a special `initialize` method, which is normally called a *constructor*:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T121539Z" creationid="hirofumiwakasugi" creationdate="20150904T055229Z">
        <seg>この「生まれる (インスタンスとして生成される) 」ときの処理には、`initialize` という特別なメソッドを使います。このメソッドを「コンストラクタ」と呼ぶこともあります。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We create a &lt;g1&gt;.o&lt;/g1&gt; file in the target system and from that file we create a compiler.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T024414Z" creationid="makenowjust" creationdate="20200511T024411Z">
        <seg>対象システム用の &lt;g1&gt;.o&lt;/g1&gt; ファイルを生成し、それを使ってコンパイラを生成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We deprecated &lt;g1&gt;Process#kill&lt;/g1&gt; in favor of  &lt;g2&gt;Process#signal&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T031301Z" creationid="makenowjust" creationdate="20200611T031301Z">
        <seg>&lt;g2&gt;Process#signal&lt;/g2&gt; があるので &lt;g1&gt;Process#kill&lt;/g1&gt; を非推奨としました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We did our best to stay below a discomfort threshold.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T034121Z" creationid="makenowjust" creationdate="20200611T034121Z">
        <seg>ですが、不快感は最小になるように心掛けたつもりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We didn’t want to go to 1.0 without cleaning up a lot of stuff beforehand.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T141652Z" creationid="makenowjust" creationdate="20200610T141652Z">
        <seg>標準ライブラリの整理なしに1.0へと進むことはないつもりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We don't need to repeat the &lt;g2&gt;palindrome&lt;/g2&gt; keyword.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T163331Z" creationid="makenowjust" creationdate="20200527T163331Z">
        <seg>なので &lt;g2&gt;palindrome&lt;/g2&gt; と繰り返す必要はないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We dropped &lt;g1&gt;Concurrent::Future&lt;/g1&gt; and top-level methods &lt;g2&gt;delay&lt;/g2&gt;, &lt;g3&gt;future&lt;/g3&gt;, &lt;g4&gt;lazy&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T031039Z" creationid="makenowjust" creationdate="20200611T031039Z">
        <seg>&lt;g1&gt;Concurrent::Future&lt;/g1&gt; とトップレベルの &lt;g2&gt;delay&lt;/g2&gt;、&lt;g3&gt;future&lt;/g3&gt;、&lt;g4&gt;lazy&lt;/g4&gt; を削除しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We encourage maintainers to test, publish and declare the crystal versions they choose to support.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T110819Z" creationid="makenowjust" creationdate="20200809T110731Z">
        <seg>ライブラリのメンテナが、サポートする Crystal のバージョンを選択するときやテストやリリースの際などに、そのような状況になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We essentially split &lt;g1&gt;Log::Context&lt;/g1&gt; responsibilities between &lt;g2&gt;Log::Metadata&lt;/g2&gt; and &lt;g3&gt;Log::Metadata::Value&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T153829Z" creationid="makenowjust" creationdate="20200610T153829Z">
        <seg>その &lt;g1&gt;Log::Context&lt;/g1&gt; の責務を &lt;g2&gt;Log::Metadata&lt;/g2&gt; と &lt;g3&gt;Log::Metadata::Value&lt;/g3&gt; に分割することにしました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We expect this first cut will enable and simplify some workflows and also assist in the transition on the upcoming major release of crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T112748Z" creationid="makenowjust" creationdate="20200809T112748Z">
        <seg>この機能をリリースすることで可能になるワークフローや単純化されるものがあり、今後の Crystal のメジャーリリースを補助するものになることを期待しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We expect to develop a more robust approach to cover these scenarios post 1.0.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T031238Z" creationid="makenowjust" creationdate="20200611T031204Z">
        <seg>1.0 以降に向けて、より堅牢で様々な利用に耐えうるもの開発したいと考えています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We expect to release some 1.0.0-preX to iterate on some final fixes.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T033923Z" creationid="makenowjust" creationdate="20200611T033923Z">
        <seg>1.0.0-preX のようなリリースをして、最終的な調整を重ねていくでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We get an error because the compiler now treats &lt;g1&gt;@pet&lt;/g1&gt; as an &lt;g2&gt;Animal+&lt;/g2&gt;, which includes &lt;g3&gt;Animal&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T111150Z" creationid="makenowjust" creationdate="20200504T111150Z">
        <seg>これがエラーになったのは、&lt;g1&gt;@pet&lt;/g1&gt; の型は &lt;g2&gt;Animal+&lt;/g2&gt; で &lt;g3&gt;Animal&lt;/g3&gt; 自身を含んでいるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We get an error because the compiler now treats `@pet` as an `Animal+`, which includes `Animal`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T034316Z" creationid="hirofumiwakasugi" creationdate="20150910T034245Z">
        <seg>エラーになってしまいました。これは、コンパイラが `@pet` を `Animal+` と解釈しており、それは `Animal` 自身も含んでいることが原因です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We grab the website and avatar from your &lt;a0&gt;Open Collective profile&lt;/a0&gt; or your &lt;a1&gt;Bountysource profile&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083518Z" creationid="makenowjust" creationdate="20200516T083518Z">
        <seg>Web サイトとアバター画像を &lt;a0&gt;Open Collective のプロフィール&lt;/a0&gt;もしくは &lt;a1&gt;Bountysource のプロフィール&lt;/a1&gt;から取得しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We grab the website and avatar from your &lt;g1&gt;Open Collective profile&lt;/g1&gt; or your &lt;g2&gt;Bountysource profile&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T080037Z" creationid="makenowjust" creationdate="20200518T080037Z">
        <seg>Web サイトとアバター画像を &lt;g1&gt;Open Collective のプロフィール&lt;/g1&gt;もしくは &lt;g2&gt;Bountysource のプロフィール&lt;/g2&gt;から取得しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We have a dedicated mailbox where we keep track of them.&lt;br1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T091744Z" creationid="makenowjust" creationdate="20200516T091659Z">
        <seg>それらの問題を追跡するためのメールボックスがあります。&lt;br1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We have a dedicated mailbox where we keep track of them.&lt;x2/&gt;&lt;x3/&gt; You can encrypt your message &lt;g4&gt;via Keybase&lt;/g4&gt; (set recipient &lt;g5&gt;crystal&lt;/g5&gt;), or with our &lt;g6&gt;PGP key&lt;/g6&gt; (fingerprint &lt;g7&gt;5995 C83C D754 BE44 8164 1929 0961 7FD3 7CC0 6B54&lt;/g7&gt;) also available on &lt;g8&gt;Keybase server&lt;/g8&gt;, and send it to:" link_text="security@manas.tech" url="mailto:security@manas.tech" icon="security" %} {% include community_row.html title="Code Repository" divId="code" content="The Crystal official code repository is on GitHub, so any bugs you find in either the language, compiler or standard library should be reported here - and pull requests are always welcome." link_text="crystal-lang/crystal" url="https://github.com/crystal-lang/crystal/" icon="github" custom_icon=true %} {% include community_row.html title="Forum" divId="discuss" content="The Crystal Forum is the first to-go place for any general discussion.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200617T111304Z" creationid="makenowjust" creationdate="20200617T111304Z">
        <seg>それらをトラックするためのメールボックスを用意しています。&lt;x2/&gt;&lt;x3/&gt; メッセージを &lt;g4&gt;Keybase 経由&lt;/g4&gt; (受取人を &lt;g5&gt;crystal&lt;/g5&gt; として)、もしくは &lt;g6&gt;PGP key&lt;/g6&gt; (フィンガープリントは &lt;g7&gt;5995 C83C D754 BE44 8164 1929 0961 7FD3 7CC0 6B54&lt;/g7&gt;) で暗号化できます。&lt;g8&gt;Keybase サーバー&lt;/g8&gt;も有効なので、それらを利用して送ってください。'
   link_text='security@manas.tech'
   url='mailto:security@manas.tech'
   icon='security' %}

{% include community_row.html
   title='コードリポジトリ'
   divId='code'
   content='Crystal 公式のコードリポジトリは GitHub にありあす。言語や標準ライブラリにバグを発見した場合、ここに報告してください。Pull Request も受け付けています。'
   link_text='crystal-lang/crystal'
   url='https://github.com/crystal-lang/crystal/'
   icon='github'
   custom_icon=true %}

{% include community_row.html
   title='フォーラム (英語l)'
   divId='discuss'
   content='Crystal フォーラムは総合的な議論をする第一の場所です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We have a dedicated mailbox where we keep track of them.&lt;x2/&gt;&lt;x3/&gt; You can encrypt your message &lt;g4&gt;via Keybase&lt;/g4&gt;, or standard PGP (our fingerprint is &lt;g5&gt;5995 C83C D754 BE44 8164 1929 0961 7FD3 7CC0 6B54&lt;/g5&gt;)." link_text="security@manas.tech" url="mailto:security@manas.tech" icon="security" %} {% include community_row.html title="Code Repository" divId="code" content="The Crystal official code repository is on GitHub, so any bugs you find in either the language, compiler or standard library should be reported here - and pull requests are always welcome." link_text="crystal-lang/crystal" url="https://github.com/crystal-lang/crystal/" icon="github" custom_icon=true %} {% include community_row.html title="Forum" divId="discuss" content="The Crystal Forum is the first to-go place for any general discussion.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T103816Z" creationid="makenowjust" creationdate="20200518T075604Z">
        <seg>それらをトラックするためのメールボックスを用意しています。&lt;x2/&gt;&lt;x3/&gt;メッセージを &lt;g4&gt;Keybase&lt;/g4&gt; もしくは標準的な PGP (フィンガープリントは &lt;g5&gt;5995 C83C D754 BE44 8164 1929 0961 7FD3 7CC0 6B54&lt;/g5&gt;) で暗号化できます。'
   link_text='security@manas.tech'
   url='mailto:security@manas.tech'
   icon='security' %}

{% include community_row.html
   title='コードリポジトリ'
   divId='code'
   content='Crystal 公式のコードリポジトリは GitHub にありあす。言語や標準ライブラリにバグを発見した場合、ここに報告してください。Pull Request も受け付けています。'
   link_text='crystal-lang/crystal'
   url='https://github.com/crystal-lang/crystal/'
   icon='github'
   custom_icon=true %}

{% include community_row.html
   title='フォーラム (英語)'
   divId='discuss'
   content='Crystal フォーラムは総合的な議論をする第一の場所です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We have a dedicated mailbox where we keep track of them.&lt;x2/&gt;&lt;x3/&gt; You can encrypt your message &lt;g4&gt;via Keybase&lt;/g4&gt;, or standard PGP (our fingerprint is &lt;g5&gt;5995 C83C D754 BE44 8164 1929 0961 7FD3 7CC0 6B54&lt;/g5&gt;).' link_text="security@manas.tech" url="mailto:security@manas.tech" icon="security" %} {% include community_row.html title="Code Repository" divId="code" content="The Crystal official code repository is on GitHub, so any bugs you find in either the language, compiler or standard library should be reported here - and pull requests are always welcome." link_text="crystal-lang/crystal" url="https://github.com/crystal-lang/crystal/" icon="github" custom_icon=true %} {% include community_row.html title="Forum" divId="discuss" content="The Crystal Forum is the first to-go place for any general discussion.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T104734Z" creationid="makenowjust" creationdate="20200518T104734Z">
        <seg>それらをトラックするためのメールボックスを用意しています。&lt;x2/&gt;&lt;x3/&gt;メッセージを &lt;g4&gt;Keybase&lt;/g4&gt; もしくは標準的な PGP (フィンガープリントは &lt;g5&gt;5995 C83C D754 BE44 8164 1929 0961 7FD3 7CC0 6B54&lt;/g5&gt;) で暗号化できます。'
   link_text='security@manas.tech'
   url='mailto:security@manas.tech'
   icon='security' %}

{% include community_row.html
   title='コードリポジトリ'
   divId='code'
   content='Crystal 公式のコードリポジトリは GitHub にありあす。言語や標準ライブラリにバグを発見した場合、ここに報告してください。Pull Request も受け付けています。'
   link_text='crystal-lang/crystal'
   url='https://github.com/crystal-lang/crystal/'
   icon='github'
   custom_icon=true %}

{% include community_row.html
   title='フォーラム (英語)'
   divId='discuss'
   content='Crystal フォーラムは総合的な議論をする第一の場所です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We have a few draft ideas to give more formal semantics to it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T145602Z" creationid="makenowjust" creationdate="20200610T145602Z">
        <seg>ですが、他にも追加の機能のアイディアがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We have a way to tell the compiler so by marking the class as &lt;g2&gt;abstract&lt;/g2&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T112440Z" creationid="makenowjust" creationdate="20200504T112440Z">
        <seg>コンパイラにそのことを示すには、クラスに &lt;g2&gt;abstract&lt;/g2&gt; を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We have a way to tell the compiler so by marking the class as `abstract`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T035443Z" creationid="hirofumiwakasugi" creationdate="20150910T035153Z">
        <seg>そこで、コンパイラにそのことを指示するための方法が用意されており、それはクラスを `abstract` と指定することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We have been able to do all of this thanks to the continued support of &lt;g1&gt;84codes&lt;/g1&gt;https://www.84codes.com/&lt;e6/&gt;, &lt;g2&gt;Nikola Motor Company&lt;/g2&gt;https://nikolamotor.com/&lt;e7/&gt; and every other &lt;g3&gt;sponsor&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200621T084018Z" creationid="makenowjust" creationdate="20200621T084018Z">
        <seg>&lt;g1&gt;84codes&lt;/g1&gt;https://www.84codes.com/&lt;e6/&gt;、&lt;g2&gt;Nikola Motor Company&lt;/g2&gt;https://nikolamotor.com/&lt;e7/&gt;、そして大勢の&lt;g3&gt;スポンサー&lt;/g3&gt;の継続的なサポートにたくさんの感謝をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We have been able to do all of this thanks to the continued support of &lt;g1&gt;84codes&lt;/g1&gt;https://www.84codes.com/&lt;e7/&gt;, &lt;g2&gt;Nikola Motor Company&lt;/g2&gt;https://nikolamotor.com/&lt;e8/&gt; and every other &lt;g3&gt;sponsor&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T034303Z" creationid="makenowjust" creationdate="20200611T034303Z">
        <seg>&lt;g1&gt;84codes&lt;/g1&gt;https://www.84codes.com/&lt;e7/&gt;、&lt;g2&gt;Nikola Motor Company&lt;/g2&gt;https://nikolamotor.com/&lt;e8/&gt;、そして大勢の&lt;g3&gt;スポンサー&lt;/g3&gt;の継続的なサポートにたくさんの感謝をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We have to be careful when declaring an array of objects where inheritance is used.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T104943Z" creationid="makenowjust" creationdate="20200504T104618Z">
        <seg>配列の要素に継承されたものが使われた場合は、十分に注意すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We have two ways &lt;g1&gt;using the compiler&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175657Z" creationid="makenowjust" creationdate="20200413T174225Z">
        <seg>&lt;g1&gt;コンパイラの実行方法&lt;/g1&gt;は2種類あります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We improved the error handling and logging in &lt;g2&gt;#9115&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9115&lt;e6/&gt; and integrated it with the new logging module.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T152520Z" creationid="makenowjust" creationdate="20200610T152520Z">
        <seg>エラーハンドリングとログまわりの処理を&lt;g2&gt;#9115&lt;/g2&gt;https://github.com/crystal-lang/crystal/pull/9115&lt;e6/&gt;で改善し、新しいログモジュールと統合しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We leave this as an exercise for the reader.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T185711Z" creationid="makenowjust" creationdate="20200413T185711Z">
        <seg>これを読者の課題とします。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We may check the Crystal compiler version.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080542Z" creationid="makenowjust" creationdate="20200516T080502Z">
        <seg>コンパイラのバージョンを確認しましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We may run our example like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080834Z" creationid="makenowjust" creationdate="20200516T080834Z">
        <seg>これを、このように実行できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We must include &lt;g3&gt;case&lt;/g3&gt; within the macro in order to make it valid by using &lt;g4&gt;begin&lt;/g4&gt; and &lt;g5&gt;end&lt;/g5&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221906Z" creationid="makenowjust" creationdate="20200509T221906Z">
        <seg>&lt;g3&gt;case&lt;/g3&gt; をマクロによって生成されるコードに含めるために、&lt;g4&gt;begin&lt;/g4&gt; と &lt;g5&gt;end&lt;/g5&gt; を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We recommend running &lt;g1&gt;shards install&lt;/g1&gt; on your current project.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T140847Z" creationid="makenowjust" creationdate="20200610T140847Z">
        <seg>&lt;g1&gt;shards install&lt;/g1&gt; を現在のプロジェクトで実行することを推奨します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We renamed &lt;g1&gt;Log::Severity::Warning&lt;/g1&gt; to &lt;g2&gt;Warn&lt;/g2&gt; in &lt;g3&gt;#9293&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9293&lt;e10/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T152942Z" creationid="makenowjust" creationdate="20200610T152942Z">
        <seg>&lt;g3&gt;#9293&lt;/g3&gt;https://github.com/crystal-lang/crystal/pull/9293&lt;e10/&gt;で &lt;g1&gt;Log::Severity::Warning&lt;/g1&gt; を &lt;g2&gt;Warn&lt;/g2&gt; へと名前を変更しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We reverted the changes in &lt;g1&gt;IO#write&lt;/g1&gt; introduced in 0.35.0.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200621T073410Z" creationid="makenowjust" creationdate="20200621T073405Z">
        <seg>0.35.0で導入された&lt;g1&gt;IO#write&lt;/g1&gt;の変更が取り消されることになりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T064152Z" creationid="akiji" creationdate="20200430T084042Z">
        <seg>小さな効率性については考えないようにすべきであって、その97％において、早まった最適化は諸悪の根源である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We should have known better: the type of the user input is the &lt;g1&gt;union type&lt;/g1&gt; &lt;g2&gt;String | Nil&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182610Z" creationid="makenowjust" creationdate="20200413T182610Z">
        <seg>ユーザーの入力した値の型は&lt;g2&gt;String | Nil&lt;/g2&gt;という&lt;g1&gt;ユニオン型&lt;/g1&gt;なのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We should have known better: the type of the user input is the &lt;g1&gt;union type&lt;/g1&gt;https://crystal-lang.org/reference/syntax_and_semantics/type_grammar.html&lt;e5/&gt; &lt;g2&gt;String | Nil&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T101646Z" creationid="makenowjust" creationdate="20200809T101646Z">
        <seg>ユーザーの入力した値の型は &lt;g2&gt;String | Nil&lt;/g2&gt; という&lt;g1&gt;ユニオン型&lt;/g1&gt;https://crystal-lang.org/reference/syntax_and_semantics/type_grammar.html&lt;e5/&gt;なのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We thank you in advance!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T034647Z" creationid="makenowjust" creationdate="20200611T034647Z">
        <seg>それでは、ここまで読んでいただきありがとうございます！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We update the current sponsors in this page every other week.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083704Z" creationid="makenowjust" creationdate="20200516T083704Z">
        <seg>このページの現在のスポンサー一覧は週に一度更新されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We use &lt;g4&gt;&amp;&lt;/g4&gt; to specify that we really want to pass &lt;g5&gt;proc&lt;/g5&gt; as the block argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075456Z" creationid="makenowjust" creationdate="20200506T075456Z">
        <seg>したがって、&lt;g5&gt;proc&lt;/g5&gt; をブロック引数として渡すために、&lt;g4&gt;&amp;&lt;/g4&gt; を指定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We use `&amp;` to specify that we really want to pass `proc` as the block argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024614Z" creationid="hirofumiwakasugi" creationdate="20150917T024614Z">
        <seg>したがって、`proc` をブロック引数として渡すために `&amp;` を指定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We used Zoom and YouTube for streaming.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T091736Z" creationid="makenowjust" creationdate="20201217T091736Z">
        <seg>今回、Zoom と YouTube をストリーミングに利用しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We want a clean 1.0.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T034206Z" creationid="makenowjust" creationdate="20200611T034206Z">
        <seg>1.0をクリーンなバージョンにしたいと思っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We want to thank all the speakers, attendees and especially Lorenzo Barasti for making this event a reality.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T091539Z" creationid="makenowjust" creationdate="20201217T091539Z">
        <seg>すべてのスピーカーのみなさんと参加者のみなさん、そしてこのイベントを現実のものにしてくださった Lorenzo Barasti さんに感謝いたします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We were allowed to do this while keeping the initial design of avoiding the creation of values if the entry is not to be emitted.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T030501Z" creationid="makenowjust" creationdate="20200611T030209Z">
        <seg>エントリが出力されていない場合は値の生成を省略するという当初の設計を保って、これを達成しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We were honored to contribute to this effort and hope to see everybody again soon.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201217T091719Z" creationid="makenowjust" creationdate="20201217T091719Z">
        <seg>この取り組みに貢献できたこと光栄に思います。そして、再びみなさんに会えることを願っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We will keep moving forward and start the development focusing on 1.0.0.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T033850Z" creationid="makenowjust" creationdate="20200611T033841Z">
        <seg>私たちは1.0.0に向けての開発を始めています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We will store this information in instance variables, which are always prefixed with an *at* (`@`) character.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055029Z" creationid="hirofumiwakasugi" creationdate="20150904T055011Z">
        <seg>そして、これらの情報はインスタンス変数 (変数名の先頭は `@`) に保存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We will store this information in instance variables, which are always prefixed with an &lt;g5&gt;at&lt;/g5&gt; (&lt;g6&gt;@&lt;/g6&gt;) character.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T103026Z" creationid="makenowjust" creationdate="20200427T103026Z">
        <seg>そして、これらの情報は&lt;g5&gt;アットマーク記号&lt;/g5&gt; (&lt;g6&gt;@&lt;/g6&gt;) が先頭についたインスタンス変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We will use a yellow font on a black background:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T091015Z" creationid="makenowjust" creationdate="20211107T091015Z">
        <seg>黒の背景に黄色のフォントを使用します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We will use yellow font on a black background:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T183317Z" creationid="makenowjust" creationdate="20200413T183317Z">
        <seg>黒い背景に黄色の文字で表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We'd like to thank everyone that help us by sending pull requests, suggesting improvements and changes,
adding documentation, fixing tpyos and talking about it in social media like [Twitter](https://twitter.com/search?q=crystal-lang.org)
and [Reddit](http://www.reddit.com/r/crystal_programming).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151006T050655Z" creationid="hirofumiwakasugi" creationdate="20151006T050655Z">
        <seg>We'd like to thank everyone that help us by sending pull requests, suggesting improvements and changes,
adding documentation, fixing tpyos and talking about it in social media like [Twitter](https://twitter.com/search?q=crystal-lang.org)
and [Reddit](http://www.reddit.com/r/crystal_programming).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>WebKit_JS</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120237Z" creationid="makenowjust" creationdate="20200510T120237Z">
        <seg>WebKit_JS</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Welcome to the documentation for the Crystal language.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T150909Z" creationid="makenowjust" creationdate="20210726T150909Z">
        <seg>プログラミング言語 Crystal のドキュメントにようこそ！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Welcome to the language reference for the Crystal programming language!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080023Z" creationid="makenowjust" creationdate="20200516T080023Z">
        <seg>プログラミング言語 Crystal の言語リファレンスにようこそ！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Well … magic!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174135Z" creationid="makenowjust" creationdate="20200413T172818Z">
        <seg>それは……魔法のように！　</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We’ve put together some assets and guidelines to help you determine the best way to use our brand and logos.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084833Z" creationid="makenowjust" creationdate="20200516T084833Z">
        <seg>ここにいくつかのアセットと Crystal というブランドとロゴを使うにあたっての最良の方法を決める助けとなるガイドラインをここに用意しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We’ve updated the SSL server secure defaults in &lt;g1&gt;#9026&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/9026&lt;e4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T152435Z" creationid="makenowjust" creationdate="20200610T152315Z">
        <seg>SSL サーバーのデフォルト値を&lt;g1&gt;#9026&lt;/g1&gt;https://github.com/crystal-lang/crystal/pull/9026&lt;e4/&gt;で更新しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What can you do with the Crystal logos and brand:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T085528Z" creationid="makenowjust" creationdate="20200516T085126Z">
        <seg>次のような場合であれば、Crystal のロゴやブランドを利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What happens if we create two different people, one with a `String` and one with an `Int32`? Let's try it:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135434Z" creationid="hirofumiwakasugi" creationdate="20150904T135434Z">
        <seg>それでは、もし2つの people を作るとき、一方は `String` 型でもう一方は `Int32` 型にした場合にはどうなるでしょうか？試してみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What happens with the &lt;g1&gt;strukt&lt;/g1&gt; here:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T173256Z" creationid="makenowjust" creationdate="20200505T173256Z">
        <seg>ここで &lt;g1&gt;strukt&lt;/g1&gt; に一体何が起こっているのかというと、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What is this list?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083252Z" creationid="makenowjust" creationdate="20200516T083252Z">
        <seg>このリストは何ですか？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What it does</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T161130Z" creationid="makenowjust" creationdate="20200527T161130Z">
        <seg>何をするものなのか</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What the compiler doesn't know is that for us, &lt;g1&gt;Animal&lt;/g1&gt; will never be instantiated as it doesn't make sense to instantiate one.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T112417Z" creationid="makenowjust" creationdate="20200504T112417Z">
        <seg>&lt;g1&gt;Animal&lt;/g1&gt; のインスタンス化には意味がないため、直接インスタンス化することは絶対にありえないでしょう。ただ、コンパイラにはその事情が分かりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What the compiler doesn't know is that for us, `Animal` will never be instantiated as it doesn't make sense to instantiate one.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T035003Z" creationid="hirofumiwakasugi" creationdate="20150910T034728Z">
        <seg>`Animal` のインスタンス化には意味がないため、`Animal` を直接インスタンス化することは絶対にあり得ないでしょう。ただ、コンパイラにはその事情がわかりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What your library is</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T161125Z" creationid="makenowjust" creationdate="20200527T161125Z">
        <seg>このライブラリが何なのか</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What's the right way to do this?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T105618Z" creationid="makenowjust" creationdate="20200504T105618Z">
        <seg>どのようにするのが正しい方法でしょうか？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When &lt;g2&gt;__LINE__&lt;/g2&gt; is declared as the default value to a method parameter, it represents the line number at the location of the method call.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T180544Z" creationid="makenowjust" creationdate="20200505T180544Z">
        <seg>&lt;g2&gt;__LINE__&lt;/g2&gt; がメソッドの引数のデフォルト値として利用された場合、メソッドの呼び出された位置の行番号になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When &lt;g2&gt;__LINE__&lt;/g2&gt; is used as a default parameter value, it represents the line number at the location of the method call.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T092802Z" creationid="makenowjust" creationdate="20210324T092802Z">
        <seg>When &lt;g2&gt;__LINE__&lt;/g2&gt; がメソッドの引数のデフォルト値として利用された場合、メソッドの呼び出された位置の行番号になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When &lt;g2&gt;send&lt;/g2&gt; is executed, execution continues with the fiber that was waiting on that channel.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103716Z" creationid="akiji" creationdate="20200429T135104Z">
        <seg>&lt;g2&gt;send&lt;/g2&gt; が実行されると、そのチャネルを待ち受けていたファイバの実行が再開されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a case expression is a tuple literal there are a few semantic differences if a &lt;g1&gt;when&lt;/g1&gt; condition is also a tuple literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094320Z" creationid="makenowjust" creationdate="20200424T093432Z">
        <seg>caseの式にタプルリテラルで、&lt;g1&gt;when&lt;/g1&gt;の条件式もタプルリテラルの場合、少し異なる挙動をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a literal is assigned to an instance variable, the literal's type is added to the set.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T135427Z" creationid="makenowjust" creationdate="20200427T135349Z">
        <seg>リテラルがインスタンス変数に代入されているとき、リテラルの型が予想された型として記憶されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a macro is invoked you can access the current scope, or type, with a special instance variable: &lt;g1&gt;@type&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215730Z" creationid="makenowjust" creationdate="20200509T215730Z">
        <seg>マクロが実行される際に、&lt;g1&gt;@type&lt;/g1&gt; という項別なインスタンス変数を使うことで、現在のスコープ、もしくは型にアクセスすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a macro is invoked you can access the current scope, or type, with a special instance variable: `@type`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T041248Z" creationid="hirofumiwakasugi" creationdate="20151001T041248Z">
        <seg>マクロが実行される際に  `@type` という特別のインスタンス変数を使うことで、現在のスコープ、および型にアクセスすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a macro is invoked you can access the method, the macro is in with a special instance variable: &lt;g1&gt;@def&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220035Z" creationid="makenowjust" creationdate="20200509T220035Z">
        <seg>マクロが実行される際に、&lt;g1&gt;@def&lt;/g1&gt; という特別なインスタンス変数を使うことで、メソッド、もしくはマクロにアクセスすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a method is not found in a type it is looked up in this list.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T140439Z" creationid="hirofumiwakasugi" creationdate="20150911T140403Z">
        <seg>そして、あるメソッドが自身の型に見つからないとき、そのリストをたどってメソッドを探します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a method specifies a splat (explained in the next section), named arguments can't be used.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160544Z" creationid="makenowjust" creationdate="20200429T152811Z">
        <seg>メソッドにスプラット展開 (これについては次の章で説明します) が指定されている場合、名前付き引数を使うことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a method specifies a splat parameter (explained in the next section), named arguments can't be used for positional parameters.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T092633Z" creationid="makenowjust" creationdate="20210324T092624Z">
        <seg>メソッドにスプラット展開指定 (これについてはの次の章で説明します) が指定されている場合、名前付き引数は使えません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a module is generic you include it like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061110Z" creationid="hirofumiwakasugi" creationdate="20150924T061050Z">
        <seg>ジェネリックなモジュールは以下のようにインクルードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a new Crystal version is released you can upgrade Crystal using:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112511Z" creationid="makenowjust" creationdate="20200518T112453Z">
        <seg>新しい Crystal のバージョンがリリースされたら、このようにしてアップグレードできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a new Crystal version is released you can upgrade your system using:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T053319Z" creationid="hirofumiwakasugi" creationdate="20150831T053319Z">
        <seg>新しいバージョンの Crystal がリリースされた場合には、以下でアップグレードすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a program starts, it fires up a main fiber that will execute your top-level code.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T055429Z" creationid="akiji" creationdate="20200428T055429Z">
        <seg>プログラムが開始されると、まずトップレベルコードを実行するためのメインファイバを起動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a splat method argument has no name, it means no more positional arguments can be passed, and next arguments must be passed as named arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160006Z" creationid="makenowjust" creationdate="20200501T160006Z">
        <seg>スプラット指定された引数に名前がついていないときは、位置指定の引数をさらに渡すことはできませんが、以降の引数は名前付き引数として渡さなければいけないことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a splat parameter has no name, it means no more positional arguments can be passed, and any following parameters must be passed as named arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T091921Z" creationid="makenowjust" creationdate="20210324T091921Z">
        <seg>スプラット展開指定された引数に名前がついていないときは、位置指定の引数をさらに渡すことはできませんが、以降の引数は名前付き引数として渡さなければいけないことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a variable's type combines different types under the same class hierarchy, its type becomes a **virtual type**.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T033018Z" creationid="hirofumiwakasugi" creationdate="20150910T031418Z">
        <seg>ある変数が、同一のクラス階層下の異なる型の組み合わせであるとき、その型は「virtual 型」となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a variable's type combines different types under the same class hierarchy, its type becomes a &lt;g1&gt;virtual type&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T110434Z" creationid="makenowjust" creationdate="20200504T110431Z">
        <seg>ある変数が、同一のクラス階層下の異なる型の組み合わせであるとき、その型は &lt;g1&gt;virtual 型&lt;/g1&gt;となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When all elements of the array have the same type, &lt;g2&gt;T&lt;/g2&gt; equals to that.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173013Z" creationid="makenowjust" creationdate="20200420T173013Z">
        <seg>すべての要素が同じ型を持っていた場合、&lt;g2&gt;T&lt;/g2&gt;はそれに等しくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When all have the same type, &lt;g3&gt;K&lt;/g3&gt;/&lt;g4&gt;V&lt;/g4&gt; equals to that.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T175532Z" creationid="makenowjust" creationdate="20200420T175532Z">
        <seg>すべて同じ型であれば、&lt;g3&gt;K&lt;/g3&gt;および&lt;g4&gt;V&lt;/g4&gt;はそれに等しくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When an expression like &lt;g1&gt;Type.new(...)&lt;/g1&gt; is assigned to an instance variable, the type &lt;g2&gt;Type&lt;/g2&gt; is added to the set.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T135919Z" creationid="makenowjust" creationdate="20200427T135919Z">
        <seg>&lt;g1&gt;Type.new(...)&lt;/g1&gt; のような式をインスタンス変数に代入しているとき、型 &lt;g2&gt;Type&lt;/g2&gt; が予想された型として記憶されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When an instance method has no doc comment, but a method with the same signature exists in a parent type, the documentation is inherited from the parent method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213937Z" creationid="makenowjust" creationdate="20200412T213212Z">
        <seg>インスタンスメソッドがドキュメンテーションコメントを持たないが、親クラスで同じシグネチャのメソッドがあるときは、ドキュメントは親クラスのものから継承されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When building Crystal code with the &lt;g1&gt;--release&lt;/g1&gt; flag on FreeBSD, the &lt;g2&gt;--no-debug&lt;/g2&gt; flag should be added too in order to avoid LLVM assertion errors.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T110942Z" creationid="makenowjust" creationdate="20200518T110942Z">
        <seg>FreeBSD 上で &lt;g1&gt;--release&lt;/g1&gt; フラグをつけて Crystal のコードをビルドする際は、&lt;g2&gt;--no-debug&lt;/g2&gt; フラグをつけて LLVM の警告が出ないようにする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When called from within the same class or module scope the receiver can be &lt;g2&gt;self&lt;/g2&gt; or implicit (like &lt;g3&gt;encrypt(string)&lt;/g3&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T130634Z" creationid="makenowjust" creationdate="20200504T130537Z">
        <seg>同じスコープのクラスメソッドを呼び出す場合は、レシーバとして &lt;g2&gt;self&lt;/g2&gt; を指定する、もしくは暗黙のものとすることができます (&lt;g3&gt;encrypt(string)&lt;/g3&gt; のように)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When creating an empty array you must always specify T:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T142531Z" creationid="hirofumiwakasugi" creationdate="20150901T135810Z">
        <seg>空の配列を作りたいときには、必ず `T` を指定しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When creating an empty hash you must always specify `K` and `V`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T142507Z" creationid="hirofumiwakasugi" creationdate="20150901T142456Z">
        <seg>空のハッシュを作りたいときには、必ず `K` と `V` を指定しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When inheriting you can specify an instance of the generic type, or delegate type varaibles:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T062012Z" creationid="hirofumiwakasugi" creationdate="20150924T061936Z">
        <seg>継承する際はに、具体的な型を指定するか、もしくは型変数を移譲することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When inheriting you can specify an instance of the generic type, or delegate type variables:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024526Z" creationid="hirofumiwakasugi" creationdate="20151009T024526Z">
        <seg>継承する際はに、具体的な型を指定するか、もしくは型変数を移譲することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When invoking a method on an expression whose type is a union type, all types in the union must respond to the method, otherwise a compile-time error is given.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T144316Z" creationid="makenowjust" creationdate="20200429T144316Z">
        <seg>ユニオン型の式に対してメソッドを呼び出すとき、ユニオン型の中のすべての型でそのメソッドが飛び出せる必要があります。そうでなければコンパイル時にエラーとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When invoking a method without a receiver, like &lt;g1&gt;add(1, 2)&lt;/g1&gt;, it will be searched for in the program if not found in the current type or any of its ancestors.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T100353Z" creationid="makenowjust" creationdate="20200427T100251Z">
        <seg>&lt;g1&gt;add(1, 2)&lt;/g1&gt; のように、レシーバを指定せずにメソッドを呼び出したとき、そのメソッドが現在の型やその継承元に見つからなかった場合は、プログラムから探索されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When invoking a method without a receiver, like `add(1, 2)`, it will be searched in the program if not found in the current type or any of its ancestors.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021106Z" creationid="hirofumiwakasugi" creationdate="20150904T015450Z">
        <seg>例えば `add(1, 2)` など、レシーバを指定せずにメソッドを実行したとき、もしそのメソッドが自身の型とその継承元に見つからなかった場合は、プログラム内を探索します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When invoking a method, the algorithm to match call arguments to method arguments is:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T154605Z" creationid="makenowjust" creationdate="20200501T154605Z">
        <seg>メソッドを呼び出す際、次のアルゴリズムが渡された引数をメソッドの引数にマッチさせるのに使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When invoking a method, the algorithm to match call arguments to method parameters is:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T091408Z" creationid="makenowjust" creationdate="20210324T091408Z">
        <seg>メソッドを呼び出す際、次のアルゴリズムが渡された引数をメソッドの仮引数にマッチさせるのに使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When no more rules can be applied, the inferred type will be the &lt;g1&gt;union&lt;/g1&gt; of those types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T133918Z" creationid="makenowjust" creationdate="20200427T133840Z">
        <seg>そして、これ以上適用する規則がなくなったとき、記憶された型の&lt;g1&gt;ユニオン型&lt;/g1&gt;として推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When our application starts, the block passed to &lt;g1&gt;OptionParser#parse&lt;/g1&gt; gets executed.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T173243Z" creationid="makenowjust" creationdate="20200413T173243Z">
        <seg>プログラムが開始すると、まず&lt;g1&gt;OptionParser#parse&lt;/g1&gt;に渡されたブロックが実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When possible, shards will try to honor the version chosen despite the change of source.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T105759Z" creationid="makenowjust" creationdate="20200809T105719Z">
        <seg>可能なら、Shards は元の依存関係の変更に関わらずバージョン選択を尊重するようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When possible, use the latest supported version: 8.0.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T064830Z" creationid="makenowjust" creationdate="20200518T064828Z">
        <seg>可能なら、サポートしている最新のバージョン 8.0 の LLVM を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When reading values from the database there is no type information during compile time that crystal can use.</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T235500Z" creationid="daiki" creationdate="20200705T235441Z">
        <seg>データベースから値を読み込む際には、コンパイル時に crystal が使用できる型情報がありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When running the application, it will request a phrase to the user and the magic will happen!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T181714Z" creationid="makenowjust" creationdate="20200413T181714Z">
        <seg>このアプリケーションを実行すると、ユーザーにフレーズを要求して、そして魔法が起こります！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When running the example, Crystal will reply:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182446Z" creationid="makenowjust" creationdate="20200413T182446Z">
        <seg>これを実行しようとしてみると、 Crystal はこんな風にしてコンパイルに失敗するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When specifying a type, all elements in a tuple must match that type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T030106Z" creationid="hirofumiwakasugi" creationdate="20150908T030106Z">
        <seg>このように型を指定した場合、タプルのすべての要素がその型である必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the first fiber reaches the &lt;g2&gt;socket.gets&lt;/g2&gt; line, it gets suspended, the Event Loop is told to continue executing this fiber when there's data in the socket, and the program continues with the second fiber.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T065950Z" creationid="akiji" creationdate="20200428T065950Z">
        <seg>1つめのファイバは&lt;g2&gt;socket.gets&lt;/g2&gt;の行に到達すると一旦中断し、イベントループにソケットにデータが準備できた時点でこのファイバを再開するように伝えます。そして、プログラムは2つめのファイバを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the method has many default arguments the order of the names in the invocation doesn't matter, and some names can be omitted:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024050Z" creationid="hirofumiwakasugi" creationdate="20151009T024050Z">
        <seg>メソッドがデフォルト引数を複数持つときには、メソッド実行時の引数の順序に関係なく、指定した名前の引数として渡されます。また、引数を省略することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the method has many default arguments the order of the names in the invocation doesn't matter, and some names can be ommited:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T114022Z" creationid="hirofumiwakasugi" creationdate="20150906T113107Z">
        <seg>メソッドがデフォルト引数を複数持つときには、メソッド実行時の引数の順序に関係なく、指定した名前の引数として渡されます。また、引数を省略することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the user presses &lt;g5&gt;Enter&lt;/g5&gt;, then the execution will continue and &lt;g6&gt;user_input&lt;/g6&gt; will have the user value.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182110Z" creationid="makenowjust" creationdate="20200413T182038Z">
        <seg>ユーザーが&lt;g5&gt;Enter&lt;/g5&gt;を押すと、実行が再開して&lt;g6&gt;user_input&lt;/g6&gt;にユーザーの入力した値が入ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When there are many arguments, the order of the names in the invocation doesn't matter, as long as all required arguments are covered:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T152653Z" creationid="makenowjust" creationdate="20200429T152653Z">
        <seg>いくつもの引数を持つ場合、すべての引数を正しく渡していれば、どのような順序で指定したかは重要ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When there are many arguments, the order of the names in the invocation doesn't matter, as long as all required parameters are covered:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T092550Z" creationid="makenowjust" creationdate="20210324T092550Z">
        <seg>いくつもの引数を持つ場合、すべての引数を正しく渡していれば、どのような順序で指定したかは重要ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When there are no other fibers ready to be executed, the event loop checks if there is any async operation that is ready, and then executes the fiber waiting for that operation.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T150654Z" creationid="akiji" creationdate="20200428T063200Z">
        <seg>他に実行可能なファイバが存在しない場合、イベントループは準備が完了しているな非同期処理があるかをチェックし、その処理を待っていたファイバを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When they're defined inside a class or module scope it is easier to use &lt;g1&gt;self&lt;/g1&gt; instead of the class name.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T130206Z" creationid="makenowjust" creationdate="20200504T130206Z">
        <seg>クラスもしくはモジュールのスコープではより簡潔に、クラス名の代わりに&lt;g1&gt;self&lt;/g1&gt;を使う形式でも定義できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When this fiber will have to wait for I/O, other fibers will be able to continue executing code until I/O is ready, and finally when the value is ready and sent through the channel, the main fiber will receive it.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103721Z" creationid="akiji" creationdate="20200429T141638Z">
        <seg>ファイバがI/Oを待たなければいけなくなった場合、I/Oの準備ができるまで他のファイバを実行し、値が到着しチャネルを通じてそれが送信されると、メインファイバがその値を受信します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When used in an &lt;g1&gt;if&lt;/g1&gt; in conjunction with a variable, &lt;g2&gt;is_a?&lt;/g2&gt;, &lt;g3&gt;responds_to?&lt;/g3&gt; or &lt;g4&gt;nil?&lt;/g4&gt; the compiler will restrict the types accordingly:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090210Z" creationid="makenowjust" creationdate="20200424T085742Z">
        <seg>&lt;g1&gt;if&lt;/g1&gt;の条件式の論理積の中の&lt;g2&gt;is_a?&lt;/g2&gt;や&lt;g3&gt;responds_to?&lt;/g3&gt;、&lt;g4&gt;nil?&lt;/g4&gt;に対してこれを使うと、コンパイラはそれに応じて変数の型を適切に制約します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When using blocks with &lt;g1&gt;yield&lt;/g1&gt;, the blocks are &lt;g2&gt;always&lt;/g2&gt; inlined: no closures, calls or function pointers are involved.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T192018Z" creationid="makenowjust" creationdate="20200505T192018Z">
        <seg>ブロックを &lt;g1&gt;yield&lt;/g1&gt; するとき、そのブロックは&lt;g2&gt;常に&lt;/g2&gt;インライン展開されます。クロージャやメソッド呼び出し、そして関数ポインタなどが使われることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When using blocks with `yield`, the blocks are **always** inlined: no closures, calls or function pointers are involved.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T031351Z" creationid="hirofumiwakasugi" creationdate="20150916T031137Z">
        <seg>ブロックを `yield` するとき、そのブロックは**常に**インライン展開されます。クロージャやメソッド呼び出し、そして関数ポインタなどが使われることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When we invoke &lt;g1&gt;channel.receive&lt;/g1&gt;, the main fiber blocks and execution continues with the spawned fiber.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T081114Z" creationid="akiji" creationdate="20200428T081114Z">
        <seg>&lt;g1&gt;channel.receive&lt;/g1&gt;が実行された時点で、メインファイバがブロックされ、生成されたファイバに処理が移ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When we wrote:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T131930Z" creationid="hirofumiwakasugi" creationdate="20150904T131930Z">
        <seg>例えば、以下のように書いたとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When writing custom types, always be sure to override &lt;g1&gt;to_s(io)&lt;/g1&gt;, not &lt;g2&gt;to_s&lt;/g2&gt;, and avoid creating intermediate strings in that method.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T121025Z" creationid="akiji" creationdate="20200430T121025Z">
        <seg>独自の型を書く場合は、必ず&lt;g2&gt;to_s&lt;/g2&gt;ではなく&lt;g1&gt;to_s(io)&lt;/g1&gt;をオーバーライドするようにして、その中でも中間的な文字列を生成しないように注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When writing macros (especially outside of a macro definition) it is important to remember that the generated code from the macro must be valid Crystal code by itself even before it is merged into the main program's code.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221434Z" creationid="makenowjust" creationdate="20200509T221434Z">
        <seg>マクロを書く際 (とくにマクロ定義の外で)、マクロによって生成されたコードは、メインのプログラムのコードにマージされる前から、それ自身として有効なコードである必要があることを覚えておいてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you invoke &lt;g4&gt;super&lt;/g4&gt;, the first type in this ancestors list is used.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141527Z" creationid="makenowjust" creationdate="20200504T141527Z">
        <seg>また、&lt;g4&gt;super&lt;/g4&gt; を実行したときには、その祖先リストの先頭の型が対象となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you invoke `super`, the first type in this ancestors list is used.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T140534Z" creationid="hirofumiwakasugi" creationdate="20150911T140534Z">
        <seg>また、`super` を実行したときには、その先祖リストの先頭の型が対象となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T005824Z" creationid="hirofumiwakasugi" creationdate="20151009T005824Z">
        <seg>以下の場合、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whether a method can be redefined is
indicated by the colum &lt;g6&gt;Overloadable&lt;/g6&gt; in the below operator tables.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T083324Z" creationid="makenowjust" creationdate="20200502T083324Z">
        <seg>メソッドが再定義可能かどうかは、下にある演算子の一覧の&lt;g6&gt;オーバーロード可能か&lt;/g6&gt;の項目で示されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whether the method accepts a &lt;g1&gt;block&lt;/g1&gt; or not</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T150426Z" creationid="makenowjust" creationdate="20200429T150426Z">
        <seg>&lt;g1&gt;ブロック&lt;/g1&gt;を受け取れるかどうか</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While command literals may prove useful for simple script-like tools, special caution is advised when interpolating user input because it may easily lead to command injection.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T173138Z" creationid="makenowjust" creationdate="20200422T173138Z">
        <seg>コマンドリテラルはスクリプトのような簡易的な利用時に便利ですが、補間を使う場合にはコマンドインジェクションが起こらないように注意する特別の注意を払う必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whitespace</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T210606Z" creationid="makenowjust" creationdate="20200412T204829Z">
        <seg>空白 (Whitespace)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Why is this so?</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060015Z" creationid="hirofumiwakasugi" creationdate="20150904T060012Z">
        <seg>これは一体どういうことでしょう？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Windows Subsystem for Linux</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071419Z" creationid="makenowjust" creationdate="20200518T071419Z">
        <seg>Windows Subsystem for Linux</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With &lt;g1&gt;alias&lt;/g1&gt; you can give a type a different name:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T081511Z" creationid="makenowjust" creationdate="20200506T081511Z">
        <seg>&lt;g1&gt;alias&lt;/g1&gt; を使うと、型に別名をつけることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With &lt;g1&gt;ensure&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T104034Z" creationid="makenowjust" creationdate="20200506T104027Z">
        <seg>&lt;g1&gt;ensure&lt;/g1&gt; と共に利用した場合は次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With `alias` you can give a type a different name:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T070808Z" creationid="hirofumiwakasugi" creationdate="20150919T070808Z">
        <seg>`alias` を使うと、型に別名をつけることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With a buffered channel, invoking &lt;g1&gt;send&lt;/g1&gt; won't switch to another fiber unless the buffer is full:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103753Z" creationid="akiji" creationdate="20200429T143851Z">
        <seg>バッファ付きのチャネルを使った場合、&lt;g1&gt;send&lt;/g1&gt;が実行されてもバッファが一杯になるまでは他のファイバに処理が切り替わりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With its search capability you can find the shard or application you're looking for." link_text="crystalshards.org" url="https://crystalshards.org" icon="play_arrow" %} {% include community_row.html title="Newsletter" divId="newsletter" content="Crystal Weekly summarizes every news of the Crystal community in a short, focused newsletter.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20220525T090619Z" creationid="makenowjust" creationdate="20220525T090619Z">
        <seg>検索機能があり、探している shards やアプリケーションを見つけられます。'
   link_text='crystalshards.org'
   url='https://crystalshards.org'
   icon='play_arrow' %}

{% include community_row.html
   title='ニュースレター (英語)'
   divId='newsletter'
   content='Crystal Weekly は毎週の Crystal コミュニティの出来事の要約して、ニュースレターとして配信します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With its search capability you can find the shard or application you're looking for." link_text="crystalshards.xyz" url="https://crystalshards.xyz" icon="play_arrow" %} {% include community_row.html title="Newsletter" divId="newsletter" content="Crystal Weekly summarizes every news of the Crystal community in a short, focused newsletter.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T103516Z" creationid="makenowjust" creationdate="20200516T101214Z">
        <seg>検索機能があり、探している shards やアプリケーションを見つけられます。'
   link_text='crystalshards.xyz'
   url='https://crystalshards.xyz'
   icon='play_arrow' %}

{% include community_row.html
   title='ニュースレター (英語)'
   divId='newsletter'
   content='Crystal Weekly は毎週の Crystal コミュニティの出来事の要約して、ニュースレターとして配信します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With local overrides feature you will be able to have a &lt;g1&gt;shard.override.yml&lt;/g1&gt; or specify such file using &lt;g2&gt;SHARDS_OVERRIDE&lt;/g2&gt; environment variable.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T113207Z" creationid="makenowjust" creationdate="20200809T113207Z">
        <seg>ローカルでのオーバーライド機能は &lt;g1&gt;shard.override.yml&lt;/g1&gt; ファイルを用意するか、&lt;g2&gt;SHARDS_OVERRIDE&lt;/g2&gt; 環境変数で指定したファイルを用意することで有効になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the above mentioned logic there are a couple of workflows that become simpler:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T122642Z" creationid="makenowjust" creationdate="20200809T113354Z">
        <seg>上記のロジックによって、次の場合のワークフローが単純化されるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With type restrictions</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T135148Z" creationid="makenowjust" creationdate="20200427T133030Z">
        <seg>型制約を指定する場合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Within a class, separate method definitions, constants and inner class definitions with &lt;g1&gt;one newline&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T072158Z" creationid="makenowjust" creationdate="20200412T205207Z">
        <seg>クラス内で、メソッド定義や定数、そして内部のクラス定義は &lt;g1&gt;間を1行空ける&lt;/g1&gt; ことで分割してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Within a class, separate method definitions, constants and inner class definitions with __one newline__.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012154Z" creationid="hirofumiwakasugi" creationdate="20151010T012140Z">
        <seg>クラス内で、メソッド定義や定数、そして内部のクラス定義は「間を1行空ける」ことで分割してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Within a project:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011128Z" creationid="hirofumiwakasugi" creationdate="20151010T011102Z">
        <seg>プロジェクト内では以下のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Without arguments and without parentheses, all of a method's arguments are forwarded to the parent call:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024757Z" creationid="hirofumiwakasugi" creationdate="20150910T024757Z">
        <seg>引数とカッコなしで実行すると、メソッドの引数がそのまま親メソッドに渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Without arguments nor parenthesis, `previous_def` receives the same arguments as the method's arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T123544Z" creationid="hirofumiwakasugi" creationdate="20150904T123414Z">
        <seg>`previous_def` を引数なし、かつカッコもなしで実行したとき、そのメソッドが受け取った引数がそのまま渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Without arguments nor parenthesis, `super` receives the same arguments as the method's arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024815Z" creationid="hirofumiwakasugi" creationdate="20150910T024815Z">
        <seg>`super` を引数なし、かつカッコもなしで実行したとき、そのメソッドが受け取った引数がそのまま渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Without arguments or parentheses, &lt;g1&gt;previous_def&lt;/g1&gt; receives all of the method's parameters as arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T080200Z" creationid="makenowjust" creationdate="20210324T080200Z">
        <seg>引数の括弧もない場合、&lt;g1&gt;previous_def&lt;/g1&gt; には呼び出し元のメソッドと同じ引数がそのまま渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Without arguments or parentheses, &lt;g1&gt;previous_def&lt;/g1&gt; receives the same arguments as the method's arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T103944Z" creationid="makenowjust" creationdate="20200427T124926Z">
        <seg>引数も括弧もない場合、&lt;g1&gt;previous_def&lt;/g1&gt; には呼び出し元のメソッドと同じ引数がそのまま渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Without arguments or parentheses, &lt;g1&gt;super&lt;/g1&gt; receives the same arguments as the method's arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T103919Z" creationid="makenowjust" creationdate="20200504T103914Z">
        <seg>引数も括弧もない場合、&lt;g1&gt;super&lt;/g1&gt; には呼び出し元のメソッドと同じ引数がそのまま渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Without the &lt;g2&gt;as&lt;/g2&gt; pseudo-method, the inferred type would have been &lt;g3&gt;Int32&lt;/g3&gt; and we wouldn't have been able to add a &lt;g4&gt;Float64&lt;/g4&gt; into it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T115924Z" creationid="makenowjust" creationdate="20200512T115924Z">
        <seg>&lt;g2&gt;as&lt;/g2&gt; 疑似メソッドがなければ、推論された型は &lt;g3&gt;Int32&lt;/g3&gt; なので、それに対して &lt;g4&gt;Float64&lt;/g4&gt; は追加されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Without the `as` expression, the inferred type would have been `Int32` and we wouldn't have been able to add a `Float64` into it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T061632Z" creationid="hirofumiwakasugi" creationdate="20150930T061632Z">
        <seg>もし `as` 式がなければ、推論された型は `Int32` なので、それに対して `Float64` を追加することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Without type restrictions</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T135152Z" creationid="makenowjust" creationdate="20200427T133251Z">
        <seg>型制約を指定しない場合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Work on a patch on a deep dependency without needing to fork and tweak dependencies all the way down.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T113829Z" creationid="makenowjust" creationdate="20200809T113829Z">
        <seg>わざわざフォークしたり依存関係をいじったりしなくても、深いところにある依存関係のパッチを当てることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>World</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T091347Z" creationid="makenowjust" creationdate="20210130T091347Z">
        <seg>World</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Write  # 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T114623Z" creationid="hirofumiwakasugi" creationdate="20150914T114623Z">
        <seg>Write  # 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Write # 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182143Z" creationid="makenowjust" creationdate="20200505T182143Z">
        <seg>Write # 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Write &lt;g1&gt;documentation&lt;/g1&gt; to express the purpose of your code and support the &lt;g2&gt;crystal docs&lt;/g2&gt; generator.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T220645Z" creationid="makenowjust" creationdate="20200412T220645Z">
        <seg>コードの目的を説明するための &lt;g1&gt;ドキュメント&lt;/g1&gt;を書いてください。そして&lt;g2&gt;crystal docs&lt;/g2&gt;ジェネレータをサポートしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writing Shards</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200521T041434Z" creationid="makenowjust" creationdate="20200521T041331Z">
        <seg>shard の作り方</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writing a &lt;g1&gt;shard.yml&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T162219Z" creationid="makenowjust" creationdate="20200527T162219Z">
        <seg>&lt;g1&gt;shard.yml&lt;/g1&gt; を書く</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writing a README</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T160742Z" creationid="makenowjust" creationdate="20200527T160742Z">
        <seg>README を書く</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writing a program in a single file is OK for little snippets and small benchmark code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T162128Z" creationid="hirofumiwakasugi" creationdate="20150905T143450Z">
        <seg>小さなプログラムやベンチマーク用途のコードであれば1つのファイルに書いても OK ですが、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writing the Code</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T162229Z" creationid="makenowjust" creationdate="20200527T154850Z">
        <seg>コードを書く</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>X.callback -&gt;(x) { x + 1 }</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T085659Z" creationid="makenowjust" creationdate="20200512T085659Z">
        <seg>X.callback -&gt;(x) { x + 1 }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>X.some_fun 1 # Error: argument 'value' of 'X#some_fun'</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023236Z" creationid="hirofumiwakasugi" creationdate="20151008T023200Z">
        <seg>X.some_fun 1 # エラー: 'X#some_fun' の引数 'value' は</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>X.some_fun 1 # OK
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023914Z" creationid="hirofumiwakasugi" creationdate="20151008T023914Z">
        <seg>X.some_fun 1 # OK
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>X.variadic(1, 2, 3, 4)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T040910Z" creationid="hirofumiwakasugi" creationdate="20151005T040910Z">
        <seg>X.variadic(1, 2, 3, 4)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>X86_FastCall</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120238Z" creationid="makenowjust" creationdate="20200510T120238Z">
        <seg>X86_FastCall</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>X86_StdCall</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120238Z" creationid="makenowjust" creationdate="20200510T120238Z">
        <seg>X86_StdCall</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>X::SomeEnum #=&gt; 1_i32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053222Z" creationid="hirofumiwakasugi" creationdate="20151007T053222Z">
        <seg>X::SomeEnum #=&gt; 1_i32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>X::SomeEnum::One # =&gt; One</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083714Z" creationid="makenowjust" creationdate="20200512T083714Z">
        <seg>X::SomeEnum::One # =&gt; One</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>X::SomeEnum::Zero #=&gt; 0_i8
X::SomeEnum::Two  #=&gt; 2_i8
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053246Z" creationid="hirofumiwakasugi" creationdate="20151007T053246Z">
        <seg>X::SomeEnum::Zero #=&gt; 0_i8
X::SomeEnum::Two  #=&gt; 2_i8
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Yellow      # 6 (5 + 1)
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024420Z" creationid="hirofumiwakasugi" creationdate="20150914T024420Z">
        <seg>Yellow      # 6 (5 + 1)
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Yellow     # 6 (5 + 1)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T181855Z" creationid="makenowjust" creationdate="20200505T181855Z">
        <seg>Yellow     # 6 (5 + 1)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Yet we should not pass up our opportunities in that critical 3%.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T045049Z" creationid="akiji" creationdate="20200430T084109Z">
        <seg>ただし、クリティカルな3%についてまでその機会を逃してはらならい。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Yet, if this is inconvenient you can pass &lt;g4&gt;--ignore-crystal-version&lt;/g4&gt; to avoid the check entirely.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T135903Z" creationid="makenowjust" creationdate="20200610T135903Z">
        <seg>また、この挙動が不便な場合は、&lt;g4&gt;--ignore-crystal-version&lt;/g4&gt; を渡すことでこのチェックを無視できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Yield arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184658Z" creationid="makenowjust" creationdate="20200505T184658Z">
        <seg>yield の引数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can &lt;g1&gt;require&lt;/g1&gt; code defined in other files:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T161921Z" creationid="makenowjust" creationdate="20200413T161921Z">
        <seg>&lt;g1&gt;require&lt;/g1&gt;で、他のファイルで定義されたコードを読み込むことができます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can &lt;g1&gt;yield&lt;/g1&gt; many values:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184744Z" creationid="makenowjust" creationdate="20200505T184744Z">
        <seg>複数の値を &lt;g1&gt;yield&lt;/g1&gt; することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can `yield` many values:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T021124Z" creationid="hirofumiwakasugi" creationdate="20150916T021124Z">
        <seg>複数の値を `yield` することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can actually pass a proc to a method that yields:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025122Z" creationid="hirofumiwakasugi" creationdate="20150917T024946Z">
        <seg>proc を yield するメソッドに渡すこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also declare constants inside a &lt;g1&gt;lib&lt;/g1&gt; declaration:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T084322Z" creationid="makenowjust" creationdate="20200512T084322Z">
        <seg>&lt;g1&gt;lib&lt;/g1&gt; 宣言の内部で定数を宣言することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also declare constants inside a `lib` declaration:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T022113Z" creationid="hirofumiwakasugi" creationdate="20151008T022113Z">
        <seg>`lib` 宣言の内部で定数を宣言することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also initialize some fields with a syntax similar to &lt;g1&gt;named arguments&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083053Z" creationid="makenowjust" creationdate="20200512T083027Z">
        <seg>また、フィールドは&lt;g1&gt;名前付き引数&lt;/g1&gt;と同様のシンタックスを使って初期化することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also initialize some fields with a syntax similar to [named arguments](../default_and_named_arguments.html):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T050541Z" creationid="hirofumiwakasugi" creationdate="20151007T050402Z">
        <seg>フィールドは[名前付き引数](../default_and_named_arguments.html)と同様のシンタックスを使って初期化することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also install the latest nightly build by using the &lt;g1&gt;edge&lt;/g1&gt; channel.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T113454Z" creationid="makenowjust" creationdate="20200518T113454Z">
        <seg>最新のバージョンを &lt;g1&gt;edge&lt;/g1&gt; チャンネルを使ってインストールすることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also make a struct behave like a C union (this can be pretty unsafe):</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114907Z" creationid="makenowjust" creationdate="20200510T114848Z">
        <seg>構造体をCの共用体のようにするためにも使えます (これはかなり安全ではありません)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also rescue multiple exception types at once by specifying a union type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010129Z" creationid="hirofumiwakasugi" creationdate="20150907T012547Z">
        <seg>また、型の組み合わせ (ユニオン型) を指定すれば、複数の例外を同時に補足することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also spawn by passing a method call instead of a block.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T080049Z" creationid="akiji" creationdate="20200428T080049Z">
        <seg>ブロックを与える代わりに、メソッドの呼び出しを渡してファイバを生成することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also specify many fields of the same type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045750Z" creationid="hirofumiwakasugi" creationdate="20151007T045711Z">
        <seg>同じ型のフィールドは複数指定することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also use "../" to access parent directories relative to the current file, so &lt;g1&gt;require "../../foo/bar"&lt;/g1&gt; works as well.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T091435Z" creationid="makenowjust" creationdate="20200427T091435Z">
        <seg>また、 "../" を使えば現在のファイルの親ディレクトリを指定することができ、&lt;g1&gt;require "../../foo/bar"&lt;/g1&gt; のように書くこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also use "../" to access parent directories relative to the current file, so `require "../../foo/bar"` works as well.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T162316Z" creationid="hirofumiwakasugi" creationdate="20150905T160900Z">
        <seg>また、「../」を使えば、現在のファイルの親ディレクトリを指定することができます。`require "../../foo/bar"` のように書くことも同様に可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also use a "heredoc" for creating string:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061829Z" creationid="hirofumiwakasugi" creationdate="20160204T061823Z">
        <seg>文字列はヒアドキュメント (heredoc) を使って生成することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also use a string as a name if the name is not a valid identifier or type name:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T041701Z" creationid="hirofumiwakasugi" creationdate="20151005T041505Z">
        <seg>もし名前が識別子や型名として不正なものであるときは、文字列を名前として使うことも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also use the &lt;g1&gt;&amp;block&lt;/g1&gt; syntax to forward blocks, but then you have to at least specify the input types, and the generated code will involve closures and will be slower:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075651Z" creationid="makenowjust" creationdate="20200506T075651Z">
        <seg>ブロックのフォワーディングに &lt;g1&gt;&amp;block&lt;/g1&gt; を利用することも可能ですが、その場合には最低でも入力する型を指定しておかなければいけません。また、生成されたコードがクロージャを伴うために、速度的にも遅くなってしまいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also use the `&amp;block` syntax to forward blocks, but then you have to at least specify the input types, and the generated code will involve closures and will be slower:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T030542Z" creationid="hirofumiwakasugi" creationdate="20150917T025545Z">
        <seg>ブロックのフォワーディングに `&amp;block` を利用することも可能ですが、その場合には最低でも入力する型を指定しておかなければいけません。また、生成されたコードがクロージャを伴うため、速度的にも遅くなってしまいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can assign the same value to multiple variables using chained assignment:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175031Z" creationid="makenowjust" creationdate="20200422T175031Z">
        <seg>連続した代入を用いることで、同じ値を複数の変数に一度に代入することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can bind to variadic functions:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T031442Z" creationid="hirofumiwakasugi" creationdate="20151005T040821Z">
        <seg>可変長引数を持つ関数をバインディングすることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can check if a flag is defined with the &lt;g1&gt;flag?&lt;/g1&gt; macro method:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T023052Z" creationid="makenowjust" creationdate="20200511T023052Z">
        <seg>フラグが定義されているかどうかは &lt;g1&gt;flag?&lt;/g1&gt; マクロメソッドを使うことで確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can check out an article about &lt;g2&gt;how to debug a Crystal program in VS Code article&lt;/g2&gt;https://dev.to/bcardiff/debug-crystal-in-vscode-via-codelldb-3lf&lt;e4/&gt; for more information, configuration and screenshots.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T133336Z" creationid="makenowjust" creationdate="20200610T133336Z">
        <seg>この &lt;g2&gt;VSCode で Crystal のプログラムをどうやってデバッグするかを説明した記事&lt;/g2&gt;https://dev.to/bcardiff/debug-crystal-in-vscode-via-codelldb-3lf&lt;e4/&gt;で、どう設定すれば良いかや、スクリーンショットを確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can check the semantics in &lt;g3&gt;shards/SPEC.md&lt;/g3&gt;https://github.com/crystal-lang/shards/blob/v0.11.1/SPEC.md#crystal&lt;e4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T135727Z" creationid="makenowjust" creationdate="20200610T135727Z">
        <seg>詳細は動作は &lt;g3&gt;shards/SPEC.md&lt;/g3&gt;https://github.com/crystal-lang/shards/blob/v0.11.1/SPEC.md#crystal&lt;e4/&gt; を確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can declare/assign multiple variables at the same time by separating expressions with a comma (&lt;g1&gt;,&lt;/g1&gt;):</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175351Z" creationid="makenowjust" creationdate="20200422T175351Z">
        <seg>複数の式をカンマ記号 (&lt;g1&gt;,&lt;/g1&gt;) で区切って代入すると、複数の変数に対して同時に宣言/代入を行うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can declare/assign multiple variables at the same time by separating expressions with a comma (`,`):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T055429Z" creationid="hirofumiwakasugi" creationdate="20150902T055400Z">
        <seg>複数の式をカンマ記号 (`,`) で区切って代入すると、複数の変数に対して同時に宣言/代入を行うことができます (多重代入) 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can define &lt;g1&gt;local variables&lt;/g1&gt; without the need to specify their type:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T161955Z" creationid="makenowjust" creationdate="20200413T161955Z">
        <seg>型を指定することなく&lt;g1&gt;ローカル変数&lt;/g1&gt;を定義することができます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can define an operator for a type like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025208Z" creationid="hirofumiwakasugi" creationdate="20150909T025135Z">
        <seg>ある型に演算子を定義したい場合は以下のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can do this with `::`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T095249Z" creationid="hirofumiwakasugi" creationdate="20150905T093313Z">
        <seg>その場合は、`::` を使って型を指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can do this with `:`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061734Z" creationid="hirofumiwakasugi" creationdate="20160204T061734Z">
        <seg>その場合は、`:` を使って型を指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can download Crystal in a standalone &lt;g1&gt;.tar.gz&lt;/g1&gt; file with everything you need to get started.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T070703Z" creationid="makenowjust" creationdate="20200518T070703Z">
        <seg>Crystal をスタンドアローンの &lt;g1&gt;.tar.gz&lt;/g1&gt; ファイルからインストールすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can drop a quick question here to try and get it answered quickly, ask for guidance, or engage on a short discussion on a feature or project you are interested in.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T093352Z" creationid="makenowjust" creationdate="20200516T093352Z">
        <seg>些細な疑問をここに投稿すればすぐに解答が返ってくるかもしれません。他にもガイダンスに関する質問をしたり、関心のある機能やプロジェクトの小さな議論をしたりできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can easily create strings with embedded content, known as string interpolation.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162559Z" creationid="makenowjust" creationdate="20200413T162559Z">
        <seg>文字列埋め込み (string interpolation) を使うと、簡単に文字列に式を埋め込むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can encrypt your message &lt;a3&gt;via Keybase&lt;/a3&gt; (set recipient &lt;c4&gt;crystal&lt;/c4&gt;), or with our &lt;a5&gt;PGP key&lt;/a5&gt; (fingerprint &lt;c6&gt;5995 C83C D754 BE44 8164 1929 0961 7FD3 7CC0 6B54&lt;/c6&gt;) also available on &lt;a7&gt;Keybase server&lt;/a7&gt;, and send it to:" link_text="security@manas.tech" url="mailto:security@manas.tech" icon="security" %} {% include community_row.html title="Code Repository" divId="code" content="The Crystal official code repository is on GitHub, so any bugs you find in either the language, compiler or standard library should be reported here - and pull requests are always welcome." link_text="crystal-lang/crystal" url="https://github.com/crystal-lang/crystal/" icon="github" custom_icon=true %} {% include community_row.html title="Forum" divId="discuss" content="The Crystal Forum is the first to-go place for any general discussion.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20220525T091455Z" creationid="makenowjust" creationdate="20220525T090247Z">
        <seg>メッセージを &lt;a3&gt;Keybase 経由&lt;/a3&gt; (受取人を &lt;c4&gt;crystal&lt;/c4&gt; として)、もしくは &lt;a5&gt;PGP key&lt;/a5&gt; (フィンガープリントは &lt;c6&gt;5995 C83C D754 BE44 8164 1929 0961 7FD3 7CC0 6B54&lt;/c6&gt;) で暗号化できます。&lt;a7&gt;Keybase サーバー&lt;/a7&gt;も有効なので、それらを利用して送ってください。'
   link_text='security@manas.tech'
   url='mailto:security@manas.tech'
   icon='security' %}

{% include community_row.html
   title='コードリポジトリ'
   divId='code'
   content='Crystal 公式のコードリポジトリは GitHub にありあす。言語や標準ライブラリにバグを発見した場合、ここに報告してください。Pull Request も受け付けています。'
   link_text='crystal-lang/crystal'
   url='https://github.com/crystal-lang/crystal/'
   icon='github'
   custom_icon=true %}

{% include community_row.html
   title='フォーラム (英語)'
   divId='discuss'
   content='Crystal フォーラムは総合的な議論をする第一の場所です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can encrypt your message &lt;a3&gt;via Keybase&lt;/a3&gt;, or standard PGP (our fingerprint is &lt;c4&gt;5995 C83C D754 BE44 8164 1929 0961 7FD3 7CC0 6B54&lt;/c4&gt;)." link_text="security@manas.tech" url="mailto:security@manas.tech" icon="security" %} {% include community_row.html title="Code Repository" divId="code" content="The Crystal official code repository is on GitHub, so any bugs you find in either the language, compiler or standard library should be reported here - and pull requests are always welcome." link_text="crystal-lang/crystal" url="https://github.com/crystal-lang/crystal/" icon="github" custom_icon=true %} {% include community_row.html title="Forum" divId="discuss" content="The Crystal Forum is the first to-go place for any general discussion.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T092155Z" creationid="makenowjust" creationdate="20200516T091901Z">
        <seg>メッセージを &lt;a3&gt;Keybase&lt;/a3&gt; もしくは標準的な PGP (フィンガープリントは &lt;c4&gt;5995 C83C D754 BE44 8164 1929 0961 7FD3 7CC0 6B54&lt;/c4&gt;) で暗号化できます。"
   link_text="security@manas.tech"
   url="mailto:security@manas.tech"
   icon="security" %}

{% include community_row.html
   title="コードリポジトリ"
   divId="code"
   content="Crystal 公式のコードリポジトリは GitHub にありあす。言語や標準ライブラリにバグを発見した場合、ここに報告してください。Pull Request も受け付けています。"
   link_text="crystal-lang/crystal"
   url="https://github.com/crystal-lang/crystal/"
   icon="github"
   custom_icon=true %}

{% include community_row.html
   title="フォーラム (英語)"
   divId="discuss"
   content="Crystal フォーラムは総合的な議論をする第一の場所です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can find available options on the &lt;g2&gt;installation page at OBS&lt;/g2&gt;https://software.opensuse.org/download.html?project=devel%3Alanguages%3Acrystal&amp;package=crystal&lt;e3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210504T120411Z" creationid="makenowjust" creationdate="20210504T120411Z">
        <seg>有効なオプションの一覧は &lt;g2&gt;OBS のインストールページ&lt;/g2&gt;https://software.opensuse.org/download.html?project=devel%3Alanguages%3Acrystal&amp;package=crystal&lt;e3/&gt; で確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can find more detailed information at the &lt;g1&gt;announcement post&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T092823Z" creationid="makenowjust" creationdate="20210130T092823Z">
        <seg>より詳細な情報はこの&lt;g1&gt;告知記事&lt;/g1&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can go ahead and put a type restriction like `def initialize(@name : String)`, but that makes the code a bit more verbose and also less generic: everything will work just fine if you create `Person` instance with types that have the same *interface* as a `String`, as long as you use a `Person`'s name like if it were a `String`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T045640Z" creationid="hirofumiwakasugi" creationdate="20150905T044959Z">
        <seg>さらに一歩進んで、`def initialize(@name : String)` のように書くことで型を制約することも可能です。ただ、こうすると、コードが少し冗長になり、汎用性を欠いたものになってしまいます。`Person` の `name` を常に `String` として扱っている限り、`String` の「インターフェース」を持つ型で `Person` のインスタンスを作成すれば、すべては問題なく動作するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can invoke a **fixed subset** of methods on AST nodes at compile-time.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035116Z" creationid="hirofumiwakasugi" creationdate="20151001T034959Z">
        <seg>コンパイル時に、メソッドの **規定のサブセット** を AST ノードに対して実行することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can invoke a &lt;g1&gt;fixed subset&lt;/g1&gt; of methods on AST nodes at compile-time.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T214808Z" creationid="makenowjust" creationdate="20200509T214808Z">
        <seg>コンパイル時に、メソッドの&lt;g1&gt;既定のサブセット&lt;/g1&gt;を AST ノードに対して実行することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can invoke a method on the &lt;g1&gt;case&lt;/g1&gt;'s expression in a &lt;g2&gt;when&lt;/g2&gt; by using the implicit-object syntax:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093129Z" creationid="makenowjust" creationdate="20200424T093129Z">
        <seg>暗黙的なオブジェクト指定の構文を使って、&lt;g1&gt;case&lt;/g1&gt;の式に対して&lt;g2&gt;when&lt;/g2&gt;でメソッドを呼ぶことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can invoke a method on the `case`'s expression in a `when` by using the implicit-object syntax:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010100Z" creationid="hirofumiwakasugi" creationdate="20151001T010100Z">
        <seg>`case` 式に対してメソッドを実行することも可能です。このとき、`when` 節では暗黙的なオブジェクト指定の記法を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can invoke a superclass' method using &lt;g1&gt;super&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T103839Z" creationid="makenowjust" creationdate="20200504T103839Z">
        <seg>&lt;g1&gt;super&lt;/g1&gt; を使うと、スーパークラスのメソッドを実行することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can invoke a superclass' method using `super`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024551Z" creationid="hirofumiwakasugi" creationdate="20150910T024551Z">
        <seg>`super` を使うと、スーパークラスのメソッドを実行することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can invoke a superclass' method using `super`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025259Z" creationid="hirofumiwakasugi" creationdate="20151009T025259Z">
        <seg>`super` を使うと、スーパークラスのメソッドを実行することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can invoke the previously redefined method with &lt;g1&gt;previous_def&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T124832Z" creationid="makenowjust" creationdate="20200427T124832Z">
        <seg>そのとき&lt;g1&gt;previous_def&lt;/g1&gt;を使って以前に定義されたメソッドを呼び出すことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can invoke the previously redefined method with `previous_def`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T123321Z" creationid="hirofumiwakasugi" creationdate="20150904T123121Z">
        <seg>そのとき、`previous_def` を使うと以前に定義されたメソッドを実行することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can iterate a finite amount of times:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215158Z" creationid="makenowjust" creationdate="20200509T215158Z">
        <seg>有限回の繰り返しをすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can make a class generic based on one or more type variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T065621Z" creationid="hirofumiwakasugi" creationdate="20150912T061658Z">
        <seg>型変数を使うことで、クラスを汎用的なものにすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can make a type restriction take the type of an argument, or part of the type of an argument, using &lt;g1&gt;forall&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T135331Z" creationid="makenowjust" creationdate="20200430T135249Z">
        <seg>&lt;g1&gt;forall&lt;/g1&gt;を使うことで、型制約で引数の型や型の一部分を受け取ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can make this more evident by declaring a dummy block argument, indicated as a last argument prefixed with ampersand (&lt;g2&gt;&amp;&lt;/g2&gt;):</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184235Z" creationid="makenowjust" creationdate="20200505T184222Z">
        <seg>ダミーのブロック引数を宣言することで、上記をより明確に示すことも可能です。先頭がアンパサンド (&lt;g2&gt;&amp;&lt;/g2&gt;) の引数を最後の引数にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can make this more evident by declaring a dummy block argument, indicated as a last argument prefixed with ampersand (`&amp;`):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T014659Z" creationid="hirofumiwakasugi" creationdate="20150916T014318Z">
        <seg>ダミーのブロック引数を宣言することで、上記をより明確に示すことも可能です。先頭がアンパサンド (`&amp;`) の引数を最後の引数として設定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can make this more evident by declaring a dummy block parameter, indicated as a last parameter prefixed with ampersand (&lt;g2&gt;&amp;&lt;/g2&gt;):</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094216Z" creationid="makenowjust" creationdate="20210324T094216Z">
        <seg>ダミーのブロック引数を宣言することで、上記をより明確に示すこともできます。先頭がアンパサンド (&lt;g2&gt;&amp;&lt;/g2&gt;) の引数を最後の引数にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can omit the parentheses if the function doesn't have arguments (and omit them in the call as well):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T040635Z" creationid="hirofumiwakasugi" creationdate="20151005T040635Z">
        <seg>もし関数が引数を持たないものであれば、カッコを省略することができます (呼び出しの際にも同様に省略可能です) 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can omit the parentheses if the function doesn't have parameters (and omit them in the call as well):</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T093550Z" creationid="makenowjust" creationdate="20210324T093550Z">
        <seg>もし関数が引数を持たないものであれば、括弧を省略することができます (呼び出しの際にも同様です)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can override methods in a derived class:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024143Z" creationid="hirofumiwakasugi" creationdate="20150910T023945Z">
        <seg>派生クラスではメソッドをオーバーライドすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can read multiple columns at once:</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T235927Z" creationid="daiki" creationdate="20200705T235927Z">
        <seg>一度に複数の列を読み取ることが出来ます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can read this document from top to bottom, but it’s advisable to jump through sections because some concepts are interrelated and can’t be explained in isolation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072303Z" creationid="hirofumiwakasugi" creationdate="20150901T071512Z">
        <seg>本ドキュメントは基本的に最初から順番に読んでいけるように構成されています。ただ、コンセプトによっては、それぞれのコンセプトが相互に関連していて、どうしても単独では説明が難しいものがあります。そういった場合には、順番にこだわらず、別のセクションにジャンプしながら読み進めるのがよいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can see `@address` is `String?`, which is a short form notation of `String | Nil`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T054358Z" creationid="hirofumiwakasugi" creationdate="20150905T054244Z">
        <seg>`@address` が `String?` となっています。これは `String | Nil` の短縮表記です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can see that &lt;g1&gt;@pet&lt;/g1&gt; is &lt;g2&gt;Animal+&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T110555Z" creationid="makenowjust" creationdate="20200504T110555Z">
        <seg>&lt;g1&gt;@pet&lt;/g1&gt; が &lt;g2&gt;Animal+&lt;/g2&gt; になっているのが分かるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can see that `@pet` is `Animal+`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T032302Z" creationid="hirofumiwakasugi" creationdate="20150910T032302Z">
        <seg>`@pet` が `Animal+` になっているのがわかるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can set and get its properties:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T050433Z" creationid="hirofumiwakasugi" creationdate="20151007T050315Z">
        <seg>プロパティの設定、および参照が可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can specify the value of a member:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052946Z" creationid="hirofumiwakasugi" creationdate="20151007T052946Z">
        <seg>要素の値を指定することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can specify type restrictions in splats:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T084131Z" creationid="hirofumiwakasugi" creationdate="20150908T025928Z">
        <seg>スプラット展開でも型制約を利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can submit a pull request to this repository:
https://github.com/crystal-lang/crystal-book</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165157Z" creationid="makenowjust" creationdate="20200413T164423Z">
        <seg>Pull Requestはこれらのリポジトリに投稿してください:
(オリジナル) https://github.com/crystal-lang/crystal-book, (この翻訳) https://github.com/crystal-jp/ja.crystal-lang.org</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can subscribe to it and even see the past issues on the web." link_text="Crystal Weekly" url="http://www.crystalweekly.com/" icon="mail_outline" %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20220525T091817Z" creationid="makenowjust" creationdate="20220525T090739Z">
        <seg>購読はもちろん、ウェブ上でバックナンバーを見ることもできます。'
    link_text='Crystal Weekly'
    url='http://www.crystalweekly.com/'
    icon='mail_outline' %}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can subscribe to it and even see the past issues on the web." link_text="Crystal Weekly" url="http://www.crystalweekly.com/" icon="mail_outline" %} {% capture events_ical_url %}https://calendar.google.com/calendar/ical/{{ site.google_calendar_id | uri_escape }}/public/basic.ics{% endcapture %} {% include community_row.html title="Events" divId="events" content="There are ongoing Crystal meetups on multiple cities around the globe, as well as online meetups, and Crystal presentations on programming conferences - there’s a good chance that you’ll find a Crystal talk at your nearest Rubyconf.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T103543Z" creationid="makenowjust" creationdate="20200516T101315Z">
        <seg>Web 上で購読できて、過去の記事も確認できます。'
   link_text='Crystal Weekly'
   url='http://www.crystalweekly.com/'
   icon='mail_outline' %}

{% capture events_ical_url %}https://calendar.google.com/calendar/ical/{{ site.google_calendar_id | uri_escape }}/public/basic.ics{% endcapture %}

{% include community_row.html
   title='イベント'
   divId='events'
   content='世界中の複数の都市で継続的に開催されている Crystal ミートアップや、オンラインミートアップ、プログラミングカンファレンスでの Crystal プレゼンテーションなど、Rubyconf の近くで Crystal のトークを見つけられる可能性が高いです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can subscribe to it and even see the past issues on the web." link_text="Crystal Weekly" url="http://www.crystalweekly.com/" icon="mail_outline" %} {% capture events_ical_url %}https://calendar.google.com/calendar/ical/{{ site.google_calendar_id | uri_escape }}/public/basic.ics{% endcapture %} {% include community_row.html title="Events" divId="events" content='There are ongoing Crystal meetups on multiple cities around the globe, as well as online meetups, and Crystal presentations on programming conferences - there’s a good chance that you’ll find a Crystal talk at your nearest Rubyconf.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T104800Z" creationid="makenowjust" creationdate="20200518T104800Z">
        <seg>Web 上で購読できて、過去の記事も確認できます。'
   link_text='Crystal Weekly'
   url='http://www.crystalweekly.com/'
   icon='mail_outline' %}

{% capture events_ical_url %}https://calendar.google.com/calendar/ical/{{ site.google_calendar_id | uri_escape }}/public/basic.ics{% endcapture %}

{% include community_row.html
   title='イベント'
   divId='events'
   content='世界中の複数の都市で継続的に開催されている Crystal ミートアップや、オンラインミートアップ、プログラミングカンファレンスでの Crystal プレゼンテーションなど、Rubyconf の近くで Crystal のトークを見つけられる可能性が高いです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can test these flags with `ifdef`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043200Z" creationid="hirofumiwakasugi" creationdate="20150908T043119Z">
        <seg>フラグのチェックには `ifdef` を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can think an &lt;g1&gt;&amp;&amp;&lt;/g1&gt; as syntax sugar of an &lt;g2&gt;if&lt;/g2&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101627Z" creationid="makenowjust" creationdate="20200424T101627Z">
        <seg>したがって&lt;g1&gt;&amp;&amp;&lt;/g1&gt;は&lt;g2&gt;if&lt;/g2&gt;のシンタックスシュガーのように考えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can think an &lt;g1&gt;||&lt;/g1&gt; as syntax sugar of an &lt;g2&gt;if&lt;/g2&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101806Z" creationid="makenowjust" creationdate="20200424T101806Z">
        <seg>したがって&lt;g1&gt;||&lt;/g1&gt;は&lt;g2&gt;if&lt;/g2&gt;のシンタックスシュガーのように考えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can think an `&amp;&amp;` as syntax sugar of an `if`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052613Z" creationid="hirofumiwakasugi" creationdate="20150905T052613Z">
        <seg>したがって、`&amp;&amp;` を `if` のシンタックスシュガーとして利用することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can think an `||` as syntax sugar of an `if`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052658Z" creationid="hirofumiwakasugi" creationdate="20150905T052658Z">
        <seg>したがって、`||` を `if` のシンタックスシュガーとして利用することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can think of yourself being in the kitchen cooking: you chop an onion, put it to fry, and while it's being fried you chop a tomato, but you are not doing all of those things at the same time: you distribute your time between those tasks.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T064705Z" creationid="akiji" creationdate="20200428T053704Z">
        <seg>キッチンで料理をしているところを考えてみましょう。あなたは玉ねぎをきざんでフライパンに放り込み、それが炒め上がるまでの間にトマトを切ったりできます。しかし、すべての動作を同時に行うのではなく、それぞれのタスクにあなたの時間を割り振って処理することでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use &lt;g1&gt;break&lt;/g1&gt; to break out of a &lt;g2&gt;while&lt;/g2&gt; loop:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200417T115411Z" creationid="makenowjust" creationdate="20200417T115411Z">
        <seg>&lt;g2&gt;while&lt;/g2&gt;のループを抜けるためには&lt;g1&gt;break&lt;/g1&gt;を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use &lt;g1&gt;next&lt;/g1&gt; to try to execute the next iteration of a &lt;g2&gt;while&lt;/g2&gt; loop.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095815Z" creationid="makenowjust" creationdate="20200424T095742Z">
        <seg>&lt;g2&gt;while&lt;/g2&gt;のループで&lt;g1&gt;next&lt;/g1&gt;を使うと、次の繰り返しにジャンプすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use &lt;g1&gt;self.class&lt;/g1&gt; to restrict to the Person type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T161429Z" creationid="makenowjust" creationdate="20200429T161429Z">
        <seg>制約の対象を Person クラスにする場合には、&lt;g1&gt;self.class&lt;/g1&gt; を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use `&amp;&amp;`, `||` and `|`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043338Z" creationid="hirofumiwakasugi" creationdate="20150908T043338Z">
        <seg>`&amp;&amp;`/`||`/`|` を使うこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use `break` to break out of a `while` loop:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052238Z" creationid="hirofumiwakasugi" creationdate="20150905T052238Z">
        <seg>`while` のループを抜けるためには `break` を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use `next` to try to execute the next iteration of a `while` loop.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052314Z" creationid="hirofumiwakasugi" creationdate="20150905T052314Z">
        <seg>`while` のループで `next` を使うと、次の繰り返しにジャンプすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use `self.class` to restrict to the Person type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025304Z" creationid="hirofumiwakasugi" creationdate="20150908T025304Z">
        <seg>制約の対象を Person クラスにする場合には、`self.class` を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160120T094448Z" creationid="hirofumiwakasugi" creationdate="20150901T075458Z">
        <seg>バックスラッシュと「*u*」に続けて16進数で4つの数値を入力することでコードポイントを示すこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use a backslash followed by at most three digits to denote a code point written in octal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T075508Z" creationid="hirofumiwakasugi" creationdate="20150901T074606Z">
        <seg>バックスラッシュに続けて最大3つの数値を入力すると、8進数でコードポイントを指定することになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use a backslash to denote some characters:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T074550Z" creationid="hirofumiwakasugi" creationdate="20150901T074550Z">
        <seg>いくつかの文字はバックスラッシュを使って表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use a special array literal syntax with other types too, as long as they define an argless `new` method and a `&lt;&lt;` method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T143104Z" creationid="hirofumiwakasugi" creationdate="20150901T140211Z">
        <seg>配列が持つ特別なシンタックスを他の型で使うこともできます。ただし、引数のない `new` と `&lt;&lt;` メソッドが定義されている必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use a special hash literal syntax with other types too, as long as they define an argless `new` method and a `[]=` method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T143049Z" creationid="hirofumiwakasugi" creationdate="20150901T143030Z">
        <seg>ハッシュが持つ特別なシンタックスを他の型で使うこともできます。ただし、引数のない `new` と `[]=` メソッドが定義されている必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use an enum as a type in a &lt;g1&gt;fun&lt;/g1&gt; argument or &lt;g2&gt;struct&lt;/g2&gt; or &lt;g3&gt;union&lt;/g3&gt; members:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083910Z" creationid="makenowjust" creationdate="20200512T083910Z">
        <seg>&lt;g1&gt;fun&lt;/g1&gt; の引数や、&lt;g2&gt;struct&lt;/g2&gt; や &lt;g3&gt;union&lt;/g3&gt; のメンバとしても列挙型を利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use an enum as a type in a &lt;g1&gt;fun&lt;/g1&gt; parameter or &lt;g2&gt;struct&lt;/g2&gt; or &lt;g3&gt;union&lt;/g3&gt; members:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T093656Z" creationid="makenowjust" creationdate="20210324T093656Z">
        <seg>&lt;g1&gt;fun&lt;/g1&gt; の引数や、 &lt;g2&gt;struct&lt;/g2&gt; や &lt;g3&gt;union&lt;/g3&gt; のメンバとしても列挙型が利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use an enum as a type in a `fun` argument or `struct` or `union` members:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053347Z" creationid="hirofumiwakasugi" creationdate="20151007T053347Z">
        <seg>`fun` の引数や、`struct` と `union` のメンバーとしても enum を利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use code blocks, or simply &lt;g1&gt;blocks&lt;/g1&gt;, which are a very convenient way to reuse code and get some features from the functional world:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162532Z" creationid="makenowjust" creationdate="20200413T162532Z">
        <seg>&lt;g1&gt;ブロック&lt;/g1&gt;を使うと簡単にコードを再利用することができ、また、関数型の世界にあるいくつかの機能を利用することが可能になります</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use fresh variables with `%name`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044647Z" creationid="hirofumiwakasugi" creationdate="20151002T015934Z">
        <seg>そこで、`%name` でフレッシュな変数を利用することができるようになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use function types in C declarations:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024211Z" creationid="hirofumiwakasugi" creationdate="20151008T024206Z">
        <seg>C の宣言の中で関数型を利用することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use it in your own project to make it familiar to other developers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010145Z" creationid="hirofumiwakasugi" creationdate="20151010T010145Z">
        <seg>自分のプロジェクトでもこのスタイルを利用することで、他の開発者に親しみやすいものにすることができるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the &lt;g2&gt;fraction_digits&lt;/g2&gt; named argument to choose between 0, 3, 6, 9 precision digits.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T152116Z" creationid="makenowjust" creationdate="20200610T152038Z">
        <seg>より細かな精度が必要な場合は &lt;g2&gt;fraction_digits&lt;/g2&gt; という名前付き引数に 0. 3, 6, 9 という精度の桁数を指定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the method &lt;g2&gt;&lt;g3&gt;ASTNode#id&lt;/g3&gt;&lt;/g2&gt; in these cases, where you just need an identifier.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T214714Z" creationid="makenowjust" creationdate="20200509T214714Z">
        <seg>こういった、識別子を必要とする場合には、&lt;g2&gt;&lt;g3&gt;ASTNode#id&lt;/g3&gt;&lt;/g2&gt; を利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the method &lt;g2&gt;&lt;g3&gt;ASTNode#id&lt;/g3&gt;&lt;/g2&gt;https://crystal-lang.org/api/Crystal/Macros/ASTNode.html#id%3AMacroId-instance-method&lt;e4/&gt; in these cases, where you just need an identifier.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T090148Z" creationid="makenowjust" creationdate="20200518T090148Z">
        <seg>こういった、識別子を必要とする場合には &lt;g2&gt;&lt;g3&gt;ASTNode#id&lt;/g3&gt;&lt;/g2&gt;https://crystal-lang.org/api/Crystal/Macros/ASTNode.html#id%3AMacroId-instance-method&lt;e4/&gt; が利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the method &lt;g2&gt;&lt;g3&gt;ASTNode#id&lt;/g3&gt;&lt;/g2&gt;https://crystal-lang.org/api/latest/Crystal/Macros/ASTNode.html#id%3AMacroId-instance-method&lt;e4/&gt; in these cases, where you just need an identifier.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T080233Z" creationid="makenowjust" creationdate="20210324T080233Z">
        <seg>こういった、識別子を必要とする場合には &lt;g2&gt;&lt;g3&gt;ASTNode#id&lt;/g3&gt;&lt;/g2&gt;https://crystal-lang.org/api/latest/Crystal/Macros/ASTNode.html#id%3AMacroId-instance-method&lt;e4/&gt; が利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the method `ASTNode#id` in these cases, where you just need an identifier.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T034952Z" creationid="hirofumiwakasugi" creationdate="20151001T021114Z">
        <seg>こういった、識別子を必要とする場合には、 `ASTNode#id` を利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can, as always, define a constructor for your exception or just use the default one.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011857Z" creationid="hirofumiwakasugi" creationdate="20150907T011822Z">
        <seg>通常のクラスのように、自分でコンストラクタを定義することもできますし、デフォルトのコンストラクタを利用することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can, of course, use &lt;g1&gt;receive&lt;/g1&gt; inside a spawned fiber:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T151056Z" creationid="akiji" creationdate="20200429T134352Z">
        <seg>もちろん、生成されたファイバ内で&lt;g1&gt;receive&lt;/g1&gt; を使うことも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You cannot access the call arguments during compile-time.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T080838Z" creationid="makenowjust" creationdate="20210324T080838Z">
        <seg>コンパイル時にそれらにアクセスすることはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You cannot access their compile-time value.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T223800Z" creationid="makenowjust" creationdate="20200509T223800Z">
        <seg>コンパイル時にそれらにアクセスすることはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You create an instance of a class by invoking &lt;g1&gt;new&lt;/g1&gt; on that class:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T102449Z" creationid="makenowjust" creationdate="20200427T102449Z">
        <seg>クラスのインスタンスを作成するには、クラスに対して &lt;g1&gt;new&lt;/g1&gt; メソッドを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You create an instance of a class by invoking `new` on that class:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T022301Z" creationid="hirofumiwakasugi" creationdate="20150904T022301Z">
        <seg>クラスのインスタンスを作成するには、クラスに対して `new` メソッドを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You declare a class like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T022024Z" creationid="hirofumiwakasugi" creationdate="20150904T022024Z">
        <seg>以下のようにクラスを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You generally never invoke &lt;g3&gt;allocate&lt;/g3&gt;, as it is &lt;g4&gt;unsafe&lt;/g4&gt;, but that's the reason why &lt;g5&gt;new&lt;/g5&gt; and &lt;g6&gt;initialize&lt;/g6&gt; are related.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T122230Z" creationid="makenowjust" creationdate="20200427T122230Z">
        <seg>&lt;g3&gt;allocate&lt;/g3&gt;は&lt;g4&gt;安全でない&lt;/g4&gt;メソッドなので、一般的には直接呼び出すこと無いでしょう。&lt;g5&gt;new&lt;/g5&gt; と &lt;g6&gt;initialize&lt;/g6&gt; がこういった関係になっているのは、そのような理由です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You generally never invoke `allocate`, as it is [unsafe](unsafe.html), but that's the reason why `new` and `initialize` are related.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T120105Z" creationid="hirofumiwakasugi" creationdate="20150904T061148Z">
        <seg>`allocate` は「[安全でない (unsafe)](unsafe.html)」ため、一般的には自分で実行することはありません。`new` と `initialize` がこういった関係性になっているのはこのことが理由です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You have questions about the use of Crystal brand and logos.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T090358Z" creationid="makenowjust" creationdate="20200516T090358Z">
        <seg>Crystal のブランドやロゴの使い方に質問がある場合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You may find a list of &lt;g1&gt;available colors&lt;/g1&gt; and &lt;g2&gt;text decorations&lt;/g2&gt; in the &lt;g3&gt;API documentation&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T184712Z" creationid="makenowjust" creationdate="20200413T184712Z">
        <seg>&lt;g1&gt;利用できる色&lt;/g1&gt;や&lt;g2&gt;テキストの装飾&lt;/g2&gt;の一覧は&lt;g3&gt;API ドキュメント&lt;/g3&gt;で確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You may find a list of &lt;g1&gt;available colors&lt;/g1&gt; and &lt;g2&gt;text decorations&lt;/g2&gt; in the &lt;g3&gt;API documentation&lt;/g3&gt;https://crystal-lang.org/api/latest/Colorize.html&lt;e4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093954Z" creationid="makenowjust" creationdate="20200518T093954Z">
        <seg>&lt;g1&gt;利用できる色&lt;/g1&gt;や&lt;g2&gt;テキストの装飾&lt;/g2&gt;の一覧は &lt;g3&gt;API ドキュメント&lt;/g3&gt;https://crystal-lang.org/api/latest/Colorize.html&lt;e4/&gt;で確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You may use &lt;g1&gt;then&lt;/g1&gt; after the &lt;g2&gt;when&lt;/g2&gt; condition to place the body on a single line.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093220Z" creationid="makenowjust" creationdate="20200424T093220Z">
        <seg>&lt;g2&gt;when&lt;/g2&gt;の条件のあとに&lt;g1&gt;then&lt;/g1&gt;を置くことで、1行で本体を書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You might also want to read the &lt;g2&gt;contributing guide&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T065249Z" creationid="makenowjust" creationdate="20200518T065015Z">
        <seg>また、&lt;g2&gt;コントリビューティングガイド&lt;/g2&gt;にも目を通しておくとよいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You might also want to read the &lt;g2&gt;contributing guide&lt;/g2&gt;https://github.com/crystal-lang/crystal/blob/master/CONTRIBUTING.md&lt;e4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093206Z" creationid="makenowjust" creationdate="20200518T093206Z">
        <seg>また、&lt;g2&gt;コントリビューションガイド (英語)&lt;/g2&gt;https://github.com/crystal-lang/crystal/blob/master/CONTRIBUTING.md&lt;e4/&gt; にも目を通しておくとよいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You might also want to read the [contributing guide](https://github.com/manastech/crystal/blob/master/Contributing.md).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T061648Z" creationid="hirofumiwakasugi" creationdate="20150831T060755Z">
        <seg>また、[コントリビューティング・ガイド](https://github.com/manastech/crystal/blob/master/Contributing.md) にも目を通しておくとよいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You might need to &lt;g9&gt;require "compress/gzip"&lt;/g9&gt; and change some constants here or there.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T145937Z" creationid="makenowjust" creationdate="20200610T145937Z">
        <seg>&lt;g9&gt;require "compress/gzip"&lt;/g9&gt; として、これらの定数を変更する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You might notice that &lt;g1&gt;Log.setup_from_env&lt;/g1&gt; is now using a single environment variable as input.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T153449Z" creationid="makenowjust" creationdate="20200610T153436Z">
        <seg>&lt;g1&gt;Log.setup_from_env&lt;/g1&gt; が1つの環境変数を受け取って動作するようになったことにも注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You might notice that the &lt;g1&gt;Digest&lt;/g1&gt; types got some refactors and small method renames.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T120026Z" creationid="makenowjust" creationdate="20200610T145648Z">
        <seg>&lt;g1&gt;Digest&lt;/g1&gt; 型がリファクタリングされて、いくつかのメソッドの名前が変更されたことに注意する必要があるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You might want to take a look at the available configuration flags first:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111613Z" creationid="makenowjust" creationdate="20200518T111613Z">
        <seg>まずはじめに次の設定フラグを有効にする必要があるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You must copy this &lt;g1&gt;.o&lt;/g1&gt; file to that system and execute those commands.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T024218Z" creationid="makenowjust" creationdate="20200511T024218Z">
        <seg>&lt;g1&gt;.o&lt;/g1&gt; ファイルを対象のシステム上にコピーし、上記のコマンドを実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You must copy this `.o` file to that system and execute those commands.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T045705Z" creationid="hirofumiwakasugi" creationdate="20150909T045636Z">
        <seg>`.o` ファイルを対象のシステム上にコピーし、上記のコマンドを実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You must escape macro expressions of the inner macro by preceding them with a backslash character "\\" to prevent them from being evaluated by the outer macro.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220314Z" creationid="makenowjust" creationdate="20200509T220314Z">
        <seg>このとき、内側のマクロが外側のマクロによって評価されるのを防ぐため、バックラッシュでエスケープする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You program by invoking &lt;g1&gt;methods&lt;/g1&gt; (or sending messages) to objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162424Z" creationid="makenowjust" creationdate="20200413T162424Z">
        <seg>オブジェクトに対して&lt;g1&gt;メソッド&lt;/g1&gt;を実行 (またはメッセージを送信) することでプログラムを構築します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You raise exceptions by invoking a top-level &lt;g1&gt;raise&lt;/g1&gt; method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103143Z" creationid="makenowjust" creationdate="20200506T103143Z">
        <seg>例外を発生させるにはトップレベルの &lt;g1&gt;raise&lt;/g1&gt; メソッドを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You raise exceptions by invoking a top-level `raise` method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011037Z" creationid="hirofumiwakasugi" creationdate="20150907T010852Z">
        <seg>例外を発生させるにはトップレベルの `raise` メソッドを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You shall notice better error messages when a dependency’s &lt;g1&gt;shard.yml&lt;/g1&gt; file triggers an error thanks to &lt;g2&gt;#408&lt;/g2&gt;https://github.com/crystal-lang/shards/pull/408&lt;e3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200809T105234Z" creationid="makenowjust" creationdate="20200809T105234Z">
        <seg>依存関係の &lt;g1&gt;shard.yml&lt;/g1&gt; ファイルがエラーを起こしたときに、より適切なエラーメッセージが表示されるようになりました。この改善は &lt;g2&gt;#408&lt;/g2&gt;https://github.com/crystal-lang/shards/pull/408&lt;e3/&gt; によるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should also be careful when working on mutable types inside of the struct:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T173236Z" creationid="makenowjust" creationdate="20200505T173236Z">
        <seg>構造体の中に変更される (mutable) 型を使った場合の挙動についても注意の必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should also install &lt;g1&gt;shards&lt;/g1&gt;, Crystal's dependency manager (see &lt;g2&gt;The Shards command&lt;/g2&gt;https://crystal-lang.org/reference/the_shards_command/&lt;e4/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200520T141324Z" creationid="makenowjust" creationdate="20200518T101614Z">
        <seg>くわえて &lt;g1&gt;shards&lt;/g1&gt; もインストールしてください。これは Crystal の依存関係マネージャです (&lt;g2&gt;shards コマンド&lt;/g2&gt;https://ja.crystal-lang.org/reference/the_shards_command/&lt;e4/&gt;参照)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should be able to install the latest version from homebrew.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111934Z" creationid="makenowjust" creationdate="20200518T111934Z">
        <seg>Homebrew で最新のバージョンの Crystal をインストールすることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should use this strategy in your API definitions too.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T022717Z" creationid="akiji" creationdate="20200430T130312Z">
        <seg>こうした戦略をあなた自身のAPI定義でも使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You shouldn't always use a struct, though.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091202Z" creationid="akiji" creationdate="20200430T132034Z">
        <seg>しかし、いつでも構造体を使えば良いわけではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You shouldn't just concatenate these strings with &lt;g1&gt;String#+(String)&lt;/g1&gt; but rather use &lt;g2&gt;string interpolation&lt;/g2&gt; which allows to embed expressions into a string literal: &lt;g3&gt;"Hello, #{name}"&lt;/g3&gt; is better than &lt;g4&gt;"Hello, " +  name.to_s&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T130907Z" creationid="akiji" creationdate="20200430T130907Z">
        <seg>このような文字列の構築では、&lt;g1&gt;String#+(String)&lt;/g1&gt;メソッドによって文字列を結合するのではなく、文字列リテラルの中に式を埋め込める&lt;g2&gt;文字列の式展開&lt;/g2&gt;を使用しましょう。 &lt;g3&gt;"Hello, #{name}"&lt;/g3&gt; の方が、&lt;g4&gt;"Hello, " +  name.to_s&lt;/g4&gt;よりも良い結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use &lt;g1&gt;{% if condition %}&lt;/g1&gt; ... &lt;g2&gt;{% end %}&lt;/g2&gt; to conditionally generate code:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215023Z" creationid="makenowjust" creationdate="20200509T215023Z">
        <seg>&lt;g1&gt;{% if condition %}&lt;/g1&gt; ... &lt;g2&gt;{% end %}&lt;/g2&gt; を使うことで、条件に応じてコードを生成することが可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use &lt;g1&gt;{{...}}&lt;/g1&gt; to paste, or interpolate, an AST node, as in the above example.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T214615Z" creationid="makenowjust" creationdate="20200509T214615Z">
        <seg>前述した例にもあったように、AST ノードを貼り付ける、もしくは埋め込むには &lt;g1&gt;{{...}}&lt;/g1&gt; を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use `{% if condition %}` ... `{% end %}` to conditionally generate code:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035951Z" creationid="hirofumiwakasugi" creationdate="20151001T035903Z">
        <seg>`{% if condition %}` ... `{% end %}` を使うことで、条件に応じてコードを生成することが可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use `{{...}}` to paste, or interpolate, an AST node, as in the above example.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T021047Z" creationid="hirofumiwakasugi" creationdate="20151001T020723Z">
        <seg>前述した例にもあったように、AST ノードを貼り付け/埋め込みには `{{...}}` を使います。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You want permission to sell Crystal merchandise.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T090251Z" creationid="makenowjust" creationdate="20200516T090251Z">
        <seg>Crystal の商品を売る許可が欲しい場合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You want to use these logos for commercial purposes.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T090303Z" creationid="makenowjust" creationdate="20200516T090303Z">
        <seg>商用目的でロゴを使いたい場合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You will also need LLVM 3.5 or 3.6 present in the path.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021431Z" creationid="hirofumiwakasugi" creationdate="20151009T021431Z">
        <seg>また、あわせて LLVM 3.5 または 3.6 も必要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You will also need LLVM 3.5 present in the path.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060327Z" creationid="hirofumiwakasugi" creationdate="20150831T060327Z">
        <seg>また、あわせて LLVM 3.5 も必要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You will need to call &lt;g1&gt;rs.read(T)&lt;/g1&gt; with the type &lt;g2&gt;T&lt;/g2&gt; you expect to get from the database.</seg>
      </tuv>
      <tuv lang="JA" changeid="daiki" changedate="20200705T235636Z" creationid="daiki" creationdate="20200705T235636Z">
        <seg>データベースから取得するとされるタイプ &lt;g2&gt;T&lt;/g2&gt; と共に &lt;g1&gt;rs.read(T)&lt;/g1&gt; を呼び出す必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You will notice that the &lt;g2&gt;shard.lock&lt;/g2&gt; has a new version format with some additions.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T141112Z" creationid="makenowjust" creationdate="20200610T141112Z">
        <seg>これによって、&lt;g2&gt;shard.lock&lt;/g2&gt; がいくつかの追加の新しいバージョンのフォーマットを持つことに気付くかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You will see many breaking-changes in this release.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T141554Z" creationid="makenowjust" creationdate="20200610T141554Z">
        <seg>このリリースにはいくつもの破壊的変更が含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You wouldn't want the above to be:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184531Z" creationid="makenowjust" creationdate="20200505T184531Z">
        <seg>上記を次のようにすることはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your &lt;g1&gt;shard.yml&lt;/g1&gt;'s &lt;g2&gt;name&lt;/g2&gt; property should be concise and descriptive.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T162414Z" creationid="makenowjust" creationdate="20200527T162414Z">
        <seg>&lt;g1&gt;shard.yml&lt;/g1&gt;ので &lt;g2&gt;name&lt;/g2&gt; プロパティは簡潔かつ説明的なものにすべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Yukihiro "Matz" Matsumoto</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084037Z" creationid="makenowjust" creationdate="20200516T084037Z">
        <seg>Yukihiro "Matz" Matsumoto</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Zero</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052629Z" creationid="hirofumiwakasugi" creationdate="20151007T052629Z">
        <seg>Zero</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Zero,</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053245Z" creationid="hirofumiwakasugi" creationdate="20151007T053245Z">
        <seg>Zero,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](&lt;LINK-TO-YOUR-DOCUMENTATION&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T160735Z" creationid="makenowjust" creationdate="20200527T160735Z">
        <seg>[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](&lt;LINK-TO-YOUR-DOCUMENTATION&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>["a", "b"].join(",") { |s| s.upcase }</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185651Z" creationid="makenowjust" creationdate="20200505T185651Z">
        <seg>["a", "b"].join(",") { |s| s.upcase }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>["a", "b"].join(",", &amp;.upcase)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185639Z" creationid="makenowjust" creationdate="20200505T185639Z">
        <seg>["a", "b"].join(",", &amp;.upcase)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>["i", "o"].join(",", &amp;.upcase(Unicode::CaseOptions::Turkic))</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185746Z" creationid="makenowjust" creationdate="20200505T185746Z">
        <seg>["i", "o"].join(",", &amp;.upcase(Unicode::CaseOptions::Turkic))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>[1, 2, 3]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T133855Z" creationid="hirofumiwakasugi" creationdate="20150911T133855Z">
        <seg>[1, 2, 3]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>[1, 2, 3]         # =&gt; Array(Int32)
[1, "hello", 'x'] # =&gt; Array(Int32 | String | Char)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173036Z" creationid="makenowjust" creationdate="20200420T173036Z">
        <seg>[1, 2, 3]         # =&gt; Array(Int32)
[1, "hello", 'x'] # =&gt; Array(Int32 | String | Char)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>[Bool](http://crystal-lang.org/api/Bool.html) has only two possible values: `true` and `false`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022703Z" creationid="hirofumiwakasugi" creationdate="20150901T051015Z">
        <seg>真偽値 ([Bool](http://crystal-lang.org/api/Bool.html)) には2つだけ値が存在します。それは `true` と `false` です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>[] of Int32 # =&gt; Array(Int32).new</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173303Z" creationid="makenowjust" creationdate="20200420T173303Z">
        <seg>[] of Int32 # =&gt; Array(Int32).new</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>\"Or</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T103745Z" creationid="makenowjust" creationdate="20200516T091415Z">
        <seg>Or</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>\"crystal-pgp-key.txt\"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200617T112023Z" creationid="makenowjust" creationdate="20200617T110803Z">
        <seg>crystal-pgp-key.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>\"http://irclog.crystal-lang.org\"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T103743Z" creationid="makenowjust" creationdate="20200516T091416Z">
        <seg>http://irclog.crystal-lang.org</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>\"https://irclog.crystal-lang.org\"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T144256Z" creationid="makenowjust" creationdate="20210726T144256Z">
        <seg>\"https://irclog.crystal-lang.org\"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>\"https://keybase.io/crystal/pgp_keys.asc\"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200617T112025Z" creationid="makenowjust" creationdate="20200617T110804Z">
        <seg>https://keybase.io/crystal/pgp_keys.asc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>\"https://keybase.io/crystal\"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T103656Z" creationid="makenowjust" creationdate="20200516T091412Z">
        <seg>https://keybase.io/crystal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>\"https://keybase.io/encrypt\"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200617T112022Z" creationid="makenowjust" creationdate="20200617T111601Z">
        <seg>https://keybase.io/encrypt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>\"ircs://irc.libera.chat:6697#crystal-lang\"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T144255Z" creationid="makenowjust" creationdate="20210726T144255Z">
        <seg>\"ircs://irc.libera.chat:6697#crystal-lang\"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>\"mailto:crystal@manas.tech\"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T103659Z" creationid="makenowjust" creationdate="20200516T091413Z">
        <seg>mailto:crystal@manas.tech</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>\{% else %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220328Z" creationid="makenowjust" creationdate="20200509T220328Z">
        <seg>\{% else %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>\{% end %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220321Z" creationid="makenowjust" creationdate="20200509T220321Z">
        <seg>\{% end %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>\{% if greeting == "hola" %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220318Z" creationid="makenowjust" creationdate="20200509T220318Z">
        <seg>\{% if greeting == "hola" %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>\{% name = {{name.stringify}} %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220559Z" creationid="makenowjust" creationdate="20200509T220559Z">
        <seg>\{% name = {{name.stringify}} %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>^</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T160140Z" creationid="makenowjust" creationdate="20200429T160140Z">
        <seg>^</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>^
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042925Z" creationid="hirofumiwakasugi" creationdate="20150907T042925Z">
        <seg>^
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>^---------
Error: undefined method 'upper_case' for Nil (compile-time type is (String | Nil))</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182455Z" creationid="makenowjust" creationdate="20200413T182455Z">
        <seg>^---------
Error: undefined method 'upper_case' for Nil (compile-time type is (String | Nil))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>^~~</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043748Z" creationid="hirofumiwakasugi" creationdate="20150905T043748Z">
        <seg>^~~</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>^~~~~~
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043751Z" creationid="hirofumiwakasugi" creationdate="20150905T043751Z">
        <seg>^~~~~~
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>_ = 1     # no effect
_ = "123" # no effect
puts _    # Error: can't read from _</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T095254Z" creationid="makenowjust" creationdate="20210324T095059Z">
        <seg>_ = 1     # 副作用なし
_ = "123" # 副作用なし
puts _    # Error: can't read from _</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>__Constants__ are screaming-cased.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010504Z" creationid="hirofumiwakasugi" creationdate="20151010T010453Z">
        <seg>__定数__はすべて大文字とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>__Method names__ are underscore-cased.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010308Z" creationid="hirofumiwakasugi" creationdate="20151010T010240Z">
        <seg>__メソッド名__はアンダースコア区切りとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>__Type names__ are camelcased.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010223Z" creationid="hirofumiwakasugi" creationdate="20151010T010223Z">
        <seg>__型の名前__はキャメルケースとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>__Variable names__ are underscore-cased.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010356Z" creationid="hirofumiwakasugi" creationdate="20151010T010356Z">
        <seg>__変数名__はアンダースコア区切りとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`@type` becomes the extending type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014354Z" creationid="hirofumiwakasugi" creationdate="20151002T014354Z">
        <seg>`@type` は extend する側の型になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`@type` becomes the including type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014244Z" creationid="hirofumiwakasugi" creationdate="20151002T013611Z">
        <seg>`@type` はインクルードする側の型になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`@type` becomes the inherited type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T013521Z" creationid="hirofumiwakasugi" creationdate="20151002T012819Z">
        <seg>`@type` は継承されたサブクラスの型になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Int32 | String` is read "Int32 or String".</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010534Z" creationid="hirofumiwakasugi" creationdate="20151009T010534Z">
        <seg>`Int32 | String` は「Int32 または String」と読みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Lib` names are prefixed with `Lib`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011011Z" creationid="hirofumiwakasugi" creationdate="20151010T010930Z">
        <seg>ライブラリ (`Lib`) の名前は先頭に `Lib` をつけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T052826Z" creationid="hirofumiwakasugi" creationdate="20150831T052826Z">
        <seg>```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
$ ./some_program
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072039Z" creationid="hirofumiwakasugi" creationdate="20150901T072039Z">
        <seg>```
$ ./some_program
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
$ crystal
Usage: crystal [command] [switches] [program file] [--] [arguments]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072215Z" creationid="hirofumiwakasugi" creationdate="20150901T072215Z">
        <seg>```
$ crystal
Usage: crystal [command] [switches] [program file] [--] [arguments]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
$ crystal build --help
Usage: crystal build [options] [programfile] [--] [arguments]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072225Z" creationid="hirofumiwakasugi" creationdate="20150901T072225Z">
        <seg>```
$ crystal build --help
Usage: crystal build [options] [programfile] [--] [arguments]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
$ crystal build some_program.cr
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072032Z" creationid="hirofumiwakasugi" creationdate="20150901T072032Z">
        <seg>```
$ crystal build some_program.cr
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
$ crystal build some_program.cr --release
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072050Z" creationid="hirofumiwakasugi" creationdate="20150901T072050Z">
        <seg>```
$ crystal build some_program.cr --release
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
$ crystal init lib MyCoolLib</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072145Z" creationid="hirofumiwakasugi" creationdate="20150901T072145Z">
        <seg>```
$ crystal init lib MyCoolLib</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
$ crystal run some_program.cr
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072015Z" creationid="hirofumiwakasugi" creationdate="20150901T072015Z">
        <seg>```
$ crystal run some_program.cr
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
$ crystal some_program.cr
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T071953Z" creationid="hirofumiwakasugi" creationdate="20150901T071953Z">
        <seg>```
$ crystal some_program.cr
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
$ xcode-select --install
$ xcode-select --switch /Library/Developer/CommandLineTools
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061245Z" creationid="hirofumiwakasugi" creationdate="20160204T061245Z">
        <seg>```
$ xcode-select --install
$ xcode-select --switch /Library/Developer/CommandLineTools
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
* You can define [local variables](../syntax_and_semantics/local_variables.html) without the need to specify their type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072614Z" creationid="hirofumiwakasugi" creationdate="20150901T072614Z">
        <seg>```
* 型を指定することなく[ローカル変数](../syntax_and_semantics/local_variables.html)を定義することができます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
+- class MyBox</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T055707Z" creationid="hirofumiwakasugi" creationdate="20150912T055707Z">
        <seg>```
+- class MyBox</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
+- generic class MyBox(T)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063039Z" creationid="hirofumiwakasugi" creationdate="20150912T063039Z">
        <seg>```
+- generic class MyBox(T)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
- class Object</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135041Z" creationid="hirofumiwakasugi" creationdate="20150904T135041Z">
        <seg>```
- class Object</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
- project</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155851Z" creationid="hirofumiwakasugi" creationdate="20150905T155851Z">
        <seg>```
- project</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
Error in foo.cr:14: instantiating 'Person:Class#new(Int32)'</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043747Z" creationid="hirofumiwakasugi" creationdate="20150905T043747Z">
        <seg>```
Error in foo.cr:14: instantiating 'Person:Class#new(Int32)'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
Error in foo.cr:6: instantiating 'add(Bool, Bool)'</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042908Z" creationid="hirofumiwakasugi" creationdate="20150907T042908Z">
        <seg>```
Error in foo.cr:6: instantiating 'add(Bool, Bool)'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
The status information from the child process is stored in the object
that status_ptr points to, unless status_ptr is a null pointer.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043702Z" creationid="hirofumiwakasugi" creationdate="20151005T043408Z">
        <seg>```
status_ptr が指すオブジェクトに保持されている子プロセスからのステータス情報
(ただし status_ptr が NULL ポインタでない場合に限る)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
apt-key adv --keyserver keys.gnupg.net --recv-keys 09617FD37CC06B54
echo "deb http://dist.crystal-lang.org/apt crystal main" &gt; /etc/apt/sources.list.d/crystal.list
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T053122Z" creationid="hirofumiwakasugi" creationdate="20150831T053122Z">
        <seg>```
apt-key adv --keyserver keys.gnupg.net --recv-keys 09617FD37CC06B54
echo "deb http://dist.crystal-lang.org/apt crystal main" &gt; /etc/apt/sources.list.d/crystal.list
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
brew install crystal-lang --with-llvm
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055354Z" creationid="hirofumiwakasugi" creationdate="20150831T055354Z">
        <seg>```
brew install crystal-lang --with-llvm
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
brew tap manastech/crystal
brew update
brew install crystal-lang
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055251Z" creationid="hirofumiwakasugi" creationdate="20150831T055251Z">
        <seg>```
brew tap manastech/crystal
brew update
brew install crystal-lang
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
brew update
brew install crystal-lang
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T024217Z" creationid="hirofumiwakasugi" creationdate="20151102T024217Z">
        <seg>```
brew update
brew install crystal-lang
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
git clone https://github.com/manastech/crystal.git
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060510Z" creationid="hirofumiwakasugi" creationdate="20150831T060510Z">
        <seg>```
git clone https://github.com/manastech/crystal.git
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
ld: library not found for -levent
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061025Z" creationid="hirofumiwakasugi" creationdate="20160204T061025Z">
        <seg>```
ld: library not found for -levent
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
name, age, source = "Crystal,1,github".split(",")</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060038Z" creationid="hirofumiwakasugi" creationdate="20150902T060038Z">
        <seg>```
name, age, source = "Crystal,1,github".split(",")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
person = Person.new
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T022302Z" creationid="hirofumiwakasugi" creationdate="20150904T022302Z">
        <seg>```
person = Person.new
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
rpm --import http://dist.crystal-lang.org/rpm/RPM-GPG-KEY</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055109Z" creationid="hirofumiwakasugi" creationdate="20150831T055109Z">
        <seg>```
rpm --import http://dist.crystal-lang.org/rpm/RPM-GPG-KEY</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
sudo apt-get install crystal
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T053130Z" creationid="hirofumiwakasugi" creationdate="20150831T053130Z">
        <seg>```
sudo apt-get install crystal
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
sudo apt-get update
sudo apt-get install crystal
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T053324Z" creationid="hirofumiwakasugi" creationdate="20150831T053324Z">
        <seg>```
sudo apt-get update
sudo apt-get install crystal
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
sudo pacman -S crystal
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021541Z" creationid="hirofumiwakasugi" creationdate="20151009T021541Z">
        <seg>```
sudo pacman -S crystal
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
sudo yum install crystal
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055112Z" creationid="hirofumiwakasugi" creationdate="20150831T055112Z">
        <seg>```
sudo yum install crystal
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
sudo yum update crystal
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055113Z" creationid="hirofumiwakasugi" creationdate="20150831T055113Z">
        <seg>```
sudo yum update crystal
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>``````crystal
# Returns the number of horns this unicorn has.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140134Z" creationid="hirofumiwakasugi" creationdate="20151010T140134Z">
        <seg>``````crystal
# Returns the number of horns this unicorn has.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>``````crystal
# ```
# unicorn = Unicorn.new
# unicorn.speak
# ```
``````</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140804Z" creationid="hirofumiwakasugi" creationdate="20151010T140804Z">
        <seg>``````crystal
# ```
# unicorn = Unicorn.new
# unicorn.speak
# ```
``````</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>``````crystal
# ```text
# "I'm a unicorn"
# ```
``````</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T141211Z" creationid="hirofumiwakasugi" creationdate="20151010T141211Z">
        <seg>``````crystal
# ```text
# "I'm a unicorn"
# ```
``````</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`````crystal
# A unicorn is a **legendary animal** (see the `Legendary` module) that has been
# described since antiquity as a beast with a large, spiraling horn projecting
# from its forhead.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144049Z" creationid="hirofumiwakasugi" creationdate="20151010T144049Z">
        <seg>`````crystal
# A unicorn is a **legendary animal** (see the `Legendary` module) that has been
# described since antiquity as a beast with a large, spiraling horn projecting
# from its forhead.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```bash
$ uname -m -s
Darwin x86_64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043008Z" creationid="hirofumiwakasugi" creationdate="20150908T043008Z">
        <seg>```bash
$ uname -m -s
Darwin x86_64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```bash
cc your_program.o -o your_program -lpcre -lrt -lm -lgc -lunwind
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T045614Z" creationid="hirofumiwakasugi" creationdate="20150909T045614Z">
        <seg>```bash
cc your_program.o -o your_program -lpcre -lrt -lm -lgc -lunwind
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```bash
crystal build your_program.cr --cross-compile "Linux x86_64" --target "x86_64-unknown-linux-gnu"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T045412Z" creationid="hirofumiwakasugi" creationdate="20150909T045412Z">
        <seg>```bash
crystal build your_program.cr --cross-compile "Linux x86_64" --target "x86_64-unknown-linux-gnu"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
"\"" # double quote
"\\" # backslash
"\e" # escape
"\f" # form feed
"\n" # newline
"\r" # carriage return
"\t" # tab
"\v" # vertical tab
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025840Z" creationid="hirofumiwakasugi" creationdate="20151009T025840Z">
        <seg>```crystal
"\"" # ダブルクォート
"\\" # バックスラッシュ
"\e" # エスケープ
"\f" # フォームフィード (改ページ)
"\n" # ニューライン (改行)
"\r" # キャリッジリターン (復帰)
"\t" # タブ
"\v" # 垂直タブ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
"\101" # == "A"
"\123" # == "S"
"\12"  # == "\n"
"\1"   # string with one character with code point 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025846Z" creationid="hirofumiwakasugi" creationdate="20151009T025846Z">
        <seg>```crystal
"\101" # == "A"
"\123" # == "S"
"\12"  # == "\n"
"\1"   # コードポイント1の文字が1つだけの文字列
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
"\u0041" # == "A"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025847Z" creationid="hirofumiwakasugi" creationdate="20151009T025847Z">
        <seg>```crystal
"\u0041" # == "A"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
"\u{41}"    # == "A"
"\u{1F52E}" # == "  "
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025849Z" creationid="hirofumiwakasugi" creationdate="20151009T025849Z">
        <seg>```crystal
"\u{41}"    # == "A"
"\u{1F52E}" # == "  "
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
"\u{41}"    # == "A"
"\u{1F52E}" # == "🔮"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153403Z" creationid="hirofumiwakasugi" creationdate="20160115T153403Z">
        <seg>```crystal
"\u{41}"    # == "A"
"\u{1F52E}" # == "  "
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
"hello</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025850Z" creationid="hirofumiwakasugi" creationdate="20151009T025850Z">
        <seg>```crystal
"hello</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
"hello " \
"world, " \
"no newlines" # same as "hello world, no newlines"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025853Z" creationid="hirofumiwakasugi" creationdate="20151009T025853Z">
        <seg>```crystal
"hello " \
"world, " \
"no newlines" # same as "hello world, no newlines"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
"hello \</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025854Z" creationid="hirofumiwakasugi" creationdate="20151009T025854Z">
        <seg>```crystal
"hello \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
"hello world"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025833Z" creationid="hirofumiwakasugi" creationdate="20151009T025833Z">
        <seg>```crystal
"hello world"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
#     unicorn = Unicorn.new
#     unicorn.speak 
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140827Z" creationid="hirofumiwakasugi" creationdate="20151010T140827Z">
        <seg>```crystal
#     unicorn = Unicorn.new
#     unicorn.speak 
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# A class that has a + method but isn't a Number
class Six</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135827Z" creationid="hirofumiwakasugi" creationdate="20151009T135820Z">
        <seg>```crystal
# + メソッドを持っているが Number ではないクラス
class Six</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# A proc without arguments
-&gt;{ 1 } # Proc(Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025739Z" creationid="hirofumiwakasugi" creationdate="20151009T025739Z">
        <seg>```crystal
# 引数のない Proc
-&gt;{ 1 } # Proc(Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# A setter
person.name=("John")</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022436Z" creationid="hirofumiwakasugi" creationdate="20151009T022436Z">
        <seg>```crystal
# A setter
person.name=("John")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# A unicorn is a **legendary animal** (see the `Legendary` module) that has been
# described since antiquity as a beast with a large, spiraling horn projecting
# from its forehead.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T033514Z" creationid="hirofumiwakasugi" creationdate="20151010T033514Z">
        <seg>```crystal
# A unicorn is a **legendary animal** (see the `Legendary` module) that has been
# described since antiquity as a beast with a large, spiraling horn projecting
# from its forehead.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# Assigns to a local variable
local = 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022435Z" creationid="hirofumiwakasugi" creationdate="20151009T022435Z">
        <seg>```crystal
# Assigns to a local variable
local = 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# Check the number of horns with `#horns`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T142313Z" creationid="hirofumiwakasugi" creationdate="20151010T142313Z">
        <seg>```crystal
# Check the number of horns with `#horns`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# Clearer than the above: `a` doesn't need
# to be in the exception handling code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024310Z" creationid="hirofumiwakasugi" creationdate="20151009T024303Z">
        <seg>```crystal
# 例外処理のコードの内部で `a` を宣言する必要はないため、
# こう書くことでより意図が明確になる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# Creates a unicorn with the specified number of *horns*.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140504Z" creationid="hirofumiwakasugi" creationdate="20151010T140504Z">
        <seg>```crystal
# Creates a unicorn with the specified number of *horns*.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# Defines a method in the program
def add(x, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135409Z" creationid="hirofumiwakasugi" creationdate="20151009T135409Z">
        <seg>```crystal
# プログラムにメソッドを定義
def add(x, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# Error: undefined method 'size' for Nil
john.address.size
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025400Z" creationid="hirofumiwakasugi" creationdate="20151009T025400Z">
        <seg>```crystal
# Error: undefined method 'size' for Nil
john.address.size
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# First option: assign it to a variable
if a = @a</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024634Z" creationid="hirofumiwakasugi" creationdate="20151009T024634Z">
        <seg>```crystal
# 方法1: 変数に代入する
if a = @a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# In file one.cr
private def greet</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140057Z" creationid="hirofumiwakasugi" creationdate="20151009T140057Z">
        <seg>```crystal
# one.cr ファイル
private def greet</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# On a 64 bits machine
sizeof(Pointer(Int32)) #=&gt; 8
sizeof(String)         #=&gt; 8
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135332Z" creationid="hirofumiwakasugi" creationdate="20151009T135332Z">
        <seg>```crystal
# 64ビット処理系の場合
sizeof(Pointer(Int32)) #=&gt; 8
sizeof(String)         #=&gt; 8
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# One for each thread
@[ThreadLocal]
$values = [] of Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022455Z" creationid="hirofumiwakasugi" creationdate="20151009T022449Z">
        <seg>```crystal
# スレッドごとに1つずつ
@[ThreadLocal]
$values = [] of Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# Same as "Hello\n  world"
&lt;&lt;-STRING</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T062422Z" creationid="hirofumiwakasugi" creationdate="20160204T062352Z">
        <seg>```crystal
# "Hello\n  world" と同じ
&lt;&lt;-STRING</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# Same as callback(NULL) in C
X.callback nil
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022911Z" creationid="hirofumiwakasugi" creationdate="20151009T022911Z">
        <seg>```crystal
# C の callback(NULL) と同じ
X.callback nil
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# Same as not specifying a restriction, not very useful
def foo(x : _)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135708Z" creationid="hirofumiwakasugi" creationdate="20151009T135708Z">
        <seg>```crystal
# 何も制約を与えないことと同じ。これではあまり役には立たない
def foo(x : _)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# Supports double quotes and nested parenthesis
%(hello ("world")) # same as "hello (\"world\")"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025902Z" creationid="hirofumiwakasugi" creationdate="20151009T025902Z">
        <seg>```crystal
# ダブルクォートと入れ子のカッコを含む
%(hello ("world")) # "hello (\"world\")" と同じ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# This generates:
#
#     def :foo
#       1
#     end
define_method :foo, 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030022Z" creationid="hirofumiwakasugi" creationdate="20151009T030022Z">
        <seg>```crystal
# 下記が生成される
#
#     def :foo
#       1
#     end
define_method :foo, 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# This is a comment
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023807Z" creationid="hirofumiwakasugi" creationdate="20151009T023807Z">
        <seg>```crystal
# これはコメントです
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# ditto
def number_of_horns</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T143016Z" creationid="hirofumiwakasugi" creationdate="20151010T143016Z">
        <seg>```crystal
# ditto
def number_of_horns</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# elements is Tuple(Int32, Int32, Int32)
sum 1, 2, 3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135349Z" creationid="hirofumiwakasugi" creationdate="20151009T135349Z">
        <seg>```crystal
# Tuple(Int32, Int32, Int32) の要素
sum 1, 2, 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# in spec/project_spec.cr
require "../src/project"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135218Z" creationid="hirofumiwakasugi" creationdate="20151009T135218Z">
        <seg>```crystal
# spec/project_spec.cr
require "../src/project"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# the `Legendary` module
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T141259Z" creationid="hirofumiwakasugi" creationdate="20151010T141259Z">
        <seg>```crystal
# the `Legendary` module
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
$global_greeting = "Hello world"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010357Z" creationid="hirofumiwakasugi" creationdate="20151010T010357Z">
        <seg>```crystal
$global_greeting = "Hello world"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
$year = 2014
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024531Z" creationid="hirofumiwakasugi" creationdate="20151009T024531Z">
        <seg>```crystal
$year = 2014
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
%i(one two three) # [:one, :two, :three]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025429Z" creationid="hirofumiwakasugi" creationdate="20151009T025429Z">
        <seg>```crystal
%i(one two three) # [:one, :two, :three]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
%w(one two three) # ["one", "two", "three"]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025427Z" creationid="hirofumiwakasugi" creationdate="20151009T025427Z">
        <seg>```crystal
%w(one two three) # ["one", "two", "three"]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
'\'' # single quote
'\\' # backslash
'\e' # escape
'\f' # form feed
'\n' # newline
'\r' # carriage return
'\t' # tab
'\v' # vertical tab
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025513Z" creationid="hirofumiwakasugi" creationdate="20151009T025513Z">
        <seg>```crystal
'\'' # シングルクォート
'\\' # バックスラッシュ
'\e' # エスケープ
'\f' # フォームフィード (改ページ)
'\n' # ニューライン (改行)
'\r' # キャリッジリターン (復帰)
'\t' # タブ
'\v' # 垂直タブ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
'\101' # == 'A'
'\123' # == 'S'
'\12'  # == '\n'
'\1'   # code point 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025527Z" creationid="hirofumiwakasugi" creationdate="20151009T025527Z">
        <seg>```crystal
'\101' # == 'A'
'\123' # == 'S'
'\12'  # == '\n'
'\1'   # コードポイント1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
'\u0041' # == 'A'
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025528Z" creationid="hirofumiwakasugi" creationdate="20151009T025528Z">
        <seg>```crystal
'\u0041' # == 'A'
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
'\u{41}'    # == 'A'
'\u{1F52E}' # == '  '
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025530Z" creationid="hirofumiwakasugi" creationdate="20151009T025530Z">
        <seg>```crystal
'\u{41}'    # == 'A'
'\u{1F52E}' # == '  '
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
'\u{41}'    # == 'A'
'\u{1F52E}' # == '🔮'
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153357Z" creationid="hirofumiwakasugi" creationdate="20160115T153357Z">
        <seg>```crystal
'\u{41}'    # == 'A'
'\u{1F52E}' # == '  '
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
'a'
'z'
'0'
'_'
'あ'
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025506Z" creationid="hirofumiwakasugi" creationdate="20151009T025506Z">
        <seg>```crystal
'a'
'z'
'0'
'_'
'あ'
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
+   # addition
-   # subtraction
*   # multiplication
/   # division
%   # modulo
!   # negation
&amp;   # bitwise and
|   # bitwise or
^   # bitwise xor
**  # exponentiation
&lt;&lt;  # shift left, append
&gt;&gt;  # shift right
==  # equals
!=  # not equals
&lt;   # less
&lt;=  # less or equal
&gt;   # greater
&gt;=  # greater or equal
&lt;=&gt; # comparison
=== # case equality
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135130Z" creationid="hirofumiwakasugi" creationdate="20151009T135130Z">
        <seg>```crystal
+   # 加算
-   # 減算
*   # 乗算
/   # 除算
%   # 剰余
!   # 否定
&amp;   # ビット AND
|   # ビット OR
^   # ビット XOR
**  # べき乗
&lt;&lt;  # 左シフト/追加
&gt;&gt;  # 右シフト
==  # 等しい
!=  # 等しくない
&lt;   # 未満 (〜より小さい)
&lt;=  # 以下
&gt;   # 超 (〜より大きい)
&gt;=  # 以上
&lt;=&gt; # comparison
=== # case equality
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
+   # addition
-   # subtraction
*   # multiplication
/   # division
%   # modulo
&amp;   # bitwise and
|   # bitwise or
^   # bitwise xor
**  # exponentiation
&lt;&lt;  # shift left, append
&gt;&gt;  # shift right
==  # equals
!=  # not equals
&lt;   # less
&lt;=  # less or equal
&gt;   # greater
&gt;=  # greater or equal
&lt;=&gt; # comparison
=== # case equality
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151220T002528Z" creationid="hirofumiwakasugi" creationdate="20151220T002517Z">
        <seg>```crystal
+   # 加算
-   # 減算
*   # 乗算
/   # 除算
%   # 剰余
&amp;   # ビット AND
|   # ビット OR
^   # ビット XOR
**  # べき乗
&lt;&lt;  # 左シフト/追加
&gt;&gt;  # 右シフト
==  # 等しい
!=  # 等しくない
&lt;   # 未満 (〜より小さい)
&lt;=  # 以下
&gt;   # 超 (〜より大きい)
&gt;=  # 以上
&lt;=&gt; # comparison
=== # case equality
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
+   # positive
-   # negative
!   # not
~   # bitwise complement
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135118Z" creationid="hirofumiwakasugi" creationdate="20151009T135118Z">
        <seg>```crystal
+   # 正数
-   # 負数
!   # 否定
~   # ビットの補数
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
0b1101 # == 13
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025703Z" creationid="hirofumiwakasugi" creationdate="20151009T025703Z">
        <seg>```crystal
0b1101 # == 13
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
0o123 # == 83
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025719Z" creationid="hirofumiwakasugi" creationdate="20151009T025719Z">
        <seg>```crystal
0o123 # == 83
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
0xFE012D # == 16646445
0xfe012d # == 16646445
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025720Z" creationid="hirofumiwakasugi" creationdate="20151009T025720Z">
        <seg>```crystal
0xFE012D # == 16646445
0xfe012d # == 16646445
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
1      # Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025643Z" creationid="hirofumiwakasugi" creationdate="20151009T025643Z">
        <seg>```crystal
1      # Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
1 + 2 #=&gt; 3
Unicorn.new.speak #=&gt; "I'm a unicorn"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T142408Z" creationid="hirofumiwakasugi" creationdate="20151010T142408Z">
        <seg>```crystal
1 + 2 #=&gt; 3
Unicorn.new.speak #=&gt; "I'm a unicorn"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
1 as String # Error
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021915Z" creationid="hirofumiwakasugi" creationdate="20151009T021915Z">
        <seg>```crystal
1 as String # Error
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
1.0      # Float64
1.0_f32  # Float32
1_f32    # Float32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025542Z" creationid="hirofumiwakasugi" creationdate="20151009T025542Z">
        <seg>```crystal
1.0      # Float64
1.0_f32  # Float32
1_f32    # Float32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
1_000_000 # better than 1000000
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025702Z" creationid="hirofumiwakasugi" creationdate="20151009T025702Z">
        <seg>```crystal
1_000_000 # 1000000 より読みやすい
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
1_000_000.111_111 # better than 1000000.111111
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025606Z" creationid="hirofumiwakasugi" creationdate="20151009T025556Z">
        <seg>```crystal
1_000_000.111_111 # 1000000.111111 より読みやすい
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
3.times do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022616Z" creationid="hirofumiwakasugi" creationdate="20151009T022616Z">
        <seg>```crystal
3.times do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
:hello
:good_bye</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025908Z" creationid="hirofumiwakasugi" creationdate="20151009T025908Z">
        <seg>```crystal
:hello
:good_bye</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
&lt;&lt;-XML
&lt;parent&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061831Z" creationid="hirofumiwakasugi" creationdate="20160204T061831Z">
        <seg>```crystal
&lt;&lt;-XML
&lt;parent&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
@[AlwaysInline]
def foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022458Z" creationid="hirofumiwakasugi" creationdate="20151009T022458Z">
        <seg>```crystal
@[AlwaysInline]
def foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
@[Flags]
enum IOMode</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024124Z" creationid="hirofumiwakasugi" creationdate="20151009T024124Z">
        <seg>```crystal
@[Flags]
enum IOMode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
@[Link("pcre")]
lib LibPCRE
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023256Z" creationid="hirofumiwakasugi" creationdate="20151009T023256Z">
        <seg>```crystal
@[Link("pcre")]
lib LibPCRE
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
@[Link("pcre")]
lib PCRE</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022949Z" creationid="hirofumiwakasugi" creationdate="20151009T022949Z">
        <seg>```crystal
@[Link("pcre")]
lib PCRE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
@[NoInline]
def foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022459Z" creationid="hirofumiwakasugi" creationdate="20151009T022459Z">
        <seg>```crystal
@[NoInline]
def foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
Animal.new # Error: can't instantiate abstract class Animal
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140048Z" creationid="hirofumiwakasugi" creationdate="20151009T140048Z">
        <seg>```crystal
Animal.new # Error: can't instantiate abstract class Animal
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
Base64.encode64 "hello" #=&gt; "aGVsbG8="
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092323Z" creationid="hirofumiwakasugi" creationdate="20151009T092323Z">
        <seg>```crystal
Base64.encode64 "hello" #=&gt; "aGVsbG8="
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
C.cos(1.5) #=&gt; 0.0707372
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023007Z" creationid="hirofumiwakasugi" creationdate="20151009T023007Z">
        <seg>```crystal
C.cos(1.5) #=&gt; 0.0707372
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
C.errno #=&gt; some value
C.errno = 0
C.errno #=&gt; 0
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023616Z" creationid="hirofumiwakasugi" creationdate="20151009T023616Z">
        <seg>```crystal
C.errno #=&gt; 何かの値
C.errno = 0
C.errno #=&gt; 0
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
Color::Green.value #=&gt; 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024115Z" creationid="hirofumiwakasugi" creationdate="20151009T024115Z">
        <seg>```crystal
Color::Green.value #=&gt; 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
Color::Red #:: Color
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024114Z" creationid="hirofumiwakasugi" creationdate="20151009T024114Z">
        <seg>```crystal
Color::Red #:: Color
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
IOMode::None.value #=&gt; 0
IOMode::All.value  #=&gt; 7
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024124Z" creationid="hirofumiwakasugi" creationdate="20151009T024124Z">
        <seg>```crystal
IOMode::None.value #=&gt; 0
IOMode::All.value  #=&gt; 7
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
Int32
My::Nested::Type
Array(String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135632Z" creationid="hirofumiwakasugi" creationdate="20151009T135632Z">
        <seg>```crystal
Int32
My::Nested::Type
Array(String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
LUCKY_NUMBERS = [3, 7, 11]
DOCUMENTATION_URL = "http://crystal-lang.org/docs"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010616Z" creationid="hirofumiwakasugi" creationdate="20151010T010616Z">
        <seg>```crystal
LUCKY_NUMBERS = [3, 7, 11]
DOCUMENTATION_URL = "http://crystal-lang.org/docs"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
MyBox(Int32).new("hello")
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024453Z" creationid="hirofumiwakasugi" creationdate="20151009T024453Z">
        <seg>```crystal
MyBox(Int32).new("hello")
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
MyBox(Int32).new(1)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024431Z" creationid="hirofumiwakasugi" creationdate="20151009T024431Z">
        <seg>```crystal
MyBox(Int32).new(1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
MyBox.new(1)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024405Z" creationid="hirofumiwakasugi" creationdate="20151009T024405Z">
        <seg>```crystal
MyBox.new(1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
MyBox.new(1)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024333Z" creationid="hirofumiwakasugi" creationdate="20151009T024333Z">
        <seg>```crystal
MyBox.new(1)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
MyBox.new(1)       #:: MyBox(Int32)
MyBox.new("hello") #:: MyBox(String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024515Z" creationid="hirofumiwakasugi" creationdate="20151009T024515Z">
        <seg>```crystal
MyBox.new(1)       #:: MyBox(Int32)
MyBox.new("hello") #:: MyBox(String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
MyBox.new(nil)
MyBox.new("hello")
MyBox.new(1)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024400Z" creationid="hirofumiwakasugi" creationdate="20151009T024400Z">
        <seg>```crystal
MyBox.new(nil)
MyBox.new("hello")
MyBox.new(1)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
MyType(Int32 | String) {1, 2, "foo"}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025434Z" creationid="hirofumiwakasugi" creationdate="20151009T025434Z">
        <seg>```crystal
MyType(Int32 | String) {1, 2, "foo"}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
MyType(String, String) {"foo": "bar"}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025631Z" creationid="hirofumiwakasugi" creationdate="20151009T025631Z">
        <seg>```crystal
MyType(String, String) {"foo": "bar"}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
MyType{"foo": "bar"}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025628Z" creationid="hirofumiwakasugi" creationdate="20151009T025628Z">
        <seg>```crystal
MyType{"foo": "bar"}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
MyType{1, 2, 3}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025430Z" creationid="hirofumiwakasugi" creationdate="20151009T025430Z">
        <seg>```crystal
MyType{1, 2, 3}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
PI = 3.14</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023836Z" creationid="hirofumiwakasugi" creationdate="20151009T023836Z">
        <seg>```crystal
PI = 3.14</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
Person.new "John"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022418Z" creationid="hirofumiwakasugi" creationdate="20151009T022418Z">
        <seg>```crystal
Person.new "John"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
Proc(Int32, String).new { |x| x.to_s } # Proc(Int32, String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025746Z" creationid="hirofumiwakasugi" creationdate="20151009T025746Z">
        <seg>```crystal
Proc(Int32, String).new { |x| x.to_s } # Proc(Int32, String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
TEN = begin</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023839Z" creationid="hirofumiwakasugi" creationdate="20151009T023839Z">
        <seg>```crystal
TEN = begin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
VALUES = [1, 2, 3]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030034Z" creationid="hirofumiwakasugi" creationdate="20151009T030034Z">
        <seg>```crystal
VALUES = [1, 2, 3]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
X.callback -&gt;(x) { x + 1 }
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022657Z" creationid="hirofumiwakasugi" creationdate="20151009T022657Z">
        <seg>```crystal
X.callback -&gt;(x) { x + 1 }
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
X::SomeEnum::One #=&gt; One
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023005Z" creationid="hirofumiwakasugi" creationdate="20151009T023005Z">
        <seg>```crystal
X::SomeEnum::One #=&gt; One
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
[1, 2, 3]         # Array(Int32)
[1, "hello", 'x'] # Array(Int32 | String | Char)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025416Z" creationid="hirofumiwakasugi" creationdate="20151009T025416Z">
        <seg>```crystal
[1, 2, 3]         # Array(Int32)
[1, "hello", 'x'] # Array(Int32 | String | Char)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
[]  # array index (raises on out of bounds)
[]? # array index (nil on out of bounds)
[]= # array index assignment
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135140Z" creationid="hirofumiwakasugi" creationdate="20151009T135140Z">
        <seg>```crystal
[]  # 配列のインデックス (配列長を超えると例外が発生)
[]? # 配列のインデックス (配列長を超えると nil)
[]= # 配列のインデックス指定代入
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
[] of Int32 # same as Array(Int32).new
[]          # syntax error
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025423Z" creationid="hirofumiwakasugi" creationdate="20151009T025423Z">
        <seg>```crystal
[] of Int32 # Array(Int32).new と同じ
[]          # シンタックスエラーになる
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a + b
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135106Z" creationid="hirofumiwakasugi" creationdate="20151009T135106Z">
        <seg>```crystal
a + b
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135145Z" creationid="hirofumiwakasugi" creationdate="20151009T135145Z">
        <seg>```crystal
a = 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
a.is_a?(Int32)          #=&gt; true
a.is_a?(String)         #=&gt; false
a.is_a?(Number)         #=&gt; true
a.is_a?(Int32 | String) #=&gt; true
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025405Z" creationid="hirofumiwakasugi" creationdate="20151009T025405Z">
        <seg>```crystal
a = 1
a.is_a?(Int32)          #=&gt; true
a.is_a?(String)         #=&gt; false
a.is_a?(Number)         #=&gt; true
a.is_a?(Int32 | String) #=&gt; true
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
a.responds_to?(:abs)    #=&gt; true
a.responds_to?(:size) #=&gt; false
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135222Z" creationid="hirofumiwakasugi" creationdate="20151009T135222Z">
        <seg>```crystal
a = 1
a.responds_to?(:abs)    #=&gt; true
a.responds_to?(:size) #=&gt; false
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
b = 2
"sum = #{a + b}"        # "sum = 3"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025905Z" creationid="hirofumiwakasugi" creationdate="20151009T025905Z">
        <seg>```crystal
a = 1
b = 2
"sum = #{a + b}"        # "sum = 3"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
b = 2
a, b = b, a
a #=&gt; 2
b #=&gt; 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T134840Z" creationid="hirofumiwakasugi" creationdate="20151009T134840Z">
        <seg>```crystal
a = 1
b = 2
a, b = b, a
a #=&gt; 2
b #=&gt; 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
b = a as Int32 | Float64
b #:: Int32 | Float64
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022411Z" creationid="hirofumiwakasugi" creationdate="20151009T022411Z">
        <seg>```crystal
a = 1
b = a as Int32 | Float64
b #:: Int32 | Float64
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
b = typeof(a) #=&gt; Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135954Z" creationid="hirofumiwakasugi" creationdate="20151009T135954Z">
        <seg>```crystal
a = 1
b = typeof(a) #=&gt; Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
if a &gt; 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024550Z" creationid="hirofumiwakasugi" creationdate="20151009T024550Z">
        <seg>```crystal
a = 1
if a &gt; 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024555Z" creationid="hirofumiwakasugi" creationdate="20151009T024555Z">
        <seg>```crystal
a = 1
if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
ptr = pointerof(a)
ptr[100_000] = 2   # undefined behaviour, probably a segmentation fault
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140008Z" creationid="hirofumiwakasugi" creationdate="20151009T140008Z">
        <seg>```crystal
a = 1
ptr = pointerof(a)
ptr[100_000] = 2   # 定義されていない振る舞いであるため、おそらくセグメンテーション違反となる
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
sizeof(typeof(a)) #=&gt; 4
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135334Z" creationid="hirofumiwakasugi" creationdate="20151009T135334Z">
        <seg>```crystal
a = 1
sizeof(typeof(a)) #=&gt; 4
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
while a &lt; 5</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T134851Z" creationid="hirofumiwakasugi" creationdate="20151009T134851Z">
        <seg>```crystal
a = 1
while a &lt; 5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
while some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140101Z" creationid="hirofumiwakasugi" creationdate="20151009T140101Z">
        <seg>```crystal
a = 1
while some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1 + 2
a #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021837Z" creationid="hirofumiwakasugi" creationdate="20151009T021837Z">
        <seg>```crystal
a = 1 + 2
a #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1 &gt; 2 ? 3 : 4</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135353Z" creationid="hirofumiwakasugi" creationdate="20151009T135353Z">
        <seg>```crystal
a = 1 &gt; 2 ? 3 : 4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 2
while (a += 1) &lt; 20</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022625Z" creationid="hirofumiwakasugi" creationdate="20151009T022625Z">
        <seg>```crystal
a = 2
while (a += 1) &lt; 20</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 2 if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022422Z" creationid="hirofumiwakasugi" creationdate="20151009T022422Z">
        <seg>```crystal
a = 2 if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = [] of Person
x = a.map { |f| f.name as String } # OK
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022417Z" creationid="hirofumiwakasugi" creationdate="20151009T022417Z">
        <seg>```crystal
a = [] of Person
x = a.map { |f| f.name as String } # OK
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = if 2 &gt; 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022426Z" creationid="hirofumiwakasugi" creationdate="20151009T022426Z">
        <seg>```crystal
a = if 2 &gt; 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = some_condition ? 1 : "hello"
# a : Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061718Z" creationid="hirofumiwakasugi" creationdate="20160204T061718Z">
        <seg>```crystal
a = some_condition ? 1 : "hello"
# a : Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = some_condition ? 1 : "hello"
# a :: Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024658Z" creationid="hirofumiwakasugi" creationdate="20151009T024658Z">
        <seg>```crystal
a = some_condition ? 1 : "hello"
# a :: Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = some_condition ? nil : 3
# a is Int32 or Nil</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024616Z" creationid="hirofumiwakasugi" creationdate="20151009T024608Z">
        <seg>```crystal
a = some_condition ? nil : 3
# a は Int32 か Nil のいずれか</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a.+(b)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135107Z" creationid="hirofumiwakasugi" creationdate="20151009T135107Z">
        <seg>```crystal
a.+(b)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a_as_int = a as Int32
a_as_int.abs          # works, compiler knows that a_as_int is Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021912Z" creationid="hirofumiwakasugi" creationdate="20151009T021912Z">
        <seg>```crystal
a_as_int = a as Int32
a_as_int.abs          # works, compiler knows that a_as_int is Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
abstract class Animal</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140048Z" creationid="hirofumiwakasugi" creationdate="20151009T140048Z">
        <seg>```crystal
abstract class Animal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
abstract class Animal
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140040Z" creationid="hirofumiwakasugi" creationdate="20151009T140040Z">
        <seg>```crystal
abstract class Animal
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
add 1, 2 # same as add(1, 2)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135610Z" creationid="hirofumiwakasugi" creationdate="20151009T135610Z">
        <seg>```crystal
add 1, 2 # add(1, 2) と同じ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias ComplexProc = (Int32 -&gt; Int32) -&gt; String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135652Z" creationid="hirofumiwakasugi" creationdate="20151009T135652Z">
        <seg>```crystal
alias ComplexProc = (Int32 -&gt; Int32) -&gt; String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32AndCharToString = Int32, Char -&gt; String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135651Z" creationid="hirofumiwakasugi" creationdate="20151009T135651Z">
        <seg>```crystal
alias Int32AndCharToString = Int32, Char -&gt; String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32OrNil = Int32 | ::Nil
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135637Z" creationid="hirofumiwakasugi" creationdate="20151009T135637Z">
        <seg>```crystal
alias Int32OrNil = Int32 | ::Nil
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32OrNil = Int32?
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135635Z" creationid="hirofumiwakasugi" creationdate="20151009T135635Z">
        <seg>```crystal
alias Int32OrNil = Int32?
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32OrString = Int32 | String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135633Z" creationid="hirofumiwakasugi" creationdate="20151009T135633Z">
        <seg>```crystal
alias Int32OrString = Int32 | String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32Ptr = Int32*
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135638Z" creationid="hirofumiwakasugi" creationdate="20151009T135638Z">
        <seg>```crystal
alias Int32Ptr = Int32*
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32Ptr = Pointer(Int32)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135638Z" creationid="hirofumiwakasugi" creationdate="20151009T135638Z">
        <seg>```crystal
alias Int32Ptr = Pointer(Int32)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32StringTuple = Tuple(Int32, String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135646Z" creationid="hirofumiwakasugi" creationdate="20151009T135646Z">
        <seg>```crystal
alias Int32StringTuple = Tuple(Int32, String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32StringTuple = {Int32, String}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135644Z" creationid="hirofumiwakasugi" creationdate="20151009T135644Z">
        <seg>```crystal
alias Int32StringTuple = {Int32, String}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32ToString = Int32 -&gt; String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135647Z" creationid="hirofumiwakasugi" creationdate="20151009T135647Z">
        <seg>```crystal
alias Int32ToString = Int32 -&gt; String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32ToString = Proc(Int32, String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135649Z" creationid="hirofumiwakasugi" creationdate="20151009T135649Z">
        <seg>```crystal
alias Int32ToString = Proc(Int32, String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32_8 = Int32[8]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135639Z" creationid="hirofumiwakasugi" creationdate="20151009T135639Z">
        <seg>```crystal
alias Int32_8 = Int32[8]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32_8 = StaticArray(Int32, 8)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135643Z" creationid="hirofumiwakasugi" creationdate="20151009T135643Z">
        <seg>```crystal
alias Int32_8 = StaticArray(Int32, 8)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias PInt32 = Pointer(Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021856Z" creationid="hirofumiwakasugi" creationdate="20151009T021856Z">
        <seg>```crystal
alias PInt32 = Pointer(Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias ProcThatReturnsInt32 = -&gt; Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135650Z" creationid="hirofumiwakasugi" creationdate="20151009T135650Z">
        <seg>```crystal
alias ProcThatReturnsInt32 = -&gt; Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias RecArray = Array(Int32) | Array(RecArray)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021858Z" creationid="hirofumiwakasugi" creationdate="20151009T021858Z">
        <seg>```crystal
alias RecArray = Array(Int32) | Array(RecArray)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias SameAsInt32 = typeof(1 + 2)
alias Int32OrString = typeof(1, "a")
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135736Z" creationid="hirofumiwakasugi" creationdate="20151009T135736Z">
        <seg>```crystal
alias SameAsInt32 = typeof(1 + 2)
alias Int32OrString = typeof(1, "a")
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
array = [1, 2, 3]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022409Z" creationid="hirofumiwakasugi" creationdate="20151009T022409Z">
        <seg>```crystal
array = [1, 2, 3]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
array = [1, 2, 3]
array[4]  # raises because of IndexError
array[4]? # returns nil because of index out of bounds
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024319Z" creationid="hirofumiwakasugi" creationdate="20151009T024319Z">
        <seg>```crystal
array = [1, 2, 3]
array[4]  # IndexOutOfBounds の例外が発生
array[4]? # インデックス範囲外のため nil が返る
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
ary = [1, 2, 3]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022412Z" creationid="hirofumiwakasugi" creationdate="20151009T022412Z">
        <seg>```crystal
ary = [1, 2, 3]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
ary = [1, 2, 3]
ary.map { |x| x + 1 }         #=&gt; [2, 3, 4]
ary.select { |x| x % 2 == 1 } #=&gt; [1, 3]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022549Z" creationid="hirofumiwakasugi" creationdate="20151009T022549Z">
        <seg>```crystal
ary = [1, 2, 3]
ary.map { |x| x + 1 }         #=&gt; [2, 3, 4]
ary.select { |x| x % 2 == 1 } #=&gt; [1, 3]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
begin</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024243Z" creationid="hirofumiwakasugi" creationdate="20151009T024243Z">
        <seg>```crystal
begin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
buffer :: UInt8[256]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024033Z" creationid="hirofumiwakasugi" creationdate="20151009T024033Z">
        <seg>```crystal
buffer :: UInt8[256]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
buffer = uninitialized UInt8[256]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061644Z" creationid="hirofumiwakasugi" creationdate="20160204T061644Z">
        <seg>```crystal
buffer = uninitialized UInt8[256]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
case
when cond1, cond2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023710Z" creationid="hirofumiwakasugi" creationdate="20151009T023710Z">
        <seg>```crystal
case
when cond1, cond2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
case exp
when value1, value2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023642Z" creationid="hirofumiwakasugi" creationdate="20151009T023642Z">
        <seg>```crystal
case exp
when value1, value2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
case num
when .even?</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023649Z" creationid="hirofumiwakasugi" creationdate="20151009T023649Z">
        <seg>```crystal
case num
when .even?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
case var
when String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023645Z" creationid="hirofumiwakasugi" creationdate="20151009T023645Z">
        <seg>```crystal
case var
when String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Animal
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140012Z" creationid="hirofumiwakasugi" creationdate="20151009T140012Z">
        <seg>```crystal
class Animal
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Array</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135958Z" creationid="hirofumiwakasugi" creationdate="20151009T135958Z">
        <seg>```crystal
class Array</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Counter</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023718Z" creationid="hirofumiwakasugi" creationdate="20151009T023718Z">
        <seg>```crystal
class Counter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Employee &lt; Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140050Z" creationid="hirofumiwakasugi" creationdate="20151009T140050Z">
        <seg>```crystal
class Employee &lt; Person</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022610Z" creationid="hirofumiwakasugi" creationdate="20151009T022610Z">
        <seg>```crystal
class Foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Model</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023630Z" creationid="hirofumiwakasugi" creationdate="20151009T023630Z">
        <seg>```crystal
class Model</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class MyArray</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135142Z" creationid="hirofumiwakasugi" creationdate="20151009T135142Z">
        <seg>```crystal
class MyArray</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class MyBox</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024331Z" creationid="hirofumiwakasugi" creationdate="20151009T024331Z">
        <seg>```crystal
class MyBox</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class MyBox(T)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024431Z" creationid="hirofumiwakasugi" creationdate="20151009T024431Z">
        <seg>```crystal
class MyBox(T)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class MyDictionary(K, V)
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024506Z" creationid="hirofumiwakasugi" creationdate="20151009T024506Z">
        <seg>```crystal
class MyDictionary(K, V)
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class MyException &lt; Exception
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024239Z" creationid="hirofumiwakasugi" creationdate="20151009T024239Z">
        <seg>```crystal
class MyException &lt; Exception
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Object</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030043Z" creationid="hirofumiwakasugi" creationdate="20151009T030043Z">
        <seg>```crystal
class Object</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Parent</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023727Z" creationid="hirofumiwakasugi" creationdate="20151009T023727Z">
        <seg>```crystal
class Parent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Parent
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135656Z" creationid="hirofumiwakasugi" creationdate="20151009T135656Z">
        <seg>```crystal
class Parent
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Parent(T)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024526Z" creationid="hirofumiwakasugi" creationdate="20151009T024526Z">
        <seg>```crystal
class Parent(T)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class ParseError &lt; Exception
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010224Z" creationid="hirofumiwakasugi" creationdate="20151010T010224Z">
        <seg>```crystal
class ParseError &lt; Exception
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022414Z" creationid="hirofumiwakasugi" creationdate="20151009T022414Z">
        <seg>```crystal
class Person</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Person
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023732Z" creationid="hirofumiwakasugi" creationdate="20151009T023732Z">
        <seg>```crystal
class Person
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Point</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025307Z" creationid="hirofumiwakasugi" creationdate="20151009T025307Z">
        <seg>```crystal
class Point</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Unicorn</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144013Z" creationid="hirofumiwakasugi" creationdate="20151010T144013Z">
        <seg>```crystal
class Unicorn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def add(x : Number, y : Number)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135737Z" creationid="hirofumiwakasugi" creationdate="20151009T135737Z">
        <seg>```crystal
def add(x : Number, y : Number)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def add(x, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135147Z" creationid="hirofumiwakasugi" creationdate="20151009T135147Z">
        <seg>```crystal
def add(x, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def baz(x, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135600Z" creationid="hirofumiwakasugi" creationdate="20151009T135600Z">
        <seg>```crystal
def baz(x, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def capture(&amp;block)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022505Z" creationid="hirofumiwakasugi" creationdate="20151009T022505Z">
        <seg>```crystal
def capture(&amp;block)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def change_it(tz)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023530Z" creationid="hirofumiwakasugi" creationdate="20151009T023530Z">
        <seg>```crystal
def change_it(tz)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def change_it(value)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023557Z" creationid="hirofumiwakasugi" creationdate="20151009T023557Z">
        <seg>```crystal
def change_it(value)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def counter</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023742Z" creationid="hirofumiwakasugi" creationdate="20151009T023742Z">
        <seg>```crystal
def counter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def even?(num)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135559Z" creationid="hirofumiwakasugi" creationdate="20151009T135559Z">
        <seg>```crystal
def even?(num)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022518Z" creationid="hirofumiwakasugi" creationdate="20151009T022518Z">
        <seg>```crystal
def foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def foo(*args : Int32)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135928Z" creationid="hirofumiwakasugi" creationdate="20151009T135928Z">
        <seg>```crystal
def foo(*args : Int32)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def foo(x : Array(T))</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135930Z" creationid="hirofumiwakasugi" creationdate="20151009T135930Z">
        <seg>```crystal
def foo(x : Array(T))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def foo(x : Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135654Z" creationid="hirofumiwakasugi" creationdate="20151009T135654Z">
        <seg>```crystal
def foo(x : Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def foo(x : Int32)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135925Z" creationid="hirofumiwakasugi" creationdate="20151009T135925Z">
        <seg>```crystal
def foo(x : Int32)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def foo(x : Int32.class)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135927Z" creationid="hirofumiwakasugi" creationdate="20151009T135927Z">
        <seg>```crystal
def foo(x : Int32.class)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def foo(x : Int32.class)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135926Z" creationid="hirofumiwakasugi" creationdate="20151009T135926Z">
        <seg>```crystal
def foo(x : Int32.class)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def foo(x : T)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135929Z" creationid="hirofumiwakasugi" creationdate="20151009T135929Z">
        <seg>```crystal
def foo(x : T)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def foo(x : T.class)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135931Z" creationid="hirofumiwakasugi" creationdate="20151009T135931Z">
        <seg>```crystal
def foo(x : T.class)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def int_to_int(&amp;block : Int32 -&gt; Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023625Z" creationid="hirofumiwakasugi" creationdate="20151009T023625Z">
        <seg>```crystal
def int_to_int(&amp;block : Int32 -&gt; Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def many</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022541Z" creationid="hirofumiwakasugi" creationdate="20151009T022541Z">
        <seg>```crystal
def many</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def one</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025752Z" creationid="hirofumiwakasugi" creationdate="20151009T025752Z">
        <seg>```crystal
def one</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def paint(color : Color)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024217Z" creationid="hirofumiwakasugi" creationdate="20151009T024217Z">
        <seg>```crystal
def paint(color : Color)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def paint(color : Symbol)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024219Z" creationid="hirofumiwakasugi" creationdate="20151009T024219Z">
        <seg>```crystal
def paint(color : Symbol)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def plus_one(x)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025754Z" creationid="hirofumiwakasugi" creationdate="20151009T025754Z">
        <seg>```crystal
def plus_one(x)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def say_hello</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022516Z" creationid="hirofumiwakasugi" creationdate="20151009T022516Z">
        <seg>```crystal
def say_hello</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def some</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022545Z" creationid="hirofumiwakasugi" creationdate="20151009T022545Z">
        <seg>```crystal
def some</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def some_method</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024251Z" creationid="hirofumiwakasugi" creationdate="20151009T024251Z">
        <seg>```crystal
def some_method</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def some_method : String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135223Z" creationid="hirofumiwakasugi" creationdate="20151009T135223Z">
        <seg>```crystal
def some_method : String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def some_method(x, y = 1, z = 2, w = 3)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024051Z" creationid="hirofumiwakasugi" creationdate="20151009T024051Z">
        <seg>```crystal
def some_method(x, y = 1, z = 2, w = 3)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def some_proc(&amp;block : Int32 -&gt; Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135146Z" creationid="hirofumiwakasugi" creationdate="20151009T135146Z">
        <seg>```crystal
def some_proc(&amp;block : Int32 -&gt; Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def some_proc(&amp;block : Int32 -&gt; _)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023635Z" creationid="hirofumiwakasugi" creationdate="20151009T023635Z">
        <seg>```crystal
def some_proc(&amp;block : Int32 -&gt; _)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def some_proc(&amp;block : Int32 -&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023632Z" creationid="hirofumiwakasugi" creationdate="20151009T023632Z">
        <seg>```crystal
def some_proc(&amp;block : Int32 -&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def sum(*elements)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135336Z" creationid="hirofumiwakasugi" creationdate="20151009T135336Z">
        <seg>```crystal
def sum(*elements)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def thrice</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022553Z" creationid="hirofumiwakasugi" creationdate="20151009T022553Z">
        <seg>```crystal
def thrice</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def transform(value)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022549Z" creationid="hirofumiwakasugi" creationdate="20151009T022549Z">
        <seg>```crystal
def transform(value)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def twice</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022536Z" creationid="hirofumiwakasugi" creationdate="20151009T022536Z">
        <seg>```crystal
def twice</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def twice(&amp;block)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022537Z" creationid="hirofumiwakasugi" creationdate="20151009T022537Z">
        <seg>```crystal
def twice(&amp;block)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
enum Color</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024108Z" creationid="hirofumiwakasugi" creationdate="20151009T024108Z">
        <seg>```crystal
enum Color</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
enum Color : UInt8</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024120Z" creationid="hirofumiwakasugi" creationdate="20151009T024120Z">
        <seg>```crystal
enum Color : UInt8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
f = -&gt;(x : Int32) { x + 1 }
X.callback(f)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022656Z" creationid="hirofumiwakasugi" creationdate="20151009T022656Z">
        <seg>```crystal
f = -&gt;(x : Int32) { x + 1 }
X.callback(f)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
flower = "Tulip"
# At this point 'flower' is a String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030004Z" creationid="hirofumiwakasugi" creationdate="20151009T025938Z">
        <seg>```crystal
flower = "Tulip"
# ここでは「flower」は String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
foo_forward do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022524Z" creationid="hirofumiwakasugi" creationdate="20151009T022524Z">
        <seg>```crystal
foo_forward do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
foo_or_bar = /foo|bar/
heeello    = /h(e+)llo/
integer    = /\d+/
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025825Z" creationid="hirofumiwakasugi" creationdate="20151009T025825Z">
        <seg>```crystal
foo_or_bar = /foo|bar/
heeello    = /h(e+)llo/
integer    = /\d+/
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
hash = {} of Int32 =&gt; String
another_hash = typeof(hash).new #:: Hash(Int32, String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135957Z" creationid="hirofumiwakasugi" creationdate="20151009T135957Z">
        <seg>```crystal
hash = {} of Int32 =&gt; String
another_hash = typeof(hash).new #:: Hash(Int32, String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
i = 0
while i &lt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022619Z" creationid="hirofumiwakasugi" creationdate="20151009T022619Z">
        <seg>```crystal
i = 0
while i &lt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
i = 1
puts "Got: #{i}"
i = 2
puts "Got: #{i}"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022615Z" creationid="hirofumiwakasugi" creationdate="20151009T022615Z">
        <seg>```crystal
i = 1
puts "Got: #{i}"
i = 2
puts "Got: #{i}"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
if 1 &gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022428Z" creationid="hirofumiwakasugi" creationdate="20151009T022428Z">
        <seg>```crystal
if 1 &gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
if @a</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024626Z" creationid="hirofumiwakasugi" creationdate="20151009T024626Z">
        <seg>```crystal
if @a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
if @a.is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024704Z" creationid="hirofumiwakasugi" creationdate="20151009T024704Z">
        <seg>```crystal
if @a.is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
if @a.responds_to?(:abs)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024711Z" creationid="hirofumiwakasugi" creationdate="20151009T024711Z">
        <seg>```crystal
if @a.responds_to?(:abs)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
if a &amp;&amp; b</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024630Z" creationid="hirofumiwakasugi" creationdate="20151009T024630Z">
        <seg>```crystal
if a &amp;&amp; b</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
if a = some_expression</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024624Z" creationid="hirofumiwakasugi" creationdate="20151009T024624Z">
        <seg>```crystal
if a = some_expression</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
if a.is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024654Z" creationid="hirofumiwakasugi" creationdate="20151009T024654Z">
        <seg>```crystal
if a.is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
if a.is_a?(String) &amp;&amp; b.is_a?(Number)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024701Z" creationid="hirofumiwakasugi" creationdate="20151009T024701Z">
        <seg>```crystal
if a.is_a?(String) &amp;&amp; b.is_a?(Number)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
if a.responds_to?(:abs)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024710Z" creationid="hirofumiwakasugi" creationdate="20151009T024710Z">
        <seg>```crystal
if a.responds_to?(:abs)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
if method # first call to a method that can return Int32 or Nil</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024644Z" creationid="hirofumiwakasugi" creationdate="20151009T024644Z">
        <seg>```crystal
if method # メソッドの最初の呼び出し (メソッドは Int32 か Nil を返すとする)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021909Z" creationid="hirofumiwakasugi" creationdate="20151009T021909Z">
        <seg>```crystal
if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
ifdef linux &amp;&amp; x86_64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023827Z" creationid="hirofumiwakasugi" creationdate="20151009T023827Z">
        <seg>```crystal
ifdef linux &amp;&amp; x86_64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
ifdef x86_64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023821Z" creationid="hirofumiwakasugi" creationdate="20151009T023821Z">
        <seg>```crystal
ifdef x86_64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
include Base64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092324Z" creationid="hirofumiwakasugi" creationdate="20151009T092324Z">
        <seg>```crystal
include Base64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
invoke(proc) # Error: wrong number of arguments for 'invoke' (1 for 0)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022506Z" creationid="hirofumiwakasugi" creationdate="20151009T022506Z">
        <seg>```crystal
invoke(proc) # Error: wrong number of arguments for 'invoke' (1 for 0)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
john = Person.new "John"
john.name.size
one = Person.new 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025347Z" creationid="hirofumiwakasugi" creationdate="20151009T025347Z">
        <seg>```crystal
john = Person.new "John"
john.name.size
one = Person.new 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
john = Person.new "John"
one = Person.new 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025340Z" creationid="hirofumiwakasugi" creationdate="20151009T025340Z">
        <seg>```crystal
john = Person.new "John"
one = Person.new 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
john = Person.new "John"
one = Person.new 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025329Z" creationid="hirofumiwakasugi" creationdate="20151009T025329Z">
        <seg>```crystal
john = Person.new "John"
one = Person.new 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
john = Person.new "John"
peter = Person.new "Peter"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T134849Z" creationid="hirofumiwakasugi" creationdate="20151009T134849Z">
        <seg>```crystal
john = Person.new "John"
peter = Person.new "Peter"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
john.become_older by: 5
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024043Z" creationid="hirofumiwakasugi" creationdate="20151009T024043Z">
        <seg>```crystal
john.become_older by: 5
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
john.pet.talk # Error: undefined method 'talk' for Animal
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140039Z" creationid="hirofumiwakasugi" creationdate="20151009T140039Z">
        <seg>```crystal
john.pet.talk # Error: undefined method 'talk' for Animal
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
john.pet.talk #=&gt; "Woof!"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140041Z" creationid="hirofumiwakasugi" creationdate="20151009T140041Z">
        <seg>```crystal
john.pet.talk #=&gt; "Woof!"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
lib C</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022650Z" creationid="hirofumiwakasugi" creationdate="20151009T022650Z">
        <seg>```crystal
lib C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
lib LLVMIntrinsics</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023019Z" creationid="hirofumiwakasugi" creationdate="20151009T023019Z">
        <seg>```crystal
lib LLVMIntrinsics</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
lib LibFoo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022501Z" creationid="hirofumiwakasugi" creationdate="20151009T022501Z">
        <seg>```crystal
lib LibFoo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
lib LibSDL</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023016Z" creationid="hirofumiwakasugi" creationdate="20151009T023016Z">
        <seg>```crystal
lib LibSDL</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
lib MyLib</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023021Z" creationid="hirofumiwakasugi" creationdate="20151009T023021Z">
        <seg>```crystal
lib MyLib</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
lib U</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023551Z" creationid="hirofumiwakasugi" creationdate="20151009T023551Z">
        <seg>```crystal
lib U</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
lib X</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022648Z" creationid="hirofumiwakasugi" creationdate="20151009T022648Z">
        <seg>```crystal
lib X</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
local += 1  # same as: local = local + 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022436Z" creationid="hirofumiwakasugi" creationdate="20151009T022436Z">
        <seg>```crystal
local += 1  # same as: local = local + 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
loop do</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140104Z" creationid="hirofumiwakasugi" creationdate="20151009T140104Z">
        <seg>```crystal
loop do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
macro define_dummy_methods(*names)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030032Z" creationid="hirofumiwakasugi" creationdate="20151009T030032Z">
        <seg>```crystal
macro define_dummy_methods(*names)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
macro define_dummy_methods(hash)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030028Z" creationid="hirofumiwakasugi" creationdate="20151009T030028Z">
        <seg>```crystal
macro define_dummy_methods(hash)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
macro define_dummy_methods(names)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030027Z" creationid="hirofumiwakasugi" creationdate="20151009T030027Z">
        <seg>```crystal
macro define_dummy_methods(names)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
macro define_method(name, content)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030017Z" creationid="hirofumiwakasugi" creationdate="20151009T030017Z">
        <seg>```crystal
macro define_method(name, content)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
macro dont_update_x</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021259Z" creationid="hirofumiwakasugi" creationdate="20151009T021259Z">
        <seg>```crystal
macro dont_update_x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
macro fresh_vars_sample(*names)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021301Z" creationid="hirofumiwakasugi" creationdate="20151009T021301Z">
        <seg>```crystal
macro fresh_vars_sample(*names)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
macro method_missing(name, args, block)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030037Z" creationid="hirofumiwakasugi" creationdate="20151009T030037Z">
        <seg>```crystal
macro method_missing(name, args, block)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
macro println(*values)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030033Z" creationid="hirofumiwakasugi" creationdate="20151009T030033Z">
        <seg>```crystal
macro println(*values)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
macro update_x</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021255Z" creationid="hirofumiwakasugi" creationdate="20151009T021255Z">
        <seg>```crystal
macro update_x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
method &amp;.+(2)
method &amp;.[index]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153237Z" creationid="hirofumiwakasugi" creationdate="20160115T153237Z">
        <seg>```crystal
method &amp;.+(2)
method &amp;.[index]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
method &amp;.some_method
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153031Z" creationid="hirofumiwakasugi" creationdate="20160115T153031Z">
        <seg>```crystal
method &amp;.some_method
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
method &amp;.some_method(arg1, arg2)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153214Z" creationid="hirofumiwakasugi" creationdate="20160115T153214Z">
        <seg>```crystal
method &amp;.some_method
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
method do |argument|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153020Z" creationid="hirofumiwakasugi" creationdate="20160115T153020Z">
        <seg>```crystal
method do |argument|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
method(&amp;.some_method)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153044Z" creationid="hirofumiwakasugi" creationdate="20160115T153044Z">
        <seg>```crystal
method &amp;.some_method
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
module Base64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092318Z" creationid="hirofumiwakasugi" creationdate="20151009T092318Z">
        <seg>```crystal
module Base64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
module Curses</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092219Z" creationid="hirofumiwakasugi" creationdate="20151009T092219Z">
        <seg>```crystal
module Curses</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
module ItemsSize</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092222Z" creationid="hirofumiwakasugi" creationdate="20151009T092222Z">
        <seg>```crystal
module ItemsSize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
module Json</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021859Z" creationid="hirofumiwakasugi" creationdate="20151009T021859Z">
        <seg>```crystal
module Json</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
module Money</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012155Z" creationid="hirofumiwakasugi" creationdate="20151010T012155Z">
        <seg>```crystal
module Money</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
module Moo
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092326Z" creationid="hirofumiwakasugi" creationdate="20151009T092326Z">
        <seg>```crystal
module Moo
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
module Moo(T)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024521Z" creationid="hirofumiwakasugi" creationdate="20151009T024521Z">
        <seg>```crystal
module Moo(T)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
module Scorecard</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011935Z" creationid="hirofumiwakasugi" creationdate="20151010T011935Z">
        <seg>```crystal
module Scorecard</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
module SomeModule</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092317Z" creationid="hirofumiwakasugi" creationdate="20151009T092317Z">
        <seg>```crystal
module SomeModule</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
module SomeSize</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092315Z" creationid="hirofumiwakasugi" creationdate="20151009T092315Z">
        <seg>```crystal
module SomeSize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
name = "Crystal"
age = 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025915Z" creationid="hirofumiwakasugi" creationdate="20151009T025915Z">
        <seg>```crystal
name = "Crystal"
age = 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
name, age = "Crystal", 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T134357Z" creationid="hirofumiwakasugi" creationdate="20151009T134357Z">
        <seg>```crystal
name, age = "Crystal", 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
name, age, source = "Crystal,1,github".split(",")</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T134842Z" creationid="hirofumiwakasugi" creationdate="20151009T134842Z">
        <seg>```crystal
name, age, source = "Crystal,1,github".split(",")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
names = "John", "Peter", "Jack"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T134844Z" creationid="hirofumiwakasugi" creationdate="20151009T134844Z">
        <seg>```crystal
names = "John", "Peter", "Jack"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
nil
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025725Z" creationid="hirofumiwakasugi" creationdate="20151009T025725Z">
        <seg>```crystal
nil
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
objects[1], objects[2] = 3, 4</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T134847Z" creationid="hirofumiwakasugi" creationdate="20151009T134847Z">
        <seg>```crystal
objects[1], objects[2] = 3, 4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
one = Person.new 1
one.name #=&gt; 1
one.name + 2 #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025317Z" creationid="hirofumiwakasugi" creationdate="20151009T025317Z">
        <seg>```crystal
one = Person.new 1
one.name #=&gt; 1
one.name + 2 #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
person.age += 1        # same as: person.age = person.age + 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022439Z" creationid="hirofumiwakasugi" creationdate="20151009T022439Z">
        <seg>```crystal
person.age += 1        # same as: person.age = person.age + 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
person.name, person.age = "John", 32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T134845Z" creationid="hirofumiwakasugi" creationdate="20151009T134845Z">
        <seg>```crystal
person.name, person.age = "John", 32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
pid = ...
options = ...</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023501Z" creationid="hirofumiwakasugi" creationdate="20151009T023501Z">
        <seg>```crystal
pid = ...
options = ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
pid = ...
options = ...
status_ptr :: Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023458Z" creationid="hirofumiwakasugi" creationdate="20151009T023458Z">
        <seg>```crystal
pid = ...
options = ...
status_ptr :: Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
pid = ...
options = ...
status_ptr = uninitialized Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061355Z" creationid="hirofumiwakasugi" creationdate="20160204T061355Z">
        <seg>```crystal
pid = ...
options = ...
status_ptr = uninitialized Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
proc = -&gt;(x : Int32, y : Int32) { x + y }
proc.call(1, 2) #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025749Z" creationid="hirofumiwakasugi" creationdate="20151009T025749Z">
        <seg>```crystal
proc = -&gt;(x : Int32, y : Int32) { x + y }
proc.call(1, 2) #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
proc = capture { puts "Hello" }
twice do</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022514Z" creationid="hirofumiwakasugi" creationdate="20151009T022514Z">
        <seg>```crystal
proc = capture { puts "Hello" }
twice do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
ptr = Pointer(Int32).malloc(1)
ptr as Int8*                    #:: Pointer(Int8)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022408Z" creationid="hirofumiwakasugi" creationdate="20151009T022408Z">
        <seg>```crystal
ptr = Pointer(Int32).malloc(1)
ptr as Int8*                    #:: Pointer(Int8)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
puts "Hello world!"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021802Z" creationid="hirofumiwakasugi" creationdate="20151009T021802Z">
        <seg>```crystal
puts "Hello world!"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
puts Color.new(1) #=&gt; prints "Green"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024200Z" creationid="hirofumiwakasugi" creationdate="20151009T024200Z">
        <seg>```crystal
puts Color.new(1) #=&gt; "Green" を出力
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
puts Color.new(10) #=&gt; prints "10"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024210Z" creationid="hirofumiwakasugi" creationdate="20151009T024210Z">
        <seg>```crystal
puts Color.new(10) #=&gt; "10" を出力
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
puts(Color::Red)                    # prints "Red"
puts(IOMode::Write | IOMode::Async) # prints "Write, Async"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024143Z" creationid="hirofumiwakasugi" creationdate="20151009T024143Z">
        <seg>```crystal
puts(Color::Red)                    # "Red" を出力
puts(IOMode::Write | IOMode::Async) # "Write, Async" を出力
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
r = %r(regex with slash: /)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025830Z" creationid="hirofumiwakasugi" creationdate="20151009T025830Z">
        <seg>```crystal
r = %r(regex with slash: /)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
r = /foo/imx
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025827Z" creationid="hirofumiwakasugi" creationdate="20151009T025827Z">
        <seg>```crystal
r = /foo/imx
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
raise "OH NO!"
raise Exception.new("Some error")
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024236Z" creationid="hirofumiwakasugi" creationdate="20151009T024236Z">
        <seg>```crystal
raise "OH NO!"
raise Exception.new("Some error")
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
require "http/server"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021810Z" creationid="hirofumiwakasugi" creationdate="20151009T021810Z">
        <seg>```crystal
require "http/server"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
s = "hello"
# s : String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061336Z" creationid="hirofumiwakasugi" creationdate="20160204T061336Z">
        <seg>```crystal
s = "hello"
# s : String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
s = "hello"
# s :: String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021838Z" creationid="hirofumiwakasugi" creationdate="20151009T021838Z">
        <seg>```crystal
s = "hello"
# s :: String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
sizeof(Int32)  #=&gt; 4
sizeof(Int64)  #=&gt; 8
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135321Z" creationid="hirofumiwakasugi" creationdate="20151009T135321Z">
        <seg>```crystal
sizeof(Int32)  #=&gt; 4
sizeof(Int64)  #=&gt; 8
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
slash = /\//
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025828Z" creationid="hirofumiwakasugi" creationdate="20151009T025828Z">
        <seg>```crystal
slash = /\//
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
some_exp1 &amp;&amp; some_exp2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021906Z" creationid="hirofumiwakasugi" creationdate="20151009T021906Z">
        <seg>```crystal
some_exp1 &amp;&amp; some_exp2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
some_exp1 || some_exp2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135144Z" creationid="hirofumiwakasugi" creationdate="20151009T135144Z">
        <seg>```crystal
some_exp1 || some_exp2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
str = "hello"
proc = -&gt;str.count(Char)
proc.call('e') #=&gt; 1
proc.call('l') #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025755Z" creationid="hirofumiwakasugi" creationdate="20151009T025755Z">
        <seg>```crystal
str = "hello"
proc = -&gt;str.count(Char)
proc.call('e') #=&gt; 1
proc.call('l') #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
struct Int</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022617Z" creationid="hirofumiwakasugi" creationdate="20151009T022617Z">
        <seg>```crystal
struct Int</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
struct Point</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135351Z" creationid="hirofumiwakasugi" creationdate="20151009T135351Z">
        <seg>```crystal
struct Point</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
struct Vector2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135108Z" creationid="hirofumiwakasugi" creationdate="20151009T135108Z">
        <seg>```crystal
struct Vector2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
tmp = MyType(typeof("foo"), typeof("bar")).new
tmp["foo"] = "bar"
tmp
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025630Z" creationid="hirofumiwakasugi" creationdate="20151009T025630Z">
        <seg>```crystal
tmp = MyType(typeof("foo"), typeof("bar")).new
tmp["foo"] = "bar"
tmp
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
tmp = MyType(typeof(1, 2, 3)).new
tmp &lt;&lt; 1
tmp &lt;&lt; 2
tmp &lt;&lt; 3
tmp
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025432Z" creationid="hirofumiwakasugi" creationdate="20151009T025432Z">
        <seg>```crystal
tmp = MyType(typeof(1, 2, 3)).new
tmp &lt;&lt; 1
tmp &lt;&lt; 2
tmp &lt;&lt; 3
tmp
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
tmp = MyType.new
tmp &lt;&lt; 1
tmp &lt;&lt; 2
tmp &lt;&lt; 3
tmp
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025431Z" creationid="hirofumiwakasugi" creationdate="20151009T025431Z">
        <seg>```crystal
tmp = MyType.new
tmp &lt;&lt; 1
tmp &lt;&lt; 2
tmp &lt;&lt; 3
tmp
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
tmp = MyType.new
tmp["foo"] = "bar"
tmp
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025629Z" creationid="hirofumiwakasugi" creationdate="20151009T025629Z">
        <seg>```crystal
tmp = MyType.new
tmp["foo"] = "bar"
tmp
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
true  # A Bool that is true
false # A Bool that is false
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025502Z" creationid="hirofumiwakasugi" creationdate="20151009T025502Z">
        <seg>```crystal
true  # 真の Bool 値
false # 偽の Bool 値
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
tuple = {1, "hello", 'x'} # Tuple(Int32, String, Char)
tuple[0]                  #=&gt; 1       (Int32)
tuple[1]                  #=&gt; "hello" (String)
tuple[2]                  #=&gt; 'x'     (Char)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025913Z" creationid="hirofumiwakasugi" creationdate="20151009T025913Z">
        <seg>```crystal
tuple = {1, "hello", 'x'} # Tuple(Int32, String, Char)
tuple[0]                  #=&gt; 1       (Int32)
tuple[1]                  #=&gt; "hello" (String)
tuple[2]                  #=&gt; 'x'     (Char)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
twice &amp;-&gt;{ puts "Hello" }
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022515Z" creationid="hirofumiwakasugi" creationdate="20151009T022515Z">
        <seg>```crystal
twice &amp;-&gt;{ puts "Hello" }
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
twice { |i| puts "Got #{i}" }
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022541Z" creationid="hirofumiwakasugi" creationdate="20151009T022541Z">
        <seg>```crystal
twice { |i| puts "Got #{i}" }
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
twice() do</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022538Z" creationid="hirofumiwakasugi" creationdate="20151009T022538Z">
        <seg>```crystal
twice() do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
typeof(1, "a", 'a') #=&gt; (Int32 | String | Char)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135956Z" creationid="hirofumiwakasugi" creationdate="20151009T135956Z">
        <seg>```crystal
typeof(1, "a", 'a') #=&gt; (Int32 | String | Char)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
tz :: C::TimeZone
tz.minutes_west #=&gt; some garbage value
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023521Z" creationid="hirofumiwakasugi" creationdate="20151009T023511Z">
        <seg>```crystal
tz :: C::TimeZone
tz.minutes_west #=&gt; 何かゴミの値
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
tz = C::TimeZone.new
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023509Z" creationid="hirofumiwakasugi" creationdate="20151009T023509Z">
        <seg>```crystal
tz = C::TimeZone.new
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
tz = C::TimeZone.new
tz.minutes_west = 1
tz.minutes_west #=&gt; 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023523Z" creationid="hirofumiwakasugi" creationdate="20151009T023523Z">
        <seg>```crystal
tz = C::TimeZone.new
tz.minutes_west = 1
tz.minutes_west #=&gt; 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
tz = C::TimeZone.new minutes_west: 1, dst_time: 2
tz.minutes_west #=&gt; 1
tz.dst_time     #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023529Z" creationid="hirofumiwakasugi" creationdate="20151009T023529Z">
        <seg>```crystal
tz = C::TimeZone.new minutes_west: 1, dst_time: 2
tz.minutes_west #=&gt; 1
tz.dst_time     #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
tz = uninitialized C::TimeZone
tz.minutes_west #=&gt; some garbage value
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061532Z" creationid="hirofumiwakasugi" creationdate="20160204T061509Z">
        <seg>```crystal
tz = uninitialized C::TimeZone
tz.minutes_west #=&gt; 何かゴミの値
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
unless some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140000Z" creationid="hirofumiwakasugi" creationdate="20151009T140000Z">
        <seg>```crystal
unless some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
until some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140011Z" creationid="hirofumiwakasugi" creationdate="20151009T140011Z">
        <seg>```crystal
until some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
value :: U::IntOrFlaot
value.some_int #=&gt; some garbage value
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T164535Z" creationid="hirofumiwakasugi" creationdate="20151009T023552Z">
        <seg>```crystal
value :: U::IntOrFlaot
value.some_int #=&gt; 何かゴミの値
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
value = U::IntOrFloat.new
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023551Z" creationid="hirofumiwakasugi" creationdate="20151009T023551Z">
        <seg>```crystal
value = U::IntOrFloat.new
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
value = U::IntOrFloat.new
value.some_int = 1
value.some_int #=&gt; 1
value.some_float #=&gt; 4.94066e-324
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023554Z" creationid="hirofumiwakasugi" creationdate="20151009T023554Z">
        <seg>```crystal
value = U::IntOrFloat.new
value.some_int = 1
value.some_int #=&gt; 1
value.some_float #=&gt; 4.94066e-324
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
value = twice do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022601Z" creationid="hirofumiwakasugi" creationdate="20151009T022601Z">
        <seg>```crystal
value = twice do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
value = twice { break }
value #=&gt; nil
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022603Z" creationid="hirofumiwakasugi" creationdate="20151009T022603Z">
        <seg>```crystal
value = twice { break }
value #=&gt; nil
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
value = uninitialized U::IntOrFlaot
value.some_int #=&gt; some garbage value
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061547Z" creationid="hirofumiwakasugi" creationdate="20160204T061547Z">
        <seg>```crystal
value = uninitialized U::IntOrFlaot
value.some_int #=&gt; 何かゴミの値
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
values = twice { break 1, 2 }
values #=&gt; {1, 2}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022603Z" creationid="hirofumiwakasugi" creationdate="20151009T022603Z">
        <seg>```crystal
values = twice { break 1, 2 }
values #=&gt; {1, 2}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
while some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140100Z" creationid="hirofumiwakasugi" creationdate="20151009T140100Z">
        <seg>```crystal
while some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
while true</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140104Z" creationid="hirofumiwakasugi" creationdate="20151009T140104Z">
        <seg>```crystal
while true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
x :: Int32
x #=&gt; some random value, garbage, unreliable
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024027Z" creationid="hirofumiwakasugi" creationdate="20151009T024027Z">
        <seg>```crystal
x :: Int32
x #=&gt; 何かのランダムな値。つまり信頼できないゴミのようなもの…
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
x = 0
proc = -&gt;{ x += 1; x }
proc.call #=&gt; 1
proc.call #=&gt; 2
x         #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023738Z" creationid="hirofumiwakasugi" creationdate="20151009T023738Z">
        <seg>```crystal
x = 0
proc = -&gt;{ x += 1; x }
proc.call #=&gt; 1
proc.call #=&gt; 2
x         #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
x = 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135601Z" creationid="hirofumiwakasugi" creationdate="20151009T135601Z">
        <seg>```crystal
x = 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
x = 1
foo do</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023746Z" creationid="hirofumiwakasugi" creationdate="20151009T023746Z">
        <seg>```crystal
x = 1
foo do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
x = uninitialized Int32
x #=&gt; some random value, garbage, unreliable
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061639Z" creationid="hirofumiwakasugi" creationdate="20160204T061639Z">
        <seg>```crystal
x = uninitialized Int32
x #=&gt; 何かのランダムな値。つまり信頼できないゴミのようなもの…
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
x..y  # an inclusive range, in mathematics: [x, y]
x...y # an exclusive range, in mathematics: [x, y)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025821Z" creationid="hirofumiwakasugi" creationdate="20151009T025821Z">
        <seg>```crystal
x..y  # 右側の値を「含む」範囲です。数学的には閉区間となります: [x, y]
x...y # 右側の値を「含まない」範囲です。数学的には左閉右開区間となります: [x, y)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
y = 2
X.callback -&gt;(x) { x + y } # Error: can't send closure</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022706Z" creationid="hirofumiwakasugi" creationdate="20151009T022706Z">
        <seg>```crystal
y = 2
X.callback -&gt;(x) { x + y } # エラー: クロージャは</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
{"key1": 'a', "key2": 'b'} # Hash(String, Char)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025627Z" creationid="hirofumiwakasugi" creationdate="20151009T025627Z">
        <seg>```crystal
{"key1": 'a', "key2": 'b'} # Hash(String, Char)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
{% for name, index in ["foo", "bar", "baz"] %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030030Z" creationid="hirofumiwakasugi" creationdate="20151009T030030Z">
        <seg>```crystal
{% for name, index in ["foo", "bar", "baz"] %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
{% if env("TEST") %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030025Z" creationid="hirofumiwakasugi" creationdate="20151009T030025Z">
        <seg>```crystal
{% if env("TEST") %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
{1 =&gt; 2, 3 =&gt; 4}     # Hash(Int32, Int32)
{1 =&gt; 2, 'a' =&gt; 3}   # Hash(Int32 | Char, Int32)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025609Z" creationid="hirofumiwakasugi" creationdate="20151009T025609Z">
        <seg>```crystal
{1 =&gt; 2, 3 =&gt; 4}     # Hash(Int32, Int32)
{1 =&gt; 2, 'a' =&gt; 3}   # Hash(Int32 | Char, Int32)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
{key1: 'a', key2: 'b'} # Hash(Symbol, Char)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025626Z" creationid="hirofumiwakasugi" creationdate="20151009T025626Z">
        <seg>```crystal
{key1: 'a', key2: 'b'} # Hash(Symbol, Char)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
{} of Int32 =&gt; Int32 # same as Hash(Int32, Int32).new
{}                   # syntax error
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025623Z" creationid="hirofumiwakasugi" creationdate="20151009T025617Z">
        <seg>```crystal
{} of Int32 =&gt; Int32 # Hash(Int32, Int32).new と同じ
{}                   # シンタックスエラーになる
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021822Z" creationid="hirofumiwakasugi" creationdate="20150901T072605Z">
        <seg>```crystal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
"\"" # double quote
"\\" # backslash
"\e" # escape
"\f" # form feed
"\n" # newline
"\r" # carriage return
"\t" # tab
"\v" # vertical tab
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T081136Z" creationid="hirofumiwakasugi" creationdate="20150901T081136Z">
        <seg>```ruby
"\"" # ダブルクォート
"\\" # バックスラッシュ
"\e" # エスケープ
"\f" # フォームフィード (改ページ)
"\n" # ニューライン (改行)
"\r" # キャリッジリターン (復帰)
"\t" # タブ
"\v" # 垂直タブ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
"\101" # == "A"
"\123" # == "S"
"\12"  # == "\n"
"\1"   # string with one character with code point 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T081234Z" creationid="hirofumiwakasugi" creationdate="20150901T081151Z">
        <seg>```ruby
"\101" # == "A"
"\123" # == "S"
"\12"  # == "\n"
"\1"   # コードポイント1の文字が1つだけの文字列
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
"\u0041" # == "A"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T081237Z" creationid="hirofumiwakasugi" creationdate="20150901T081237Z">
        <seg>```ruby
"\u0041" # == "A"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
"\u{41}"    # == "A"
"\u{1F52E}" # == "  "
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T081239Z" creationid="hirofumiwakasugi" creationdate="20150901T081239Z">
        <seg>```ruby
"\u{41}"    # == "A"
"\u{1F52E}" # == "  "
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
"hello</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T081303Z" creationid="hirofumiwakasugi" creationdate="20150901T081303Z">
        <seg>```ruby
"hello</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
"hello " \
"world, " \
"no newlines" # same as "hello world, no newlines"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104033Z" creationid="hirofumiwakasugi" creationdate="20150901T104033Z">
        <seg>```ruby
"hello " \
"world, " \
"no newlines" # "hello world, no newlines" と同じ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
"hello \</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104110Z" creationid="hirofumiwakasugi" creationdate="20150901T104110Z">
        <seg>```ruby
"hello \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
"hello world"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T081028Z" creationid="hirofumiwakasugi" creationdate="20150901T081028Z">
        <seg>```ruby
"hello world"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# A proc without arguments
-&gt;{ 1 } # Proc(Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021054Z" creationid="hirofumiwakasugi" creationdate="20150902T021054Z">
        <seg>```ruby
# 引数のない Proc
-&gt;{ 1 } # Proc(Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# A setter
person.name=("John")</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054642Z" creationid="hirofumiwakasugi" creationdate="20150902T054642Z">
        <seg>```ruby
# セッター
person.name=("John")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# Assigns to a local variable
local = 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053942Z" creationid="hirofumiwakasugi" creationdate="20150902T053942Z">
        <seg>```ruby
# ローカル変数への代入
local = 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# Clearer than the above: `a` doesn't need
# to be in the exception handling code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T023234Z" creationid="hirofumiwakasugi" creationdate="20150907T023234Z">
        <seg>```ruby
# 例外処理のコードの内部で `a` 宣言する必要はないため、
# こう書くことでより意図が明確になる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# Defines a method in the program
def add(x, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021436Z" creationid="hirofumiwakasugi" creationdate="20150904T015152Z">
        <seg>```ruby
# プログラムにメソッドを定義
def add(x, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# Error: undefined method 'length' for Nil
john.address.length
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T054541Z" creationid="hirofumiwakasugi" creationdate="20150905T054541Z">
        <seg>```ruby
# Error: undefined method 'length' for Nil
john.address.length
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# First option: assign it to a variable
if a = @a</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T020202Z" creationid="hirofumiwakasugi" creationdate="20150903T020202Z">
        <seg>```ruby
# 方法1: 変数に代入する
if a = @a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# In file one.cr
private def greet</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T040826Z" creationid="hirofumiwakasugi" creationdate="20150909T040802Z">
        <seg>```ruby
# one.cr ファイル
private def greet</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# On a 64 bits machine
sizeof(Pointer(Int32)) #=&gt; 8
sizeof(String)         #=&gt; 8
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035536Z" creationid="hirofumiwakasugi" creationdate="20150906T035536Z">
        <seg>```ruby
# 64ビット処理系の場合
sizeof(Pointer(Int32)) #=&gt; 8
sizeof(String)         #=&gt; 8
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# One for each thread
@[ThreadLocal]
$values = [] of Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T072542Z" creationid="hirofumiwakasugi" creationdate="20150919T072506Z">
        <seg>```ruby
# スレッドごとに1つずつ
@[ThreadLocal]
$values = [] of Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# Same as not specifying a restriction, not very useful
def foo(x : _)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012211Z" creationid="hirofumiwakasugi" creationdate="20151009T012211Z">
        <seg>```ruby
# 何も制約を与えないことと同じ。これではあまり役には立たない
def foo(x : _)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# Supports double quotes and nested parenthesis
%(hello ("world")) # same as "hello (\"world\")"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104749Z" creationid="hirofumiwakasugi" creationdate="20150901T104517Z">
        <seg>```ruby
# ダブルクォートと入れ子のカッコを含む
%(hello ("world")) # "hello (\"world\")" と同じ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# This generates:
#
#     def :foo
#       1
#     end
define_method :foo, 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T020931Z" creationid="hirofumiwakasugi" creationdate="20151001T020931Z">
        <seg>```ruby
# 下記が生成される
#
#     def :foo
#       1
#     end
define_method :foo, 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# This is a comment
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T050709Z" creationid="hirofumiwakasugi" creationdate="20150901T050709Z">
        <seg>```ruby
# This is a comment
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# elements is Tuple(Int32, Int32, Int32)
sum 1, 2, 3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042219Z" creationid="hirofumiwakasugi" creationdate="20150907T042219Z">
        <seg>```ruby
# Tuple(Int32, Int32, Int32)
sum 1, 2, 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# in spec/project_spec.cr
require "../src/project"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T162245Z" creationid="hirofumiwakasugi" creationdate="20150905T160402Z">
        <seg>```ruby
# spec/project_spec.cr
require "../src/project"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
$year = 2014
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053631Z" creationid="hirofumiwakasugi" creationdate="20150902T053631Z">
        <seg>```ruby
$year = 2014
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
%i(one two three) # [:one, :two, :three]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140106Z" creationid="hirofumiwakasugi" creationdate="20150901T140106Z">
        <seg>```ruby
%i(one two three) # [:one, :two, :three]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
%w(one two three) # ["one", "two", "three"]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140049Z" creationid="hirofumiwakasugi" creationdate="20150901T140049Z">
        <seg>```ruby
%w(one two three) # ["one", "two", "three"]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
'\'' # single quote
'\\' # backslash
'\e' # escape
'\f' # form feed
'\n' # newline
'\r' # carriage return
'\t' # tab
'\v' # vertical tab
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T074837Z" creationid="hirofumiwakasugi" creationdate="20150901T074605Z">
        <seg>```ruby
'\'' # シングルクォート
'\\' # バックスラッシュ
'\e' # エスケープ
'\f' # フォームフィード (改ページ)
'\n' # ニューライン (改行)
'\r' # キャリッジリターン (復帰)
'\t' # タブ
'\v' # 垂直タブ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
'\101' # == 'A'
'\123' # == 'S'
'\12'  # == '\n'
'\1'   # code point 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T081211Z" creationid="hirofumiwakasugi" creationdate="20150901T074839Z">
        <seg>```ruby
'\101' # == 'A'
'\123' # == 'S'
'\12'  # == '\n'
'\1'   # コードポイント1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
'\u0041' # == 'A'
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T080201Z" creationid="hirofumiwakasugi" creationdate="20150901T080201Z">
        <seg>```ruby
'\u0041' # == 'A'
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
'\u{41}'    # == 'A'
'\u{1F52E}' # == '  '
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T080332Z" creationid="hirofumiwakasugi" creationdate="20150901T080332Z">
        <seg>```ruby
'\u{41}'    # == 'A'
'\u{1F52E}' # == '  '
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
'a'
'z'
'0'
'_'
'あ'
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T074515Z" creationid="hirofumiwakasugi" creationdate="20150901T074515Z">
        <seg>```ruby
'a'
'z'
'0'
'_'
'あ'
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
+   # addition
-   # subtraction
*   # multiplication
/   # division
%   # modulo
!   # negation
&amp;   # bitwise and
|   # bitwise or
^   # bitwise xor
**  # exponentiation
&lt;&lt;  # shift left, append
&gt;&gt;  # shift right
==  # equals
!=  # not equals
&lt;   # less
&lt;=  # less or equal
&gt;   # greater
&gt;=  # greater or equal
&lt;=&gt; # comparison
=== # case equality
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T030904Z" creationid="hirofumiwakasugi" creationdate="20150909T025945Z">
        <seg>```ruby
+   # 加算
-   # 減算
*   # 乗算
/   # 除算
%   # 剰余
!   # 否定
&amp;   # ビット AND
|   # ビット OR
^   # ビット XOR
**  # べき乗
&lt;&lt;  # 左シフト/追加
&gt;&gt;  # 右シフト
==  # 等しい
!=  # 等しくない
&lt;   # 未満 (〜より小さい)
&lt;=  # 以下
&gt;   # 超 (〜より大きい)
&gt;=  # 以上
&lt;=&gt; # comparison
=== # case equality
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
+   # positive
-   # negative
!   # not
~   # bitwise complement
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T030436Z" creationid="hirofumiwakasugi" creationdate="20150909T025413Z">
        <seg>```ruby
+   # 正数
-   # 負数
!   # 否定
~   # ビットの補数
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
0123 # == 83
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052539Z" creationid="hirofumiwakasugi" creationdate="20150901T052539Z">
        <seg>```ruby
0123 # == 83
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
0b1101 # == 13
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052456Z" creationid="hirofumiwakasugi" creationdate="20150901T052456Z">
        <seg>```ruby
0b1101 # == 13
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
0xFE012D # == 16646445
0xfe012d # == 16646445
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052550Z" creationid="hirofumiwakasugi" creationdate="20150901T052550Z">
        <seg>```ruby
0xFE012D # == 16646445
0xfe012d # == 16646445
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
1      # Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052259Z" creationid="hirofumiwakasugi" creationdate="20150901T052259Z">
        <seg>```ruby
1      # Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
1 as String # Error
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T015429Z" creationid="hirofumiwakasugi" creationdate="20150930T015429Z">
        <seg>```ruby
1 as String # Error
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
1.0      # Float64
1.0_f32  # Float32
1_f32    # Float32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T074015Z" creationid="hirofumiwakasugi" creationdate="20150901T074015Z">
        <seg>```ruby
1.0      # Float64
1.0_f32  # Float32
1_f32    # Float32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
1_000_000 # better than 1000000
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052416Z" creationid="hirofumiwakasugi" creationdate="20150901T052416Z">
        <seg>```ruby
1_000_000 # 1000000 より読みやすい
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
1_000_000.111_111 # better than 1000000.111111
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T074039Z" creationid="hirofumiwakasugi" creationdate="20150901T074017Z">
        <seg>```ruby
1_000_000.111_111 # 1000000.111111 より読みやすい
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
3.times do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T031810Z" creationid="hirofumiwakasugi" creationdate="20150916T031810Z">
        <seg>```ruby
3.times do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
:hello
:good_bye</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T131122Z" creationid="hirofumiwakasugi" creationdate="20150901T131122Z">
        <seg>```ruby
:hello
:good_bye</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
@[AlwaysInline]
def foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073143Z" creationid="hirofumiwakasugi" creationdate="20150919T073143Z">
        <seg>```ruby
@[AlwaysInline]
def foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
@[Flags]
enum IOMode</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T114622Z" creationid="hirofumiwakasugi" creationdate="20150914T114622Z">
        <seg>```ruby
@[Flags]
enum IOMode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
@[Link("pcre")]
lib LibPCRE
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T142256Z" creationid="hirofumiwakasugi" creationdate="20151003T142256Z">
        <seg>```ruby
@[Link("pcre")]
lib LibPCRE
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
@[Link("pcre")]
lib PCRE</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T022114Z" creationid="hirofumiwakasugi" creationdate="20151008T022114Z">
        <seg>```ruby
@[Link("pcre")]
lib PCRE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
@[NoInline]
def foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073223Z" creationid="hirofumiwakasugi" creationdate="20150919T073223Z">
        <seg>```ruby
@[NoInline]
def foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
Animal.new # Error: can't instantiate abstract class Animal
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T035934Z" creationid="hirofumiwakasugi" creationdate="20150910T035934Z">
        <seg>```ruby
Animal.new # Error: can't instantiate abstract class Animal
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
Base64.encode64 "hello" #=&gt; "aGVsbG8="
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142913Z" creationid="hirofumiwakasugi" creationdate="20150911T142913Z">
        <seg>```ruby
Base64.encode64 "hello" #=&gt; "aGVsbG8="
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
C.cos(1.5) #=&gt; 0.0707372
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T143852Z" creationid="hirofumiwakasugi" creationdate="20151003T143852Z">
        <seg>```ruby
C.cos(1.5) #=&gt; 0.0707372
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
C.errno #=&gt; some value
C.errno = 0
C.errno #=&gt; 0
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053826Z" creationid="hirofumiwakasugi" creationdate="20151007T053826Z">
        <seg>```ruby
C.errno #=&gt; some value
C.errno = 0
C.errno #=&gt; 0
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
Color::Green.value #=&gt; 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024559Z" creationid="hirofumiwakasugi" creationdate="20150914T024559Z">
        <seg>```ruby
Color::Green.value #=&gt; 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
Color::Red #:: Color
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024540Z" creationid="hirofumiwakasugi" creationdate="20150914T024540Z">
        <seg>```ruby
Color::Red #:: Color
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
IOMode::None.value #=&gt; 0
IOMode::All.value  #=&gt; 7
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150915T051527Z" creationid="hirofumiwakasugi" creationdate="20150915T051527Z">
        <seg>```ruby
IOMode::None.value #=&gt; 0
IOMode::All.value  #=&gt; 7
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
Int32
My::Nested::Type
Array(String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010421Z" creationid="hirofumiwakasugi" creationdate="20151009T010421Z">
        <seg>```ruby
Int32
My::Nested::Type
Array(String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
MyBox(Int32).new("hello")
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063253Z" creationid="hirofumiwakasugi" creationdate="20150912T063253Z">
        <seg>```ruby
MyBox(Int32).new("hello")
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
MyBox(Int32).new(1)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T062054Z" creationid="hirofumiwakasugi" creationdate="20150912T062054Z">
        <seg>```ruby
MyBox(Int32).new(1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
MyBox.new(1)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T060645Z" creationid="hirofumiwakasugi" creationdate="20150912T060645Z">
        <seg>```ruby
MyBox.new(1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
MyBox.new(1)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T055535Z" creationid="hirofumiwakasugi" creationdate="20150912T055535Z">
        <seg>```ruby
MyBox.new(1)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
MyBox.new(1)       #:: MyBox(Int32)
MyBox.new("hello") #:: MyBox(String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T070753Z" creationid="hirofumiwakasugi" creationdate="20150912T070753Z">
        <seg>```ruby
MyBox.new(1)       #:: MyBox(Int32)
MyBox.new("hello") #:: MyBox(String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
MyBox.new(nil)
MyBox.new("hello")
MyBox.new(1)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T055748Z" creationid="hirofumiwakasugi" creationdate="20150912T055748Z">
        <seg>```ruby
MyBox.new(nil)
MyBox.new("hello")
MyBox.new(1)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
MyType(Int32 | String) {1, 2, "foo"}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140602Z" creationid="hirofumiwakasugi" creationdate="20150901T140602Z">
        <seg>```ruby
MyType(Int32 | String) {1, 2, "foo"}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
MyType(String, String) {"foo": "bar"}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T143117Z" creationid="hirofumiwakasugi" creationdate="20150901T143117Z">
        <seg>```ruby
MyType(String, String) {"foo": "bar"}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
MyType{"foo": "bar"}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T143113Z" creationid="hirofumiwakasugi" creationdate="20150901T143113Z">
        <seg>```ruby
MyType{"foo": "bar"}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
MyType{1, 2, 3}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140318Z" creationid="hirofumiwakasugi" creationdate="20150901T140318Z">
        <seg>```ruby
MyType{1, 2, 3}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
PI = 3.14</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055323Z" creationid="hirofumiwakasugi" creationdate="20150913T055323Z">
        <seg>```ruby
PI = 3.14</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
Person.new "John"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062323Z" creationid="hirofumiwakasugi" creationdate="20150930T062323Z">
        <seg>```ruby
Person.new "John"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
Proc(Int32, String).new { |x| x.to_s } # Proc(Int32, String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021459Z" creationid="hirofumiwakasugi" creationdate="20150902T021459Z">
        <seg>```ruby
Proc(Int32, String).new { |x| x.to_s } # Proc(Int32, String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
TEN = begin</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055807Z" creationid="hirofumiwakasugi" creationdate="20150913T055807Z">
        <seg>```ruby
TEN = begin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
VALUES = [1, 2, 3]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T041453Z" creationid="hirofumiwakasugi" creationdate="20151001T041453Z">
        <seg>```ruby
VALUES = [1, 2, 3]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
X.callback -&gt;(x) { x + 1 }
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024510Z" creationid="hirofumiwakasugi" creationdate="20151008T024510Z">
        <seg>```ruby
X.callback -&gt;(x) { x + 1 }
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
X::SomeEnum::One #=&gt; One
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052915Z" creationid="hirofumiwakasugi" creationdate="20151007T052915Z">
        <seg>```ruby
X::SomeEnum::One #=&gt; One
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
[1, 2, 3]         # Array(Int32)
[1, "hello", 'x'] # Array(Int32 | String | Char)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T131950Z" creationid="hirofumiwakasugi" creationdate="20150901T131950Z">
        <seg>```ruby
[1, 2, 3]         # Array(Int32)
[1, "hello", 'x'] # Array(Int32 | String | Char)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
[]  # array index (raises on out of bounds)
[]? # array index (nil on out of bounds)
[]= # array index assignment
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T031026Z" creationid="hirofumiwakasugi" creationdate="20150909T030958Z">
        <seg>```ruby
[]  # 配列のインデックス (配列長を超えると例外が発生)
[]? # 配列のインデックス (配列長を超えると nil)
[]= # 配列のインデックス指定代入
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
[] of Int32 # same as Array(Int32).new
[]          # syntax error
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T135831Z" creationid="hirofumiwakasugi" creationdate="20150901T135817Z">
        <seg>```ruby
[] of Int32 # Array(Int32).new と同じ
[]          # シンタックスエラーになる
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a + b
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025054Z" creationid="hirofumiwakasugi" creationdate="20150909T025054Z">
        <seg>```ruby
a + b
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035023Z" creationid="hirofumiwakasugi" creationdate="20150906T035023Z">
        <seg>```ruby
a = 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
a.is_a?(Int32)          #=&gt; true
a.is_a?(String)         #=&gt; false
a.is_a?(Number)         #=&gt; true
a.is_a?(Int32 | String) #=&gt; true
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T005345Z" creationid="hirofumiwakasugi" creationdate="20150930T005345Z">
        <seg>```ruby
a = 1
a.is_a?(Int32)          #=&gt; true
a.is_a?(String)         #=&gt; false
a.is_a?(Number)         #=&gt; true
a.is_a?(Int32 | String) #=&gt; true
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
a.responds_to?(:abs)    #=&gt; true
a.responds_to?(:length) #=&gt; false
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T013907Z" creationid="hirofumiwakasugi" creationdate="20150930T013907Z">
        <seg>```ruby
a = 1
a.responds_to?(:abs)    #=&gt; true
a.responds_to?(:length) #=&gt; false
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
b = 2
"sum = #{a + b}"        # "sum = 3"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T105435Z" creationid="hirofumiwakasugi" creationdate="20150901T105435Z">
        <seg>```ruby
a = 1
b = 2
"sum = #{a + b}"        # "sum = 3"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
b = 2
a, b = b, a
a #=&gt; 2
b #=&gt; 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T055738Z" creationid="hirofumiwakasugi" creationdate="20150902T055738Z">
        <seg>```ruby
a = 1
b = 2
a, b = b, a
a #=&gt; 2
b #=&gt; 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
b = a as Int32 | Float64
b #:: Int32 | Float64
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T061302Z" creationid="hirofumiwakasugi" creationdate="20150930T061302Z">
        <seg>```ruby
a = 1
b = a as Int32 | Float64
b #:: Int32 | Float64
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
b = typeof(a) #=&gt; Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062507Z" creationid="hirofumiwakasugi" creationdate="20150930T062507Z">
        <seg>```ruby
a = 1
b = typeof(a) #=&gt; Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
if a &gt; 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T010128Z" creationid="hirofumiwakasugi" creationdate="20150903T010128Z">
        <seg>```ruby
a = 1
if a &gt; 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T011255Z" creationid="hirofumiwakasugi" creationdate="20150903T011255Z">
        <seg>```ruby
a = 1
if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
ptr = pointerof(a)
ptr[100_000] = 2   # undefined behaviour, probably a segmentation fault
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012907Z" creationid="hirofumiwakasugi" creationdate="20151009T012741Z">
        <seg>```ruby
a = 1
ptr = pointerof(a)
ptr[100_000] = 2   # 定義されていない振る舞いであるため、おそらくセグメンテーション違反となる
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
sizeof(typeof(a)) #=&gt; 4
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T040059Z" creationid="hirofumiwakasugi" creationdate="20150906T040059Z">
        <seg>```ruby
a = 1
sizeof(typeof(a)) #=&gt; 4
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
while a &lt; 5</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052325Z" creationid="hirofumiwakasugi" creationdate="20150905T052325Z">
        <seg>```ruby
a = 1
while a &lt; 5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
while some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052143Z" creationid="hirofumiwakasugi" creationdate="20150905T052143Z">
        <seg>```ruby
a = 1
while some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1 + 2
a #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072340Z" creationid="hirofumiwakasugi" creationdate="20150901T072340Z">
        <seg>```ruby
a = 1 + 2
a #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1 &gt; 2 ? 3 : 4</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013721Z" creationid="hirofumiwakasugi" creationdate="20150903T013721Z">
        <seg>```ruby
a = 1 &gt; 2 ? 3 : 4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 2
while (a += 1) &lt; 20</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052239Z" creationid="hirofumiwakasugi" creationdate="20150905T052239Z">
        <seg>```ruby
a = 2
while (a += 1) &lt; 20</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 2 if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012904Z" creationid="hirofumiwakasugi" creationdate="20150903T012904Z">
        <seg>```ruby
a = 2 if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = [] of Person
x = a.map { |f| f.name as String } # OK
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062208Z" creationid="hirofumiwakasugi" creationdate="20150930T062208Z">
        <seg>```ruby
a = [] of Person
x = a.map { |f| f.name as String } # OK
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = if 2 &gt; 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013132Z" creationid="hirofumiwakasugi" creationdate="20150903T013132Z">
        <seg>```ruby
a = if 2 &gt; 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = some_condition ? 1 : "hello"
# a :: Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022014Z" creationid="hirofumiwakasugi" creationdate="20150903T022014Z">
        <seg>```ruby
a = some_condition ? 1 : "hello"
# a :: Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = some_condition ? nil : 3
# a is Int32 or Nil</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014257Z" creationid="hirofumiwakasugi" creationdate="20150903T014137Z">
        <seg>```ruby
a = some_condition ? nil : 3
# a は Int32 か Nil のいずれか</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a.+(b)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025102Z" creationid="hirofumiwakasugi" creationdate="20150909T025102Z">
        <seg>```ruby
a.+(b)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a_as_int = a as Int32
a_as_int.abs          # works, compiler knows that a_as_int is Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T015201Z" creationid="hirofumiwakasugi" creationdate="20150930T014930Z">
        <seg>```ruby
a_as_int = a as Int32
a_as_int.abs          # コンパイラは a_as_int が Int32 であると知っているので動作する
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
abstract class Animal</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040129Z" creationid="hirofumiwakasugi" creationdate="20150910T040129Z">
        <seg>```ruby
abstract class Animal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
abstract class Animal
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T035315Z" creationid="hirofumiwakasugi" creationdate="20150910T035315Z">
        <seg>```ruby
abstract class Animal
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
add 1, 2 # same as add(1, 2)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021627Z" creationid="hirofumiwakasugi" creationdate="20150904T021627Z">
        <seg>```ruby
add 1, 2 # add(1, 2) と同じ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias ComplexProc = (Int32 -&gt; Int32) -&gt; String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011652Z" creationid="hirofumiwakasugi" creationdate="20151009T011652Z">
        <seg>```ruby
alias ComplexProc = (Int32 -&gt; Int32) -&gt; String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32 = Pointer(Int32)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010921Z" creationid="hirofumiwakasugi" creationdate="20151009T010921Z">
        <seg>```ruby
alias Int32 = Pointer(Int32)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32AndCharToString = Int32, Char -&gt; String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011403Z" creationid="hirofumiwakasugi" creationdate="20151009T011403Z">
        <seg>```ruby
alias Int32AndCharToString = Int32, Char -&gt; String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32OrNil = Int32 | ::Nil
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010707Z" creationid="hirofumiwakasugi" creationdate="20151009T010707Z">
        <seg>```ruby
alias Int32OrNil = Int32 | ::Nil
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32OrNil = Int32?
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010704Z" creationid="hirofumiwakasugi" creationdate="20151009T010704Z">
        <seg>```ruby
alias Int32OrNil = Int32?
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32OrString = Int32 | String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010438Z" creationid="hirofumiwakasugi" creationdate="20151009T010438Z">
        <seg>```ruby
alias Int32OrString = Int32 | String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32Ptr = Int32*
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010919Z" creationid="hirofumiwakasugi" creationdate="20151009T010919Z">
        <seg>```ruby
alias Int32Ptr = Int32*
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32StringTuple = Tuple(Int32, String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011135Z" creationid="hirofumiwakasugi" creationdate="20151009T011135Z">
        <seg>```ruby
alias Int32StringTuple = Tuple(Int32, String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32StringTuple = {Int32, String}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011133Z" creationid="hirofumiwakasugi" creationdate="20151009T011133Z">
        <seg>```ruby
alias Int32StringTuple = {Int32, String}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32ToString = Int32 -&gt; String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011309Z" creationid="hirofumiwakasugi" creationdate="20151009T011309Z">
        <seg>```ruby
alias Int32ToString = Int32 -&gt; String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32ToString = Proc(Int32, String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011310Z" creationid="hirofumiwakasugi" creationdate="20151009T011310Z">
        <seg>```ruby
alias Int32ToString = Proc(Int32, String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32_8 = Int32[8]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011053Z" creationid="hirofumiwakasugi" creationdate="20151009T011053Z">
        <seg>```ruby
alias Int32_8 = Int32[8]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32_8 = StaticArray(Int32, 8)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011055Z" creationid="hirofumiwakasugi" creationdate="20151009T011055Z">
        <seg>```ruby
alias Int32_8 = StaticArray(Int32, 8)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias PInt32 = Pointer(Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T070808Z" creationid="hirofumiwakasugi" creationdate="20150919T070808Z">
        <seg>```ruby
alias PInt32 = Pointer(Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias ProcThatReturnsInt32 = -&gt; Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011353Z" creationid="hirofumiwakasugi" creationdate="20151009T011353Z">
        <seg>```ruby
alias ProcThatReturnsInt32 = -&gt; Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias RecArray = Array(Int32) | Array(RecArray)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071328Z" creationid="hirofumiwakasugi" creationdate="20150919T071328Z">
        <seg>```ruby
alias RecArray = Array(Int32) | Array(RecArray)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias SameAsInt32 = typeof(1 + 2)
alias Int32OrString = typeof(1, "a")
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012332Z" creationid="hirofumiwakasugi" creationdate="20151009T012332Z">
        <seg>```ruby
alias SameAsInt32 = typeof(1 + 2)
alias Int32OrString = typeof(1, "a")
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
array = [1, 2, 3]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T020103Z" creationid="hirofumiwakasugi" creationdate="20150930T020103Z">
        <seg>```ruby
array = [1, 2, 3]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
array = [1, 2, 3]
array[4]  # raises because of IndexOutOfBounds
array[4]? # returns nil because of index out of bounds
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T023851Z" creationid="hirofumiwakasugi" creationdate="20150907T023803Z">
        <seg>```ruby
array = [1, 2, 3]
array[4]  # IndexOutOfBounds の例外が発生
array[4]? # インデックス範囲外のため nil が返る
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
ary = [1, 2, 3]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T061345Z" creationid="hirofumiwakasugi" creationdate="20150930T061345Z">
        <seg>```ruby
ary = [1, 2, 3]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
ary = [1, 2, 3]
ary.map { |x| x + 1 }         #=&gt; [2, 3, 4]
ary.select { |x| x % 2 == 1 } #=&gt; [1, 3]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023736Z" creationid="hirofumiwakasugi" creationdate="20150916T023736Z">
        <seg>```ruby
ary = [1, 2, 3]
ary.map { |x| x + 1 }         #=&gt; [2, 3, 4]
ary.select { |x| x % 2 == 1 } #=&gt; [1, 3]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
begin</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011957Z" creationid="hirofumiwakasugi" creationdate="20150907T011957Z">
        <seg>```ruby
begin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
buffer :: UInt8[256]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T115712Z" creationid="hirofumiwakasugi" creationdate="20150906T115712Z">
        <seg>```ruby
buffer :: UInt8[256]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
case
when cond1, cond2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010125Z" creationid="hirofumiwakasugi" creationdate="20151001T010125Z">
        <seg>```ruby
case
when cond1, cond2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
case exp
when value1, value2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T023532Z" creationid="hirofumiwakasugi" creationdate="20150903T023532Z">
        <seg>```ruby
case exp
when value1, value2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
case num
when .even?</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010102Z" creationid="hirofumiwakasugi" creationdate="20151001T010102Z">
        <seg>```ruby
case num
when .even?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
case var
when String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010027Z" creationid="hirofumiwakasugi" creationdate="20151001T010027Z">
        <seg>```ruby
case var
when String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Animal
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031539Z" creationid="hirofumiwakasugi" creationdate="20150910T031539Z">
        <seg>```ruby
class Animal
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Array</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063207Z" creationid="hirofumiwakasugi" creationdate="20150930T063207Z">
        <seg>```ruby
class Array</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Counter</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040805Z" creationid="hirofumiwakasugi" creationdate="20150910T040805Z">
        <seg>```ruby
class Counter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Employee &lt; Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032833Z" creationid="hirofumiwakasugi" creationdate="20150909T032833Z">
        <seg>```ruby
class Employee &lt; Person</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041636Z" creationid="hirofumiwakasugi" creationdate="20150910T041636Z">
        <seg>```ruby
class Foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Model</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061907Z" creationid="hirofumiwakasugi" creationdate="20150918T061907Z">
        <seg>```ruby
class Model</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class MyArray</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T031030Z" creationid="hirofumiwakasugi" creationdate="20150909T031030Z">
        <seg>```ruby
class MyArray</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class MyBox</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T054626Z" creationid="hirofumiwakasugi" creationdate="20150912T054626Z">
        <seg>```ruby
class MyBox</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class MyBox(T)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T062003Z" creationid="hirofumiwakasugi" creationdate="20150912T062003Z">
        <seg>```ruby
class MyBox(T)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class MyDictionary(K, V)
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T065702Z" creationid="hirofumiwakasugi" creationdate="20150912T065702Z">
        <seg>```ruby
class MyDictionary(K, V)
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class MyException &lt; Exception
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011645Z" creationid="hirofumiwakasugi" creationdate="20150907T011645Z">
        <seg>```ruby
class MyException &lt; Exception
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Object</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T012112Z" creationid="hirofumiwakasugi" creationdate="20151002T012112Z">
        <seg>```ruby
class Object</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Parent</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041158Z" creationid="hirofumiwakasugi" creationdate="20150910T041158Z">
        <seg>```ruby
class Parent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Parent
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011957Z" creationid="hirofumiwakasugi" creationdate="20151009T011957Z">
        <seg>```ruby
class Parent
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Parent(T)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T062012Z" creationid="hirofumiwakasugi" creationdate="20150924T062012Z">
        <seg>```ruby
class Parent(T)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055610Z" creationid="hirofumiwakasugi" creationdate="20150904T055610Z">
        <seg>```ruby
class Person</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Person
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T022025Z" creationid="hirofumiwakasugi" creationdate="20150904T022025Z">
        <seg>```ruby
class Person
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Point</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035030Z" creationid="hirofumiwakasugi" creationdate="20150906T035030Z">
        <seg>```ruby
class Point</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def add(x : Number, y : Number)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042641Z" creationid="hirofumiwakasugi" creationdate="20150907T042641Z">
        <seg>```ruby
def add(x : Number, y : Number)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def add(x, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021052Z" creationid="hirofumiwakasugi" creationdate="20150904T021052Z">
        <seg>```ruby
def add(x, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def baz(x, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021408Z" creationid="hirofumiwakasugi" creationdate="20150904T021408Z">
        <seg>```ruby
def baz(x, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def capture(&amp;block)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024151Z" creationid="hirofumiwakasugi" creationdate="20150917T024151Z">
        <seg>```ruby
def capture(&amp;block)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def change_it(tz)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T051840Z" creationid="hirofumiwakasugi" creationdate="20151007T051840Z">
        <seg>```ruby
def change_it(tz)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def change_it(value)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052423Z" creationid="hirofumiwakasugi" creationdate="20151007T052423Z">
        <seg>```ruby
def change_it(value)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def counter</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T053728Z" creationid="hirofumiwakasugi" creationdate="20150918T053728Z">
        <seg>```ruby
def counter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def even?(num)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T015356Z" creationid="hirofumiwakasugi" creationdate="20150904T015356Z">
        <seg>```ruby
def even?(num)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T030210Z" creationid="hirofumiwakasugi" creationdate="20150908T030210Z">
        <seg>```ruby
def foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def foo(*args : Int32)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025929Z" creationid="hirofumiwakasugi" creationdate="20150908T025929Z">
        <seg>```ruby
def foo(*args : Int32)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def foo(x : Array(T))</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T035911Z" creationid="hirofumiwakasugi" creationdate="20150908T035911Z">
        <seg>```ruby
def foo(x : Array(T))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def foo(x : Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011904Z" creationid="hirofumiwakasugi" creationdate="20151009T011904Z">
        <seg>```ruby
def foo(x : Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def foo(x : Int32)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025541Z" creationid="hirofumiwakasugi" creationdate="20150908T025541Z">
        <seg>```ruby
def foo(x : Int32)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def foo(x : Int32.class)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025810Z" creationid="hirofumiwakasugi" creationdate="20150908T025810Z">
        <seg>```ruby
def foo(x : Int32.class)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def foo(x : Int32.class)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025722Z" creationid="hirofumiwakasugi" creationdate="20150908T025722Z">
        <seg>```ruby
def foo(x : Int32.class)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def foo(x : T)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T030349Z" creationid="hirofumiwakasugi" creationdate="20150908T030349Z">
        <seg>```ruby
def foo(x : T)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def foo(x : T.class)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T040534Z" creationid="hirofumiwakasugi" creationdate="20150908T040534Z">
        <seg>```ruby
def foo(x : T.class)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def int_to_int(&amp;block : Int32 -&gt; Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T040124Z" creationid="hirofumiwakasugi" creationdate="20150916T040124Z">
        <seg>```ruby
def int_to_int(&amp;block : Int32 -&gt; Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def many</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022216Z" creationid="hirofumiwakasugi" creationdate="20150916T022216Z">
        <seg>```ruby
def many</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def one</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022048Z" creationid="hirofumiwakasugi" creationdate="20150902T022048Z">
        <seg>```ruby
def one</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def paint(color : Color)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011820Z" creationid="hirofumiwakasugi" creationdate="20150916T011820Z">
        <seg>```ruby
def paint(color : Color)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def paint(color : Symbol)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T012133Z" creationid="hirofumiwakasugi" creationdate="20150916T012133Z">
        <seg>```ruby
def paint(color : Symbol)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def plus_one(x)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022124Z" creationid="hirofumiwakasugi" creationdate="20150902T022124Z">
        <seg>```ruby
def plus_one(x)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def say_hello</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025053Z" creationid="hirofumiwakasugi" creationdate="20150917T025053Z">
        <seg>```ruby
def say_hello</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def some</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023033Z" creationid="hirofumiwakasugi" creationdate="20150916T023033Z">
        <seg>```ruby
def some</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def some_method</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014222Z" creationid="hirofumiwakasugi" creationdate="20150907T014222Z">
        <seg>```ruby
def some_method</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def some_method : String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T024642Z" creationid="hirofumiwakasugi" creationdate="20150909T024642Z">
        <seg>```ruby
def some_method : String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def some_method(x, y = 1, z = 2, w = 3)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T113107Z" creationid="hirofumiwakasugi" creationdate="20150906T113107Z">
        <seg>```ruby
def some_method(x, y = 1, z = 2, w = 3)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def some_proc(&amp;block : Int32 -&gt; Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061638Z" creationid="hirofumiwakasugi" creationdate="20150918T061638Z">
        <seg>```ruby
def some_proc(&amp;block : Int32 -&gt; Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def some_proc(&amp;block : Int32 -&gt; _)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061951Z" creationid="hirofumiwakasugi" creationdate="20150918T061951Z">
        <seg>```ruby
def some_proc(&amp;block : Int32 -&gt; _)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def some_proc(&amp;block : Int32 -&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061942Z" creationid="hirofumiwakasugi" creationdate="20150918T061942Z">
        <seg>```ruby
def some_proc(&amp;block : Int32 -&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def sum(*elements)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042104Z" creationid="hirofumiwakasugi" creationdate="20150907T042104Z">
        <seg>```ruby
def sum(*elements)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def thrice</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024340Z" creationid="hirofumiwakasugi" creationdate="20150916T024340Z">
        <seg>```ruby
def thrice</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def transform(value)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024143Z" creationid="hirofumiwakasugi" creationdate="20150916T024143Z">
        <seg>```ruby
def transform(value)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def twice</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T013504Z" creationid="hirofumiwakasugi" creationdate="20150916T013504Z">
        <seg>```ruby
def twice</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def twice(&amp;block)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T014713Z" creationid="hirofumiwakasugi" creationdate="20150916T014713Z">
        <seg>```ruby
def twice(&amp;block)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
enum Color</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024114Z" creationid="hirofumiwakasugi" creationdate="20150914T024114Z">
        <seg>```ruby
enum Color</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
enum Color : UInt8</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024636Z" creationid="hirofumiwakasugi" creationdate="20150914T024636Z">
        <seg>```ruby
enum Color : UInt8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
f = -&gt;(x : Int32) { x + 1 }
X.callback(f)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024247Z" creationid="hirofumiwakasugi" creationdate="20151008T024247Z">
        <seg>```ruby
f = -&gt;(x : Int32) { x + 1 }
X.callback(f)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
foo_forward do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T032352Z" creationid="hirofumiwakasugi" creationdate="20150917T032352Z">
        <seg>```ruby
foo_forward do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
foo_or_bar = /foo|bar/
heeello    = /h(e+)llo/
integer    = /\d+/
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T015738Z" creationid="hirofumiwakasugi" creationdate="20150902T015738Z">
        <seg>```ruby
foo_or_bar = /foo|bar/
heeello    = /h(e+)llo/
integer    = /\d+/
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
hash = {} of Int32 =&gt; String
another_hash = typeof(hash).new #:: Hash(Int32, String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062813Z" creationid="hirofumiwakasugi" creationdate="20150930T062813Z">
        <seg>```ruby
hash = {} of Int32 =&gt; String
another_hash = typeof(hash).new #:: Hash(Int32, String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
i = 0
while i &lt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T032841Z" creationid="hirofumiwakasugi" creationdate="20150916T032841Z">
        <seg>```ruby
i = 0
while i &lt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
i = 1
puts "Got: #{i}"
i = 2
puts "Got: #{i}"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T031437Z" creationid="hirofumiwakasugi" creationdate="20150916T031437Z">
        <seg>```ruby
i = 1
puts "Got: #{i}"
i = 2
puts "Got: #{i}"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
if 1 &gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013554Z" creationid="hirofumiwakasugi" creationdate="20150903T013512Z">
        <seg>```ruby
# 例1
if 1 &gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
if @a</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T015310Z" creationid="hirofumiwakasugi" creationdate="20150903T015310Z">
        <seg>```ruby
if @a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
if @a.is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022437Z" creationid="hirofumiwakasugi" creationdate="20150903T022437Z">
        <seg>```ruby
if @a.is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
if @a.responds_to?(:abs)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030538Z" creationid="hirofumiwakasugi" creationdate="20150903T030538Z">
        <seg>```ruby
if @a.responds_to?(:abs)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
if a &amp;&amp; b</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014802Z" creationid="hirofumiwakasugi" creationdate="20150903T014802Z">
        <seg>```ruby
if a &amp;&amp; b</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
if a = some_expression</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014724Z" creationid="hirofumiwakasugi" creationdate="20150903T014724Z">
        <seg>```ruby
if a = some_expression</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
if a.is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T021655Z" creationid="hirofumiwakasugi" creationdate="20150903T021655Z">
        <seg>```ruby
if a.is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
if a.is_a?(String) &amp;&amp; b.is_a?(Number)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022321Z" creationid="hirofumiwakasugi" creationdate="20150903T022321Z">
        <seg>```ruby
if a.is_a?(String) &amp;&amp; b.is_a?(Number)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
if a.responds_to?(:abs)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030235Z" creationid="hirofumiwakasugi" creationdate="20150903T030235Z">
        <seg>```ruby
if a.responds_to?(:abs)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
if method # first call to a method that can return Int32 or Nil</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T021019Z" creationid="hirofumiwakasugi" creationdate="20150903T021019Z">
        <seg>```ruby
if method # メソッドの最初の呼び出し (メソッドは Int32 か Nil を返すとする)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T010635Z" creationid="hirofumiwakasugi" creationdate="20150903T010635Z">
        <seg>```ruby
if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
ifdef linux &amp;&amp; x86_64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043408Z" creationid="hirofumiwakasugi" creationdate="20150908T043408Z">
        <seg>```ruby
ifdef linux &amp;&amp; x86_64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
ifdef x86_64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043209Z" creationid="hirofumiwakasugi" creationdate="20150908T043209Z">
        <seg>```ruby
ifdef x86_64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
include Base64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T145241Z" creationid="hirofumiwakasugi" creationdate="20150911T145241Z">
        <seg>```ruby
include Base64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
invoke(proc) # Error: wrong number of arguments for 'invoke' (1 for 0)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024659Z" creationid="hirofumiwakasugi" creationdate="20150917T024659Z">
        <seg>```ruby
invoke(proc) # Error: wrong number of arguments for 'invoke' (1 for 0)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
john = Person.new "John"
john.name.length
one = Person.new 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043724Z" creationid="hirofumiwakasugi" creationdate="20150905T043724Z">
        <seg>```ruby
john = Person.new "John"
john.name.length
one = Person.new 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
john = Person.new "John"
one = Person.new 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043117Z" creationid="hirofumiwakasugi" creationdate="20150905T043117Z">
        <seg>```ruby
john = Person.new "John"
one = Person.new 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
john = Person.new "John"
one = Person.new 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135435Z" creationid="hirofumiwakasugi" creationdate="20150904T135435Z">
        <seg>```ruby
john = Person.new "John"
one = Person.new 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
john = Person.new "John"
peter = Person.new "Peter"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055720Z" creationid="hirofumiwakasugi" creationdate="20150904T055720Z">
        <seg>```ruby
john = Person.new "John"
peter = Person.new "Peter"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
john.become_older by: 5
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T113000Z" creationid="hirofumiwakasugi" creationdate="20150906T113000Z">
        <seg>```ruby
john.become_older by: 5
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
john.pet.talk # Error: undefined method 'talk' for Animal
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T034140Z" creationid="hirofumiwakasugi" creationdate="20150910T034140Z">
        <seg>```ruby
john.pet.talk # Error: undefined method 'talk' for Animal
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
john.pet.talk #=&gt; "Woof!"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T035318Z" creationid="hirofumiwakasugi" creationdate="20150910T035318Z">
        <seg>```ruby
john.pet.talk #=&gt; "Woof!"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
lib C</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043753Z" creationid="hirofumiwakasugi" creationdate="20150908T043753Z">
        <seg>```ruby
lib C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
lib LLVMIntrinsics</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T041702Z" creationid="hirofumiwakasugi" creationdate="20151005T041702Z">
        <seg>```ruby
lib LLVMIntrinsics</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
lib LibFoo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T074353Z" creationid="hirofumiwakasugi" creationdate="20150919T074353Z">
        <seg>```ruby
lib LibFoo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
lib LibSDL</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T041458Z" creationid="hirofumiwakasugi" creationdate="20151005T041458Z">
        <seg>```ruby
lib LibSDL</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
lib MyLib</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T042603Z" creationid="hirofumiwakasugi" creationdate="20151005T042603Z">
        <seg>```ruby
lib MyLib</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
lib U</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052109Z" creationid="hirofumiwakasugi" creationdate="20151007T052109Z">
        <seg>```ruby
lib U</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
lib X</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T040825Z" creationid="hirofumiwakasugi" creationdate="20151005T040825Z">
        <seg>```ruby
lib X</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
local += 1  # same as: local = local + 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054433Z" creationid="hirofumiwakasugi" creationdate="20150902T054433Z">
        <seg>```ruby
local += 1  # local = local + 1 と同じ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
loop do</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052207Z" creationid="hirofumiwakasugi" creationdate="20150905T052207Z">
        <seg>```ruby
loop do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
macro define_dummy_methods(*names)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040736Z" creationid="hirofumiwakasugi" creationdate="20151001T040736Z">
        <seg>```ruby
macro define_dummy_methods(*names)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
macro define_dummy_methods(hash)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040429Z" creationid="hirofumiwakasugi" creationdate="20151001T040429Z">
        <seg>```ruby
macro define_dummy_methods(hash)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
macro define_dummy_methods(names)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040300Z" creationid="hirofumiwakasugi" creationdate="20151001T040300Z">
        <seg>```ruby
macro define_dummy_methods(names)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
macro define_method(name, content)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T014649Z" creationid="hirofumiwakasugi" creationdate="20151001T014649Z">
        <seg>```ruby
macro define_method(name, content)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
macro dont_update_x</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T020011Z" creationid="hirofumiwakasugi" creationdate="20151002T020011Z">
        <seg>```ruby
macro dont_update_x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
macro fresh_vars_sample(*names)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T021006Z" creationid="hirofumiwakasugi" creationdate="20151002T021006Z">
        <seg>```ruby
macro fresh_vars_sample(*names)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
macro method_missing(name, args, block)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014453Z" creationid="hirofumiwakasugi" creationdate="20151002T014453Z">
        <seg>```ruby
macro method_missing(name, args, block)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
macro println(*values)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040859Z" creationid="hirofumiwakasugi" creationdate="20151001T040859Z">
        <seg>```ruby
macro println(*values)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
macro update_x</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T015557Z" creationid="hirofumiwakasugi" creationdate="20151002T015557Z">
        <seg>```ruby
macro update_x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
module Base64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142822Z" creationid="hirofumiwakasugi" creationdate="20150911T142822Z">
        <seg>```ruby
module Base64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
module Curses</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T131044Z" creationid="hirofumiwakasugi" creationdate="20150911T131044Z">
        <seg>```ruby
module Curses</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
module ItemsLength</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T133835Z" creationid="hirofumiwakasugi" creationdate="20150911T133835Z">
        <seg>```ruby
module ItemsLength</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
module Json</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071401Z" creationid="hirofumiwakasugi" creationdate="20150919T071401Z">
        <seg>```ruby
module Json</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
module Moo
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T150637Z" creationid="hirofumiwakasugi" creationdate="20150911T150637Z">
        <seg>```ruby
module Moo
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
module Moo(T)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061137Z" creationid="hirofumiwakasugi" creationdate="20150924T061137Z">
        <seg>```ruby
module Moo(T)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
module SomeLength</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T141819Z" creationid="hirofumiwakasugi" creationdate="20150911T141819Z">
        <seg>```ruby
module SomeLength</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
module SomeModule</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142552Z" creationid="hirofumiwakasugi" creationdate="20150911T142552Z">
        <seg>```ruby
module SomeModule</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
name = "Crystal"
age = 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T051824Z" creationid="hirofumiwakasugi" creationdate="20150902T051824Z">
        <seg>```ruby
name = "Crystal"
age = 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
name, age = "Crystal", 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T055431Z" creationid="hirofumiwakasugi" creationdate="20150902T055431Z">
        <seg>```ruby
name, age = "Crystal", 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
names = "John", "Peter", "Jack"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060208Z" creationid="hirofumiwakasugi" creationdate="20150902T060208Z">
        <seg>```ruby
names = "John", "Peter", "Jack"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
nil
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T050933Z" creationid="hirofumiwakasugi" creationdate="20150901T050933Z">
        <seg>```ruby
nil
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
objects[1], objects[2] = 3, 4</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060317Z" creationid="hirofumiwakasugi" creationdate="20150902T060317Z">
        <seg>```ruby
objects[1], objects[2] = 3, 4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
one = Person.new 1
one.name #=&gt; 1
one.name + 2 #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T134634Z" creationid="hirofumiwakasugi" creationdate="20150904T134634Z">
        <seg>```ruby
one = Person.new 1
one.name #=&gt; 1
one.name + 2 #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
person.age += 1        # same as: person.age = person.age + 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T055054Z" creationid="hirofumiwakasugi" creationdate="20150902T055054Z">
        <seg>```ruby
person.age += 1        # person.age = person.age + 1 と同じ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
person.name, person.age = "John", 32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060244Z" creationid="hirofumiwakasugi" creationdate="20150902T060244Z">
        <seg>```ruby
person.name, person.age = "John", 32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
pid = ...
options = ...</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043924Z" creationid="hirofumiwakasugi" creationdate="20151005T043924Z">
        <seg>```ruby
pid = ...
options = ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
pid = ...
options = ...
status_ptr :: Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043715Z" creationid="hirofumiwakasugi" creationdate="20151005T043715Z">
        <seg>```ruby
pid = ...
options = ...
status_ptr :: Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
proc = -&gt;(x : Int32, y : Int32) { x + y }
proc.call(1, 2) #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021955Z" creationid="hirofumiwakasugi" creationdate="20150902T021955Z">
        <seg>```ruby
proc = -&gt;(x : Int32, y : Int32) { x + y }
proc.call(1, 2) #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
proc = capture { puts "Hello" }
twice do</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025015Z" creationid="hirofumiwakasugi" creationdate="20150917T025015Z">
        <seg>```ruby
proc = capture { puts "Hello" }
twice do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
ptr = Pointer(Int32).malloc(1)
ptr as Int8*                    #:: Pointer(Int8)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T015742Z" creationid="hirofumiwakasugi" creationdate="20150930T015742Z">
        <seg>```ruby
ptr = Pointer(Int32).malloc(1)
ptr as Int8*                    #:: Pointer(Int8)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
puts "Hello world!"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072447Z" creationid="hirofumiwakasugi" creationdate="20150901T072447Z">
        <seg>```ruby
puts "Hello world!"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
puts Color.new(1) #=&gt; prints "Green"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T010959Z" creationid="hirofumiwakasugi" creationdate="20150916T010959Z">
        <seg>```ruby
puts Color.new(1) #=&gt; prints "Green"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
puts Color.new(10) #=&gt; prints "10"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011201Z" creationid="hirofumiwakasugi" creationdate="20150916T011201Z">
        <seg>```ruby
puts Color.new(10) #=&gt; prints "10"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
puts(Color::Red)                    # prints "Red"
puts(IOMode::Write | IOMode::Async) # prints "Write, Async"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150915T053216Z" creationid="hirofumiwakasugi" creationdate="20150915T053216Z">
        <seg>```ruby
puts(Color::Red)                    # "Red" を出力
puts(IOMode::Write | IOMode::Async) # "Write, Async" を出力
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
r = %r(regex with slash: /)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T020207Z" creationid="hirofumiwakasugi" creationdate="20150902T020207Z">
        <seg>```ruby
r = %r(regex with slash: /)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
r = /foo/imx
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T020140Z" creationid="hirofumiwakasugi" creationdate="20150902T020140Z">
        <seg>```ruby
r = /foo/imx
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
raise "OH NO!"
raise Exception.new("Some error")
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011245Z" creationid="hirofumiwakasugi" creationdate="20150907T011245Z">
        <seg>```ruby
raise "OH NO!"
raise Exception.new("Some error")
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
require "http/server"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072546Z" creationid="hirofumiwakasugi" creationdate="20150901T072546Z">
        <seg>```ruby
require "http/server"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
s = "hello"
# s :: String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072403Z" creationid="hirofumiwakasugi" creationdate="20150901T072403Z">
        <seg>```ruby
s = "hello"
# s :: String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
sizeof(Int32)  #=&gt; 4
sizeof(Int64)  #=&gt; 8
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035352Z" creationid="hirofumiwakasugi" creationdate="20150906T035352Z">
        <seg>```ruby
sizeof(Int32)  #=&gt; 4
sizeof(Int64)  #=&gt; 8
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
slash = /\//
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T020149Z" creationid="hirofumiwakasugi" creationdate="20150902T020149Z">
        <seg>```ruby
slash = /\//
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
some_exp1 &amp;&amp; some_exp2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052614Z" creationid="hirofumiwakasugi" creationdate="20150905T052614Z">
        <seg>```ruby
some_exp1 &amp;&amp; some_exp2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
some_exp1 || some_exp2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052658Z" creationid="hirofumiwakasugi" creationdate="20150905T052658Z">
        <seg>```ruby
some_exp1 || some_exp2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
str = "hello"
proc = -&gt;str.count(Char)
proc.call('e') #=&gt; 1
proc.call('l') #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022256Z" creationid="hirofumiwakasugi" creationdate="20150902T022256Z">
        <seg>```ruby
str = "hello"
proc = -&gt;str.count(Char)
proc.call('e') #=&gt; 1
proc.call('l') #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
struct Int</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T032021Z" creationid="hirofumiwakasugi" creationdate="20150916T032021Z">
        <seg>```ruby
struct Int</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
struct Point</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T053815Z" creationid="hirofumiwakasugi" creationdate="20150913T053815Z">
        <seg>```ruby
struct Point</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
struct Vector2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025209Z" creationid="hirofumiwakasugi" creationdate="20150909T025209Z">
        <seg>```ruby
struct Vector2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
tmp = MyType(typeof("foo"), typeof("bar")).new
tmp["foo"] = "bar"
tmp
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T143116Z" creationid="hirofumiwakasugi" creationdate="20150901T143116Z">
        <seg>```ruby
tmp = MyType(typeof("foo"), typeof("bar")).new
tmp["foo"] = "bar"
tmp
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
tmp = MyType(typeof(1, 2, 3)).new
tmp &lt;&lt; 1
tmp &lt;&lt; 2
tmp &lt;&lt; 3
tmp
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140508Z" creationid="hirofumiwakasugi" creationdate="20150901T140508Z">
        <seg>```ruby
tmp = MyType(typeof(1, 2, 3)).new
tmp &lt;&lt; 1
tmp &lt;&lt; 2
tmp &lt;&lt; 3
tmp
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
tmp = MyType.new
tmp &lt;&lt; 1
tmp &lt;&lt; 2
tmp &lt;&lt; 3
tmp
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140411Z" creationid="hirofumiwakasugi" creationdate="20150901T140411Z">
        <seg>```ruby
tmp = MyType.new
tmp &lt;&lt; 1
tmp &lt;&lt; 2
tmp &lt;&lt; 3
tmp
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
tmp = MyType.new
tmp["foo"] = "bar"
tmp
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T143115Z" creationid="hirofumiwakasugi" creationdate="20150901T143115Z">
        <seg>```ruby
tmp = MyType.new
tmp["foo"] = "bar"
tmp
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
true  # A Bool that is true
false # A Bool that is false
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T051039Z" creationid="hirofumiwakasugi" creationdate="20150901T051039Z">
        <seg>```ruby
true  # A Bool that is true
false # A Bool that is false
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
tuple = {1, "hello", 'x'} # Tuple(Int32, String, Char)
tuple[0]                  #=&gt; 1       (Int32)
tuple[1]                  #=&gt; "hello" (String)
tuple[2]                  #=&gt; 'x'     (Char)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T020745Z" creationid="hirofumiwakasugi" creationdate="20150902T020745Z">
        <seg>```ruby
tuple = {1, "hello", 'x'} # Tuple(Int32, String, Char)
tuple[0]                  #=&gt; 1       (Int32)
tuple[1]                  #=&gt; "hello" (String)
tuple[2]                  #=&gt; 'x'     (Char)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
twice &amp;-&gt;{ puts "Hello" }
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025052Z" creationid="hirofumiwakasugi" creationdate="20150917T025052Z">
        <seg>```ruby
twice &amp;-&gt;{ puts "Hello" }
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
twice { |i| puts "Got #{i}" }
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T021104Z" creationid="hirofumiwakasugi" creationdate="20150916T021104Z">
        <seg>```ruby
twice { |i| puts "Got #{i}" }
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
twice() do</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T014757Z" creationid="hirofumiwakasugi" creationdate="20150916T014757Z">
        <seg>```ruby
twice() do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
typeof(1, "a", 'a') #=&gt; (Int32 | String | Char)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062606Z" creationid="hirofumiwakasugi" creationdate="20150930T062606Z">
        <seg>```ruby
typeof(1, "a", 'a') #=&gt; (Int32 | String | Char)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
tz :: C::TimeZone
tz.minutes_west #=&gt; some garbage value
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T050330Z" creationid="hirofumiwakasugi" creationdate="20151007T050314Z">
        <seg>```ruby
tz :: C::TimeZone
tz.minutes_west #=&gt; 何かゴミの値
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
tz = C::TimeZone.new
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045950Z" creationid="hirofumiwakasugi" creationdate="20151007T045950Z">
        <seg>```ruby
tz = C::TimeZone.new
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
tz = C::TimeZone.new
tz.minutes_west = 1
tz.minutes_west #=&gt; 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T050359Z" creationid="hirofumiwakasugi" creationdate="20151007T050359Z">
        <seg>```ruby
tz = C::TimeZone.new
tz.minutes_west = 1
tz.minutes_west #=&gt; 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
tz = C::TimeZone.new minutes_west: 1, dst_time: 2
tz.minutes_west #=&gt; 1
tz.dst_time     #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T050542Z" creationid="hirofumiwakasugi" creationdate="20151007T050542Z">
        <seg>```ruby
tz = C::TimeZone.new minutes_west: 1, dst_time: 2
tz.minutes_west #=&gt; 1
tz.dst_time     #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
unless some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022842Z" creationid="hirofumiwakasugi" creationdate="20150903T022842Z">
        <seg>```ruby
unless some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
until some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052411Z" creationid="hirofumiwakasugi" creationdate="20150905T052411Z">
        <seg>```ruby
until some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
value :: U::IntOrFlaot
value.some_int #=&gt; some garbage value
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052311Z" creationid="hirofumiwakasugi" creationdate="20151007T052311Z">
        <seg>```ruby
value :: U::IntOrFlaot
value.some_int #=&gt; 何かゴミの値
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
value = U::IntOrFloat.new
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052235Z" creationid="hirofumiwakasugi" creationdate="20151007T052235Z">
        <seg>```ruby
value = U::IntOrFloat.new
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
value = U::IntOrFloat.new
value.some_int = 1
value.some_int #=&gt; 1
value.some_float #=&gt; 4.94066e-324
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052314Z" creationid="hirofumiwakasugi" creationdate="20151007T052314Z">
        <seg>```ruby
value = U::IntOrFloat.new
value.some_int = 1
value.some_int #=&gt; 1
value.some_float #=&gt; 4.94066e-324
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
value = twice do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025314Z" creationid="hirofumiwakasugi" creationdate="20150916T025314Z">
        <seg>```ruby
value = twice do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
value = twice { break }
value #=&gt; nil
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025421Z" creationid="hirofumiwakasugi" creationdate="20150916T025421Z">
        <seg>```ruby
value = twice { break }
value #=&gt; nil
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
values = twice { break 1, 2 }
values #=&gt; {1, 2}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025407Z" creationid="hirofumiwakasugi" creationdate="20150916T025407Z">
        <seg>```ruby
values = twice { break 1, 2 }
values #=&gt; {1, 2}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
var = "Hello"
# At this point 'var' is a String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T052134Z" creationid="hirofumiwakasugi" creationdate="20150902T052134Z">
        <seg>```ruby
var = "Hello"
# At this point 'var' is a String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
while some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052045Z" creationid="hirofumiwakasugi" creationdate="20150905T052045Z">
        <seg>```ruby
while some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
while true</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052159Z" creationid="hirofumiwakasugi" creationdate="20150905T052159Z">
        <seg>```ruby
while true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
x :: Int32
x #=&gt; some random value, garbage, unreliable
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T115216Z" creationid="hirofumiwakasugi" creationdate="20150906T115137Z">
        <seg>```ruby
x :: Int32
x #=&gt; 何かのランダムな値。つまり信頼できないゴミのようなもの…
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
x = 0
proc = -&gt;{ x += 1; x }
proc.call #=&gt; 1
proc.call #=&gt; 2
x         #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T053707Z" creationid="hirofumiwakasugi" creationdate="20150918T053707Z">
        <seg>```ruby
x = 0
proc = -&gt;{ x += 1; x }
proc.call #=&gt; 1
proc.call #=&gt; 2
x         #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
x = 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021503Z" creationid="hirofumiwakasugi" creationdate="20150904T021503Z">
        <seg>```ruby
x = 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
x = 1
foo do</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T055059Z" creationid="hirofumiwakasugi" creationdate="20150918T055059Z">
        <seg>```ruby
x = 1
foo do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
x..y  # an inclusive range, in mathematics: [x, y]
x...y # an exclusive range, in mathematics: [x, y)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T014711Z" creationid="hirofumiwakasugi" creationdate="20150902T014401Z">
        <seg>```ruby
x..y  # 右側の値を「含む」範囲です。数学的には閉区間となります: [x, y]
x...y # 右側の値を「含まない」範囲です。数学的には左閉右開区間となります: [x, y)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
y = 2
X.callback -&gt;(x) { x + y } # Error: can't send closure</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024723Z" creationid="hirofumiwakasugi" creationdate="20151008T024704Z">
        <seg>```ruby
y = 2
X.callback -&gt;(x) { x + y } # エラー: クロージャは</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
{"key1": 'a', "key2": 'b'} # Hash(String, Char)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T143008Z" creationid="hirofumiwakasugi" creationdate="20150901T143008Z">
        <seg>```ruby
{"key1": 'a', "key2": 'b'} # Hash(String, Char)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
{% for name, index in ["foo", "bar", "baz"] %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040453Z" creationid="hirofumiwakasugi" creationdate="20151001T040453Z">
        <seg>```ruby
{% for name, index in ["foo", "bar", "baz"] %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
{% if env("TEST") %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040248Z" creationid="hirofumiwakasugi" creationdate="20151001T040248Z">
        <seg>```ruby
{% if env("TEST") %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
{1 =&gt; 2, 3 =&gt; 4}     # Hash(Int32, Int32)
{1 =&gt; 2, 'a' =&gt; 3}   # Hash(Int32 | Char, Int32)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140853Z" creationid="hirofumiwakasugi" creationdate="20150901T140853Z">
        <seg>```ruby
{1 =&gt; 2, 3 =&gt; 4}     # Hash(Int32, Int32)
{1 =&gt; 2, 'a' =&gt; 3}   # Hash(Int32 | Char, Int32)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
{key1: 'a', key2: 'b'} # Hash(Symbol, Char)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T142946Z" creationid="hirofumiwakasugi" creationdate="20150901T142946Z">
        <seg>```ruby
{key1: 'a', key2: 'b'} # Hash(Symbol, Char)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
{} of Int32 =&gt; Int32 # same as Hash(Int32, Int32).new
{}                   # syntax error
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T142650Z" creationid="hirofumiwakasugi" creationdate="20150901T142650Z">
        <seg>```ruby
{} of Int32 =&gt; Int32 # Hash(Int32, Int32).new と同じ
{}                   # シンタックスエラーになる
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`break` and `next` can also be used inside an `until`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052430Z" creationid="hirofumiwakasugi" creationdate="20150905T052420Z">
        <seg>`until` の中でも、`break` と `next`を利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`break` and `next` can't be used inside a captured block.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T062009Z" creationid="hirofumiwakasugi" creationdate="20150918T062009Z">
        <seg>`break` と `next` を捕捉されたブロックの中で使用することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`break` can also accept arguments: these become the method's return value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024600Z" creationid="hirofumiwakasugi" creationdate="20150916T024600Z">
        <seg>`break` は引数を受けとることも可能で、その場合にはそれがメソッドの戻り値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`class` is also useful for creating arrays and collections of class type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012005Z" creationid="hirofumiwakasugi" creationdate="20151009T011956Z">
        <seg>`class` はクラスの型を持つ配列やコレクションを作る場合にも有効に使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`class` is used to refer to a class type, instead of an instance type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011903Z" creationid="hirofumiwakasugi" creationdate="20151009T011903Z">
        <seg>`class` は、インスタンスの型ではなく、クラスの型を参照するために利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`echo foo`  # =&gt; "foo"
$?.success?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T173821Z" creationid="makenowjust" creationdate="20200422T173821Z">
        <seg>`echo foo`  # =&gt; "foo"
$?.success? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`ensure` clauses are usually used for clean up, freeing resources, etc.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013731Z" creationid="hirofumiwakasugi" creationdate="20150907T013731Z">
        <seg>通常、`ensure` 節は処理の後始末やリソースの開放などに利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`ln -s [full path to bin/crystal] /usr/local/bin/crystal`</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055936Z" creationid="hirofumiwakasugi" creationdate="20150831T055936Z">
        <seg>`ln -s [full path to bin/crystal] /usr/local/bin/crystal`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`return` can be used and will exit from the block (not the surrounding method).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T062014Z" creationid="hirofumiwakasugi" creationdate="20150918T062014Z">
        <seg>`return` を使うことで (周りのメソッドではなく) ブロックを抜けることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`self` can be used in the type grammar to denote a `self` type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011809Z" creationid="hirofumiwakasugi" creationdate="20151009T011809Z">
        <seg>`self` は型文法では `self` の型であることを示すために利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`typeof` is allowed in the type grammar.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012303Z" creationid="hirofumiwakasugi" creationdate="20151009T012303Z">
        <seg>型文法では `typeof` を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055809Z" creationid="hirofumiwakasugi" creationdate="20150913T055809Z">
        <seg>a
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a
end

TEN # =&gt; 10</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T180250Z" creationid="makenowjust" creationdate="20200505T180250Z">
        <seg>a
end

TEN # =&gt; 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035024Z" creationid="hirofumiwakasugi" creationdate="20150906T035024Z">
        <seg>a #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a += 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052325Z" creationid="hirofumiwakasugi" creationdate="20150905T052325Z">
        <seg>a += 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = "hello"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012210Z" creationid="hirofumiwakasugi" creationdate="20150903T012210Z">
        <seg>a = "hello"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = "hello"
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T011255Z" creationid="hirofumiwakasugi" creationdate="20150903T011255Z">
        <seg>a = "hello"
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = "hello"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T014203Z" creationid="hirofumiwakasugi" creationdate="20150930T014203Z">
        <seg>a = "hello"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = "hello"
end

# a : Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T114148Z" creationid="makenowjust" creationdate="20200512T114148Z">
        <seg>a = "hello"
end

# a : Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = "hello"
end

a # : Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T143701Z" creationid="makenowjust" creationdate="20200429T143701Z">
        <seg>a = "hello"
end

a # : Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055807Z" creationid="hirofumiwakasugi" creationdate="20150913T055807Z">
        <seg>a = 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T022312Z" creationid="hirofumiwakasugi" creationdate="20150907T022312Z">
        <seg>a = 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1

ptr = pointerof(a)
ptr.value = 2

a # =&gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T015207Z" creationid="makenowjust" creationdate="20200511T015207Z">
        <seg>a = 1

ptr = pointerof(a)
ptr.value = 2

a # =&gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
a.is_a?(Int32)          # =&gt; true
a.is_a?(String)         # =&gt; false
a.is_a?(Number)         # =&gt; true
a.is_a?(Int32 | String) # =&gt; true</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T112936Z" creationid="makenowjust" creationdate="20200512T112936Z">
        <seg>a = 1
a.is_a?(Int32)          # =&gt; true
a.is_a?(String)         # =&gt; false
a.is_a?(Number)         # =&gt; true
a.is_a?(Int32 | String) # =&gt; true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
a.nil?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T090824Z" creationid="makenowjust" creationdate="20200518T090824Z">
        <seg>a = 1
a.nil?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
a.responds_to?(:abs)  # =&gt; true
a.responds_to?(:size) # =&gt; false</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T113711Z" creationid="makenowjust" creationdate="20200512T113711Z">
        <seg>a = 1
a.responds_to?(:abs)  # =&gt; true
a.responds_to?(:size) # =&gt; false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
b = 2
"sum: #{a} + #{b} = #{a + b}" # =&gt; "sum: 1 + 2 = 3"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192338Z" creationid="makenowjust" creationdate="20200419T192338Z">
        <seg>a = 1
b = 2
"sum: #{a} + #{b} = #{a + b}" # =&gt; "sum: 1 + 2 = 3"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
b = 2
C.printf "%d + %d = %d\n", a, b, a + b
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T045124Z" creationid="hirofumiwakasugi" creationdate="20151005T045124Z">
        <seg>a = 1
b = 2
C.printf "%d + %d = %d\n", a, b, a + b
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
b = 2
a, b = b, a
a # =&gt; 2
b # =&gt; 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175405Z" creationid="makenowjust" creationdate="20200422T175405Z">
        <seg>a = 1
b = 2
a, b = b, a
a # =&gt; 2
b # =&gt; 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
b = a.as(Int32 | Float64)
b # :: Int32 | Float64</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T115713Z" creationid="makenowjust" creationdate="20200512T115713Z">
        <seg>a = 1
b = a.as(Int32 | Float64)
b # :: Int32 | Float64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
b = typeof(a) # =&gt; Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T121511Z" creationid="makenowjust" creationdate="20200512T121511Z">
        <seg>a = 1
b = typeof(a) # =&gt; Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
begin</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T023235Z" creationid="hirofumiwakasugi" creationdate="20150907T023235Z">
        <seg>a = 1
begin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T014202Z" creationid="hirofumiwakasugi" creationdate="20150930T014202Z">
        <seg>a = 1
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
if a &gt; 0</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074225Z" creationid="makenowjust" creationdate="20200424T074225Z">
        <seg>a = 1
if a &gt; 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074600Z" creationid="makenowjust" creationdate="20200424T074600Z">
        <seg>a = 1
if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
ptr = pointerof(a)
ptr[100_000] = 2 # undefined behaviour, probably a segmentation fault</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T093521Z" creationid="makenowjust" creationdate="20200512T093521Z">
        <seg>a = 1
ptr = pointerof(a)
ptr[100_000] = 2 # 未定義の振舞いので、おそらくセグメンテーション違反を起こす</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
sizeof(typeof(a)) # =&gt; 4</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T015538Z" creationid="makenowjust" creationdate="20200511T015538Z">
        <seg>a = 1
sizeof(typeof(a)) # =&gt; 4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
while a &lt; 5</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095903Z" creationid="makenowjust" creationdate="20200424T095903Z">
        <seg>a = 1
while a &lt; 5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
while some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095122Z" creationid="makenowjust" creationdate="20200424T095122Z">
        <seg>a = 1
while some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1 + 2
a #=&gt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162814Z" creationid="makenowjust" creationdate="20200413T162814Z">
        <seg>a = 1 + 2
a #=&gt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1 &gt; 2 ?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T084550Z" creationid="makenowjust" creationdate="20200424T083425Z">
        <seg>a = 1 &gt; 2 ? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 10
end
a # =&gt; 10

b = 1
if b &gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074226Z" creationid="makenowjust" creationdate="20200424T074226Z">
        <seg>a = 10
end
a # =&gt; 10

b = 1
if b &gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 10
end
a #=&gt; 10</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T010129Z" creationid="hirofumiwakasugi" creationdate="20150903T010129Z">
        <seg>a = 10
end
a #=&gt; 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 2
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083438Z" creationid="makenowjust" creationdate="20200424T083438Z">
        <seg>a = 2
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 2
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012933Z" creationid="hirofumiwakasugi" creationdate="20150903T012933Z">
        <seg>a = 2
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 2
while (a += 1) &lt; 20</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200417T115413Z" creationid="makenowjust" creationdate="20200417T115413Z">
        <seg>a = 2
while (a += 1) &lt; 20</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 2 if some_condition

# The above is the same as:
if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080341Z" creationid="makenowjust" creationdate="20200424T080341Z">
        <seg>a = 2 if some_condition

# 上記は以下と同じ
if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = @a
if a.is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022555Z" creationid="hirofumiwakasugi" creationdate="20150903T022555Z">
        <seg>a = @a
if a.is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = @a
if a.responds_to?(:abs)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030612Z" creationid="hirofumiwakasugi" creationdate="20150903T030612Z">
        <seg>a = @a
if a.responds_to?(:abs)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = [] of Person
x = a.map { |f| f.name as String } # OK
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062323Z" creationid="hirofumiwakasugi" creationdate="20150930T062323Z">
        <seg>a = [] of Person
x = a.map { |f| f.name as String } # OK
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = [] of Person
x = a.map { |f| f.name } # Error: can't infer block return type
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T061858Z" creationid="hirofumiwakasugi" creationdate="20150930T061858Z">
        <seg>a = [] of Person
x = a.map { |f| f.name } # Error: can't infer block return type
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = [] of Person
x = a.map { |f| f.name } # OK
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151220T002341Z" creationid="hirofumiwakasugi" creationdate="20151220T002341Z">
        <seg>a = [] of Person
x = a.map { |f| f.name } # OK
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = b = c = 123

# Now a, b and c have the same value:
a # =&gt; 123
b # =&gt; 123
c # =&gt; 123</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175053Z" creationid="makenowjust" creationdate="20200422T175053Z">
        <seg>a = b = c = 123

# このとき a, b, c は同じ値になる
a # =&gt; 123
b # =&gt; 123
c # =&gt; 123</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = if 2 &gt; 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080441Z" creationid="makenowjust" creationdate="20200424T080441Z">
        <seg>a = if 2 &gt; 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = some_condition ?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T084316Z" creationid="makenowjust" creationdate="20200424T083248Z">
        <seg>a = some_condition ? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = something_dangerous_that_returns_Int32
ensure</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T020142Z" creationid="hirofumiwakasugi" creationdate="20150907T020142Z">
        <seg>a = something_dangerous_that_returns_Int32
ensure</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = true
end
# a : String | Bool</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061706Z" creationid="hirofumiwakasugi" creationdate="20160204T061706Z">
        <seg>a = true
end
# a : String | Bool</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = true
end
# a : String | Bool

b = 1
if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074602Z" creationid="makenowjust" creationdate="20200424T074602Z">
        <seg>a = true
end
# a : String | Bool

b = 1
if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = true
end
# a :: String | Bool</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T011256Z" creationid="hirofumiwakasugi" creationdate="20150903T011256Z">
        <seg>a = true
end
# a :: String | Bool</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a convenient syntax is provided for some common types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T005817Z" creationid="hirofumiwakasugi" creationdate="20151009T005817Z">
        <seg>一般的な型に対する便利な記法が用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a method's &lt;g1&gt;return type&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T120150Z" creationid="makenowjust" creationdate="20200507T120138Z">
        <seg>メソッドの&lt;g1&gt;戻り値の型&lt;/g1&gt;を指定するとき</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a, b, c = 2,</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T144509Z" creationid="makenowjust" creationdate="20200430T144509Z">
        <seg>a, b, c = 2,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a.abs
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083357Z" creationid="makenowjust" creationdate="20200424T083357Z">
        <seg>a.abs
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a.abs
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014451Z" creationid="hirofumiwakasugi" creationdate="20150903T014451Z">
        <seg>a.abs
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a.length
end
# a :: Int32 | String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T130410Z" creationid="hirofumiwakasugi" creationdate="20150901T130410Z">
        <seg>a.length
end
# a :: Int32 | String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a.length
end
# a :: String | Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012211Z" creationid="hirofumiwakasugi" creationdate="20150903T012211Z">
        <seg>a.length
end
# a :: String | Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a.size
end
# a : Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095139Z" creationid="makenowjust" creationdate="20200424T095139Z">
        <seg>a.size
end
# a : Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a.size
end
# a : Int32 | String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T062433Z" creationid="hirofumiwakasugi" creationdate="20160204T062433Z">
        <seg>a.size
end
# a : Int32 | String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a.size
end
# a : String | Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T084527Z" creationid="makenowjust" creationdate="20200518T084527Z">
        <seg>a.size
end
# a : String | Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a.size
end
# a : String | Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061713Z" creationid="hirofumiwakasugi" creationdate="20160204T061713Z">
        <seg>a.size
end
# a : String | Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a.size
end
# a :: Int32 | String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140103Z" creationid="hirofumiwakasugi" creationdate="20151009T140103Z">
        <seg>a.size
end
# a :: Int32 | String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a.size
end
# a :: String | Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024558Z" creationid="hirofumiwakasugi" creationdate="20151009T024558Z">
        <seg>a.size
end
# a :: String | Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a: 1, b: 2
)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T145251Z" creationid="makenowjust" creationdate="20200430T145251Z">
        <seg>a: 1, b: 2
)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a_as_int = a.as(Int32)
a_as_int.abs # works, compiler knows that a_as_int is Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T114408Z" creationid="makenowjust" creationdate="20200512T114408Z">
        <seg>a_as_int = a.as(Int32)
a_as_int.abs # コンパイラが a_as_int が Int32 であると把握しているので動作します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>abstract class Animal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213216Z" creationid="makenowjust" creationdate="20200412T213216Z">
        <seg>abstract class Animal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>abstract class Animal
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T112705Z" creationid="makenowjust" creationdate="20200504T112705Z">
        <seg>abstract class Animal
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>abstract class Parent</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213748Z" creationid="makenowjust" creationdate="20200412T213748Z">
        <seg>abstract class Parent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>abstract def id : Int32
end

class Child &lt; Parent</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213751Z" creationid="makenowjust" creationdate="20200412T213751Z">
        <seg>abstract def id : Int32
end

class Child &lt; Parent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>abstract def name : String
end

class Unicorn &lt; Animal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213220Z" creationid="makenowjust" creationdate="20200412T213220Z">
        <seg>abstract def name : String
end

class Unicorn &lt; Animal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>abstract def talk
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T112533Z" creationid="makenowjust" creationdate="20200504T112533Z">
        <seg>abstract def talk
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>abstract def talk
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040130Z" creationid="hirofumiwakasugi" creationdate="20150910T040130Z">
        <seg>abstract def talk
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>add 1, 2 # same as add(1, 2)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T101017Z" creationid="makenowjust" creationdate="20200427T101017Z">
        <seg>add 1, 2 # add(1, 2) と同じ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>add true, false
^~~</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042922Z" creationid="hirofumiwakasugi" creationdate="20150907T042922Z">
        <seg>add true, false
^~~</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>add true, false
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042850Z" creationid="hirofumiwakasugi" creationdate="20150907T042850Z">
        <seg>add true, false
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>add(1, 2)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021138Z" creationid="hirofumiwakasugi" creationdate="20150904T021138Z">
        <seg>add(1, 2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>add(2)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021538Z" creationid="hirofumiwakasugi" creationdate="20150904T021538Z">
        <seg>add(2)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>add_describe_methods
end

Foo.new.describe # =&gt; "Class is Foo"
Foo.describe     # =&gt; "Class is Foo"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215839Z" creationid="makenowjust" creationdate="20200509T215839Z">
        <seg>add_describe_methods
end

Foo.new.describe # =&gt; "Class is Foo"
Foo.describe     # =&gt; "Class is Foo"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>adder = -&gt;add(Int32, Int32)
adder.call(1, 2) #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061648Z" creationid="hirofumiwakasugi" creationdate="20150918T061648Z">
        <seg>adder = -&gt;add(Int32, Int32)
adder.call(1, 2) #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>addition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090004Z" creationid="makenowjust" creationdate="20200502T090004Z">
        <seg>加法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>addition &lt;g1&gt;and&lt;/g1&gt; assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100100Z" creationid="makenowjust" creationdate="20200502T100100Z">
        <seg>加法&lt;g1&gt;複合&lt;/g1&gt;代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>address = server.bind_tcp 8080</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162345Z" creationid="makenowjust" creationdate="20200413T162345Z">
        <seg>address = server.bind_tcp 8080</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>age = rs.read(Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100805Z" creationid="makenowjust" creationdate="20210324T100805Z">
        <seg>age = rs.read(Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T081457Z" creationid="makenowjust" creationdate="20200506T081457Z">
        <seg>型エイリアス (alias)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias ComplexProc = (Int32 -&gt; Int32) -&gt; String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T122712Z" creationid="makenowjust" creationdate="20200507T122712Z">
        <seg>alias ComplexProc = (Int32 -&gt; Int32) -&gt; String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias Int32AndCharToString = Int32, Char -&gt; String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T122659Z" creationid="makenowjust" creationdate="20200507T122659Z">
        <seg>alias Int32AndCharToString = Int32, Char -&gt; String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias Int32OrNil = Int32 | ::Nil</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T120613Z" creationid="makenowjust" creationdate="20200507T120613Z">
        <seg>alias Int32OrNil = Int32 | ::Nil</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias Int32OrNil = Int32?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T120612Z" creationid="makenowjust" creationdate="20200507T120612Z">
        <seg>alias Int32OrNil = Int32?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias Int32OrString = Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T120339Z" creationid="makenowjust" creationdate="20200507T120339Z">
        <seg>alias Int32OrString = Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias Int32Ptr = Int32*</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T121002Z" creationid="makenowjust" creationdate="20200507T121002Z">
        <seg>alias Int32Ptr = Int32*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias Int32Ptr = Pointer(Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T120848Z" creationid="makenowjust" creationdate="20200507T120848Z">
        <seg>alias Int32Ptr = Pointer(Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias Int32StringNamedTuple = NamedTuple(x: Int32, y: String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T122517Z" creationid="makenowjust" creationdate="20200507T122517Z">
        <seg>alias Int32StringNamedTuple = NamedTuple(x: Int32, y: String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias Int32StringNamedTuple = {x: Int32, y: String}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T122513Z" creationid="makenowjust" creationdate="20200507T122513Z">
        <seg>alias Int32StringNamedTuple = {x: Int32, y: String}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias Int32StringTuple = Tuple(Int32, String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T122300Z" creationid="makenowjust" creationdate="20200507T122300Z">
        <seg>alias Int32StringTuple = Tuple(Int32, String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias Int32StringTuple = {Int32, String}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T122255Z" creationid="makenowjust" creationdate="20200507T122255Z">
        <seg>alias Int32StringTuple = {Int32, String}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias Int32ToString = Int32 -&gt; String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T122654Z" creationid="makenowjust" creationdate="20200507T122654Z">
        <seg>alias Int32ToString = Int32 -&gt; String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias Int32ToString = Proc(Int32, String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T122656Z" creationid="makenowjust" creationdate="20200507T122656Z">
        <seg>alias Int32ToString = Proc(Int32, String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias Int32_8 = Int32[8]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T120944Z" creationid="makenowjust" creationdate="20200507T120944Z">
        <seg>alias Int32_8 = Int32[8]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias Int32_8 = StaticArray(Int32, 8)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T120946Z" creationid="makenowjust" creationdate="20200507T120946Z">
        <seg>alias Int32_8 = StaticArray(Int32, 8)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias MyInt = Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023912Z" creationid="hirofumiwakasugi" creationdate="20151008T023912Z">
        <seg>alias MyInt = Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias MyInt = Int32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T085022Z" creationid="makenowjust" creationdate="20200512T085022Z">
        <seg>alias MyInt = Int32
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias MyInt = Int32
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023844Z" creationid="hirofumiwakasugi" creationdate="20151008T023844Z">
        <seg>alias MyInt = Int32
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias NumericValue = Int32 | Int64 | Float32 | Float64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010227Z" creationid="hirofumiwakasugi" creationdate="20151010T010227Z">
        <seg>alias NumericValue = Int32 | Int64 | Float32 | Float64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias PInt32 = Pointer(Int32)

ptr = PInt32.malloc(1) # : Pointer(Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T081511Z" creationid="makenowjust" creationdate="20200506T081511Z">
        <seg>alias PInt32 = Pointer(Int32)

ptr = PInt32.malloc(1) # : Pointer(Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias ProcThatReturnsInt32 = -&gt; Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T122658Z" creationid="makenowjust" creationdate="20200507T122658Z">
        <seg>alias ProcThatReturnsInt32 = -&gt; Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias RecArray = Array(Int32) | Array(RecArray)

ary = [] of RecArray
ary.push [1, 2, 3]
ary.push ary
ary # =&gt; [[1, 2, 3], [...]]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T081514Z" creationid="makenowjust" creationdate="20200506T081514Z">
        <seg>alias RecArray = Array(Int32) | Array(RecArray)

ary = [] of RecArray
ary.push [1, 2, 3]
ary.push ary
ary # =&gt; [[1, 2, 3], [...]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias SizeT = Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022652Z" creationid="hirofumiwakasugi" creationdate="20151009T022652Z">
        <seg>alias SizeT = Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias SizeT = Int64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022651Z" creationid="hirofumiwakasugi" creationdate="20151009T022651Z">
        <seg>alias SizeT = Int64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias SizeT = UInt32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043756Z" creationid="hirofumiwakasugi" creationdate="20150908T043756Z">
        <seg>alias SizeT = UInt32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias SizeT = UInt64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043754Z" creationid="hirofumiwakasugi" creationdate="20150908T043754Z">
        <seg>alias SizeT = UInt64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias Type = Nil |</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071412Z" creationid="hirofumiwakasugi" creationdate="20150919T071412Z">
        <seg>alias Type = Nil |</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an optional double splat argument</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T144732Z" creationid="makenowjust" creationdate="20200430T144214Z">
        <seg>任意で二重スプラット展開指定された引数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an optional double splat parameter</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T090942Z" creationid="makenowjust" creationdate="20210324T090942Z">
        <seg>任意で二重スプラット展開指定された引数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an optional splat argument, whose name can be empty</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T144736Z" creationid="makenowjust" creationdate="20200430T144101Z">
        <seg>任意でスプラット展開指定された引数 (名前が空の場合もある)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an optional splat parameter, whose name can be empty</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T090918Z" creationid="makenowjust" creationdate="20210324T090918Z">
        <seg>任意でスプラット展開指定された引数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>and</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185125Z" creationid="makenowjust" creationdate="20200505T185125Z">
        <seg>and</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>and if we run: &lt;g1&gt;crystal -h&lt;/g1&gt;, then Crystal will show all the accepted options and how to use them.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T191302Z" creationid="makenowjust" creationdate="20200413T172114Z">
        <seg>そして&lt;g1&gt;crystal -h&lt;/g1&gt;と実行すると、Crystal は自身のオプションとそれらの利用方法を表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>and then check what the compiler inferred with `crystal hierarchy file.cr`, we get:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T060119Z" creationid="hirofumiwakasugi" creationdate="20150912T055624Z">
        <seg>このとき、コンパイラが型推論した結果を `crystal hierarchy file.cr` で確認すると以下となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>and then check what the compiler inferred with `crystal tool hierarchy file.cr`, we get:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024357Z" creationid="hirofumiwakasugi" creationdate="20151009T024357Z">
        <seg>このとき、コンパイラが型推論した結果を `crystal tool hierarchy file.cr` で確認すると以下となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>and you're ready to start hacking.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060521Z" creationid="hirofumiwakasugi" creationdate="20150831T060521Z">
        <seg>これでハックする準備は OK です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>annotation MyAnnotaion
end

# The fields can either be a key/value pair
@[MyAnnotation(key: "value", value: 123)]

# Or positional
@[MyAnnotation("foo", 123, false)]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T110054Z" creationid="makenowjust" creationdate="20200510T110022Z">
        <seg>annotation MyAnnotaion
end

# フィールドはキー/値のペアにできる
@[MyAnnotation(key: "value", value: 123)]

# 位置指定でもよい
@[MyAnnotation("foo", 123, false)]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>annotation MyAnnotation
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T104511Z" creationid="makenowjust" creationdate="20200510T104511Z">
        <seg>annotation MyAnnotation
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>annotation MyAnnotation
end

@[MyAnnotation("foo")]
@[MyAnnotation(123)]
@[MyAnnotation(123)]
def annotation_read</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T112643Z" creationid="makenowjust" creationdate="20200510T112643Z">
        <seg>annotation MyAnnotation
end

@[MyAnnotation("foo")]
@[MyAnnotation(123)]
@[MyAnnotation(123)]
def annotation_read</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>annotation MyAnnotation
end

@[MyAnnotation(1, "foo", true, 17.0)]
def annotation_read</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T111523Z" creationid="makenowjust" creationdate="20200510T111523Z">
        <seg>annotation MyAnnotation
end

@[MyAnnotation(1, "foo", true, 17.0)]
def annotation_read</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>annotation MyAnnotation
end

@[MyAnnotation(1, 2, 3, 4)]
def annotation_args</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T111239Z" creationid="makenowjust" creationdate="20200510T111239Z">
        <seg>annotation MyAnnotation
end

@[MyAnnotation(1, 2, 3, 4)]
def annotation_args</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>annotation MyAnnotation
end

@[MyAnnotation(1, 2, 3, 4)]
def annotation_read</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T111129Z" creationid="makenowjust" creationdate="20200510T111129Z">
        <seg>annotation MyAnnotation
end

@[MyAnnotation(1, 2, 3, 4)]
def annotation_read</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>annotation MyAnnotation
end

@[MyAnnotation(value: 2)]
def annotation_value</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T110333Z" creationid="makenowjust" creationdate="20200510T110333Z">
        <seg>annotation MyAnnotation
end

@[MyAnnotation(value: 2)]
def annotation_value</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>annotation MyAnnotation
end

@[MyAnnotation(value: 2, name: "Jim")]
def annotation_named_args</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T110454Z" creationid="makenowjust" creationdate="20200510T110454Z">
        <seg>annotation MyAnnotation
end

@[MyAnnotation(value: 2, name: "Jim")]
def annotation_named_args</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>annotation MyAnnotation
end

@[MyAnnotation]
def foo</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T104625Z" creationid="makenowjust" creationdate="20200510T104625Z">
        <seg>annotation MyAnnotation
end

@[MyAnnotation]
def foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>annotation MyAnnotation
end

class SomeClass</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T110752Z" creationid="makenowjust" creationdate="20200510T110752Z">
        <seg>annotation MyAnnotation
end

class SomeClass</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>annotation MyClass
end

annotation MyMethod
end

annotation MyIvar
end

@[MyClass]
class Foo</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T112315Z" creationid="makenowjust" creationdate="20200510T112315Z">
        <seg>annotation MyClass
end

annotation MyMethod
end

annotation MyIvar
end

@[MyClass]
class Foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 379CE192D401AB61
apt-get update
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T093153Z" creationid="makenowjust" creationdate="20210130T093153Z">
        <seg>apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 379CE192D401AB61
apt-get update
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>argument.some_method
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185105Z" creationid="makenowjust" creationdate="20200505T185105Z">
        <seg>argument.some_method
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>argument.some_method
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153020Z" creationid="hirofumiwakasugi" creationdate="20160115T153020Z">
        <seg>argument.some_method
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>array &lt;&lt; element
end

push(4, [1, 2, 3])      # OK
push("oops", [1, 2, 3]) # Error</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T135935Z" creationid="makenowjust" creationdate="20200430T135935Z">
        <seg>array &lt;&lt; element
end

push(4, [1, 2, 3])      # OK
push("oops", [1, 2, 3]) # Error</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>array = MyArray.new</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T031035Z" creationid="hirofumiwakasugi" creationdate="20150909T031035Z">
        <seg>array = MyArray.new</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>array = [1, 2, 3]

# object_id returns the address of an object in memory,
# so we create a pointer with that address
ptr = Pointer(Void).new(array.object_id)

# Now we cast that pointer to the same type, and
# we should get the same value
array2 = ptr.as(Array(Int32))
array2.same?(array) # =&gt; true</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T115546Z" creationid="makenowjust" creationdate="20200512T115519Z">
        <seg>array = [1, 2, 3]

# object_id はメモリ上のオブジェクトのアドレスを返すため、
# そのアドレスからポインタを作ることができる
ptr = Pointer(Void).new(array.object_id)

# ポインタをその型にキャストすると、
# 同一の値が得られる
array2 = ptr.as(Array(Int32))
array2.same?(array) # =&gt; true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>array = [1, 2, 3]
array[4]  # raises because of IndexError
array[4]?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T104848Z" creationid="makenowjust" creationdate="20200506T104848Z">
        <seg>array = [1, 2, 3]
array[4]  # raises because of IndexError
array[4]?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>array = [{1, "one", true}, {2, "two", false}]
array.each do |number, word, bool|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T191732Z" creationid="makenowjust" creationdate="20200505T191732Z">
        <seg>array = [{1, "one", true}, {2, "two", false}]
array.each do |number, word, bool|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>array = [{1, "one"}, {2, "two"}]
array.each do |(number, word)|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T191523Z" creationid="makenowjust" creationdate="20200505T191523Z">
        <seg>array = [{1, "one"}, {2, "two"}]
array.each do |(number, word)|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>array = [{1, "one"}, {2, "two"}]
array.each do |arg|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T191537Z" creationid="makenowjust" creationdate="20200505T191537Z">
        <seg>array = [{1, "one"}, {2, "two"}]
array.each do |arg|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>array.[](1)       # invokes the first method
array.[](1, 2, 3) # invokes the second method
array.[]=(1, 2)   # invokes the third method
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T031143Z" creationid="hirofumiwakasugi" creationdate="20150909T031143Z">
        <seg>array.[](1)       # 1つ目のメソッドを実行
array.[](1, 2, 3) # 2つ目のメソッドを実行
array.[]=(1, 2)   # 3つ目のメソッドを実行
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>array[1]       # invokes the first method
array[1, 2, 3] # invokes the second method
array[1] = 2   # invokes the third method</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T031133Z" creationid="hirofumiwakasugi" creationdate="20150909T031133Z">
        <seg>array[1]       # 1つ目のメソッドを実行
array[1, 2, 3] # 2つ目のメソッドを実行
array[1] = 2   # 3つ目のメソッドを実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>array_like = IO::Memory.new
array_like &lt;&lt; 1
array_like &lt;&lt; 2
array_like &lt;&lt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173624Z" creationid="makenowjust" creationdate="20200420T173624Z">
        <seg>array_like = IO::Memory.new
array_like &lt;&lt; 1
array_like &lt;&lt; 2
array_like &lt;&lt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>array_like = Set(typeof(1, 2, 3)).new
array_like &lt;&lt; 1
array_like &lt;&lt; 2
array_like &lt;&lt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T174450Z" creationid="makenowjust" creationdate="20200420T174450Z">
        <seg>array_like = Set(typeof(1, 2, 3)).new
array_like &lt;&lt; 1
array_like &lt;&lt; 2
array_like &lt;&lt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>array_of_numbers = [1, 2, 3] of Float64 | Int32 # =&gt; Array(Float64 | Int32)
array_of_numbers &lt;&lt; 0.5                         # =&gt; [1, 2, 3, 0.5]

array_of_int_or_string = [1, 2, 3] of Int32 | String # =&gt; Array(Int32 | String)
array_of_int_or_string &lt;&lt; "foo"                      # =&gt; [1, 2, 3, "foo"]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173239Z" creationid="makenowjust" creationdate="20200420T173239Z">
        <seg>array_of_numbers = [1, 2, 3] of Float64 | Int32 # =&gt; Array(Float64 | Int32)
array_of_numbers &lt;&lt; 0.5                         # =&gt; [1, 2, 3, 0.5]

array_of_int_or_string = [1, 2, 3] of Int32 | String # =&gt; Array(Int32 | String)
array_of_int_or_string &lt;&lt; "foo"                      # =&gt; [1, 2, 3, "foo"]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ary = [1, 2, 3]

# We want to create an array 1, 2, 3 of Int32 | Float64
ary2 = ary.map { |x| x.as(Int32 | Float64) }

ary2        # :: Array(Int32 | Float64)
ary2 &lt;&lt; 1.5 # OK</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T115741Z" creationid="makenowjust" creationdate="20200512T115741Z">
        <seg>ary = [1, 2, 3]

# Int32 | Float64 型の配列 1, 2, 3 にしたい
ary2 = ary.map { |x| x.as(Int32 | Float64) }

ary2        # :: Array(Int32 | Float64)
ary2 &lt;&lt; 1.5 # OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ary = [1, 2, 3]
ary.map { |x| x + 1 }         # =&gt; [2, 3, 4]
ary.select { |x| x % 2 == 1 } # =&gt; [1, 3]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185947Z" creationid="makenowjust" creationdate="20200505T185947Z">
        <seg>ary = [1, 2, 3]
ary.map { |x| x + 1 }         # =&gt; [2, 3, 4]
ary.select { |x| x % 2 == 1 } # =&gt; [1, 3]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ary = [] of Parent.class
ary &lt;&lt; Child1
ary &lt;&lt; Child2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012020Z" creationid="hirofumiwakasugi" creationdate="20151009T012020Z">
        <seg>ary = [] of Parent.class
ary &lt;&lt; Child1
ary &lt;&lt; Child2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ary = [] of RecArray
ary.push [1, 2, 3]
ary.push ary
ary #=&gt; [[1, 2, 3], [...]]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071329Z" creationid="hirofumiwakasugi" creationdate="20150919T071329Z">
        <seg>ary = [] of RecArray
ary.push [1, 2, 3]
ary.push ary
ary #=&gt; [[1, 2, 3], [...]]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ary2 #:: Array(Int32 | Float64)
ary2 &lt;&lt; 1.5 # OK
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T061414Z" creationid="hirofumiwakasugi" creationdate="20150930T061414Z">
        <seg>ary2 #:: Array(Int32 | Float64)
ary2 &lt;&lt; 1.5 # OK
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>as</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T114128Z" creationid="makenowjust" creationdate="20200512T114128Z">
        <seg>as</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>as it will create an intermediate string.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200430T120914Z" creationid="akiji" creationdate="20200430T120914Z">
        <seg>これでは、わざわざ中間文字列を作ってしまいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>as namespaces for defining other types, methods and constants</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141046Z" creationid="makenowjust" creationdate="20200504T141023Z">
        <seg>型やメソッド、定数を定義する名前空間としての役割</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>as partial types that can be mixed in other types</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141121Z" creationid="makenowjust" creationdate="20200504T141121Z">
        <seg>他の型へ mixin する部分的な型としての役割</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>as?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T120541Z" creationid="makenowjust" creationdate="20200512T120541Z">
        <seg>as?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>b = "hello"
end
# b : Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061707Z" creationid="hirofumiwakasugi" creationdate="20160204T061707Z">
        <seg>b = "hello"
end
# b : Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>b = "hello"
end
# b : Int32 | String

if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074603Z" creationid="makenowjust" creationdate="20200424T074603Z">
        <seg>b = "hello"
end
# b : Int32 | String

if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>b = "hello"
end
# b :: Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T011256Z" creationid="hirofumiwakasugi" creationdate="20150903T011256Z">
        <seg>b = "hello"
end
# b :: Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>b = 1
if b &gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T010130Z" creationid="hirofumiwakasugi" creationdate="20150903T010130Z">
        <seg>b = 1
if b &gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>b = 1
if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T011256Z" creationid="hirofumiwakasugi" creationdate="20150903T011256Z">
        <seg>b = 1
if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>b = 10
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T010130Z" creationid="hirofumiwakasugi" creationdate="20150903T010130Z">
        <seg>b = 10
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>b = 20
end
b # =&gt; 20</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074229Z" creationid="makenowjust" creationdate="20200424T074229Z">
        <seg>b = 20
end
b # =&gt; 20</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>b = 20
end
b #=&gt; 20
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T010131Z" creationid="hirofumiwakasugi" creationdate="20150903T010131Z">
        <seg>b = 20
end
b #=&gt; 20
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>b = some_condition ?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085852Z" creationid="makenowjust" creationdate="20200424T085852Z">
        <seg>b = some_condition ? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>bar : baz
typeof(foo) # =&gt; Foo+</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T145203Z" creationid="makenowjust" creationdate="20200429T145203Z">
        <seg>bar : baz
typeof(foo) # =&gt; Foo+</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>bar.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155853Z" creationid="hirofumiwakasugi" creationdate="20150905T155853Z">
        <seg>bar.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>baz(1, 2)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021152Z" creationid="hirofumiwakasugi" creationdate="20150904T021152Z">
        <seg>baz(1, 2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>baz(4, 2)   # =&gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T101256Z" creationid="makenowjust" creationdate="20200427T101256Z">
        <seg>baz(4, 2)   # =&gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>baz(4, 2) #=&gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021410Z" creationid="hirofumiwakasugi" creationdate="20150904T021410Z">
        <seg>baz(4, 2) #=&gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>bcardiff</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T065951Z" creationid="makenowjust" creationdate="20200610T121007Z">
        <seg>bcardiff,makenowjust</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>before, _, after = "main.cr".partition(".")

# The above is the same as this:
temp = "main.cr".partition(".")
before = temp[0]
_ = temp[1] # this line has no effect
after = temp[2]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T095237Z" creationid="makenowjust" creationdate="20210324T095201Z">
        <seg>before, _, after = "main.cr".partition(".")

# 上記は以下と同じ
temp = "main.cr".partition(".")
before = temp[0]
_ = temp[1] # この行は副作用がない
after = temp[2]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>begin</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014247Z" creationid="hirofumiwakasugi" creationdate="20150907T014247Z">
        <seg>begin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>benoist</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084040Z" creationid="makenowjust" creationdate="20200516T084040Z">
        <seg>benoist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>binary AND</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090420Z" creationid="makenowjust" creationdate="20200502T090420Z">
        <seg>ビット AND</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>binary OR</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090526Z" creationid="makenowjust" creationdate="20200502T090526Z">
        <seg>ビット OR</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>binary XOR</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090541Z" creationid="makenowjust" creationdate="20200502T090541Z">
        <seg>ビット XOR</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>binary and &lt;g1&gt;and&lt;/g1&gt; assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100803Z" creationid="makenowjust" creationdate="20200502T100718Z">
        <seg>ビット AND &lt;g1&gt;複合&lt;/g1&gt;代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>binary complement</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090230Z" creationid="makenowjust" creationdate="20200502T090230Z">
        <seg>ビット反転</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>binary or &lt;g1&gt;and&lt;/g1&gt; assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100806Z" creationid="makenowjust" creationdate="20200502T100655Z">
        <seg>ビット OR &lt;g1&gt;複合&lt;/g1&gt;代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>binary xor &lt;g1&gt;and&lt;/g1&gt; assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100759Z" creationid="makenowjust" creationdate="20200502T100759Z">
        <seg>ビット XOR &lt;g1&gt;複合&lt;/g1&gt;代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>block
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T040124Z" creationid="hirofumiwakasugi" creationdate="20150916T040124Z">
        <seg>block
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>block
end

def invoke(&amp;block)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075340Z" creationid="makenowjust" creationdate="20200506T075340Z">
        <seg>block
end

def invoke(&amp;block)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>block
end

def twice</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075501Z" creationid="makenowjust" creationdate="20200506T075501Z">
        <seg>block
end

def twice</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>block
end

proc = int_to_int { |x| x + 1 }
proc.call(1) # =&gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T193102Z" creationid="makenowjust" creationdate="20200505T193102Z">
        <seg>block
end

proc = int_to_int { |x| x + 1 }
proc.call(1) # =&gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>block
end

proc = some_proc { |x| x + 1 }
proc.call(1) # 2

proc = some_proc { |x| x.to_s }
proc.call(1) # "1"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T073858Z" creationid="makenowjust" creationdate="20200506T073858Z">
        <seg>block
end

proc = some_proc { |x| x + 1 }
proc.call(1) # 2

proc = some_proc { |x| x.to_s }
proc.call(1) # "1"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>block
end

proc = some_proc { |x| x + 1 }
proc.call(1) # void</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T073849Z" creationid="makenowjust" creationdate="20200506T073849Z">
        <seg>block
end

proc = some_proc { |x| x + 1 }
proc.call(1) # void</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>block
end

x = 0
proc = -&gt;(i : Int32) { x += i }
proc = some_proc(&amp;proc)
proc.call(1)  # =&gt; 1
proc.call(10) # =&gt; 11
x             # =&gt; 11</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T074357Z" creationid="makenowjust" creationdate="20200506T074357Z">
        <seg>block
end

x = 0
proc = -&gt;(i : Int32) { x += i }
proc = some_proc(&amp;proc)
proc.call(1)  # =&gt; 1
proc.call(10) # =&gt; 11
x             # =&gt; 11</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>block
end

x = 1
-&gt;{ x = "hello" }

x = 'a'
x # : Int32 | String | Char</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T081237Z" creationid="makenowjust" creationdate="20200506T081237Z">
        <seg>block
end

x = 1
-&gt;{ x = "hello" }

x = 'a'
x # : Int32 | String | Char</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>block
end

x = 1
capture { x = "hello" }

x = 'a'
x # : Int32 | String | Char</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T081146Z" creationid="makenowjust" creationdate="20200506T081146Z">
        <seg>block
end

x = 1
capture { x = "hello" }

x = 'a'
x # : Int32 | String | Char</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>block.call
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024155Z" creationid="hirofumiwakasugi" creationdate="20150917T024155Z">
        <seg>block.call
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>block.call
end

proc = capture { puts "Hello" }
invoke(&amp;proc) # prints "Hello"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075341Z" creationid="makenowjust" creationdate="20200506T075341Z">
        <seg>block.call
end

proc = capture { puts "Hello" }
invoke(&amp;proc) # prints "Hello"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>bm.report("IO::Memory") do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T090958Z" creationid="makenowjust" creationdate="20200506T090958Z">
        <seg>bm.report("IO::Memory") do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>bm.report("String.build") do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T090955Z" creationid="makenowjust" creationdate="20200506T090955Z">
        <seg>bm.report("String.build") do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>box = MyBox(Int32).new(1) # OK
box.value = "hello"       # Error
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T065528Z" creationid="hirofumiwakasugi" creationdate="20150912T065524Z">
        <seg>box = MyBox(Int32).new(1) # OK
box.value = "hello"       # エラー
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>box = MyBox(Int32).new(1) # OK
box.value = "hello"       # OK
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T064935Z" creationid="hirofumiwakasugi" creationdate="20150912T064935Z">
        <seg>box = MyBox(Int32).new(1) # OK
box.value = "hello"       # OK
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>box = MyBox(String).new("hello")
box.value.length #=&gt; 5
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T062108Z" creationid="hirofumiwakasugi" creationdate="20150912T062108Z">
        <seg>box = MyBox(String).new("hello")
box.value.length #=&gt; 5
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>box = MyBox(String).new("hello")
box.value.size #=&gt; 5
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024434Z" creationid="hirofumiwakasugi" creationdate="20151009T024434Z">
        <seg>box = MyBox(String).new("hello")
box.value.size #=&gt; 5
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>box = MyBox.new("hello")
box.value.length # Error: undefined method 'length' for Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T060706Z" creationid="hirofumiwakasugi" creationdate="20150912T060706Z">
        <seg>box = MyBox.new("hello")
box.value.length # Error: undefined method 'length' for Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>box = MyBox.new("hello")
box.value.size # Error: undefined method 'size' for Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024425Z" creationid="hirofumiwakasugi" creationdate="20151009T024425Z">
        <seg>box = MyBox.new("hello")
box.value.size # Error: undefined method 'size' for Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>boxed_data = Box.box(callback)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090526Z" creationid="makenowjust" creationdate="20200512T090526Z">
        <seg>boxed_data = Box.box(callback)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>break</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052249Z" creationid="hirofumiwakasugi" creationdate="20150905T052249Z">
        <seg>break</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>break "bar"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095705Z" creationid="makenowjust" creationdate="20200424T095705Z">
        <seg>break "bar"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>break "hello"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025315Z" creationid="hirofumiwakasugi" creationdate="20150916T025315Z">
        <seg>break "hello"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>break # error
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075802Z" creationid="makenowjust" creationdate="20200506T075802Z">
        <seg>break # error
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>break # error
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T032354Z" creationid="hirofumiwakasugi" creationdate="20150917T032354Z">
        <seg>break # error
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>break # goes to 'puts a'</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200417T115450Z" creationid="makenowjust" creationdate="20200417T115416Z">
        <seg>break # ループを抜けて 'puts a' に行く</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>break and next</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T073918Z" creationid="makenowjust" creationdate="20200506T073902Z">
        <seg>break と next</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>break if some_condition
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095154Z" creationid="makenowjust" creationdate="20200424T095154Z">
        <seg>break if some_condition
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>break if some_condition
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052200Z" creationid="hirofumiwakasugi" creationdate="20150905T052200Z">
        <seg>break if some_condition
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>browser                  open an http server to browse program file</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072215Z" creationid="hirofumiwakasugi" creationdate="20150901T072215Z">
        <seg>browser                  open an http server to browse program file</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>buffer = uninitialized UInt8[256]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T020711Z" creationid="makenowjust" creationdate="20200511T020711Z">
        <seg>buffer = uninitialized UInt8[256]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>build                    build an executable</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080653Z" creationid="makenowjust" creationdate="20200516T080653Z">
        <seg>build                    build an executable</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>build                    compile program file</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072215Z" creationid="hirofumiwakasugi" creationdate="20150901T072215Z">
        <seg>build                    compile program file</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>c : d&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T092254Z" creationid="makenowjust" creationdate="20200502T092254Z">
        <seg>c : d&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>c = "hello"
end
# c : Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061709Z" creationid="hirofumiwakasugi" creationdate="20160204T061709Z">
        <seg>c = "hello"
end
# c : Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>c = "hello"
end
# c : Int32 | String

if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074605Z" creationid="makenowjust" creationdate="20200424T074605Z">
        <seg>c = "hello"
end
# c : Int32 | String

if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>c = "hello"
end
# c :: Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T011258Z" creationid="hirofumiwakasugi" creationdate="20150903T011258Z">
        <seg>c = "hello"
end
# c :: Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>c = 1
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T011257Z" creationid="hirofumiwakasugi" creationdate="20150903T011257Z">
        <seg>c = 1
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>call assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T094508Z" creationid="makenowjust" creationdate="20200502T094508Z">
        <seg>呼び出し代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>callback.call</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061909Z" creationid="hirofumiwakasugi" creationdate="20150918T061909Z">
        <seg>callback.call</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>can both be written as:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185115Z" creationid="makenowjust" creationdate="20200505T185115Z">
        <seg>は次のように書けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090854Z" creationid="makenowjust" creationdate="20200424T090854Z">
        <seg>case</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case
when cond1, cond2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093315Z" creationid="makenowjust" creationdate="20200424T093315Z">
        <seg>case
when cond1, cond2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case 1 || "a"
in Int32
end
{% endhighlight crystal %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T125855Z" creationid="makenowjust" creationdate="20200610T125855Z">
        <seg>case 1 || "a"
in Int32
end
{% endhighlight crystal %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case 42</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221907Z" creationid="makenowjust" creationdate="20200509T221907Z">
        <seg>case 42</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case 42
{% for klass in [Int32, String] %} # Syntax Error: unexpected token: {% (expecting when, else or end)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221656Z" creationid="makenowjust" creationdate="20200509T221656Z">
        <seg>case 42
{% for klass in [Int32, String] %} # Syntax Error: unexpected token: {% (expecting when, else or end)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case color</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011821Z" creationid="hirofumiwakasugi" creationdate="20150916T011821Z">
        <seg>case color</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case exp
when value1, value2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090855Z" creationid="makenowjust" creationdate="20200424T090855Z">
        <seg>case exp
when value1, value2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case exp
when value1, value2 then do_something
when value3         then do_something_else
else                     do_another_thing
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093253Z" creationid="makenowjust" creationdate="20200424T093253Z">
        <seg>case exp
when value1, value2 then do_something
when value3         then do_something_else
else                     do_another_thing
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case num
when .even?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093131Z" creationid="makenowjust" creationdate="20200424T093131Z">
        <seg>case num
when .even?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case var
when String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T091450Z" creationid="makenowjust" creationdate="20200424T091450Z">
        <seg>case var
when String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case {value1, value2}
when {.even?, .odd?}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093721Z" creationid="makenowjust" creationdate="20200424T093721Z">
        <seg>case {value1, value2}
when {.even?, .odd?}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case {value1, value2}
when {0, 0} # OK, 2 elements</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093519Z" creationid="makenowjust" creationdate="20200424T093519Z">
        <seg>case {value1, value2}
when {0, 0} # 大きさが2で等しいのでOK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case {value1, value2}
when {0, _}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093624Z" creationid="makenowjust" creationdate="20200424T093624Z">
        <seg>case {value1, value2}
when {0, _}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case {value1, value2}
when {String, Int32}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093838Z" creationid="makenowjust" creationdate="20200424T093838Z">
        <seg>case {value1, value2}
when {String, Int32}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>cat &gt; /etc/yum.repos.d/crystal.repo &lt;&lt;END
&lt;x1/&gt;crystal&lt;x2/&gt;
name = Crystal
baseurl = https://dist.crystal-lang.org/rpm/
END</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T101727Z" creationid="makenowjust" creationdate="20200518T101727Z">
        <seg>cat &gt; /etc/yum.repos.d/crystal.repo &lt;&lt;END
&lt;x1/&gt;crystal&lt;x2/&gt;
name = Crystal
baseurl = https://dist.crystal-lang.org/rpm/
END</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>cat &gt; /etc/yum.repos.d/crystal.repo &lt;&lt;END
[crystal]
name = Crystal
baseurl = http://dist.crystal-lang.org/rpm/
END
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055111Z" creationid="hirofumiwakasugi" creationdate="20150831T055111Z">
        <seg>cat &gt; /etc/yum.repos.d/crystal.repo &lt;&lt;END
[crystal]
name = Crystal
baseurl = http://dist.crystal-lang.org/rpm/
END
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>cc your_program.o -o your_program -lpcre -lrt -lm -lgc -lunwind</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T024154Z" creationid="makenowjust" creationdate="20200511T024154Z">
        <seg>cc your_program.o -o your_program -lpcre -lrt -lm -lgc -lunwind</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>cd palindrome-example</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T154813Z" creationid="makenowjust" creationdate="20200527T154813Z">
        <seg>cd palindrome-example</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>channel = Channel(Int32).new

10.times do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081817Z" creationid="makenowjust" creationdate="20200518T081817Z">
        <seg>channel = Channel(Int32).new

10.times do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>channel = Channel(Int32).new

spawn do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081759Z" creationid="makenowjust" creationdate="20200518T081759Z">
        <seg>channel = Channel(Int32).new

spawn do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>channel = Channel(Nil).new

spawn do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081753Z" creationid="makenowjust" creationdate="20200518T081753Z">
        <seg>channel = Channel(Nil).new

spawn do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>channel.send(1)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081801Z" creationid="makenowjust" creationdate="20200518T081801Z">
        <seg>channel.send(1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>channel.send(2)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081832Z" creationid="makenowjust" creationdate="20200518T081832Z">
        <seg>channel.send(2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>channel.send(2)
end

puts "Before first receive"
value = channel.receive
puts value # =&gt; 1

puts "Before second receive"
value = channel.receive
puts value # =&gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081802Z" creationid="makenowjust" creationdate="20200518T081802Z">
        <seg>channel.send(2)
end

puts "Before first receive"
value = channel.receive
puts value # =&gt; 1

puts "Before second receive"
value = channel.receive
puts value # =&gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>channel.send(3)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081834Z" creationid="makenowjust" creationdate="20200518T081834Z">
        <seg>channel.send(3)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>channel.send(i * 2)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081818Z" creationid="makenowjust" creationdate="20200518T081818Z">
        <seg>channel.send(i * 2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>channel.send(line)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081811Z" creationid="makenowjust" creationdate="20200518T081811Z">
        <seg>channel.send(line)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>channel.send(nil)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081755Z" creationid="makenowjust" creationdate="20200518T081755Z">
        <seg>channel.send(nil)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>char = string[i]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091300Z" creationid="makenowjust" creationdate="20200506T091300Z">
        <seg>char = string[i]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>check</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093828Z" creationid="makenowjust" creationdate="20200424T093828Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T122836Z" creationid="makenowjust" creationdate="20200507T122836Z">
        <seg>class 型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class  28.17M (± 2.86%) 15.29× slower
struct 430.82M (± 6.58%)       fastest</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091257Z" creationid="makenowjust" creationdate="20200506T091257Z">
        <seg>class  28.17M (± 2.86%) 15.29× slower
struct 430.82M (± 6.58%)       fastest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Amount</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012156Z" creationid="hirofumiwakasugi" creationdate="20151010T012156Z">
        <seg>class Amount</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Animal</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033519Z" creationid="hirofumiwakasugi" creationdate="20150909T033519Z">
        <seg>class Animal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Animal
end

class Dog &lt; Animal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T110500Z" creationid="makenowjust" creationdate="20200504T110500Z">
        <seg>class Animal
end

class Dog &lt; Animal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Array</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T121605Z" creationid="makenowjust" creationdate="20200512T121605Z">
        <seg>class Array</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Bar</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T111944Z" creationid="makenowjust" creationdate="20200502T111944Z">
        <seg>class Bar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Cat &lt; Animal</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031540Z" creationid="hirofumiwakasugi" creationdate="20150910T031540Z">
        <seg>class Cat &lt; Animal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Child &lt; Parent</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041159Z" creationid="hirofumiwakasugi" creationdate="20150910T041159Z">
        <seg>class Child &lt; Parent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Child &lt; Parent
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014445Z" creationid="hirofumiwakasugi" creationdate="20151002T014445Z">
        <seg>class Child &lt; Parent
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Child1 &lt; Parent
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012006Z" creationid="hirofumiwakasugi" creationdate="20151009T012006Z">
        <seg>class Child1 &lt; Parent
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Child2 &lt; Parent
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012007Z" creationid="hirofumiwakasugi" creationdate="20151009T012007Z">
        <seg>class Child2 &lt; Parent
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Counter</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T134404Z" creationid="makenowjust" creationdate="20200504T134404Z">
        <seg>class Counter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class CurrencyConversion</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012157Z" creationid="hirofumiwakasugi" creationdate="20151010T012157Z">
        <seg>class CurrencyConversion</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Dog &lt; Animal</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031539Z" creationid="hirofumiwakasugi" creationdate="20150910T031539Z">
        <seg>class Dog &lt; Animal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class DontUseThis</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T115018Z" creationid="makenowjust" creationdate="20200510T115018Z">
        <seg>class DontUseThis</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Employee &lt; Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T023837Z" creationid="hirofumiwakasugi" creationdate="20150910T023837Z">
        <seg>class Employee &lt; Person</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Employee &lt; Person
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T023718Z" creationid="hirofumiwakasugi" creationdate="20150910T023718Z">
        <seg>class Employee &lt; Person
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021116Z" creationid="hirofumiwakasugi" creationdate="20150904T021116Z">
        <seg>class Foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Foo
end

class Bar &lt; Foo
end

class Baz &lt; Foo
end

bar = Bar.new
baz = Baz.new

# Here foo's type will be Bar | Baz,
# but because both Bar and Baz inherit from Foo,
# the resulting type is Foo+
foo = rand &lt; 0.5 ?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T145112Z" creationid="makenowjust" creationdate="20200429T145112Z">
        <seg>class Foo
end

class Bar &lt; Foo
end

class Baz &lt; Foo
end

bar = Bar.new
baz = Baz.new

# ここで foo の型は Bar | Baz となりそうだが、
# Bar も Baz も Foo を継承しているので、
# 結果的に型は Foo+ となる。
foo = rand &lt; 0.5 ? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Foo
end

class Bar &lt; Foo
end

class Test</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T105253Z" creationid="makenowjust" creationdate="20200504T105253Z">
        <seg>class Foo
end

class Bar &lt; Foo
end

class Test</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Foo
end

class Bar &lt; Foo
end

foo_arr = [Bar.new] of Foo  # =&gt; [#&lt;Bar:0x10215bfe0&gt;] : Array(Foo)
bar_arr = [Bar.new]         # =&gt; [#&lt;Bar:0x10215bfd0&gt;] : Array(Bar)
bar_arr2 = [Foo.new] of Bar # compiler error</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T104635Z" creationid="makenowjust" creationdate="20200504T104635Z">
        <seg>class Foo
end

class Bar &lt; Foo
end

foo_arr = [Bar.new] of Foo  # =&gt; [#&lt;Bar:0x10215bfe0&gt;] : Array(Foo)
bar_arr = [Bar.new]         # =&gt; [#&lt;Bar:0x10215bfd0&gt;] : Array(Bar)
bar_arr2 = [Foo.new] of Bar # コンパイルエラー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Foo(U)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061138Z" creationid="hirofumiwakasugi" creationdate="20150924T061138Z">
        <seg>class Foo(U)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class GenericChild(T) &lt; Parent(T)
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T062013Z" creationid="hirofumiwakasugi" creationdate="20150924T062013Z">
        <seg>class GenericChild(T) &lt; Parent(T)
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Greeting</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010357Z" creationid="hirofumiwakasugi" creationdate="20151010T010357Z">
        <seg>class Greeting</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Helper</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144014Z" creationid="hirofumiwakasugi" creationdate="20151010T144014Z">
        <seg>class Helper</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Int32Child &lt; Parent(Int32)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T062012Z" creationid="hirofumiwakasugi" creationdate="20150924T062012Z">
        <seg>class Int32Child &lt; Parent(Int32)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class IntWrapper</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044605Z" creationid="hirofumiwakasugi" creationdate="20151005T044605Z">
        <seg>class IntWrapper</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Items</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T133854Z" creationid="hirofumiwakasugi" creationdate="20150911T133854Z">
        <seg>class Items</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Klass</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T173237Z" creationid="makenowjust" creationdate="20200505T173237Z">
        <seg>class Klass</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Legendary
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T211700Z" creationid="makenowjust" creationdate="20200412T211700Z">
        <seg>class Legendary
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Legendary
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T033519Z" creationid="hirofumiwakasugi" creationdate="20151010T033519Z">
        <seg>class Legendary
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Model</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T073854Z" creationid="makenowjust" creationdate="20200506T073854Z">
        <seg>class Model</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class MyBox(T)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T142635Z" creationid="makenowjust" creationdate="20200504T142635Z">
        <seg>class MyBox(T)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class MyClass</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T090850Z" creationid="makenowjust" creationdate="20200506T090850Z">
        <seg>class MyClass</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class MyDictionary(K, V)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T142754Z" creationid="makenowjust" creationdate="20200504T142754Z">
        <seg>class MyDictionary(K, V)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class MyDictionary(KeyType, ValueType)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T142814Z" creationid="makenowjust" creationdate="20200504T142814Z">
        <seg>class MyDictionary(KeyType, ValueType)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class MyException &lt; Exception
end

class MyOtherException &lt; Exception
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103421Z" creationid="makenowjust" creationdate="20200506T103421Z">
        <seg>class MyException &lt; Exception
end

class MyOtherException &lt; Exception
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class MyOtherException &lt; Exception
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011645Z" creationid="hirofumiwakasugi" creationdate="20150907T011645Z">
        <seg>class MyOtherException &lt; Exception
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Object</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T223540Z" creationid="makenowjust" creationdate="20200509T223540Z">
        <seg>class Object</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class One</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141841Z" creationid="makenowjust" creationdate="20200504T141841Z">
        <seg>class One</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Parent</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T112615Z" creationid="makenowjust" creationdate="20200502T112615Z">
        <seg>class Parent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Parent
end

class Child1 &lt; Parent
end

class Child2 &lt; Parent
end

ary = [] of Parent.class
ary &lt;&lt; Child1
ary &lt;&lt; Child2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T123126Z" creationid="makenowjust" creationdate="20200507T123126Z">
        <seg>class Parent
end

class Child1 &lt; Parent
end

class Child2 &lt; Parent
end

ary = [] of Parent.class
ary &lt;&lt; Child1
ary &lt;&lt; Child2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Parent(T)
end

class Int32Child &lt; Parent(Int32)
end

class GenericChild(T) &lt; Parent(T)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T143228Z" creationid="makenowjust" creationdate="20200504T143228Z">
        <seg>class Parent(T)
end

class Int32Child &lt; Parent(Int32)
end

class GenericChild(T) &lt; Parent(T)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class ParseError &lt; Exception
end

module HTTP</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T205041Z" creationid="makenowjust" creationdate="20200412T205041Z">
        <seg>class ParseError &lt; Exception
end

module HTTP</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Parser</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011935Z" creationid="hirofumiwakasugi" creationdate="20151010T011935Z">
        <seg>class Parser</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122931Z" creationid="hirofumiwakasugi" creationdate="20150904T122931Z">
        <seg>class Person</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Person
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T101949Z" creationid="makenowjust" creationdate="20200427T101949Z">
        <seg>class Person
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Point</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T015210Z" creationid="makenowjust" creationdate="20200511T015210Z">
        <seg>class Point</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class PointClass</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100257Z" creationid="makenowjust" creationdate="20210324T100257Z">
        <seg>class PointClass</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class RequestHandler</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010226Z" creationid="hirofumiwakasugi" creationdate="20151010T010226Z">
        <seg>class RequestHandler</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class SomeObject</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T135609Z" creationid="makenowjust" creationdate="20200427T135609Z">
        <seg>class SomeObject</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class SomeType</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142552Z" creationid="hirofumiwakasugi" creationdate="20150911T142552Z">
        <seg>class SomeType</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Something</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T140101Z" creationid="makenowjust" creationdate="20200427T140101Z">
        <seg>class Something</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Unicorn</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144049Z" creationid="hirofumiwakasugi" creationdate="20151010T144049Z">
        <seg>class Unicorn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Unicorn
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T033517Z" creationid="hirofumiwakasugi" creationdate="20151010T033517Z">
        <seg>class Unicorn
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Unicorn
end

# Bad: This is not attached to any class.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T211657Z" creationid="makenowjust" creationdate="20200412T211657Z">
        <seg>class Unicorn
end

# Bad: This is not attached to any class.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Window</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T131045Z" creationid="hirofumiwakasugi" creationdate="20150911T131045Z">
        <seg>class Window</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class {{class_name}}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T214944Z" creationid="makenowjust" creationdate="20200509T214944Z">
        <seg>class {{class_name}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>comparison</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091916Z" creationid="makenowjust" creationdate="20200502T091916Z">
        <seg>比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>conditional</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T092253Z" creationid="makenowjust" creationdate="20200502T092253Z">
        <seg>条件分岐</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>context.response.content_type = "text/plain"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061318Z" creationid="hirofumiwakasugi" creationdate="20160204T061318Z">
        <seg>context.response.content_type = "text/plain"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>context.response.print "Hello world!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T161814Z" creationid="makenowjust" creationdate="20200413T161814Z">
        <seg>context.response.print "Hello world!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>context.response.print "Hello world! The time is #{Time.now}"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061322Z" creationid="hirofumiwakasugi" creationdate="20160204T061322Z">
        <seg>context.response.print "Hello world! The time is #{Time.now}"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>context.response.print "Hello world, got #{context.request.path}!"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T062437Z" creationid="hirofumiwakasugi" creationdate="20160204T062437Z">
        <seg>context.response.print "Hello world, got #{context.request.path}!"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  MyCoolLib/.gitignore</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072145Z" creationid="hirofumiwakasugi" creationdate="20150901T072145Z">
        <seg>create  MyCoolLib/.gitignore</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  MyCoolLib/.travis.yml</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072146Z" creationid="hirofumiwakasugi" creationdate="20150901T072146Z">
        <seg>create  MyCoolLib/.travis.yml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  MyCoolLib/LICENSE</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072145Z" creationid="hirofumiwakasugi" creationdate="20150901T072145Z">
        <seg>create  MyCoolLib/LICENSE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  MyCoolLib/Projectfile</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072146Z" creationid="hirofumiwakasugi" creationdate="20150901T072146Z">
        <seg>create  MyCoolLib/Projectfile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  MyCoolLib/README.md</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072145Z" creationid="hirofumiwakasugi" creationdate="20150901T072145Z">
        <seg>create  MyCoolLib/README.md</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  MyCoolLib/shard.yml</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140108Z" creationid="hirofumiwakasugi" creationdate="20151009T140108Z">
        <seg>create  MyCoolLib/shard.yml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  MyCoolLib/spec/MyCoolLib_spec.cr
Initialized empty Git repository in ~/MyCoolLib/.git/
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072147Z" creationid="hirofumiwakasugi" creationdate="20150901T072147Z">
        <seg>create  MyCoolLib/spec/MyCoolLib_spec.cr
Initialized empty Git repository in ~/MyCoolLib/.git/
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  MyCoolLib/spec/spec_helper.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072146Z" creationid="hirofumiwakasugi" creationdate="20150901T072146Z">
        <seg>create  MyCoolLib/spec/spec_helper.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  MyCoolLib/src/MyCoolLib.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072146Z" creationid="hirofumiwakasugi" creationdate="20150901T072146Z">
        <seg>create  MyCoolLib/src/MyCoolLib.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  MyCoolLib/src/MyCoolLib/version.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072146Z" creationid="hirofumiwakasugi" creationdate="20150901T072146Z">
        <seg>create  MyCoolLib/src/MyCoolLib/version.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  my_cool_lib/.editorconfig</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161507Z" creationid="makenowjust" creationdate="20200419T161507Z">
        <seg>create  my_cool_lib/.editorconfig</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  my_cool_lib/.gitignore</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161506Z" creationid="makenowjust" creationdate="20200419T161506Z">
        <seg>create  my_cool_lib/.gitignore</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  my_cool_lib/.travis.yml</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161509Z" creationid="makenowjust" creationdate="20200419T161509Z">
        <seg>create  my_cool_lib/.travis.yml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  my_cool_lib/LICENSE</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161508Z" creationid="makenowjust" creationdate="20200419T161508Z">
        <seg>create  my_cool_lib/LICENSE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  my_cool_lib/README.md</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161508Z" creationid="makenowjust" creationdate="20200419T161508Z">
        <seg>create  my_cool_lib/README.md</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  my_cool_lib/shard.yml</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161510Z" creationid="makenowjust" creationdate="20200419T161510Z">
        <seg>create  my_cool_lib/shard.yml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  my_cool_lib/spec/my_cool_lib_spec.cr
Initialized empty Git repository in ~/my_cool_lib/.git/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161512Z" creationid="makenowjust" creationdate="20200419T161512Z">
        <seg>create  my_cool_lib/spec/my_cool_lib_spec.cr
Initialized empty Git repository in ~/my_cool_lib/.git/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  my_cool_lib/spec/spec_helper.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161511Z" creationid="makenowjust" creationdate="20200419T161511Z">
        <seg>create  my_cool_lib/spec/spec_helper.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  my_cool_lib/src/my_cool_lib.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161511Z" creationid="makenowjust" creationdate="20200419T161511Z">
        <seg>create  my_cool_lib/src/my_cool_lib.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  myapp/.editorconfig</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153550Z" creationid="makenowjust" creationdate="20200419T153550Z">
        <seg>create  myapp/.editorconfig</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  myapp/.gitignore</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153549Z" creationid="makenowjust" creationdate="20200419T153549Z">
        <seg>create  myapp/.gitignore</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  myapp/.travis.yml</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153605Z" creationid="makenowjust" creationdate="20200419T153605Z">
        <seg>create  myapp/.travis.yml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  myapp/LICENSE</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153551Z" creationid="makenowjust" creationdate="20200419T153551Z">
        <seg>create  myapp/LICENSE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  myapp/README.md</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153603Z" creationid="makenowjust" creationdate="20200419T153603Z">
        <seg>create  myapp/README.md</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  myapp/shard.yml</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153606Z" creationid="makenowjust" creationdate="20200419T153606Z">
        <seg>create  myapp/shard.yml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  myapp/spec/myapp_spec.cr
Initialized empty Git repository in /home/crystal/myapp/.git/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153613Z" creationid="makenowjust" creationdate="20200419T153613Z">
        <seg>create  myapp/spec/myapp_spec.cr
Initialized empty Git repository in /home/crystal/myapp/.git/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  myapp/spec/spec_helper.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153611Z" creationid="makenowjust" creationdate="20200419T153611Z">
        <seg>create  myapp/spec/spec_helper.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  myapp/src/myapp.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153608Z" creationid="makenowjust" creationdate="20200419T153608Z">
        <seg>create  myapp/src/myapp.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  myapp/src/myapp/version.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153609Z" creationid="makenowjust" creationdate="20200419T153609Z">
        <seg>create  myapp/src/myapp/version.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  palindrome-example/.editorconfig</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T154752Z" creationid="makenowjust" creationdate="20200527T154752Z">
        <seg>create  palindrome-example/.editorconfig</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  palindrome-example/.gitignore</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T154752Z" creationid="makenowjust" creationdate="20200527T154752Z">
        <seg>create  palindrome-example/.gitignore</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  palindrome-example/.travis.yml</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T154755Z" creationid="makenowjust" creationdate="20200527T154755Z">
        <seg>create  palindrome-example/.travis.yml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  palindrome-example/LICENSE</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T154753Z" creationid="makenowjust" creationdate="20200527T154753Z">
        <seg>create  palindrome-example/LICENSE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  palindrome-example/README.md</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T154754Z" creationid="makenowjust" creationdate="20200527T154754Z">
        <seg>create  palindrome-example/README.md</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  palindrome-example/shard.yml</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T154756Z" creationid="makenowjust" creationdate="20200527T154756Z">
        <seg>create  palindrome-example/shard.yml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  palindrome-example/spec/palindrome-example_spec.cr
Initialized empty Git repository in /&lt;YOUR-DIRECTORY&gt;/.../palindrome-example/.git/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T154758Z" creationid="makenowjust" creationdate="20200527T154758Z">
        <seg>create  palindrome-example/spec/palindrome-example_spec.cr
Initialized empty Git repository in /&lt;YOUR-DIRECTORY&gt;/.../palindrome-example/.git/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  palindrome-example/spec/spec_helper.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T154757Z" creationid="makenowjust" creationdate="20200527T154757Z">
        <seg>create  palindrome-example/spec/spec_helper.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  palindrome-example/src/palindrome-example.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T154756Z" creationid="makenowjust" creationdate="20200527T154756Z">
        <seg>create  palindrome-example/src/palindrome-example.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  palindrome-example/src/palindrome-example/version.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T154757Z" creationid="makenowjust" creationdate="20200527T154757Z">
        <seg>create  palindrome-example/src/palindrome-example/version.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal &lt;command&gt; --help</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080709Z" creationid="makenowjust" creationdate="20200516T080709Z">
        <seg>crystal &lt;command&gt; --help</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal [run] [&lt;options&gt;] &lt;programfile&gt; [-- &lt;argument&gt;...]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154456Z" creationid="makenowjust" creationdate="20200419T154456Z">
        <seg>crystal [run] [&lt;options&gt;] &lt;programfile&gt; [-- &lt;argument&gt;...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal build [&lt;options&gt;] &lt;programfile&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155041Z" creationid="makenowjust" creationdate="20200419T155041Z">
        <seg>crystal build [&lt;options&gt;] &lt;programfile&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal build your_program.cr --cross-compile --target "x86_64-unknown-linux-gnu"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T024035Z" creationid="makenowjust" creationdate="20200511T024035Z">
        <seg>crystal build your_program.cr --cross-compile --target "x86_64-unknown-linux-gnu"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal docs --output public --canonical-base-url http://example.com/ src/my_app.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163139Z" creationid="makenowjust" creationdate="20200419T163139Z">
        <seg>crystal docs --output public --canonical-base-url http://example.com/ src/my_app.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal docs [--output=&lt;output_dir&gt;] [--canonical-base-url=&lt;url&gt;] [&lt;source_file&gt;...]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161639Z" creationid="makenowjust" creationdate="20200419T161639Z">
        <seg>crystal docs [--output=&lt;output_dir&gt;] [--canonical-base-url=&lt;url&gt;] [&lt;source_file&gt;...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal docs src/my_app.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T162434Z" creationid="makenowjust" creationdate="20200419T162434Z">
        <seg>crystal docs src/my_app.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal env [&lt;var&gt;...]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163205Z" creationid="makenowjust" creationdate="20200419T163205Z">
        <seg>crystal env [&lt;var&gt;...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal eval [&lt;options&gt;] [&lt;source&gt;]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155924Z" creationid="makenowjust" creationdate="20200419T155924Z">
        <seg>crystal eval [&lt;options&gt;] [&lt;source&gt;]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal init (lib|app) &lt;name&gt; [&lt;dir&gt;]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161041Z" creationid="makenowjust" creationdate="20200419T161041Z">
        <seg>crystal init (lib|app) &lt;name&gt; [&lt;dir&gt;]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal play [--port &lt;port&gt;] [--binding &lt;host&gt;] [--verbose] [file]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165322Z" creationid="makenowjust" creationdate="20200419T165322Z">
        <seg>crystal play [--port &lt;port&gt;] [--binding &lt;host&gt;] [--verbose] [file]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal some_program.cr -Dflag</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T023004Z" creationid="makenowjust" creationdate="20200511T023004Z">
        <seg>crystal some_program.cr -Dflag</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal spec [&lt;options&gt;] [&lt;file&gt;...] [-- [&lt;runner_options&gt;]]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163508Z" creationid="makenowjust" creationdate="20200419T163508Z">
        <seg>crystal spec [&lt;options&gt;] [&lt;file&gt;...] [-- [&lt;runner_options&gt;]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal tool format</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T162032Z" creationid="makenowjust" creationdate="20200527T162032Z">
        <seg>crystal tool format</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal tool format --check</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T162139Z" creationid="makenowjust" creationdate="20200527T162139Z">
        <seg>crystal tool format --check</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal tool format [--check] [&lt;path&gt;...]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165807Z" creationid="makenowjust" creationdate="20200419T165807Z">
        <seg>crystal tool format [--check] [&lt;path&gt;...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal version</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160756Z" creationid="makenowjust" creationdate="20200419T160756Z">
        <seg>crystal version</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>curl -fsSL https://download.opensuse.org/repositories/devel:languages:crystal/{REPOSITORY}/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/crystal.gpg &gt; /dev/null
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210504T120423Z" creationid="makenowjust" creationdate="20210504T120423Z">
        <seg>curl -fsSL https://download.opensuse.org/repositories/devel:languages:crystal/{REPOSITORY}/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/crystal.gpg &gt; /dev/null
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>curl http://dist.crystal-lang.org/apt/setup.sh | sudo bash
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T052827Z" creationid="hirofumiwakasugi" creationdate="20150831T052827Z">
        <seg>curl http://dist.crystal-lang.org/apt/setup.sh | sudo bash
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>curl http://dist.crystal-lang.org/rpm/setup.sh | sudo bash
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055106Z" creationid="hirofumiwakasugi" creationdate="20150831T055106Z">
        <seg>curl http://dist.crystal-lang.org/rpm/setup.sh | sudo bash
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>current_age &lt; 20 ?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T150517Z" creationid="makenowjust" creationdate="20200429T150517Z">
        <seg>current_age &lt; 20 ? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>current_age &lt; 20 ? 10 : 30
end
person.age #=&gt; 28
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071821Z" creationid="hirofumiwakasugi" creationdate="20150906T071821Z">
        <seg>current_age &lt; 20 ? 10 : 30
end
person.age #=&gt; 28
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>d = 1
end
# d : Int32 | Nil</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074606Z" creationid="makenowjust" creationdate="20200424T074606Z">
        <seg>d = 1
end
# d : Int32 | Nil</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>d = 1
end
# d : Int32 | Nil
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061710Z" creationid="hirofumiwakasugi" creationdate="20160204T061710Z">
        <seg>d = 1
end
# d : Int32 | Nil
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>d = 1
end
# d :: Int32 | Nil
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T011301Z" creationid="hirofumiwakasugi" creationdate="20150903T011301Z">
        <seg>d = 1
end
# d :: Int32 | Nil
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>data_as_callback = Box(typeof(callback)).unbox(data)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090913Z" creationid="makenowjust" creationdate="20200512T090913Z">
        <seg>data_as_callback = Box(typeof(callback)).unbox(data)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>data_as_callback.call(tick)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090948Z" creationid="makenowjust" creationdate="20200512T090948Z">
        <seg>data_as_callback.call(tick)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>db.close
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100755Z" creationid="makenowjust" creationdate="20210324T100755Z">
        <seg>db.close
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>db.exec "create table contacts (name varchar(30), age int)"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100756Z" creationid="makenowjust" creationdate="20210324T100756Z">
        <seg>db.exec "create table contacts (name varchar(30), age int)"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>db.query "select name, age from contacts order by age desc" do |rs|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100800Z" creationid="makenowjust" creationdate="20210324T100800Z">
        <seg>db.query "select name, age from contacts order by age desc" do |rs|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>declaring &lt;g1&gt;aliases&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T120156Z" creationid="makenowjust" creationdate="20200507T115827Z">
        <seg>&lt;g1&gt;型エイリアス&lt;/g1&gt;のとき</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>declaring &lt;g1&gt;typedefs&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T120158Z" creationid="makenowjust" creationdate="20200507T115834Z">
        <seg>&lt;g1&gt;typedef&lt;/g1&gt;の宣言のとき</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def +(other : self) : self</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T083928Z" creationid="makenowjust" creationdate="20200502T083928Z">
        <seg>def +(other : self) : self</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def +(other)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025210Z" creationid="hirofumiwakasugi" creationdate="20150909T025210Z">
        <seg>def +(other)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def -</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025726Z" creationid="hirofumiwakasugi" creationdate="20150909T025726Z">
        <seg>def -</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def - : self</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T083702Z" creationid="makenowjust" creationdate="20200502T083702Z">
        <seg>def - : self</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def ==(other : self)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T022637Z" creationid="hirofumiwakasugi" creationdate="20150908T022637Z">
        <seg>def ==(other : self)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def ==(other)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T023040Z" creationid="hirofumiwakasugi" creationdate="20150908T023040Z">
        <seg>def ==(other)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def CaesarCipher.decrypt(string : String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T130120Z" creationid="makenowjust" creationdate="20200504T130120Z">
        <seg>def CaesarCipher.decrypt(string : String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def Foo.boo(arg1, arg2)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220114Z" creationid="makenowjust" creationdate="20200509T220114Z">
        <seg>def Foo.boo(arg1, arg2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def [](index)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T031030Z" creationid="hirofumiwakasugi" creationdate="20150909T031030Z">
        <seg>def [](index)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def [](index1, index2, index3)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T031032Z" creationid="hirofumiwakasugi" creationdate="20150909T031032Z">
        <seg>def [](index1, index2, index3)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def []=(index, value)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T031033Z" creationid="hirofumiwakasugi" creationdate="20150909T031033Z">
        <seg>def []=(index, value)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def add(x : Number, y : Number)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T160043Z" creationid="makenowjust" creationdate="20200429T160043Z">
        <seg>def add(x : Number, y : Number)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def add(x, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T100354Z" creationid="makenowjust" creationdate="20200427T100354Z">
        <seg>def add(x, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def add(y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021504Z" creationid="hirofumiwakasugi" creationdate="20150904T021504Z">
        <seg>def add(y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def address</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T054209Z" creationid="hirofumiwakasugi" creationdate="20150905T054209Z">
        <seg>def address</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def address=(@address)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T054210Z" creationid="hirofumiwakasugi" creationdate="20150905T054210Z">
        <seg>def address=(@address)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def age</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055613Z" creationid="hirofumiwakasugi" creationdate="20150904T055613Z">
        <seg>def age</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def amount</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012158Z" creationid="hirofumiwakasugi" creationdate="20151010T012158Z">
        <seg>def amount</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def bar</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021117Z" creationid="hirofumiwakasugi" creationdate="20150904T021117Z">
        <seg>def bar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def baz(x, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021152Z" creationid="hirofumiwakasugi" creationdate="20150904T021152Z">
        <seg>def baz(x, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def become_older</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122228Z" creationid="hirofumiwakasugi" creationdate="20150904T122228Z">
        <seg>def become_older</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def become_older(&amp;block)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072138Z" creationid="hirofumiwakasugi" creationdate="20150906T072138Z">
        <seg>def become_older(&amp;block)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def become_older(age : String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072843Z" creationid="hirofumiwakasugi" creationdate="20150906T072843Z">
        <seg>def become_older(age : String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def become_older(age)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072600Z" creationid="hirofumiwakasugi" creationdate="20150906T072600Z">
        <seg>def become_older(age)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def become_older(by = 1)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T111213Z" creationid="hirofumiwakasugi" creationdate="20150906T111213Z">
        <seg>def become_older(by = 1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def become_older(years : Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071455Z" creationid="hirofumiwakasugi" creationdate="20150906T071455Z">
        <seg>def become_older(years : Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def become_older(years : String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071534Z" creationid="hirofumiwakasugi" creationdate="20150906T071534Z">
        <seg>def become_older(years : String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def become_older(years)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T070843Z" creationid="hirofumiwakasugi" creationdate="20150906T070843Z">
        <seg>def become_older(years)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def block</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095957Z" creationid="makenowjust" creationdate="20200424T095957Z">
        <seg>def block</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def capture(&amp;block)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075340Z" creationid="makenowjust" creationdate="20200506T075340Z">
        <seg>def capture(&amp;block)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def change_it(tz)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083055Z" creationid="makenowjust" creationdate="20200512T083055Z">
        <seg>def change_it(tz)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def change_it(value)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083407Z" creationid="makenowjust" creationdate="20200512T083407Z">
        <seg>def change_it(value)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def counter</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T080512Z" creationid="makenowjust" creationdate="20200506T080512Z">
        <seg>def counter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def date_of_birth</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010347Z" creationid="hirofumiwakasugi" creationdate="20151010T010347Z">
        <seg>def date_of_birth</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def decode64(string)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142911Z" creationid="hirofumiwakasugi" creationdate="20150911T142911Z">
        <seg>def decode64(string)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def describe</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215834Z" creationid="makenowjust" creationdate="20200509T215834Z">
        <seg>def describe</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def encode64(string)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142823Z" creationid="hirofumiwakasugi" creationdate="20150911T142823Z">
        <seg>def encode64(string)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def even?(num)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T100100Z" creationid="makenowjust" creationdate="20200427T100100Z">
        <seg>def even?(num)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def finalize</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041637Z" creationid="hirofumiwakasugi" creationdate="20150910T041637Z">
        <seg>def finalize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def first_name</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010346Z" creationid="hirofumiwakasugi" creationdate="20151010T010346Z">
        <seg>def first_name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095700Z" creationid="makenowjust" creationdate="20200424T095700Z">
        <seg>def foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo(</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T144531Z" creationid="makenowjust" creationdate="20200430T144531Z">
        <seg>def foo(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo(*, x)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160755Z" creationid="makenowjust" creationdate="20200501T160755Z">
        <seg>def foo(*, x)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo(*args : Int32)
end

def foo(*args : String)
end

foo 1, 2, 3       # OK, invokes first overload
foo "a", "b", "c" # OK, invokes second overload
foo 1, 2, "hello" # Error
foo()             # Error</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T161816Z" creationid="makenowjust" creationdate="20200429T161816Z">
        <seg>def foo(*args : Int32)
end

def foo(*args : String)
end

foo 1, 2, 3       # OK, invokes first overload
foo "a", "b", "c" # OK, invokes second overload
foo 1, 2, "hello" # Error
foo()             # Error</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo(*args : Object)
end

foo()       # Error
foo(1)      # OK
foo(1, "x") # OK</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T162324Z" creationid="makenowjust" creationdate="20200429T162324Z">
        <seg>def foo(*args : Object)
end

foo()       # Error
foo(1)      # OK
foo(1, "x") # OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo(*args : String)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025930Z" creationid="hirofumiwakasugi" creationdate="20150908T025930Z">
        <seg>def foo(*args : String)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo(*elements, x)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T154619Z" creationid="makenowjust" creationdate="20200429T154619Z">
        <seg>def foo(*elements, x)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo(external_name internal_name)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T161118Z" creationid="makenowjust" creationdate="20200501T161118Z">
        <seg>def foo(external_name internal_name)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo(x : Array(T)) forall T</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T135754Z" creationid="makenowjust" creationdate="20200430T135754Z">
        <seg>def foo(x : Array(T)) forall T</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo(x : Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T122856Z" creationid="makenowjust" creationdate="20200507T122856Z">
        <seg>def foo(x : Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo(x : Int32)
end

foo 1       # OK
foo "hello" # Error</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T161651Z" creationid="makenowjust" creationdate="20200429T161651Z">
        <seg>def foo(x : Int32)
end

foo 1       # OK
foo "hello" # Error</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo(x : Int32.class)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011920Z" creationid="hirofumiwakasugi" creationdate="20151009T011920Z">
        <seg>def foo(x : Int32.class)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo(x : Int32.class)
end

foo Int32  # OK
foo String # Error</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T161746Z" creationid="makenowjust" creationdate="20200429T161746Z">
        <seg>def foo(x : Int32.class)
end

foo Int32  # OK
foo String # Error</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo(x : String.class)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025812Z" creationid="hirofumiwakasugi" creationdate="20150908T025812Z">
        <seg>def foo(x : String.class)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo(x : T) forall T</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T135251Z" creationid="makenowjust" creationdate="20200430T135251Z">
        <seg>def foo(x : T) forall T</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo(x : T.class) forall T</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T135851Z" creationid="makenowjust" creationdate="20200430T135851Z">
        <seg>def foo(x : T.class) forall T</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo(x, **other)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T155105Z" creationid="makenowjust" creationdate="20200429T155105Z">
        <seg>def foo(x, **other)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo(x, *, y)
end

foo 1, y: 2    # OK
foo y: 2, x: 3 # OK</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160907Z" creationid="makenowjust" creationdate="20200501T160907Z">
        <seg>def foo(x, *, y)
end

foo 1, y: 2    # OK
foo y: 2, x: 3 # OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo(x, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T154935Z" creationid="makenowjust" creationdate="20200429T154935Z">
        <seg>def foo(x, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo(x, y, *, z)
end

foo 1, 2, 3    # Error, wrong number of arguments (given 3, expected 2)
foo 1, 2       # Error, missing argument: z
foo 1, 2, z: 3 # OK</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T154724Z" creationid="makenowjust" creationdate="20200429T154724Z">
        <seg>def foo(x, y, *, z)
end

foo 1, 2, 3    # Error, wrong number of arguments (given 3, expected 2)
foo 1, 2       # Error, missing argument: z
foo 1, 2, z: 3 # OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def greet</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T023717Z" creationid="hirofumiwakasugi" creationdate="20150910T023717Z">
        <seg>def greet</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def greet(msg : Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024421Z" creationid="hirofumiwakasugi" creationdate="20150910T024421Z">
        <seg>def greet(msg : Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def greet(msg)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024146Z" creationid="hirofumiwakasugi" creationdate="20150910T024146Z">
        <seg>def greet(msg)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def handle_path(path : String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T160807Z" creationid="makenowjust" creationdate="20200429T160807Z">
        <seg>def handle_path(path : String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def has_instance_var?(name) : Bool</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T223801Z" creationid="makenowjust" creationdate="20200509T223801Z">
        <seg>def has_instance_var?(name) : Bool</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def homepage_url</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010348Z" creationid="hirofumiwakasugi" creationdate="20151010T010348Z">
        <seg>def homepage_url</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def horns</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144053Z" creationid="hirofumiwakasugi" creationdate="20151010T144053Z">
        <seg>def horns</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def id : Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213800Z" creationid="makenowjust" creationdate="20200412T213800Z">
        <seg>def id : Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def increment(value, by)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T161347Z" creationid="makenowjust" creationdate="20200501T161347Z">
        <seg>def increment(value, by)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040809Z" creationid="hirofumiwakasugi" creationdate="20150910T040809Z">
        <seg>def initialize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@amount, @target_currency)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012158Z" creationid="hirofumiwakasugi" creationdate="20151010T012158Z">
        <seg>def initialize(@amount, @target_currency)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@count : Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T172745Z" creationid="makenowjust" creationdate="20200505T172745Z">
        <seg>def initialize(@count : Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@currency, @value)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012157Z" creationid="hirofumiwakasugi" creationdate="20151010T012157Z">
        <seg>def initialize(@currency, @value)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@custom_greeting = nil)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T205104Z" creationid="makenowjust" creationdate="20200412T205104Z">
        <seg>def initialize(@custom_greeting = nil)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@custom_greeting=nil)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010358Z" creationid="hirofumiwakasugi" creationdate="20151010T010358Z">
        <seg>def initialize(@custom_greeting=nil)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@horns = 1)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140505Z" creationid="hirofumiwakasugi" creationdate="20151010T140505Z">
        <seg>def initialize(@horns = 1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@lucky_number = DEFAULT_LUCKY_NUMBER)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T143823Z" creationid="makenowjust" creationdate="20200427T143823Z">
        <seg>def initialize(@lucky_number = DEFAULT_LUCKY_NUMBER)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@name : String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T122726Z" creationid="makenowjust" creationdate="20200427T122726Z">
        <seg>def initialize(@name : String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@name : String, @age : Int = 0)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T150144Z" creationid="makenowjust" creationdate="20200429T150144Z">
        <seg>def initialize(@name : String, @age : Int = 0)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@name : String, @age : Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T223553Z" creationid="makenowjust" creationdate="20200509T223553Z">
        <seg>def initialize(@name : String, @age : Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@name : String, @company_name : String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T103736Z" creationid="makenowjust" creationdate="20200504T103736Z">
        <seg>def initialize(@name : String, @company_name : String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@name : String, @pet : Animal)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T110505Z" creationid="makenowjust" creationdate="20200504T110505Z">
        <seg>def initialize(@name : String, @pet : Animal)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@name = "John Doe")</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T142719Z" creationid="makenowjust" creationdate="20200427T142719Z">
        <seg>def initialize(@name = "John Doe")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@name)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T121926Z" creationid="hirofumiwakasugi" creationdate="20150904T121926Z">
        <seg>def initialize(@name)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@name, @age)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T012113Z" creationid="hirofumiwakasugi" creationdate="20151002T012113Z">
        <seg>def initialize(@name, @age)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@name, @company_name)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T023838Z" creationid="hirofumiwakasugi" creationdate="20150910T023838Z">
        <seg>def initialize(@name, @company_name)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@name, @pet)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031542Z" creationid="hirofumiwakasugi" creationdate="20150910T031542Z">
        <seg>def initialize(@name, @pet)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@value : Int32, @name : String); end
end

@[MyAnnotation(value: 2, name: "Jim")]
def new_test</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T110753Z" creationid="makenowjust" creationdate="20200510T110753Z">
        <seg>def initialize(@value : Int32, @name : String); end
end

@[MyAnnotation(value: 2, name: "Jim")]
def new_test</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@value : T)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063739Z" creationid="hirofumiwakasugi" creationdate="20150912T063739Z">
        <seg>def initialize(@value : T)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@value : U)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061139Z" creationid="hirofumiwakasugi" creationdate="20150924T061139Z">
        <seg>def initialize(@value : U)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@value)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T055442Z" creationid="hirofumiwakasugi" creationdate="20150912T055442Z">
        <seg>def initialize(@value)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@x : Int32, @y : Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091250Z" creationid="makenowjust" creationdate="20200506T091250Z">
        <seg>def initialize(@x : Int32, @y : Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@x, @y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035031Z" creationid="hirofumiwakasugi" creationdate="20150906T035031Z">
        <seg>def initialize(@x, @y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(name : String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T120714Z" creationid="makenowjust" creationdate="20200427T120714Z">
        <seg>def initialize(name : String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(name = "John Doe")</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T142656Z" creationid="makenowjust" creationdate="20200427T142656Z">
        <seg>def initialize(name = "John Doe")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(name)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055611Z" creationid="hirofumiwakasugi" creationdate="20150904T055611Z">
        <seg>def initialize(name)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(obj : String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T140711Z" creationid="makenowjust" creationdate="20200427T140711Z">
        <seg>def initialize(obj : String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def instance_method</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T112619Z" creationid="makenowjust" creationdate="20200502T112619Z">
        <seg>def instance_method</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def instance_vars_names</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T223541Z" creationid="makenowjust" creationdate="20200509T223541Z">
        <seg>def instance_vars_names</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def int_to_int(&amp;block : Int32 -&gt; Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T193101Z" creationid="makenowjust" creationdate="20200505T193101Z">
        <seg>def int_to_int(&amp;block : Int32 -&gt; Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def invoke(&amp;block)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024155Z" creationid="hirofumiwakasugi" creationdate="20150917T024155Z">
        <seg>def invoke(&amp;block)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def items</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T133855Z" creationid="hirofumiwakasugi" creationdate="20150911T133855Z">
        <seg>def items</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def length</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T133835Z" creationid="hirofumiwakasugi" creationdate="20150911T133835Z">
        <seg>def length</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def lineage</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224455Z" creationid="makenowjust" creationdate="20200509T224455Z">
        <seg>def lineage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def lucky_number</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T135609Z" creationid="makenowjust" creationdate="20200427T135609Z">
        <seg>def lucky_number</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def make_a_person_talk</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033519Z" creationid="hirofumiwakasugi" creationdate="20150909T033519Z">
        <seg>def make_a_person_talk</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def many</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184745Z" creationid="makenowjust" creationdate="20200505T184745Z">
        <seg>def many</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def name</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055612Z" creationid="hirofumiwakasugi" creationdate="20150904T055612Z">
        <seg>def name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def name : String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213222Z" creationid="makenowjust" creationdate="20200412T213222Z">
        <seg>def name : String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def number_of_horns</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144054Z" creationid="hirofumiwakasugi" creationdate="20151010T144054Z">
        <seg>def number_of_horns</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def on_save(&amp;block)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061908Z" creationid="hirofumiwakasugi" creationdate="20150918T061908Z">
        <seg>def on_save(&amp;block)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def one</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030941Z" creationid="hirofumiwakasugi" creationdate="20150916T030941Z">
        <seg>def one</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def paint(color : Color)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T183115Z" creationid="makenowjust" creationdate="20200505T183115Z">
        <seg>def paint(color : Color)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def paint(color : Symbol)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T183122Z" creationid="makenowjust" creationdate="20200505T183122Z">
        <seg>def paint(color : Symbol)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def pairs</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094540Z" creationid="makenowjust" creationdate="20210324T094540Z">
        <seg>def pairs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def parse(score_text)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011936Z" creationid="hirofumiwakasugi" creationdate="20151010T011936Z">
        <seg>def parse(score_text)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def plan(begin begin_time, end end_time)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T161249Z" creationid="makenowjust" creationdate="20200501T161249Z">
        <seg>def plan(begin begin_time, end end_time)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def plus</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T172747Z" creationid="makenowjust" creationdate="20200505T172747Z">
        <seg>def plus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def plus_one(x)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172025Z" creationid="makenowjust" creationdate="20200422T172025Z">
        <seg>def plus_one(x)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def print_greeting</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010358Z" creationid="hirofumiwakasugi" creationdate="20151010T010358Z">
        <seg>def print_greeting</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def properties</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T112319Z" creationid="makenowjust" creationdate="20200510T112319Z">
        <seg>def properties</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def push(element : T, array : Array(T)) forall T</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T135935Z" creationid="makenowjust" creationdate="20200430T135935Z">
        <seg>def push(element : T, array : Array(T)) forall T</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def red?</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011445Z" creationid="hirofumiwakasugi" creationdate="20150916T011445Z">
        <seg>def red?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def save</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061908Z" creationid="hirofumiwakasugi" creationdate="20150918T061908Z">
        <seg>def save</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def say_bye</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032833Z" creationid="hirofumiwakasugi" creationdate="20150909T032833Z">
        <seg>def say_bye</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def say_hello</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032702Z" creationid="hirofumiwakasugi" creationdate="20150909T032702Z">
        <seg>def say_hello</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def self.class_method</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T112621Z" creationid="makenowjust" creationdate="20200502T112621Z">
        <seg>def self.class_method</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def self.compare(p1 : self, p2 : self)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025133Z" creationid="hirofumiwakasugi" creationdate="20150908T025133Z">
        <seg>def self.compare(p1 : self, p2 : self)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def self.counter</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041159Z" creationid="hirofumiwakasugi" creationdate="20150910T041159Z">
        <seg>def self.counter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def self.describe</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215837Z" creationid="makenowjust" creationdate="20200509T215837Z">
        <seg>def self.describe</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def self.elem_type(typ)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063207Z" creationid="hirofumiwakasugi" creationdate="20150930T063207Z">
        <seg>def self.elem_type(typ)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def self.encrypt(string : String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T130044Z" creationid="makenowjust" creationdate="20200504T130044Z">
        <seg>def self.encrypt(string : String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def self.greet</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T113024Z" creationid="makenowjust" creationdate="20200502T113024Z">
        <seg>def self.greet</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def self.increment</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041100Z" creationid="hirofumiwakasugi" creationdate="20150910T041100Z">
        <seg>def self.increment</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def self.instances</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040810Z" creationid="hirofumiwakasugi" creationdate="20150910T040810Z">
        <seg>def self.instances</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def self.new(name : String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T121037Z" creationid="makenowjust" creationdate="20200427T121037Z">
        <seg>def self.new(name : String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def self.new(name)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060126Z" creationid="hirofumiwakasugi" creationdate="20150904T060126Z">
        <seg>def self.new(name)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def self.numbers</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T134548Z" creationid="makenowjust" creationdate="20200504T134548Z">
        <seg>def self.numbers</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def self.on_tick(&amp;callback : Int32 -&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090420Z" creationid="makenowjust" creationdate="20200512T090420Z">
        <seg>def self.on_tick(&amp;callback : Int32 -&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def self.unknown</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T142229Z" creationid="makenowjust" creationdate="20200427T142229Z">
        <seg>def self.unknown</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def self.unknown : Address</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T141906Z" creationid="makenowjust" creationdate="20200427T141906Z">
        <seg>def self.unknown : Address</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def size</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092222Z" creationid="hirofumiwakasugi" creationdate="20151009T092222Z">
        <seg>def size</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def some</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184830Z" creationid="makenowjust" creationdate="20200505T184830Z">
        <seg>def some</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def some_method</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142553Z" creationid="hirofumiwakasugi" creationdate="20150911T142553Z">
        <seg>def some_method</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def some_method : Nil</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T141326Z" creationid="makenowjust" creationdate="20200430T141326Z">
        <seg>def some_method : Nil</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def some_method : String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T141149Z" creationid="makenowjust" creationdate="20200430T141149Z">
        <seg>def some_method : String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def some_method(x, y = 1, z = 2, w = 3)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T152716Z" creationid="makenowjust" creationdate="20200429T152716Z">
        <seg>def some_method(x, y = 1, z = 2, w = 3)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def some_proc(&amp;block : Int32 -&gt; Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T074356Z" creationid="makenowjust" creationdate="20200506T074356Z">
        <seg>def some_proc(&amp;block : Int32 -&gt; Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def some_proc(&amp;block : Int32 -&gt; _)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T073857Z" creationid="makenowjust" creationdate="20200506T073857Z">
        <seg>def some_proc(&amp;block : Int32 -&gt; _)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def some_proc(&amp;block : Int32 -&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T073852Z" creationid="makenowjust" creationdate="20200506T073852Z">
        <seg>def some_proc(&amp;block : Int32 -&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def speak</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144055Z" creationid="hirofumiwakasugi" creationdate="20151010T144055Z">
        <seg>def speak</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def sum(*elements)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T154142Z" creationid="makenowjust" creationdate="20200429T154142Z">
        <seg>def sum(*elements)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def sum(*elements, initial = 0)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T154313Z" creationid="makenowjust" creationdate="20200429T154313Z">
        <seg>def sum(*elements, initial = 0)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def sum(*elements, initial)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T154419Z" creationid="makenowjust" creationdate="20200429T154419Z">
        <seg>def sum(*elements, initial)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def t</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061137Z" creationid="hirofumiwakasugi" creationdate="20150924T061137Z">
        <seg>def t</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def talk</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031539Z" creationid="hirofumiwakasugi" creationdate="20150910T031539Z">
        <seg>def talk</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def thrice</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190209Z" creationid="makenowjust" creationdate="20200505T190209Z">
        <seg>def thrice</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def times</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T032022Z" creationid="hirofumiwakasugi" creationdate="20150916T032022Z">
        <seg>def times</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def to_s(io)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T090854Z" creationid="makenowjust" creationdate="20200506T090854Z">
        <seg>def to_s(io)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def to_unsafe</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044606Z" creationid="hirofumiwakasugi" creationdate="20151005T044606Z">
        <seg>def to_unsafe</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def transform(value)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185950Z" creationid="makenowjust" creationdate="20200505T185950Z">
        <seg>def transform(value)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def transform_int(start : Int32, &amp;block : Int32 -&gt; Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190147Z" creationid="makenowjust" creationdate="20200505T190147Z">
        <seg>def transform_int(start : Int32, &amp;block : Int32 -&gt; Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def twice</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024952Z" creationid="hirofumiwakasugi" creationdate="20150917T024952Z">
        <seg>def twice</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def twice(&amp;block)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184222Z" creationid="makenowjust" creationdate="20200505T184222Z">
        <seg>def twice(&amp;block)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def value</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T055443Z" creationid="hirofumiwakasugi" creationdate="20150912T055443Z">
        <seg>def value</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def value=(new_value : T)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T065517Z" creationid="hirofumiwakasugi" creationdate="20150912T065517Z">
        <seg>def value=(new_value : T)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def value=(new_value)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T064933Z" creationid="hirofumiwakasugi" creationdate="20150912T064933Z">
        <seg>def value=(new_value)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def wrap_foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025543Z" creationid="hirofumiwakasugi" creationdate="20150917T025543Z">
        <seg>def wrap_foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def wrap_foo(&amp;block : Int32 -&gt; _)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T030543Z" creationid="hirofumiwakasugi" creationdate="20150917T030543Z">
        <seg>def wrap_foo(&amp;block : Int32 -&gt; _)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def x</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035031Z" creationid="hirofumiwakasugi" creationdate="20150906T035031Z">
        <seg>def x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def x_ptr</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035033Z" creationid="hirofumiwakasugi" creationdate="20150906T035033Z">
        <seg>def x_ptr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def yield_normally</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030943Z" creationid="hirofumiwakasugi" creationdate="20150916T030943Z">
        <seg>def yield_normally</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def yield_with_self</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030942Z" creationid="hirofumiwakasugi" creationdate="20150916T030942Z">
        <seg>def yield_with_self</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def {{@type.name.downcase.id}}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014444Z" creationid="hirofumiwakasugi" creationdate="20151002T014444Z">
        <seg>def {{@type.name.downcase.id}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def {{key.id}}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040429Z" creationid="hirofumiwakasugi" creationdate="20151001T040429Z">
        <seg>def {{key.id}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def {{method}}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215439Z" creationid="makenowjust" creationdate="20200509T215439Z">
        <seg>def {{method}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def {{name.id}}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035809Z" creationid="hirofumiwakasugi" creationdate="20151001T035809Z">
        <seg>def {{name.id}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def {{name}}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T014649Z" creationid="hirofumiwakasugi" creationdate="20151001T014649Z">
        <seg>def {{name}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>default</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075455Z" creationid="makenowjust" creationdate="20200516T075455Z">
        <seg>default</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>define_dummy_methods [foo, bar, baz]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040353Z" creationid="hirofumiwakasugi" creationdate="20151001T040353Z">
        <seg>define_dummy_methods [foo, bar, baz]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>define_dummy_methods foo, bar, baz</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040739Z" creationid="hirofumiwakasugi" creationdate="20151001T040739Z">
        <seg>define_dummy_methods foo, bar, baz</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>define_method foo, 1
define_method bar, 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035956Z" creationid="hirofumiwakasugi" creationdate="20151001T035956Z">
        <seg>define_method foo, 1
define_method bar, 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>dependencies:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100745Z" creationid="makenowjust" creationdate="20210324T100745Z">
        <seg>dependencies:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>deps                     install project dependencies</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072215Z" creationid="hirofumiwakasugi" creationdate="20150901T072215Z">
        <seg>deps                     install project dependencies</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>description: |</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T163448Z" creationid="makenowjust" creationdate="20200527T163448Z">
        <seg>description: |</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>division</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085703Z" creationid="makenowjust" creationdate="20200502T085703Z">
        <seg>除法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>division &lt;g1&gt;and&lt;/g1&gt; assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100533Z" creationid="makenowjust" creationdate="20200502T100533Z">
        <seg>除法&lt;g1&gt;複合&lt;/g1&gt;代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_another_thing
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T023534Z" creationid="hirofumiwakasugi" creationdate="20150903T023534Z">
        <seg>do_another_thing
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_another_thing
end

# The above is the same as:
if var.is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T092929Z" creationid="makenowjust" creationdate="20200424T092929Z">
        <seg>do_another_thing
end

# 上記は以下と同じ
if var.is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_another_thing
end

# The above is the same as:
tmp = exp
if value1 === tmp || value2 === tmp</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090907Z" creationid="makenowjust" creationdate="20200424T090907Z">
        <seg>do_another_thing
end

# 上記は以下と同じ
tmp = exp
if value1 === tmp || value2 === tmp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_another_thing
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T023611Z" creationid="hirofumiwakasugi" creationdate="20150903T023611Z">
        <seg>do_another_thing
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052200Z" creationid="hirofumiwakasugi" creationdate="20150905T052200Z">
        <seg>do_something</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something
elsif cond3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010135Z" creationid="hirofumiwakasugi" creationdate="20151001T010135Z">
        <seg>do_something
elsif cond3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something
elsif some_other_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T010636Z" creationid="hirofumiwakasugi" creationdate="20150903T010636Z">
        <seg>do_something
elsif some_other_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something
elsif tmp.odd?</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010117Z" creationid="hirofumiwakasugi" creationdate="20151001T010117Z">
        <seg>do_something
elsif tmp.odd?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something
elsif value3 === tmp</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T023543Z" creationid="hirofumiwakasugi" creationdate="20150903T023543Z">
        <seg>do_something
elsif value3 === tmp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something
elsif var.is_a?(Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010050Z" creationid="hirofumiwakasugi" creationdate="20151001T010050Z">
        <seg>do_something
elsif var.is_a?(Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something
when .odd?</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010102Z" creationid="hirofumiwakasugi" creationdate="20151001T010102Z">
        <seg>do_something
when .odd?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something
when Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010028Z" creationid="hirofumiwakasugi" creationdate="20151001T010028Z">
        <seg>do_something
when Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something
when cond3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010126Z" creationid="hirofumiwakasugi" creationdate="20151001T010126Z">
        <seg>do_something
when cond3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something
when value3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T023533Z" creationid="hirofumiwakasugi" creationdate="20150903T023533Z">
        <seg>do_something
when value3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something_else
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T010637Z" creationid="hirofumiwakasugi" creationdate="20150903T010637Z">
        <seg>do_something_else
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something_else
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010104Z" creationid="hirofumiwakasugi" creationdate="20151001T010104Z">
        <seg>do_something_else
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something_else
end

# The above is the same as:
if cond1 || cond2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093325Z" creationid="makenowjust" creationdate="20200424T093325Z">
        <seg>do_something_else
end

# 上記は以下に同じ
if cond1 || cond2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something_else
end

# The above is the same as:
tmp = num
if tmp.even?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093140Z" creationid="makenowjust" creationdate="20200424T093140Z">
        <seg>do_something_else
end

# 上記は以下に同じ
tmp = num
if tmp.even?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something_else
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010118Z" creationid="hirofumiwakasugi" creationdate="20151001T010118Z">
        <seg>do_something_else
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_that
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074306Z" creationid="makenowjust" creationdate="20200424T074306Z">
        <seg>do_that
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_that
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T010638Z" creationid="hirofumiwakasugi" creationdate="20150903T010638Z">
        <seg>do_that
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_this
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052411Z" creationid="hirofumiwakasugi" creationdate="20150905T052411Z">
        <seg>do_this
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_this
end

# The above is the same as:
while !some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101056Z" creationid="makenowjust" creationdate="20200424T101056Z">
        <seg>do_this
end

# 上記は以下に同じ
while !some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_this
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052045Z" creationid="hirofumiwakasugi" creationdate="20150905T052045Z">
        <seg>do_this
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>docker-compose.*.yml</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T073712Z" creationid="makenowjust" creationdate="20210324T073712Z">
        <seg>docker-compose.*.yml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>docker-compose.yml</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075515Z" creationid="makenowjust" creationdate="20200516T075515Z">
        <seg>docker-compose.yml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>docs                     generate documentation</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072216Z" creationid="hirofumiwakasugi" creationdate="20150901T072216Z">
        <seg>docs                     generate documentation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>double splat</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T092219Z" creationid="makenowjust" creationdate="20200502T092219Z">
        <seg>二重スプラット展開</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>dst_time     : Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045657Z" creationid="hirofumiwakasugi" creationdate="20151007T045657Z">
        <seg>dst_time     : Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>dst_time : Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T082655Z" creationid="makenowjust" creationdate="20200512T082655Z">
        <seg>dst_time : Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>e = "hello"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012732Z" creationid="hirofumiwakasugi" creationdate="20150903T012732Z">
        <seg>e = "hello"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>e = 1
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012731Z" creationid="hirofumiwakasugi" creationdate="20150903T012731Z">
        <seg>e = 1
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>e = Employee.new
e.greet "everyone" # "Hello, everyone"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024150Z" creationid="hirofumiwakasugi" creationdate="20150910T024150Z">
        <seg>e = Employee.new
e.greet "everyone" # "Hello, everyone"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>e = Employee.new
e.greet "everyone" # "Hi, everyone"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024422Z" creationid="hirofumiwakasugi" creationdate="20150910T024422Z">
        <seg>e = Employee.new
e.greet "everyone" # "Hi, everyone"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>e.g.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T154806Z" creationid="makenowjust" creationdate="20200527T154749Z">
        <seg>例:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>e.g. Bob needs a palindrome library, but Felipe is just looking for libraries involving text and Susan is looking for libraries involving spelling.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T163245Z" creationid="makenowjust" creationdate="20200527T163245Z">
        <seg>例えば Bob は回文を扱うライブラリを必要としていて、一方で Felipe が探しているのはテキストを扱うライブラリで、Susan が探しているのはスペルについてのライブラリ、といったように、です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>e.g. racecar, mom, dad, kayak, madam</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T153906Z" creationid="makenowjust" creationdate="20200527T153906Z">
        <seg>例えば、 racecar や mom、dad、kayak、madam などの単語が挙げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>e.greet 1 # "Hi, this is a number: 1"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024424Z" creationid="hirofumiwakasugi" creationdate="20150910T024424Z">
        <seg>e.greet 1 # "Hi, this is a number: 1"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>elem_type(typ.first)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063208Z" creationid="hirofumiwakasugi" creationdate="20150930T063208Z">
        <seg>elem_type(typ.first)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>elements.each do |value|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042105Z" creationid="hirofumiwakasugi" creationdate="20150907T042105Z">
        <seg>elements.each do |value|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013157Z" creationid="hirofumiwakasugi" creationdate="20150903T013157Z">
        <seg>else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>else_expression
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022845Z" creationid="hirofumiwakasugi" creationdate="20150903T022845Z">
        <seg>else_expression
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>else_expression
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022843Z" creationid="hirofumiwakasugi" creationdate="20150903T022843Z">
        <seg>else_expression
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>else_expression
end

# The above is the same as:
if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090523Z" creationid="makenowjust" creationdate="20200424T090523Z">
        <seg>else_expression
end

# 上記は以下に同じ
if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>employee = Employee.new "John"
employee.greet # "Hi, I'm John"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T023719Z" creationid="hirofumiwakasugi" creationdate="20150910T023719Z">
        <seg>employee = Employee.new "John"
employee.greet # "Hi, I'm John"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>en</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083822Z" creationid="makenowjust" creationdate="20200516T083822Z">
        <seg>ja</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>encode64 "hello" #=&gt; "aGVsbG8="
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T145243Z" creationid="hirofumiwakasugi" creationdate="20150911T145243Z">
        <seg>encode64 "hello" #=&gt; "aGVsbG8="
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>encrypt(string)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T130121Z" creationid="makenowjust" creationdate="20200504T130121Z">
        <seg>encrypt(string)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072643Z" creationid="hirofumiwakasugi" creationdate="20150901T072643Z">
        <seg>end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013731Z" creationid="hirofumiwakasugi" creationdate="20150903T013731Z">
        <seg>end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
a # =&gt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080445Z" creationid="makenowjust" creationdate="20200424T080445Z">
        <seg>end
a # =&gt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
a #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013200Z" creationid="hirofumiwakasugi" creationdate="20150903T013200Z">
        <seg>end
a #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122230Z" creationid="hirofumiwakasugi" creationdate="20150904T122230Z">
        <seg>end
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

# Similarly, the shorthand also works with blocks:
(1..10).each do |n|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T104132Z" creationid="makenowjust" creationdate="20200506T104132Z">
        <seg>end
end

# また短縮記法はブロックに対しても同様にはたらく
(1..10).each do |n|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

# This correctly generates:
#
#     def foo
#       1
#     end
define_method :foo, 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T214920Z" creationid="makenowjust" creationdate="20200509T214907Z">
        <seg>end
end

# 以下が正しく生成される:
#
#     def foo
#       1
#     end
define_method :foo, 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

# This generates:
#
#     def foo
#       1
#     end
define_method foo, 1

foo # =&gt; 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T140140Z" creationid="makenowjust" creationdate="20200507T140140Z">
        <seg>end
end

# これで以下が生成されます。
#
#     def foo
#       1
#     end
define_method foo, 1

foo # =&gt; 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

# This generates:
#     module Foo
#       class Bar
#         def initialize(@name : String)
#         end
#
#         def say
#           "hi " + @name
#         end
#       end
#     end
define_class Foo, Bar, say, "hi "

p Foo::Bar.new("John").say # =&gt; "hi John"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T214956Z" creationid="makenowjust" creationdate="20200509T214956Z">
        <seg>end
end

# これで以下が生成される:
#     module Foo
#       class Bar
#         def initialize(@name : String)
#         end
#
#         def say
#           "hi " + @name
#         end
#       end
#     end
define_class Foo, Bar, say, "hi "

p Foo::Bar.new("John").say # =&gt; "hi John"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

# add method without type restrictions
def add(x, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T160607Z" creationid="makenowjust" creationdate="20200429T160607Z">
        <seg>end
end

# 型制約を持たない add メソッド
def add(x, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

3.times do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081814Z" creationid="makenowjust" creationdate="20200518T081814Z">
        <seg>end
end

3.times do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

@[MyMethod]
def my_method</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T112327Z" creationid="makenowjust" creationdate="20200510T112327Z">
        <seg>end
end

@[MyMethod]
def my_method</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

Benchmark.ips do |x|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091254Z" creationid="makenowjust" creationdate="20200506T091254Z">
        <seg>end
end

Benchmark.ips do |x|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

CaesarCipher.encrypt("HELLO") # =&gt; "URYYB"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T130048Z" creationid="makenowjust" creationdate="20200504T130048Z">
        <seg>end
end

CaesarCipher.encrypt("HELLO") # =&gt; "URYYB"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

Color::Red.red?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182811Z" creationid="makenowjust" creationdate="20200505T182811Z">
        <seg>end
end

Color::Red.red?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

Counter.instances # =&gt; 0
Counter.new
Counter.new
Counter.new
Counter.instances # =&gt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T134406Z" creationid="makenowjust" creationdate="20200504T134406Z">
        <seg>end
end

Counter.instances # =&gt; 0
Counter.new
Counter.new
Counter.new
Counter.instances # =&gt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

Curses::Window.new</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141129Z" creationid="makenowjust" creationdate="20200504T141129Z">
        <seg>end
end

Curses::Window.new</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

Employee.new "John", "Acme" # OK
Employee.new "Peter"        # Error: wrong number of arguments for 'Employee:Class#new' (1 for 2)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T103737Z" creationid="makenowjust" creationdate="20200504T103737Z">
        <seg>end
end

Employee.new "John", "Acme" # OK
Employee.new "Peter"        # Error: wrong number of arguments for 'Employee:Class#new' (1 for 2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

Fiber.yield</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081535Z" creationid="makenowjust" creationdate="20200518T081535Z">
        <seg>end
end

Fiber.yield</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

Foo.boo(0, 1)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220117Z" creationid="makenowjust" creationdate="20200509T220117Z">
        <seg>end
end

Foo.boo(0, 1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

Foo.emphasize(10) # =&gt; "***10***"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T214520Z" creationid="makenowjust" creationdate="20200509T214520Z">
        <seg>end
end

Foo.emphasize(10) # =&gt; "***10***"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

Foo.new.bar</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224932Z" creationid="makenowjust" creationdate="20200509T224932Z">
        <seg>end
end

Foo.new.bar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

Foo.new.yield_with_self { emphasize(10) } # =&gt; "***10***"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T214434Z" creationid="makenowjust" creationdate="20200509T214434Z">
        <seg>end
end

Foo.new.yield_with_self { emphasize(10) } # =&gt; "***10***"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

Greeter.greet # =&gt; "Hello"

# In file two.cr
require "./one"

Greeter.greet # undefined constant 'Greeter'</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T113034Z" creationid="makenowjust" creationdate="20200502T113028Z">
        <seg>end
end

Greeter.greet # =&gt; "Hello"

# two.cr:
require "./one"

Greeter.greet # undefined constant 'Greeter'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

Namespace::Bar.new.bar</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T112030Z" creationid="makenowjust" creationdate="20200502T112030Z">
        <seg>end
end

Namespace::Bar.new.bar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

Point.new 1, 2

# 2 x Int32 = 2 x 4 = 8
instance_sizeof(Point) # =&gt; 12</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T015756Z" creationid="makenowjust" creationdate="20200511T015756Z">
        <seg>end
end

Point.new 1, 2

# 2 x Int32 = 2 x 4 = 8
instance_sizeof(Point) # =&gt; 12</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

Ticker.on_tick do |tick|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090950Z" creationid="makenowjust" creationdate="20200512T090950Z">
        <seg>end
end

Ticker.on_tick do |tick|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

X::SomeEnum # =&gt; 1_i32</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083835Z" creationid="makenowjust" creationdate="20200512T083835Z">
        <seg>end
end

X::SomeEnum # =&gt; 1_i32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

X::SomeEnum::Zero # =&gt; 0_i8
X::SomeEnum::Two  # =&gt; 2_i8</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083838Z" creationid="makenowjust" creationdate="20200512T083838Z">
        <seg>end
end

X::SomeEnum::Zero # =&gt; 0_i8
X::SomeEnum::Two  # =&gt; 2_i8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

alias NumericValue = Float32 | Float64 | Int32 | Int64

lib LibYAML
end

struct TagDirective
end

enum Time::DayOfWeek
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T205046Z" creationid="makenowjust" creationdate="20200412T205046Z">
        <seg>end
end

alias NumericValue = Float32 | Float64 | Int32 | Int64

lib LibYAML
end

struct TagDirective
end

enum Time::DayOfWeek
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

class Address</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T141903Z" creationid="makenowjust" creationdate="20200427T141903Z">
        <seg>end
end

class Address</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

class Animal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T111725Z" creationid="makenowjust" creationdate="20200502T111725Z">
        <seg>end
end

class Animal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

class Cat &lt; Animal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T110502Z" creationid="makenowjust" creationdate="20200504T110502Z">
        <seg>end
end

class Cat &lt; Animal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

class Child &lt; Parent</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T112622Z" creationid="makenowjust" creationdate="20200502T112622Z">
        <seg>end
end

class Child &lt; Parent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

class Child &lt; Parent
end

Child.new.lineage # =&gt; "Child &lt; Parent"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224457Z" creationid="makenowjust" creationdate="20200509T224457Z">
        <seg>end
end

class Child &lt; Parent
end

Child.new.lineage # =&gt; "Child &lt; Parent"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

class Child &lt; Parent
end

Parent.numbers # =&gt; []
Child.numbers  # =&gt; []

Parent.numbers &lt;&lt; 1
Parent.numbers # =&gt; [1]
Child.numbers  # =&gt; []</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T134549Z" creationid="makenowjust" creationdate="20200504T134549Z">
        <seg>end
end

class Child &lt; Parent
end

Parent.numbers # =&gt; []
Child.numbers  # =&gt; []

Parent.numbers &lt;&lt; 1
Parent.numbers # =&gt; [1]
Child.numbers  # =&gt; []</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

class Employee &lt; Person</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T103735Z" creationid="makenowjust" creationdate="20200504T103735Z">
        <seg>end
end

class Employee &lt; Person</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

class Employee &lt; Person
end

employee = Employee.new "John"
employee.greet # "Hi, I'm John"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T103703Z" creationid="makenowjust" creationdate="20200504T103703Z">
        <seg>end
end

class Employee &lt; Person
end

employee = Employee.new "John"
employee.greet # "Hi, I'm John"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

class Foo</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215838Z" creationid="makenowjust" creationdate="20200509T215838Z">
        <seg>end
end

class Foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

class Foo(U)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T142958Z" creationid="makenowjust" creationdate="20200504T142958Z">
        <seg>end
end

class Foo(U)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

class Items</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141248Z" creationid="makenowjust" creationdate="20200504T141248Z">
        <seg>end
end

class Items</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

class OtherClass
end

# This call is handled by the top-level `method_missing`
foo # =&gt; In outer scope, got call: foo

obj = SomeClass.new
# This is handled by the one inside SomeClass
obj.bar # =&gt; Inside SomeClass, got call: bar

other = OtherClass.new
# Neither OtherClass or its parents define a `method_missing` macro
other.baz # =&gt; Error: Undefined method 'baz' for OtherClass</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224819Z" creationid="makenowjust" creationdate="20200509T224652Z">
        <seg>end
end

class OtherClass
end

# この呼び出しはトップレベルの `method_missing` によって処理される
foo # =&gt; In outer scope, got call: foo

obj = SomeClass.new
# この呼び出しは SomeClass によって処理される
obj.bar # =&gt; Inside SomeClass, got call: bar

other = OtherClass.new
# 一方、OtherClass には `method_missing` マクロを持たないので、
other.baz # =&gt; Error: Undefined method 'baz' for OtherClass</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

class Parent::Sub</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T112625Z" creationid="makenowjust" creationdate="20200502T112625Z">
        <seg>end
end

class Parent::Sub</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

class Person</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T124738Z" creationid="makenowjust" creationdate="20200427T124738Z">
        <seg>end
end

class Person</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

counter = Counter.new(0)
counter.plus.plus # =&gt; Counter(@count=2)
puts counter      # =&gt; Counter(@count=1)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T074721Z" creationid="makenowjust" creationdate="20210324T074721Z">
        <seg>end
end

counter = Counter.new(0)
counter.plus.plus # =&gt; Counter(@count=2)
puts counter      # =&gt; Counter(@count=1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

counter = Counter.new(0)
counter.plus.plus # =&gt; Counter(@x=2)
puts counter      # =&gt; Counter(@x=1)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T172750Z" creationid="makenowjust" creationdate="20200505T172750Z">
        <seg>end
end

counter = Counter.new(0)
counter.plus.plus # =&gt; Counter(@x=2)
puts counter      # =&gt; Counter(@x=1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

def one</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T191444Z" creationid="makenowjust" creationdate="20200505T191444Z">
        <seg>end
end

def one</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

define_method foo, 1
define_method bar, 2
define_method baz, 3

foo # =&gt; one
bar # =&gt; two
baz # =&gt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215032Z" creationid="makenowjust" creationdate="20200509T215032Z">
        <seg>end
end

define_method foo, 1
define_method bar, 2
define_method baz, 3

foo # =&gt; one
bar # =&gt; two
baz # =&gt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

e = Employee.new
e.greet "everyone" # "Hi, everyone"

e.greet 1 # "Hi, this is a number: 1"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T103751Z" creationid="makenowjust" creationdate="20200504T103751Z">
        <seg>end
end

e = Employee.new
e.greet "everyone" # "Hi, everyone"

e.greet 1 # "Hi, this is a number: 1"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

foo = Foo.new(1)
foo.t # Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T143000Z" creationid="makenowjust" creationdate="20200504T143000Z">
        <seg>end
end

foo = Foo.new(1)
foo.t # Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

generate_method_downcase "HELLO"
hello</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T200729Z" creationid="makenowjust" creationdate="20200413T200729Z">
        <seg>end
end

generate_method_downcase "HELLO"
hello{% endhighlight %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

include SomeModule

SomeType.new # OK, same as SomeModule::SomeType
some_method  # OK, 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141720Z" creationid="makenowjust" creationdate="20200504T141720Z">
        <seg>end
end

include SomeModule

SomeType.new # OK, same as SomeModule::SomeType
some_method  # OK, 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

int_box = MyBox(Int32).new(1)
int_box.value # =&gt; 1 (Int32)

string_box = MyBox(String).new("hello")
string_box.value # =&gt; "hello" (String)

another_box = MyBox(String).new(1) # Error, Int32 doesn't match String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T142651Z" creationid="makenowjust" creationdate="20200504T142651Z">
        <seg>end
end

int_box = MyBox(Int32).new(1)
int_box.value # =&gt; 1 (Int32)

string_box = MyBox(String).new("hello")
string_box.value # =&gt; "hello" (String)

another_box = MyBox(String).new(1) # Error, Int32 doesn't match String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

items = Items.new
items.size # =&gt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141250Z" creationid="makenowjust" creationdate="20200504T141250Z">
        <seg>end
end

items = Items.new
items.size # =&gt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

john = Person.new "John"
another_john = Person.new "John"
peter = Person.new "Peter"

john == another_john # =&gt; true
john == peter        # =&gt; false (names differ)
john == 1            # =&gt; false (because 1 is not a Person)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T160921Z" creationid="makenowjust" creationdate="20200429T160921Z">
        <seg>end
end

john = Person.new "John"
another_john = Person.new "John"
peter = Person.new "Peter"

john == another_john # =&gt; true
john == peter        # =&gt; false (名前が異なるため)
john == 1            # =&gt; false (1 は Person 型ではないため)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

john = Person.new "John"
john.age # =&gt; 0

john.become_older
john.age # =&gt; 1

john.become_older 2
john.age # =&gt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T152439Z" creationid="makenowjust" creationdate="20200429T152439Z">
        <seg>end
end

john = Person.new "John"
john.age # =&gt; 0

john.become_older
john.age # =&gt; 1

john.become_older 2
john.age # =&gt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

john = Person.new "John"
john.age # =&gt; 0

john.become_older
john.age # =&gt; 1

john.become_older 5
john.age # =&gt; 6</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T150152Z" creationid="makenowjust" creationdate="20200429T150152Z">
        <seg>end
end

john = Person.new "John"
john.age # =&gt; 0

john.become_older
john.age # =&gt; 1

john.become_older 5
john.age # =&gt; 6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

john = Person.new "John"
john.age = 32
john.age # =&gt; 32</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T124531Z" creationid="makenowjust" creationdate="20200427T124531Z">
        <seg>end
end

john = Person.new "John"
john.age = 32
john.age # =&gt; 32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

john = Person.new "John"
peter = Person.new "Peter"

Person.compare(john, peter) # OK</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T161326Z" creationid="makenowjust" creationdate="20200429T161326Z">
        <seg>end
end

john = Person.new "John"
peter = Person.new "Peter"

Person.compare(john, peter) # OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

john = Person.new "John"
peter = Person.new "Peter"

john.age # =&gt; 0

john.become_older
john.age # =&gt; 1

peter.age # =&gt; 0</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T122919Z" creationid="makenowjust" creationdate="20200427T122919Z">
        <seg>end
end

john = Person.new "John"
peter = Person.new "Peter"

john.age # =&gt; 0

john.become_older
john.age # =&gt; 1

peter.age # =&gt; 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

john = Person.new "John", Dog.new
peter = Person.new "Peter", Cat.new</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T110506Z" creationid="makenowjust" creationdate="20200504T110506Z">
        <seg>end
end

john = Person.new "John", Dog.new
peter = Person.new "Peter", Cat.new</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

lib LibPerson</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T143004Z" creationid="makenowjust" creationdate="20200427T143004Z">
        <seg>end
end

lib LibPerson</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

members = the_beatles
members = the_beatles.map &amp;.upcase if shout

puts ""
puts "Group members:"
puts "=============="
members.each do |member|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174912Z" creationid="makenowjust" creationdate="20200413T174912Z">
        <seg>end
end

members = the_beatles
members = the_beatles.map &amp;.upcase if shout

puts ""
puts "Group members:"
puts "=============="
members.each do |member|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

members = the_beatles
members = the_beatles.map &amp;.upcase if shout

puts "Strawberry fields forever mode ON" if strawberry

puts ""
puts "Group members:"
puts "=============="
members.each do |member|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180434Z" creationid="makenowjust" creationdate="20200413T180434Z">
        <seg>end
end

members = the_beatles
members = the_beatles.map &amp;.upcase if shout

puts "Strawberry fields forever mode ON" if strawberry

puts ""
puts "Group members:"
puts "=============="
members.each do |member|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

model = Model.new
model.on_save { puts "Saved!" }
model.save # prints "Saved!"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T073758Z" creationid="makenowjust" creationdate="20200506T073758Z">
        <seg>end
end

model = Model.new
model.on_save { puts "Saved!" }
model.save # prints "Saved!"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

nest = [1, ["b", [:c, ['d']]]]
flat = Array(typeof(Array.elem_type(nest))).new
typeof(nest) # =&gt; Array(Int32 | Array(String | Array(Symbol | Array(Char))))
typeof(flat) # =&gt; Array(String | Int32 | Symbol | Char)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T121608Z" creationid="makenowjust" creationdate="20200512T121608Z">
        <seg>end
end

nest = [1, ["b", [:c, ['d']]]]
flat = Array(typeof(Array.elem_type(nest))).new
typeof(nest) # =&gt; Array(Int32 | Array(String | Array(Symbol | Array(Char))))
typeof(flat) # =&gt; Array(String | Int32 | Symbol | Char)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

one_more = Person.new "One more"
one_more.say "hello" # Error: one_more is a Person but current type is the Program

# Example of 2

module Namespace</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T111938Z" creationid="makenowjust" creationdate="20200502T111837Z">
        <seg>end
end

one_more = Person.new "One more"
one_more.say "hello" # one_more は Person だけど現在の型は Program なのでエラー

# 2 の場合の例

module Namespace</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

p = Person.new
p.greet "everyone" # "Hi, everyone"

e = Employee.new
e.greet "everyone" # "Hello, everyone"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T103743Z" creationid="makenowjust" creationdate="20200504T103743Z">
        <seg>end
end

p = Person.new
p.greet "everyone" # "Hi, everyone"

e = Employee.new
e.greet "everyone" # "Hello, everyone"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

paint :red</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T183125Z" creationid="makenowjust" creationdate="20200505T183125Z">
        <seg>end
end

paint :red</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

paint Color::Red</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T183119Z" creationid="makenowjust" creationdate="20200505T183119Z">
        <seg>end
end

paint Color::Red</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

person = Person.new "John"

# Invokes the first definition
person.become_older 20

# Invokes the second definition
person.become_older "12"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T152009Z" creationid="makenowjust" creationdate="20200429T152009Z">
        <seg>end
end

person = Person.new "John"

# 最初の定義が呼び出される
person.become_older 20

# 2番目の定義が呼び出される
person.become_older "12"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

person = Person.new "John"

person.become_older
person.age # =&gt; 1

person.become_older 5
person.age # =&gt; 6

person.become_older "12"
person.age # =&gt; 18

person.become_older do |current_age|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T150513Z" creationid="makenowjust" creationdate="20200429T150513Z">
        <seg>end
end

person = Person.new "John"

person.become_older
person.age # =&gt; 1

person.become_older 5
person.age # =&gt; 6

person.become_older "12"
person.age # =&gt; 18

person.become_older do |current_age|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

person = Person.new "John"
person.become_older
person.age # =&gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T124811Z" creationid="makenowjust" creationdate="20200427T124811Z">
        <seg>end
end

person = Person.new "John"
person.become_older
person.age # =&gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

person = Person.new "John"
person.become_older
person.age # =&gt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T124835Z" creationid="makenowjust" creationdate="20200427T124835Z">
        <seg>end
end

person = Person.new "John"
person.become_older
person.age # =&gt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

person = Person.new "John", 30
person.has_instance_var?("name")     # =&gt; true
person.has_instance_var?("birthday") # =&gt; false</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T223807Z" creationid="makenowjust" creationdate="20200509T223807Z">
        <seg>end
end

person = Person.new "John", 30
person.has_instance_var?("name")     # =&gt; true
person.has_instance_var?("birthday") # =&gt; false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

person = Person.new "John", 30
person.instance_vars_names # =&gt; ["name", "age"]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T223556Z" creationid="makenowjust" creationdate="20200509T223556Z">
        <seg>end
end

person = Person.new "John", 30
person.instance_vars_names # =&gt; ["name", "age"]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

point = Point.new 1, 2

ptr = point.x_ptr
ptr.value = 10

point.x # =&gt; 10</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T015212Z" creationid="makenowjust" creationdate="20200511T015212Z">
        <seg>end
end

point = Point.new 1, 2

ptr = point.x_ptr
ptr.value = 10

point.x # =&gt; 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

puts foo # =&gt; "bar"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095706Z" creationid="makenowjust" creationdate="20200424T095706Z">
        <seg>end
end

puts foo # =&gt; "bar"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

sleep</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081537Z" creationid="makenowjust" creationdate="20200518T081537Z">
        <seg>end
end

sleep</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

sleep 1.second</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081532Z" creationid="makenowjust" creationdate="20200518T081532Z">
        <seg>end
end

sleep 1.second</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

spawn do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081811Z" creationid="makenowjust" creationdate="20200518T081811Z">
        <seg>end
end

spawn do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

struct PointStruct</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091251Z" creationid="makenowjust" creationdate="20200506T091251Z">
        <seg>end
end

struct PointStruct</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

sum = 0
10.times do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081819Z" creationid="makenowjust" creationdate="20200518T081819Z">
        <seg>end
end

sum = 0
10.times do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

unless say_hi_to.empty?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175229Z" creationid="makenowjust" creationdate="20200413T175229Z">
        <seg>end
end

unless say_hi_to.empty?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

v1 = Vector2.new(1, 2)
-v1 # =&gt; Vector2(@x=-1, @y=-2)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T083704Z" creationid="makenowjust" creationdate="20200502T083704Z">
        <seg>end
end

v1 = Vector2.new(1, 2)
-v1 # =&gt; Vector2(@x=-1, @y=-2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

v1 = Vector2.new(1, 2)
v2 = Vector2.new(3, 4)
v1 + v2 # =&gt; Vector2(@x=4, @y=6)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T083930Z" creationid="makenowjust" creationdate="20200502T083930Z">
        <seg>end
end

v1 = Vector2.new(1, 2)
v2 = Vector2.new(3, 4)
v1 + v2 # =&gt; Vector2(@x=4, @y=6)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

wrapper = IntWrapper.new(1)
C.exit(wrapper) # wrapper.to_unsafe is passed to C function which has type Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T082432Z" creationid="makenowjust" creationdate="20200512T082432Z">
        <seg>end
end

wrapper = IntWrapper.new(1)
C.exit(wrapper) # wrapper.to_unsafe is passed to C function which has type Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021205Z" creationid="hirofumiwakasugi" creationdate="20150904T021205Z">
        <seg>end
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end
`````</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144059Z" creationid="hirofumiwakasugi" creationdate="20151010T144059Z">
        <seg>end
end
`````</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end
puts "Lines that mention crystal, ruby or java: #{lines_with_language_reference}"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091017Z" creationid="makenowjust" creationdate="20200506T091017Z">
        <seg>end
end
puts "Lines that mention crystal, ruby or java: #{lines_with_language_reference}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end
puts a # =&gt; 10</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200417T115452Z" creationid="makenowjust" creationdate="20200417T115452Z">
        <seg>end
end
puts a # =&gt; 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end
puts a #=&gt; 10
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052249Z" creationid="hirofumiwakasugi" creationdate="20150905T052249Z">
        <seg>end
end
puts a #=&gt; 10
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
{% end %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040454Z" creationid="hirofumiwakasugi" creationdate="20151001T040454Z">
        <seg>end
{% end %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
{% end %}

foo # =&gt; 0
bar # =&gt; 1
baz # =&gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215339Z" creationid="makenowjust" creationdate="20200509T215339Z">
        <seg>end
{% end %}

foo # =&gt; 0
bar # =&gt; 1
baz # =&gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ensure</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014330Z" creationid="hirofumiwakasugi" creationdate="20150907T014330Z">
        <seg>ensure</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>enum</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083641Z" creationid="makenowjust" creationdate="20200512T083641Z">
        <seg>enum</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>enum Color</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T181728Z" creationid="makenowjust" creationdate="20200505T181728Z">
        <seg>enum Color</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>enum Color : UInt8</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182053Z" creationid="makenowjust" creationdate="20200505T182053Z">
        <seg>enum Color : UInt8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>enum SomeEnum</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052629Z" creationid="hirofumiwakasugi" creationdate="20151007T052629Z">
        <seg>enum SomeEnum</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>enum SomeEnum : Int8</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053244Z" creationid="hirofumiwakasugi" creationdate="20151007T053244Z">
        <seg>enum SomeEnum : Int8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>enum Time::DayOfWeek
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010228Z" creationid="hirofumiwakasugi" creationdate="20151010T010228Z">
        <seg>enum Time::DayOfWeek
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>env                      print Crystal environment information</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080700Z" creationid="makenowjust" creationdate="20200516T080700Z">
        <seg>env                      print Crystal environment information</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>equals</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091259Z" creationid="makenowjust" creationdate="20200502T091259Z">
        <seg>等価性の検査</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>eval                     eval code</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072216Z" creationid="hirofumiwakasugi" creationdate="20150901T072216Z">
        <seg>eval                     eval code</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>eval                     eval code from args or standard input</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140114Z" creationid="hirofumiwakasugi" creationdate="20151009T140114Z">
        <seg>eval                     eval code from args or standard input</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>example "all_my_cli.cr"
```crystal
require "option_parser"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T091551Z" creationid="makenowjust" creationdate="20210324T100604Z">
        <seg> example "all_my_cli.cr"
    ```crystal
    require "option_parser"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>example "class_vs_struct.cr'
```crystal
require "benchmark"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100255Z" creationid="makenowjust" creationdate="20210324T100255Z">
        <seg>example "class_vs_struct.cr'
```crystal
require "benchmark"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>example "hello_goodbye.cr"
```crystal
require "option_parser"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T091543Z" creationid="makenowjust" creationdate="20210324T100559Z">
        <seg> example "hello_goodbye.cr"
    ```crystal
    require "option_parser"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>example "hello_world.cr"
&lt;g1&gt;crystal
puts "Hello World!"
&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100504Z" creationid="makenowjust" creationdate="20210324T100504Z">
        <seg>example "hello_world.cr"
&lt;g1&gt;crystal
puts "Hello World!"
&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>example "help.cr"
```crystal
require "option_parser"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T091433Z" creationid="makenowjust" creationdate="20210324T100517Z">
        <seg> example "help.cr"
    ```crystal
    require "option_parser"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>example "let_it_cli.cr"
&lt;g1&gt;crystal
puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets
puts "The Beatles are singing: 🎵#{user_input.upcase}🎶🎸🥁"
&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100611Z" creationid="makenowjust" creationdate="20210324T100611Z">
        <seg>example "let_it_cli.cr"
&lt;g1&gt;crystal
puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets
puts "The Beatles are singing: 🎵#{user_input.upcase}🎶🎸🥁"
&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>example "let_it_cli.cr"
&lt;g1&gt;crystal
puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets
puts "The Beatles are singing: 🎵#{user_input}🎶🎸🥁"
&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100609Z" creationid="makenowjust" creationdate="20210324T100609Z">
        <seg>example "let_it_cli.cr"
&lt;g1&gt;crystal
puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets
puts "The Beatles are singing: 🎵#{user_input}🎶🎸🥁"
&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>example "let_it_cli.cr"
&lt;g1&gt;crystal
puts "Welcome to The Beatles Sing-Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets
puts "The Beatles are singing: 🎵#{user_input.upcase}🎶🎸🥁"
&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T091646Z" creationid="makenowjust" creationdate="20211107T090946Z">
        <seg> example "let_it_cli.cr"
    &lt;g1&gt;crystal
    puts "Welcome to The Beatles Sing-Along version 1.0!"
    puts "Enter a phrase you want The Beatles to sing"
    print "&gt; "
    user_input = gets
    puts "The Beatles are singing: 🎵#{user_input.upcase}🎶🎸🥁"
    &lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>example "let_it_cli.cr"
&lt;g1&gt;crystal
puts "Welcome to The Beatles Sing-Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets
puts "The Beatles are singing: 🎵#{user_input}🎶🎸🥁"
&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T091608Z" creationid="makenowjust" creationdate="20211107T085517Z">
        <seg> example "let_it_cli.cr"
    &lt;g1&gt;crystal
    puts "Welcome to The Beatles Sing-Along version 1.0!"
    puts "Enter a phrase you want The Beatles to sing"
    print "&gt; "
    user_input = gets
    puts "The Beatles are singing: 🎵#{user_input}🎶🎸🥁"
    &lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>example "let_it_cli.cr"
```crystal
puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100614Z" creationid="makenowjust" creationdate="20210324T100614Z">
        <seg>example "let_it_cli.cr"
```crystal
puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>example "let_it_cli.cr"
```crystal
puts "Welcome to The Beatles Sing-Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T091657Z" creationid="makenowjust" creationdate="20211107T091000Z">
        <seg> example "let_it_cli.cr"
    ```crystal
    puts "Welcome to The Beatles Sing-Along version 1.0!"
    puts "Enter a phrase you want The Beatles to sing"
    print "&gt; "
    user_input = gets</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>example "let_it_cli.cr"
```crystal
require "colorize"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T091710Z" creationid="makenowjust" creationdate="20210324T100625Z">
        <seg> example "let_it_cli.cr"
    ```crystal
    require "colorize"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>example "one.cr"
```crystal
private class Greeter
def self.greet
"Hello"
end
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T073853Z" creationid="makenowjust" creationdate="20210324T073853Z">
        <seg>example "one.cr"
```crystal
private class Greeter
def self.greet
"Hello"
end
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>example "one.cr"
```crystal
private def greet
puts "Hello"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T073848Z" creationid="makenowjust" creationdate="20210324T073848Z">
        <seg>example "one.cr"
```crystal
private def greet
puts "Hello"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>example "spec/spec_helper.cr"
&lt;g2&gt;crystal
require "../src/project"
&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T075556Z" creationid="makenowjust" creationdate="20210324T075556Z">
        <seg>example "spec/spec_helper.cr"
&lt;g2&gt;crystal
require "../src/project"
&lt;/g2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>example "twist_and_shout.cr"
```crystal
require "option_parser"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T091441Z" creationid="makenowjust" creationdate="20210324T100523Z">
        <seg> example "twist_and_shout.cr"
    ```crystal
    require "option_parser"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>example "two.cr"
```crystal
require "./one"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T073851Z" creationid="makenowjust" creationdate="20210324T073851Z">
        <seg>example "two.cr"
```crystal
require "./one"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>example "yellow_cli.cr"
```crystal
require "colorize"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T091704Z" creationid="makenowjust" creationdate="20211107T091016Z">
        <seg> example "yellow_cli.cr"
    ```crystal
    require "colorize"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>exclusive range</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T092044Z" creationid="makenowjust" creationdate="20200502T092044Z">
        <seg>末尾を含まない範囲</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>exit</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172500Z" creationid="makenowjust" creationdate="20200413T172500Z">
        <seg>exit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>exit if user_input.nil?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100616Z" creationid="makenowjust" creationdate="20210324T100616Z">
        <seg>exit if user_input.nil?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>exit(1)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180429Z" creationid="makenowjust" creationdate="20200413T180429Z">
        <seg>exit(1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>exponential &lt;g1&gt;and&lt;/g1&gt; assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100820Z" creationid="makenowjust" creationdate="20200502T100820Z">
        <seg>指数の&lt;g1&gt;複合&lt;/g1&gt;代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>exponentiation</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085456Z" creationid="makenowjust" creationdate="20200502T085456Z">
        <seg>指数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>expression_when_falsey
else</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T074108Z" creationid="makenowjust" creationdate="20210324T074108Z">
        <seg>expression_when_falsey
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>expression_when_falsey
end

# Can also be written as a suffix
close_door unless door_closed?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T074136Z" creationid="makenowjust" creationdate="20210324T074136Z">
        <seg>expression_when_falsey
end

# このように後置しても使える
close_door unless door_closed?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>expression_when_truthy
else</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T074119Z" creationid="makenowjust" creationdate="20210324T074119Z">
        <seg>expression_when_truthy
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>expression_when_truthy
end

# The above is the same as:
if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T074118Z" creationid="makenowjust" creationdate="20210324T074118Z">
        <seg>expression_when_truthy
end

# 上記は以下に同じ:
if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>extend SomeLength
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T141821Z" creationid="hirofumiwakasugi" creationdate="20150911T141821Z">
        <seg>extend SomeLength
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>extend SomeSize
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092316Z" creationid="hirofumiwakasugi" creationdate="20151009T092316Z">
        <seg>extend SomeSize
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>extend SomeSize
end

Items.size # =&gt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141636Z" creationid="makenowjust" creationdate="20200504T141636Z">
        <seg>extend SomeSize
end

Items.size # =&gt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>extend self</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142822Z" creationid="hirofumiwakasugi" creationdate="20150911T142822Z">
        <seg>extend self</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>f = -&gt;(x : Int32) { x + 1 }
X.callback(f)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T085614Z" creationid="makenowjust" creationdate="20200512T085614Z">
        <seg>f = -&gt;(x : Int32) { x + 1 }
X.callback(f)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>false</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T023054Z" creationid="hirofumiwakasugi" creationdate="20150908T023054Z">
        <seg>false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>finalize</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T140028Z" creationid="makenowjust" creationdate="20200504T140028Z">
        <seg>finalize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>floor division</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085911Z" creationid="makenowjust" creationdate="20200502T085716Z">
        <seg>整数に丸められる除法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>floor division &lt;g1&gt;and&lt;/g1&gt; assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100625Z" creationid="makenowjust" creationdate="20200502T100625Z">
        <seg>整数に丸められる除法の&lt;g1&gt;複合&lt;/g1&gt;代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>flower = "Tulip"
# At this point 'flower' is a String

flower = 1
# At this point 'flower' is an Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T180258Z" creationid="makenowjust" creationdate="20200422T180258Z">
        <seg>flower = "Tulip"
# この時点では flower は String 型

flower = 1
# この時点では 'flower' は Int32 型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>flower = 1
# At this point 'flower' is an Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025958Z" creationid="hirofumiwakasugi" creationdate="20151009T025947Z">
        <seg>flower = 1
# ここでは「flower」は Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo          # Prints: Got foo with 0 arguments
bar 'a', 'b' # Prints: Got bar with 2 arguments
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014539Z" creationid="hirofumiwakasugi" creationdate="20151002T014456Z">
        <seg>foo          # 出力: Got foo with 0 arguments
bar 'a', 'b' # 出力: Got bar with 2 arguments
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo #=&gt; 0
bar #=&gt; 1
baz #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040354Z" creationid="hirofumiwakasugi" creationdate="20151001T040354Z">
        <seg>foo #=&gt; 0
bar #=&gt; 1
baz #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo #=&gt; 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T014702Z" creationid="hirofumiwakasugi" creationdate="20151001T014702Z">
        <seg>foo #=&gt; 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo #=&gt; one
bar #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035956Z" creationid="hirofumiwakasugi" creationdate="20151001T035956Z">
        <seg>foo #=&gt; one
bar #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo 1       # OK
foo "hello" # Error
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025550Z" creationid="hirofumiwakasugi" creationdate="20150908T025543Z">
        <seg>foo 1       # OK
foo "hello" # エラー
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo 1     # "instance"
foo Int32 # "class"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011921Z" creationid="hirofumiwakasugi" creationdate="20151009T011921Z">
        <seg>foo 1     # "instance"
foo Int32 # "class"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo 1, 2, 3       # OK, invokes first overload
foo "a", "b", "c" # OK, invokes second overload
foo 1, 2, "hello" # Error
foo()             # Error
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T030023Z" creationid="hirofumiwakasugi" creationdate="20150908T030023Z">
        <seg>foo 1, 2, 3       # OK、最初のオーバーロードを実行
foo "a", "b", "c" # OK, 2つ目のオーバーロードを実行
foo 1, 2, "hello" # エラー
foo()             # エラー
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo = Foo.new(1)
foo.t # Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061140Z" creationid="hirofumiwakasugi" creationdate="20150924T061140Z">
        <seg>foo = Foo.new(1)
foo.t # Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo Int32  # OK
foo String # Error
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025729Z" creationid="hirofumiwakasugi" creationdate="20150908T025729Z">
        <seg>foo Int32  # OK
foo String # エラー
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo Int32  # prints "Got Int32"
foo String # prints "Got String"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025842Z" creationid="hirofumiwakasugi" creationdate="20150908T025821Z">
        <seg>foo Int32  # "Got Int32" を表示
foo String # "Got String" を表示
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo bar do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184351Z" creationid="makenowjust" creationdate="20200505T184351Z">
        <seg>foo bar do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo do |x|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025544Z" creationid="hirofumiwakasugi" creationdate="20150917T025544Z">
        <seg>foo do |x|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo(</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T145233Z" creationid="makenowjust" creationdate="20200430T145233Z">
        <seg>foo(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo(&amp;block)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T030544Z" creationid="hirofumiwakasugi" creationdate="20150917T030544Z">
        <seg>foo(&amp;block)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo(1)       #=&gt; Int32
foo("hello") #=&gt; String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T030350Z" creationid="hirofumiwakasugi" creationdate="20150908T030350Z">
        <seg>foo(1)       #=&gt; Int32
foo("hello") #=&gt; String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo(Int32)  #=&gt; Array(Int32)
foo(String) #=&gt; Array(String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T040536Z" creationid="hirofumiwakasugi" creationdate="20150908T040536Z">
        <seg>foo(Int32)  #=&gt; Array(Int32)
foo(String) #=&gt; Array(String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo([1, 2])   #=&gt; Int32
foo([1, "a"]) #=&gt; (Int32 | String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T040223Z" creationid="hirofumiwakasugi" creationdate="20150908T040223Z">
        <seg>foo([1, 2])   #=&gt; Int32
foo([1, "a"]) #=&gt; (Int32 | String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155852Z" creationid="hirofumiwakasugi" creationdate="20150905T155852Z">
        <seg>foo.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo_forward do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075802Z" creationid="makenowjust" creationdate="20200506T075802Z">
        <seg>foo_forward do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fresh_vars_sample a, b, c</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T021034Z" creationid="hirofumiwakasugi" creationdate="20151002T021034Z">
        <seg>fresh_vars_sample a, b, c</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>from ...</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175922Z" creationid="makenowjust" creationdate="20200413T175922Z">
        <seg>from ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>from .tar.gz</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071325Z" creationid="makenowjust" creationdate="20200518T071325Z">
        <seg>.tar.gz から</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>from sources</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071313Z" creationid="makenowjust" creationdate="20200518T071313Z">
        <seg>ソースコードから</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T030946Z" creationid="makenowjust" creationdate="20200511T030946Z">
        <seg>fun</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun callback(f : Int32 -&gt; Int32)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T085558Z" creationid="makenowjust" creationdate="20200512T085558Z">
        <seg>fun callback(f : Int32 -&gt; Int32)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun callback(f : Int32 -&gt; Int32)
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024226Z" creationid="hirofumiwakasugi" creationdate="20151008T024226Z">
        <seg>fun callback(f : Int32 -&gt; Int32)
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun ceil_f32 = "llvm.ceil.f32"(value : Float32) : Float32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T031852Z" creationid="makenowjust" creationdate="20200511T031852Z">
        <seg>fun ceil_f32 = "llvm.ceil.f32"(value : Float32) : Float32
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun ceil_f32 = "llvm.ceil.f32"(value : Float32) : Float32
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T041702Z" creationid="hirofumiwakasugi" creationdate="20151005T041702Z">
        <seg>fun ceil_f32 = "llvm.ceil.f32"(value : Float32) : Float32
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun compute_default_age : Int32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T143002Z" creationid="makenowjust" creationdate="20200427T143002Z">
        <seg>fun compute_default_age : Int32
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun compute_default_age(age_ptr : Int32*)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T143229Z" creationid="makenowjust" creationdate="20200427T143229Z">
        <seg>fun compute_default_age(age_ptr : Int32*)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun cos(value : Float64) : Float64
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T031013Z" creationid="makenowjust" creationdate="20200511T031013Z">
        <seg>fun cos(value : Float64) : Float64
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun cos(value : Float64) : Float64
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T143754Z" creationid="hirofumiwakasugi" creationdate="20151003T143754Z">
        <seg>fun cos(value : Float64) : Float64
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun execute_callback
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T052143Z" creationid="hirofumiwakasugi" creationdate="20151008T052143Z">
        <seg>fun execute_callback
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun execute_callback
end

LibFoo.store_callback -&gt;{ raise "OH NO!" }
LibFoo.execute_callback</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T091433Z" creationid="makenowjust" creationdate="20200512T091433Z">
        <seg>fun execute_callback
end

LibFoo.store_callback -&gt;{ raise "OH NO!" }
LibFoo.execute_callback</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun execute_callback
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053400Z" creationid="hirofumiwakasugi" creationdate="20151008T053400Z">
        <seg>fun execute_callback
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun exit(status : Int32) : NoReturn
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044605Z" creationid="hirofumiwakasugi" creationdate="20151005T044605Z">
        <seg>fun exit(status : Int32) : NoReturn
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun exit(status : Int32) : NoReturn
end

class IntWrapper</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T082430Z" creationid="makenowjust" creationdate="20200512T082430Z">
        <seg>fun exit(status : Int32) : NoReturn
end

class IntWrapper</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun foo : Int32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120234Z" creationid="makenowjust" creationdate="20200510T120234Z">
        <seg>fun foo : Int32
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun foo : Int32
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T074354Z" creationid="hirofumiwakasugi" creationdate="20150919T074354Z">
        <seg>fun foo : Int32
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun getch : Int32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T040641Z" creationid="hirofumiwakasugi" creationdate="20151005T040641Z">
        <seg>fun getch : Int32
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun getch : Int32
end

C.getch</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T031043Z" creationid="makenowjust" creationdate="20200511T031043Z">
        <seg>fun getch : Int32
end

C.getch</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun init = SDL_Init(flags : UInt32) : Int32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T031820Z" creationid="makenowjust" creationdate="20200511T031820Z">
        <seg>fun init = SDL_Init(flags : UInt32) : Int32
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun init = SDL_Init(flags : UInt32) : Int32
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T041503Z" creationid="hirofumiwakasugi" creationdate="20151005T041503Z">
        <seg>fun init = SDL_Init(flags : UInt32) : Int32
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun memcmp(p1 : Void*, p2 : Void*, size : C::SizeT) : Int32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T085130Z" creationid="makenowjust" creationdate="20200512T085130Z">
        <seg>fun memcmp(p1 : Void*, p2 : Void*, size : C::SizeT) : Int32
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun memcmp(p1 : Void*, p2 : Void*, size : C::SizeT) : Int32
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024054Z" creationid="hirofumiwakasugi" creationdate="20151008T024054Z">
        <seg>fun memcmp(p1 : Void*, p2 : Void*, size : C::SizeT) : Int32
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun my_fun(some_size : LibC::SizeT)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T032508Z" creationid="makenowjust" creationdate="20200511T032508Z">
        <seg>fun my_fun(some_size : LibC::SizeT)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun my_fun(some_size : LibC::SizeT)
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T042605Z" creationid="hirofumiwakasugi" creationdate="20151005T042605Z">
        <seg>fun my_fun(some_size : LibC::SizeT)
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun my_func(s : MyStruct) # OK (gives an error without the Extern annotation)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T095947Z" creationid="makenowjust" creationdate="20210324T095947Z">
        <seg>fun my_func(s : MyStruct) # OK (gives an error without the Extern annotation)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun my_func(s : MyStruct) # OK (gives an error without the Extern attribute)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114713Z" creationid="makenowjust" creationdate="20200510T114713Z">
        <seg>fun my_func(s : MyStruct) # OK (Extern がない場合はエラー)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun on_tick(callback : (Int32, Void* -&gt;), data : Void*)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090124Z" creationid="makenowjust" creationdate="20200512T090124Z">
        <seg>fun on_tick(callback : (Int32, Void* -&gt;), data : Void*)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun printf(format : UInt8*, ...) : Int32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T045122Z" creationid="hirofumiwakasugi" creationdate="20151005T045122Z">
        <seg>fun printf(format : UInt8*, ...) : Int32
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun printf(format : UInt8*, ...) : Int32
end

a = 1
b = 2
C.printf "%d + %d = %d\n", a, b, a + b</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T082506Z" creationid="makenowjust" creationdate="20200512T082506Z">
        <seg>fun printf(format : UInt8*, ...) : Int32
end

a = 1
b = 2
C.printf "%d + %d = %d\n", a, b, a + b</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun some_fun(value : MyInt)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023153Z" creationid="hirofumiwakasugi" creationdate="20151008T023153Z">
        <seg>fun some_fun(value : MyInt)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun some_fun(value : MyInt)
end

X.some_fun 1 # Error: argument 'value' of 'X#some_fun' must be X::MyInt, not Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T084525Z" creationid="makenowjust" creationdate="20200512T084525Z">
        <seg>fun some_fun(value : MyInt)
end

X.some_fun 1 # Error: argument 'value' of 'X#some_fun' must be X::MyInt, not Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun some_fun(value : MyInt)
end

X.some_fun 1 # OK</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T085037Z" creationid="makenowjust" creationdate="20200512T085037Z">
        <seg>fun some_fun(value : MyInt)
end

X.some_fun 1 # OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun some_fun(value : SomeEnum)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083911Z" creationid="makenowjust" creationdate="20200512T083911Z">
        <seg>fun some_fun(value : SomeEnum)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun some_fun(value : SomeEnum)
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053349Z" creationid="hirofumiwakasugi" creationdate="20151007T053349Z">
        <seg>fun some_fun(value : SomeEnum)
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun srand(seed : UInt32)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T040718Z" creationid="hirofumiwakasugi" creationdate="20151005T040718Z">
        <seg>fun srand(seed : UInt32)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun srand(seed : UInt32)
end

C.srand(1_u32)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T031047Z" creationid="makenowjust" creationdate="20200511T031047Z">
        <seg>fun srand(seed : UInt32)
end

C.srand(1_u32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun store_callback(callback : -&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T052142Z" creationid="hirofumiwakasugi" creationdate="20151008T052142Z">
        <seg>fun store_callback(callback : -&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun variadic(value : Int32, ...) : Int32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T040825Z" creationid="hirofumiwakasugi" creationdate="20151005T040825Z">
        <seg>fun variadic(value : Int32, ...) : Int32
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun variadic(value : Int32, ...) : Int32
end

X.variadic(1, 2, 3, 4)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T031443Z" creationid="makenowjust" creationdate="20200511T031443Z">
        <seg>fun variadic(value : Int32, ...) : Int32
end

X.variadic(1, 2, 3, 4)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun waitpid(pid : Int32, status_ptr : Int32*, options : Int32) : Int32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T081846Z" creationid="makenowjust" creationdate="20200512T081846Z">
        <seg>fun waitpid(pid : Int32, status_ptr : Int32*, options : Int32) : Int32
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun waitpid(pid : Int32, status_ptr : Int32*, options : Int32) : Int32
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043346Z" creationid="hirofumiwakasugi" creationdate="20151005T043346Z">
        <seg>fun waitpid(pid : Int32, status_ptr : Int32*, options : Int32) : Int32
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>getter :age</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T150144Z" creationid="makenowjust" creationdate="20200429T150144Z">
        <seg>getter :age</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>getter :currency, :value</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012157Z" creationid="hirofumiwakasugi" creationdate="20151010T012157Z">
        <seg>getter :currency, :value</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>getter name</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T131931Z" creationid="hirofumiwakasugi" creationdate="20150904T131931Z">
        <seg>getter name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>getter name : String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T161323Z" creationid="makenowjust" creationdate="20200429T161323Z">
        <seg>getter name : String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>getter pet</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031542Z" creationid="hirofumiwakasugi" creationdate="20150910T031542Z">
        <seg>getter pet</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>getter x</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091247Z" creationid="makenowjust" creationdate="20200506T091247Z">
        <seg>getter x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>getter x, y</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025209Z" creationid="hirofumiwakasugi" creationdate="20150909T025209Z">
        <seg>getter x, y</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>getter y</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091249Z" creationid="makenowjust" creationdate="20200506T091249Z">
        <seg>getter y</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>github: crystal-lang/crystal-mysql</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100746Z" creationid="makenowjust" creationdate="20210324T100746Z">
        <seg>github: crystal-lang/crystal-mysql</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>got: false</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165203Z" creationid="makenowjust" creationdate="20200419T165203Z">
        <seg>got: false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>gottlike</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084023Z" creationid="makenowjust" creationdate="20200516T084023Z">
        <seg>gottlike</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>greater</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091849Z" creationid="makenowjust" creationdate="20200502T091849Z">
        <seg>より大きい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>greater or equal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091907Z" creationid="makenowjust" creationdate="20200502T091907Z">
        <seg>より大きいか等しい (以上)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>greet # =&gt; "Hello"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T073850Z" creationid="makenowjust" creationdate="20210324T073850Z">
        <seg>greet # =&gt; "Hello"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>greet # undefined local variable or method 'greet'
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T040836Z" creationid="hirofumiwakasugi" creationdate="20150909T040836Z">
        <seg>greet # undefined local variable or method 'greet'
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>greet #=&gt; "Hello"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T040827Z" creationid="hirofumiwakasugi" creationdate="20150909T040827Z">
        <seg>greet #=&gt; "Hello"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>greeting = @custom_greeting || @@default_greeting</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010359Z" creationid="hirofumiwakasugi" creationdate="20151010T010359Z">
        <seg>greeting = @custom_greeting || @@default_greeting</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>h = {"foo" =&gt; "bar"}
h.each do |key, value|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T191908Z" creationid="makenowjust" creationdate="20200505T191908Z">
        <seg>h = {"foo" =&gt; "bar"}
h.each do |key, value|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>handle_match(match)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011937Z" creationid="hirofumiwakasugi" creationdate="20151010T011937Z">
        <seg>handle_match(match)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>hash = {} of Int32 =&gt; String
another_hash = typeof(hash).new # :: Hash(Int32, String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T121518Z" creationid="makenowjust" creationdate="20200512T121518Z">
        <seg>hash = {} of Int32 =&gt; String
another_hash = typeof(hash).new # :: Hash(Int32, String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>head : LinkedListNode*</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T082735Z" creationid="makenowjust" creationdate="20200512T082735Z">
        <seg>head : LinkedListNode*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>headers = HTTP::Headers.new
headers["foo"] = "bar"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180256Z" creationid="makenowjust" creationdate="20200420T180256Z">
        <seg>headers = HTTP::Headers.new
headers["foo"] = "bar"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>hello</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T034039Z" creationid="makenowjust" creationdate="20200420T034039Z">
        <seg>hello</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>hello \n #{world}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T034149Z" creationid="makenowjust" creationdate="20200420T034149Z">
        <seg>hello \n #{world}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>help, --help, -h         show this help</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080703Z" creationid="makenowjust" creationdate="20200516T080703Z">
        <seg>help, --help, -h         show this help</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>hierarchy                show type hierarchy</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072216Z" creationid="hirofumiwakasugi" creationdate="20150901T072216Z">
        <seg>hierarchy                show type hierarchy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>horns</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144055Z" creationid="hirofumiwakasugi" creationdate="20151010T144055Z">
        <seg>horns</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>horns
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212645Z" creationid="makenowjust" creationdate="20200412T212645Z">
        <seg>horns
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>horns
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T143017Z" creationid="hirofumiwakasugi" creationdate="20151010T143017Z">
        <seg>horns
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>http://bjeanes.com/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084020Z" creationid="makenowjust" creationdate="20200516T084020Z">
        <seg>http://bjeanes.com/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>http://blog.mmediasys.com/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084029Z" creationid="makenowjust" creationdate="20200516T084029Z">
        <seg>http://blog.mmediasys.com/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>http://irclog.crystal-lang.org</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T104705Z" creationid="makenowjust" creationdate="20200518T104705Z">
        <seg>http://irclog.crystal-lang.org</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>http://jbbarth.com/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084025Z" creationid="makenowjust" creationdate="20200516T084025Z">
        <seg>http://jbbarth.com/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>http://teamcoding.com/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084027Z" creationid="makenowjust" creationdate="20200516T084027Z">
        <seg>http://teamcoding.com/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>http://www.serdardogruyol.com/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084032Z" creationid="makenowjust" creationdate="20200516T084032Z">
        <seg>http://www.serdardogruyol.com/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>http://www.sfcgeorge.co.uk/about</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084035Z" creationid="makenowjust" creationdate="20200516T084035Z">
        <seg>http://www.sfcgeorge.co.uk/about</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://about.me/nullstyle</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084031Z" creationid="makenowjust" creationdate="20200516T084031Z">
        <seg>https://about.me/nullstyle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://crystal-lang.org</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075452Z" creationid="makenowjust" creationdate="20200516T075452Z">
        <seg>https://ja.crystal-lang.org</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://crystal-lang.org/reference/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T144034Z" creationid="makenowjust" creationdate="20210726T144034Z">
        <seg>https://crystal-lang.org/reference/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://crystal-lang.org/reference/getting_started/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T081418Z" creationid="makenowjust" creationdate="20200516T081418Z">
        <seg>https://ja.crystal-lang.org/reference/getting_started/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://crystal-lang.org/reference/guides/concurrency.html</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221346Z" creationid="makenowjust" creationdate="20200413T221346Z">
        <seg>https://ja.crystal-lang.org/reference/guides/concurrency.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://crystal-lang.org/reference/overview/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210753Z" creationid="makenowjust" creationdate="20200413T210744Z">
        <seg>https://ja.crystal-lang.org/reference/overview/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://crystal-lang.org/reference/syntax_and_semantics/c_bindings/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221531Z" creationid="makenowjust" creationdate="20200413T221531Z">
        <seg>https://ja.crystal-lang.org/reference/syntax_and_semantics/c_bindings/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://crystal-lang.org/reference/syntax_and_semantics/macros.html</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221030Z" creationid="makenowjust" creationdate="20200413T221030Z">
        <seg>https://ja.crystal-lang.org/reference/syntax_and_semantics/macros.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://crystal-lang.org/reference/syntax_and_semantics/types_and_methods.html</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211239Z" creationid="makenowjust" creationdate="20200413T211235Z">
        <seg>https://ja.crystal-lang.org/reference/syntax_and_semantics/types_and_methods.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://developer.arm.com/solutions/infrastructure/works-on-arm</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T075801Z" creationid="makenowjust" creationdate="20211107T075801Z">
        <seg>https://developer.arm.com/solutions/infrastructure/works-on-arm</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://en.wikipedia.org/wiki/Covariance_and_contravariance_%28computer_science%29</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T084639Z" creationid="makenowjust" creationdate="20200518T084639Z">
        <seg>https://en.wikipedia.org/wiki/Covariance_and_contravariance_%28computer_science%29</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://fly.io</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222535Z" creationid="makenowjust" creationdate="20200413T222535Z">
        <seg>https://fly.io</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://fonts.google.com/selection?query=robot&amp;selection.family=Roboto+Mono:500|Roboto:400,500</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084907Z" creationid="makenowjust" creationdate="20200516T084907Z">
        <seg>https://fonts.google.com/selection?query=robot&amp;selection.family=Roboto+Mono:500|Roboto:400,500</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://fonts.googleapis.com/icon?family=Material+Icons|Roboto+Mono</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083836Z" creationid="makenowjust" creationdate="20200516T083836Z">
        <seg>https://fonts.googleapis.com/icon?family=Material+Icons|Roboto+Mono</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://forum.crystal-lang.org</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200606T150048Z" creationid="makenowjust" creationdate="20200606T150048Z">
        <seg>https://forum.crystal-lang.org</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://forum.crystal-lang.org/c/help-support</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T064531Z" creationid="makenowjust" creationdate="20200518T064531Z">
        <seg>https://forum.crystal-lang.org/c/help-support</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/5t111111</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084024Z" creationid="makenowjust" creationdate="20200516T084024Z">
        <seg>https://github.com/5t111111</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/adam12</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084018Z" creationid="makenowjust" creationdate="20200516T084018Z">
        <seg>https://github.com/adam12</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/crystal-lang/crystal-book/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035251Z" creationid="makenowjust" creationdate="20200420T035251Z">
        <seg>https://github.com/crystal-jp/ja.crystal-lang.org/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/crystal-lang/crystal/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222915Z" creationid="makenowjust" creationdate="20200413T222915Z">
        <seg>https://github.com/crystal-lang/crystal/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/crystal-lang/shards</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221945Z" creationid="makenowjust" creationdate="20200413T221945Z">
        <seg>https://github.com/crystal-lang/shards</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/gottlike</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084022Z" creationid="makenowjust" creationdate="20200516T084022Z">
        <seg>https://github.com/gottlike</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/matz</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084037Z" creationid="makenowjust" creationdate="20200516T084037Z">
        <seg>https://github.com/matz</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/sardaukar</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084021Z" creationid="makenowjust" creationdate="20200516T084021Z">
        <seg>https://github.com/sardaukar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/sergey-kucher</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084034Z" creationid="makenowjust" creationdate="20200516T084034Z">
        <seg>https://github.com/sergey-kucher</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://gitter.im/crystal-lang/crystal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T223057Z" creationid="makenowjust" creationdate="20200413T223057Z">
        <seg>https://gitter.im/crystal-lang/crystal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://groups.google.com/forum/#!forum/crystal-lang</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222941Z" creationid="makenowjust" creationdate="20200413T222941Z">
        <seg>https://groups.google.com/forum/#!forum/crystal-lang</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://keybase.io/crystal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T104433Z" creationid="makenowjust" creationdate="20200518T104433Z">
        <seg>https://keybase.io/crystal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://manas.tech/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222531Z" creationid="makenowjust" creationdate="20200413T222531Z">
        <seg>https://manas.tech/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://nikolamotor.com/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222534Z" creationid="makenowjust" creationdate="20200413T222534Z">
        <seg>https://nikolamotor.com/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://opencollective.com</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083427Z" creationid="makenowjust" creationdate="20200516T083427Z">
        <seg>https://opencollective.com</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://opencollective.com/crystal-lang</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210323Z" creationid="makenowjust" creationdate="20200413T210323Z">
        <seg>https://opencollective.com/crystal-lang</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://place.technology/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T144105Z" creationid="makenowjust" creationdate="20210726T144105Z">
        <seg>https://place.technology/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://play.crystal-lang.org/#/cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210504T120632Z" creationid="makenowjust" creationdate="20210504T120632Z">
        <seg>https://play.crystal-lang.org/#/cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://salt.bountysource.com/teams/crystal-lang</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210327Z" creationid="makenowjust" creationdate="20200413T210327Z">
        <seg>https://salt.bountysource.com/teams/crystal-lang</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://twitter.com/CrystalLanguage</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T223106Z" creationid="makenowjust" creationdate="20200413T223106Z">
        <seg>https://twitter.com/CrystalLanguage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://www.84codes.com/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222533Z" creationid="makenowjust" creationdate="20200413T222533Z">
        <seg>https://www.84codes.com/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://www.bountysource.com/settings</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083428Z" creationid="makenowjust" creationdate="20200516T083428Z">
        <seg>https://www.bountysource.com/settings</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://www.bountysource.com/teams/crystal-lang/fundraiser</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083923Z" creationid="makenowjust" creationdate="20200516T083923Z">
        <seg>https://www.bountysource.com/teams/crystal-lang/fundraiser</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211330Z" creationid="makenowjust" creationdate="20200413T211330Z">
        <seg>https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i + 1
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030107Z" creationid="hirofumiwakasugi" creationdate="20150916T030107Z">
        <seg>i + 1
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i + 1
end

# Output
# 10
# 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190828Z" creationid="makenowjust" creationdate="20200505T190828Z">
        <seg>i + 1
end

# Output
# 10
# 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i + 1
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023508Z" creationid="hirofumiwakasugi" creationdate="20150916T023508Z">
        <seg>i + 1
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i + 1
end
value # :: Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190608Z" creationid="makenowjust" creationdate="20200505T190608Z">
        <seg>i + 1
end
value # :: Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i + 1
end
value #:: Int32 | String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025316Z" creationid="hirofumiwakasugi" creationdate="20150916T025316Z">
        <seg>i + 1
end
value #:: Int32 | String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i += 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T032024Z" creationid="hirofumiwakasugi" creationdate="20150916T032024Z">
        <seg>i += 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i += 1
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T192240Z" creationid="makenowjust" creationdate="20200505T192240Z">
        <seg>i += 1
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i += 1
end

Fiber.yield</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081541Z" creationid="makenowjust" creationdate="20200518T081541Z">
        <seg>i += 1
end

Fiber.yield</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i += 1
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T032842Z" creationid="hirofumiwakasugi" creationdate="20150916T032842Z">
        <seg>i += 1
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i = 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T032022Z" creationid="hirofumiwakasugi" creationdate="20150916T032022Z">
        <seg>i = 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i = 0
while i &lt; 10</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081539Z" creationid="makenowjust" creationdate="20200518T081539Z">
        <seg>i = 0
while i &lt; 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i = 0
while i &lt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T192239Z" creationid="makenowjust" creationdate="20200505T192239Z">
        <seg>i = 0
while i &lt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i = 1
puts "Got: #{i}"
i = 2
puts "Got: #{i}"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T192024Z" creationid="makenowjust" creationdate="20200505T192024Z">
        <seg>i = 1
puts "Got: #{i}"
i = 2
puts "Got: #{i}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if !</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085449Z" creationid="makenowjust" creationdate="20200424T085449Z">
        <seg>if !</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if 1 + 2 == 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T143659Z" creationid="makenowjust" creationdate="20200429T143659Z">
        <seg>if 1 + 2 == 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if 1 &gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080545Z" creationid="makenowjust" creationdate="20200424T080545Z">
        <seg>if 1 &gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if @a</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T084535Z" creationid="makenowjust" creationdate="20200518T084535Z">
        <seg>if @a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if @a.is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083258Z" creationid="makenowjust" creationdate="20200424T083258Z">
        <seg>if @a.is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if @a.responds_to?(:abs)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T084051Z" creationid="makenowjust" creationdate="20200424T084051Z">
        <seg>if @a.responds_to?(:abs)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if LANGS.any?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091139Z" creationid="makenowjust" creationdate="20200506T091139Z">
        <seg>if LANGS.any?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if ["crystal", "ruby", "java"].any?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091015Z" creationid="makenowjust" creationdate="20200506T091015Z">
        <seg>if ["crystal", "ruby", "java"].any?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if a</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014259Z" creationid="hirofumiwakasugi" creationdate="20150903T014259Z">
        <seg>if a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if a &amp;&amp; b</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083401Z" creationid="makenowjust" creationdate="20200424T083401Z">
        <seg>if a &amp;&amp; b</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if a = @a</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083403Z" creationid="makenowjust" creationdate="20200424T083403Z">
        <seg>if a = @a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if a = some_expression</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083359Z" creationid="makenowjust" creationdate="20200424T083359Z">
        <seg>if a = some_expression</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if a == 10</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052239Z" creationid="hirofumiwakasugi" creationdate="20150905T052239Z">
        <seg>if a == 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if a == 3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052325Z" creationid="hirofumiwakasugi" creationdate="20150905T052325Z">
        <seg>if a == 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if a.is_a?(Number)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022014Z" creationid="hirofumiwakasugi" creationdate="20150903T022014Z">
        <seg>if a.is_a?(Number)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if a.is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083246Z" creationid="makenowjust" creationdate="20200424T083246Z">
        <seg>if a.is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if a.is_a?(String) &amp;&amp; b.is_a?(Number)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083255Z" creationid="makenowjust" creationdate="20200424T083255Z">
        <seg>if a.is_a?(String) &amp;&amp; b.is_a?(Number)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if a.responds_to?(:abs)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030404Z" creationid="hirofumiwakasugi" creationdate="20150903T030404Z">
        <seg>if a.responds_to?(:abs)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if b.is_a?(Number)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T021711Z" creationid="hirofumiwakasugi" creationdate="20150903T021711Z">
        <seg>if b.is_a?(Number)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if callback = @on_save_callback</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061909Z" creationid="hirofumiwakasugi" creationdate="20150918T061909Z">
        <seg>if callback = @on_save_callback</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if i == 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025315Z" creationid="hirofumiwakasugi" creationdate="20150916T025315Z">
        <seg>if i == 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if i == 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024343Z" creationid="hirofumiwakasugi" creationdate="20150916T024343Z">
        <seg>if i == 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if method # first call to a method that can return Int32 or Nil</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T082248Z" creationid="makenowjust" creationdate="20200424T082248Z">
        <seg>if method # 最初の呼び出しでメソッドは Int32 か Nil を返す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if num % 2 == 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T015356Z" creationid="hirofumiwakasugi" creationdate="20150904T015356Z">
        <seg>if num % 2 == 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T011257Z" creationid="hirofumiwakasugi" creationdate="20150903T011257Z">
        <seg>if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if typ.is_a?(Array)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063208Z" creationid="hirofumiwakasugi" creationdate="20150930T063208Z">
        <seg>if typ.is_a?(Array)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if var</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083354Z" creationid="makenowjust" creationdate="20200424T083354Z">
        <seg>if var</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if var.is_a?(...)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083244Z" creationid="makenowjust" creationdate="20200424T083244Z">
        <seg>if var.is_a?(...)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if var.nil?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085224Z" creationid="makenowjust" creationdate="20200424T085224Z">
        <seg>if var.nil?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if var.responds_to?(...)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083705Z" creationid="makenowjust" creationdate="20200424T083705Z">
        <seg>if var.responds_to?(...)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if {"crystal", "ruby", "java"}.any?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091136Z" creationid="makenowjust" creationdate="20200506T091136Z">
        <seg>if {"crystal", "ruby", "java"}.any?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ifdef linux</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T043752Z" creationid="hirofumiwakasugi" creationdate="20150909T043752Z">
        <seg>ifdef linux</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ifdef x86_64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043754Z" creationid="hirofumiwakasugi" creationdate="20150908T043754Z">
        <seg>ifdef x86_64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>in foo.cr:12: undefined method 'length' for Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043749Z" creationid="hirofumiwakasugi" creationdate="20150905T043749Z">
        <seg>in foo.cr:12: undefined method 'length' for Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>in foo.cr:12: undefined method 'size' for Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025350Z" creationid="hirofumiwakasugi" creationdate="20151009T025350Z">
        <seg>in foo.cr:12: undefined method 'size' for Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>in foo.cr:2: undefined method '+' for Bool</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042923Z" creationid="hirofumiwakasugi" creationdate="20150907T042923Z">
        <seg>in foo.cr:2: undefined method '+' for Bool</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>include A
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141843Z" creationid="makenowjust" creationdate="20200504T141843Z">
        <seg>include A
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>include A
end

class Two</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141842Z" creationid="makenowjust" creationdate="20200504T141842Z">
        <seg>include A
end

class Two</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>include B
end

class Three &lt; Two</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141842Z" creationid="makenowjust" creationdate="20200504T141842Z">
        <seg>include B
end

class Three &lt; Two</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>include Base64

encode64 "hello" # =&gt; "aGVsbG8="</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141742Z" creationid="makenowjust" creationdate="20200504T141742Z">
        <seg>include Base64

encode64 "hello" # =&gt; "aGVsbG8="</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>include ItemsLength</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T133854Z" creationid="hirofumiwakasugi" creationdate="20150911T133854Z">
        <seg>include ItemsLength</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>include ItemsSize</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092236Z" creationid="hirofumiwakasugi" creationdate="20151009T092236Z">
        <seg>include ItemsSize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>include Legendary</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144050Z" creationid="hirofumiwakasugi" creationdate="20151010T144050Z">
        <seg>include Legendary</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>include Moo(U)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061139Z" creationid="hirofumiwakasugi" creationdate="20150924T061139Z">
        <seg>include Moo(U)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>include SomeModule</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142555Z" creationid="hirofumiwakasugi" creationdate="20150911T142555Z">
        <seg>include SomeModule</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>index accessor</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T101332Z" creationid="makenowjust" creationdate="20200502T101332Z">
        <seg>インデックスアクセサ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>index assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T094515Z" creationid="makenowjust" creationdate="20200502T094515Z">
        <seg>インデックス指定の代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>init                     generate a new project</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080655Z" creationid="makenowjust" creationdate="20200516T080655Z">
        <seg>init                     generate a new project</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>init                     generate new crystal project</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072215Z" creationid="hirofumiwakasugi" creationdate="20150901T072215Z">
        <seg>init                     generate new crystal project</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>install</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075503Z" creationid="makenowjust" creationdate="20200516T075503Z">
        <seg>install</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>install/alpine@2x.png</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071414Z" creationid="makenowjust" creationdate="20200518T071414Z">
        <seg>install/alpine@2x.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>install/arch@2x.png</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071349Z" creationid="makenowjust" creationdate="20200518T071349Z">
        <seg>install/arch@2x.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>install/centos@2x.png</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071345Z" creationid="makenowjust" creationdate="20200518T071345Z">
        <seg>install/centos@2x.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>install/debian@2x.png</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071337Z" creationid="makenowjust" creationdate="20200518T071337Z">
        <seg>install/debian@2x.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>install/elementary@2x.png</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071352Z" creationid="makenowjust" creationdate="20200518T071352Z">
        <seg>install/elementary@2x.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>install/fedora@2x.png</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071402Z" creationid="makenowjust" creationdate="20200518T071402Z">
        <seg>install/fedora@2x.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>install/freebsd@2x.png</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071417Z" creationid="makenowjust" creationdate="20200518T071417Z">
        <seg>install/freebsd@2x.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>install/gentoo@2x.png</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071412Z" creationid="makenowjust" creationdate="20200518T071412Z">
        <seg>install/gentoo@2x.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>install/kde@2x.png</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071404Z" creationid="makenowjust" creationdate="20200518T071404Z">
        <seg>install/kde@2x.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>install/kubuntu@2x.png</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071335Z" creationid="makenowjust" creationdate="20200518T071335Z">
        <seg>install/kubuntu@2x.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>install/linuxmint@2x.png</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071410Z" creationid="makenowjust" creationdate="20200518T071410Z">
        <seg>install/linuxmint@2x.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>install/macos@2x.png</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071330Z" creationid="makenowjust" creationdate="20200518T071330Z">
        <seg>install/macos@2x.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>install/manjaro@2x.png</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071406Z" creationid="makenowjust" creationdate="20200518T071406Z">
        <seg>install/manjaro@2x.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>install/opensuse@2x.png</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071347Z" creationid="makenowjust" creationdate="20200518T071347Z">
        <seg>install/opensuse@2x.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>install/redhat@2x.png</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071342Z" creationid="makenowjust" creationdate="20200518T071342Z">
        <seg>install/redhat@2x.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>install/sources@2x.png</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071320Z" creationid="makenowjust" creationdate="20200518T071320Z">
        <seg>install/sources@2x.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>install/targz@2x.png</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071327Z" creationid="makenowjust" creationdate="20200518T071327Z">
        <seg>install/targz@2x.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>install/ubuntu@2x.png</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071334Z" creationid="makenowjust" creationdate="20200518T071334Z">
        <seg>install/ubuntu@2x.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>install/windows@2x.png</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071419Z" creationid="makenowjust" creationdate="20200518T071419Z">
        <seg>install/windows@2x.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>instance</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060138Z" creationid="hirofumiwakasugi" creationdate="20150904T060138Z">
        <seg>instance</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>instance = Person.allocate</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060127Z" creationid="hirofumiwakasugi" creationdate="20150904T060127Z">
        <seg>instance = Person.allocate</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>instance.initialize(name)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060127Z" creationid="hirofumiwakasugi" creationdate="20150904T060127Z">
        <seg>instance.initialize(name)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>instance_sizeof</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T015730Z" creationid="makenowjust" creationdate="20200511T015730Z">
        <seg>instance_sizeof</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>instances in the same namespace (class, struct, module, etc.) as the current type</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T110303Z" creationid="makenowjust" creationdate="20200502T110303Z">
        <seg>現在の型と同じ名前空間 (クラス、構造体、モジュールなど) の型のインスタンス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>instances of the same type as the current type</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T110224Z" creationid="makenowjust" creationdate="20200502T110153Z">
        <seg>現在の型と同じ型のインスタンス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>instantiating 'Person#initialize(Int32)'</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043749Z" creationid="hirofumiwakasugi" creationdate="20150905T043749Z">
        <seg>instantiating 'Person#initialize(Int32)'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>inversion</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090224Z" creationid="makenowjust" creationdate="20200502T090224Z">
        <seg>論理反転</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>invoke(proc) # Error: wrong number of arguments for 'invoke' (1 for 0)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075458Z" creationid="makenowjust" creationdate="20200506T075458Z">
        <seg>invoke(proc) # Error: wrong number of arguments for 'invoke' (1 for 0)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io &lt;&lt; " + "</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192848Z" creationid="makenowjust" creationdate="20200419T192848Z">
        <seg>io &lt;&lt; " + "</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io &lt;&lt; " = "</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192850Z" creationid="makenowjust" creationdate="20200419T192850Z">
        <seg>io &lt;&lt; " = "</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io &lt;&lt; "#{x}, #{y}"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T090900Z" creationid="makenowjust" creationdate="20200506T090900Z">
        <seg>io &lt;&lt; "#{x}, #{y}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io &lt;&lt; "Hello, " &lt;&lt; name
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T090928Z" creationid="makenowjust" creationdate="20200506T090928Z">
        <seg>io &lt;&lt; "Hello, " &lt;&lt; name
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io &lt;&lt; "hello world"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T090956Z" creationid="makenowjust" creationdate="20200506T090956Z">
        <seg>io &lt;&lt; "hello world"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io &lt;&lt; "sum: "</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192846Z" creationid="makenowjust" creationdate="20200419T192846Z">
        <seg>io &lt;&lt; "sum: "</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io &lt;&lt; 123</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T090907Z" creationid="makenowjust" creationdate="20200506T090907Z">
        <seg>io &lt;&lt; 123</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io &lt;&lt; 123.to_s</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T090917Z" creationid="makenowjust" creationdate="20200506T090917Z">
        <seg>io &lt;&lt; 123.to_s</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io &lt;&lt; a</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192847Z" creationid="makenowjust" creationdate="20200419T192847Z">
        <seg>io &lt;&lt; a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io &lt;&lt; a + b
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192851Z" creationid="makenowjust" creationdate="20200419T192851Z">
        <seg>io &lt;&lt; a + b
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io &lt;&lt; b</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192849Z" creationid="makenowjust" creationdate="20200419T192849Z">
        <seg>io &lt;&lt; b</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io &lt;&lt; x &lt;&lt; ", " &lt;&lt; y</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T090858Z" creationid="makenowjust" creationdate="20200506T090858Z">
        <seg>io &lt;&lt; x &lt;&lt; ", " &lt;&lt; y</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io = IO::Memory.new</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091003Z" creationid="makenowjust" creationdate="20200506T091003Z">
        <seg>io = IO::Memory.new</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io = IO::Memory.new

Benchmark.ips do |x|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100248Z" creationid="makenowjust" creationdate="20210324T100248Z">
        <seg>io = IO::Memory.new

Benchmark.ips do |x|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io.clear</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T090909Z" creationid="makenowjust" creationdate="20200506T090909Z">
        <seg>io.clear</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io.to_s</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091004Z" creationid="makenowjust" creationdate="20200506T091004Z">
        <seg>io.to_s</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>is exactly the same as writing this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T031436Z" creationid="hirofumiwakasugi" creationdate="20150916T031436Z">
        <seg>上記は以下のように書くことと完全に同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>is the same as:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025101Z" creationid="hirofumiwakasugi" creationdate="20150909T025101Z">
        <seg>これは以下と同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>is_a?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T112906Z" creationid="makenowjust" creationdate="20200512T112906Z">
        <seg>is_a?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>items = Items.new
items.length #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T133857Z" creationid="hirofumiwakasugi" creationdate="20150911T133857Z">
        <seg>items = Items.new
items.length #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>items = Items.new
items.size #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092303Z" creationid="hirofumiwakasugi" creationdate="20151009T092303Z">
        <seg>items = Items.new
items.size #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>items.length</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T133853Z" creationid="hirofumiwakasugi" creationdate="20150911T133853Z">
        <seg>items.length</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>items.size</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092228Z" creationid="hirofumiwakasugi" creationdate="20151009T092228Z">
        <seg>items.size</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>javascript:void(0)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T081646Z" creationid="makenowjust" creationdate="20200516T081646Z">
        <seg>javascript:void(0)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>jekyll-assets</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075523Z" creationid="makenowjust" creationdate="20200516T075523Z">
        <seg>jekyll-assets</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>jekyll-seo-tag</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075522Z" creationid="makenowjust" creationdate="20200516T075522Z">
        <seg>jekyll-seo-tag</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>jekyll-timeago</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075524Z" creationid="makenowjust" creationdate="20200516T075524Z">
        <seg>jekyll-timeago</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>jhp</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084026Z" creationid="makenowjust" creationdate="20200516T084026Z">
        <seg>jhp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john = Person.new "John"
another_john = Person.new "John"
peter = Person.new "Peter"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T023329Z" creationid="hirofumiwakasugi" creationdate="20150908T023329Z">
        <seg>john = Person.new "John"
another_john = Person.new "John"
peter = Person.new "Peter"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john = Person.new "John"
john.address = "Argentina"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T054211Z" creationid="hirofumiwakasugi" creationdate="20150905T054211Z">
        <seg>john = Person.new "John"
john.address = "Argentina"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john = Person.new "John"
john.age #=&gt; 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T070844Z" creationid="hirofumiwakasugi" creationdate="20150906T070844Z">
        <seg>john = Person.new "John"
john.age #=&gt; 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john = Person.new "John"
john.name #=&gt; "John"
john.name.length #=&gt; 4
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T131933Z" creationid="hirofumiwakasugi" creationdate="20150904T131933Z">
        <seg>john = Person.new "John"
john.name #=&gt; "John"
john.name.length #=&gt; 4
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john = Person.new "John"
john.name #=&gt; "John"
john.name.size #=&gt; 4
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025313Z" creationid="hirofumiwakasugi" creationdate="20151009T025313Z">
        <seg>john = Person.new "John"
john.name #=&gt; "John"
john.name.size #=&gt; 4
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john = Person.new "John"
peter = Person.new "Peter"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122230Z" creationid="hirofumiwakasugi" creationdate="20150904T122230Z">
        <seg>john = Person.new "John"
peter = Person.new "Peter"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john = Person.new "John"
peter = Person.new "Peter"

john.name # =&gt; "John"
john.age  # =&gt; 0

peter.name # =&gt; "Peter"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T120720Z" creationid="makenowjust" creationdate="20200427T120720Z">
        <seg>john = Person.new "John"
peter = Person.new "Peter"

john.name # =&gt; "John"
john.age  # =&gt; 0

peter.name # =&gt; "Peter"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john = Person.new "John", Dog.new
peter = Person.new "Peter", Cat.new
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031544Z" creationid="hirofumiwakasugi" creationdate="20150910T031544Z">
        <seg>john = Person.new "John", Dog.new
peter = Person.new "Peter", Cat.new
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john == another_john #=&gt; true
john == peter #=&gt; false (names differ)
john == 1 #=&gt; false (because 1 is not a Person)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T023557Z" creationid="hirofumiwakasugi" creationdate="20150908T023557Z">
        <seg>john == another_john #=&gt; true
john == peter #=&gt; false (name が異なるため)
john == 1 #=&gt; false (1 は Person ではないため)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john.age #=&gt; 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122231Z" creationid="hirofumiwakasugi" creationdate="20150904T122231Z">
        <seg>john.age #=&gt; 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john.become_older
john.age #=&gt; 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122232Z" creationid="hirofumiwakasugi" creationdate="20150904T122232Z">
        <seg>john.become_older
john.age #=&gt; 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john.become_older 2
john.age #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T112821Z" creationid="hirofumiwakasugi" creationdate="20150906T112821Z">
        <seg>john.become_older 2
john.age #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john.become_older 5
john.age #=&gt; 6
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T070845Z" creationid="hirofumiwakasugi" creationdate="20150906T070845Z">
        <seg>john.become_older 5
john.age #=&gt; 6
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john.become_older by: 5</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T152657Z" creationid="makenowjust" creationdate="20200429T152657Z">
        <seg>john.become_older by: 5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john.name #=&gt; "John"
john.age #=&gt; 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055721Z" creationid="hirofumiwakasugi" creationdate="20150904T055721Z">
        <seg>john.name #=&gt; "John"
john.age #=&gt; 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john.name.length</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043750Z" creationid="hirofumiwakasugi" creationdate="20150905T043750Z">
        <seg>john.name.length</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john.name.size</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025352Z" creationid="hirofumiwakasugi" creationdate="20151009T025352Z">
        <seg>john.name.size</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john.pet.talk # =&gt; "Woof!"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T112707Z" creationid="makenowjust" creationdate="20200504T112707Z">
        <seg>john.pet.talk # =&gt; "Woof!"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john.pet.talk # Error: undefined method 'talk' for Animal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T112704Z" creationid="makenowjust" creationdate="20200504T112704Z">
        <seg>john.pet.talk # Error: undefined method 'talk' for Animal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>key   # =&gt; "foo"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T191909Z" creationid="makenowjust" creationdate="20200505T191909Z">
        <seg>key   # =&gt; "foo"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>kramdown</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075514Z" creationid="makenowjust" creationdate="20200516T075514Z">
        <seg>kramdown</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>layout: default
permalink: /install/
---</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T105524Z" creationid="makenowjust" creationdate="20200518T105524Z">
        <seg>layout: default
permalink: /install/
---
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>layout: default permalink: /install/ ---</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T105314Z" creationid="makenowjust" creationdate="20200518T064508Z">
        <seg>layout: default
permalink: /install/
---
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>left shift &lt;g1&gt;and&lt;/g1&gt; assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T101036Z" creationid="makenowjust" creationdate="20200502T100829Z">
        <seg>左シフト&lt;g1&gt;複合&lt;/g1&gt;代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>less</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091829Z" creationid="makenowjust" creationdate="20200502T091829Z">
        <seg>より小さい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>less or equal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091856Z" creationid="makenowjust" creationdate="20200502T091840Z">
        <seg>より小さいか等しい (以下)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>less than 16</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T091616Z" creationid="makenowjust" creationdate="20210130T091616Z">
        <seg>16以下</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>lib</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T030328Z" creationid="makenowjust" creationdate="20200511T030328Z">
        <seg>lib</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>lib C</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T023243Z" creationid="makenowjust" creationdate="20200511T023243Z">
        <seg>lib C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>lib LLVMIntrinsics</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T031851Z" creationid="makenowjust" creationdate="20200511T031851Z">
        <seg>lib LLVMIntrinsics</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>lib LibFoo</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T120232Z" creationid="makenowjust" creationdate="20200510T120232Z">
        <seg>lib LibFoo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>lib LibSDL</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T031820Z" creationid="makenowjust" creationdate="20200511T031820Z">
        <seg>lib LibSDL</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>lib LibTicker</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090123Z" creationid="makenowjust" creationdate="20200512T090123Z">
        <seg>lib LibTicker</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>lib LibYAML
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010227Z" creationid="hirofumiwakasugi" creationdate="20151010T010227Z">
        <seg>lib LibYAML
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>lib MyLib</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T032631Z" creationid="makenowjust" creationdate="20200511T032631Z">
        <seg>lib MyLib</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>lib U</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083323Z" creationid="makenowjust" creationdate="20200512T083323Z">
        <seg>lib U</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>lib X</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T031439Z" creationid="makenowjust" creationdate="20200511T031439Z">
        <seg>lib X</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>lines_with_language_reference += 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091013Z" creationid="makenowjust" creationdate="20200506T091013Z">
        <seg>lines_with_language_reference += 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>lines_with_language_reference = 0
while line = gets</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091010Z" creationid="makenowjust" creationdate="20200506T091010Z">
        <seg>lines_with_language_reference = 0
while line = gets</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>local += 1  # same as: local = local + 1

# The above is valid with these operators:
# +, -, *, /, %, |, &amp;, ^, **, &lt;&lt;, &gt;&gt;

local ||= 1 # same as: local || (local = 1)
local &amp;&amp;= 1 # same as: local &amp;&amp; (local = 1)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174406Z" creationid="makenowjust" creationdate="20200422T174406Z">
        <seg>local += 1  # local = local + 1 と同じ

# 上記は以下の演算子でも有効
# +, -, *, /, %, |, &amp;, ^, **, &lt;&lt;, &gt;&gt;

local ||= 1 # local || (local = 1) と同じ
local &amp;&amp;= 1 # local &amp;&amp; (local = 1) と同じ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>local ||= 1 # same as: local || (local = 1)
local &amp;&amp;= 1 # same as: local &amp;&amp; (local = 1)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054504Z" creationid="hirofumiwakasugi" creationdate="20150902T054504Z">
        <seg>local ||= 1 # local || (local = 1) と同じ
local &amp;&amp;= 1 # local &amp;&amp; (local = 1) と同じ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>logical and &lt;g1&gt;and&lt;/g1&gt; assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T101122Z" creationid="makenowjust" creationdate="20200502T101113Z">
        <seg>論理 AND &lt;g1&gt;複合&lt;/g1&gt;代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>logical or &lt;g1&gt;and&lt;/g1&gt;  assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T101114Z" creationid="makenowjust" creationdate="20200502T101104Z">
        <seg>論理 OR &lt;g1&gt;複合&lt;/g1&gt;代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>loop do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095209Z" creationid="makenowjust" creationdate="20200424T095209Z">
        <seg>loop do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macOS</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071329Z" creationid="makenowjust" creationdate="20200518T071329Z">
        <seg>macOS</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro a</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221153Z" creationid="makenowjust" creationdate="20200509T221153Z">
        <seg>macro a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro add_describe_methods</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215833Z" creationid="makenowjust" creationdate="20200509T215833Z">
        <seg>macro add_describe_methods</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro compile_time_date</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T200748Z" creationid="makenowjust" creationdate="20200413T200704Z">
        <seg>{% highlight crystal %}macro compile_time_date</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro def has_instance_var?(name) : Bool</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030759Z" creationid="hirofumiwakasugi" creationdate="20151009T030759Z">
        <seg>macro def has_instance_var?(name) : Bool</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro def instance_vars_names : Array(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T012112Z" creationid="hirofumiwakasugi" creationdate="20151002T012112Z">
        <seg>macro def instance_vars_names : Array(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro define_class(module_name, class_name, method, content)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T214943Z" creationid="makenowjust" creationdate="20200509T214943Z">
        <seg>macro define_class(module_name, class_name, method, content)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro define_constants(count)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215207Z" creationid="makenowjust" creationdate="20200509T215207Z">
        <seg>macro define_constants(count)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro define_dummy_methods(*names)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215350Z" creationid="makenowjust" creationdate="20200509T215350Z">
        <seg>macro define_dummy_methods(*names)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro define_dummy_methods(hash)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215328Z" creationid="makenowjust" creationdate="20200509T215328Z">
        <seg>macro define_dummy_methods(hash)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro define_dummy_methods(names)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215243Z" creationid="makenowjust" creationdate="20200509T215243Z">
        <seg>macro define_dummy_methods(names)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro define_macros(*names)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220315Z" creationid="makenowjust" creationdate="20200509T220315Z">
        <seg>macro define_macros(*names)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro define_method(name, content)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T140128Z" creationid="makenowjust" creationdate="20200507T140128Z">
        <seg>macro define_method(name, content)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro dont_update_x</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T225919Z" creationid="makenowjust" creationdate="20200509T225919Z">
        <seg>macro dont_update_x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro emphasize(value)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T020422Z" creationid="hirofumiwakasugi" creationdate="20151001T020422Z">
        <seg>macro emphasize(value)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro finished</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224927Z" creationid="makenowjust" creationdate="20200509T224927Z">
        <seg>macro finished</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro fresh_vars_sample(*names)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T230053Z" creationid="makenowjust" creationdate="20200509T230053Z">
        <seg>macro fresh_vars_sample(*names)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro generate_method_downcase(name)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T200743Z" creationid="makenowjust" creationdate="20200413T200743Z">
        <seg>{% highlight crystal %}macro generate_method_downcase(name)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro generate_methods(names)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T200905Z" creationid="makenowjust" creationdate="20200413T200905Z">
        <seg>{% highlight crystal %}macro generate_methods(names)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro getter(name)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T201150Z" creationid="makenowjust" creationdate="20200413T201043Z">
        <seg>{% highlight crystal %}macro getter(name)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro greeting_for_{{name.id}}(greeting)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220317Z" creationid="makenowjust" creationdate="20200509T220317Z">
        <seg>macro greeting_for_{{name.id}}(greeting)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro inherited</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014443Z" creationid="hirofumiwakasugi" creationdate="20151002T014443Z">
        <seg>macro inherited</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro method_added(method)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224513Z" creationid="makenowjust" creationdate="20200509T224513Z">
        <seg>macro method_added(method)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro method_missing(call)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224505Z" creationid="makenowjust" creationdate="20200509T224505Z">
        <seg>macro method_missing(call)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro print_methods</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224923Z" creationid="makenowjust" creationdate="20200509T224923Z">
        <seg>macro print_methods</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro println(*values)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215512Z" creationid="makenowjust" creationdate="20200509T215512Z">
        <seg>macro println(*values)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro update_x</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T225645Z" creationid="makenowjust" creationdate="20200509T225645Z">
        <seg>macro update_x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>mailto:crystal@manas.tech</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083704Z" creationid="makenowjust" creationdate="20200516T083704Z">
        <seg>mailto:crystal@manas.tech</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>many do |x, y, z|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022217Z" creationid="hirofumiwakasugi" creationdate="20150916T022217Z">
        <seg>many do |x, y, z|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>many do |x, y|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022444Z" creationid="hirofumiwakasugi" creationdate="20150916T022444Z">
        <seg>many do |x, y|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>marcpmichel</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084046Z" creationid="makenowjust" creationdate="20200516T084046Z">
        <seg>marcpmichel</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>max_age = db.scalar "select max(age) from contacts"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100814Z" creationid="makenowjust" creationdate="20210324T100814Z">
        <seg>max_age = db.scalar "select max(age) from contacts"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>method  # second call can still return Int32 or Nil
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T021404Z" creationid="hirofumiwakasugi" creationdate="20150903T021326Z">
        <seg>method  # しかし、2回目の呼び出しは、また Int32 か Nil のどちらかを返す
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>method # second call can still return Int32 or Nil
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T082325Z" creationid="makenowjust" creationdate="20200424T082325Z">
        <seg>method # 2度目の呼び出しでも Int32 か Nil を返す
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>method &amp;.+(2)
method(&amp;.[index])</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185800Z" creationid="makenowjust" creationdate="20200505T185800Z">
        <seg>method &amp;.+(2)
method(&amp;.[index])</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>method &amp;.some_method</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185116Z" creationid="makenowjust" creationdate="20200505T185116Z">
        <seg>method &amp;.some_method</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>method do |argument|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185104Z" creationid="makenowjust" creationdate="20200505T185104Z">
        <seg>method do |argument|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>method do |param|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094637Z" creationid="makenowjust" creationdate="20210324T094637Z">
        <seg>method do |param|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>method { |argument| argument.some_method }</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185107Z" creationid="makenowjust" creationdate="20200505T185107Z">
        <seg>method { |argument| argument.some_method }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>method { |param| param.some_method }</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094643Z" creationid="makenowjust" creationdate="20210324T094643Z">
        <seg>method { |param| param.some_method }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>method(&amp;.some_method)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185123Z" creationid="makenowjust" creationdate="20200505T185123Z">
        <seg>method(&amp;.some_method)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>minutes_west : Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045657Z" creationid="hirofumiwakasugi" creationdate="20151007T045657Z">
        <seg>minutes_west : Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>minutes_west, dst_time : Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045757Z" creationid="hirofumiwakasugi" creationdate="20151007T045757Z">
        <seg>minutes_west, dst_time : Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>model = Model.new
model.on_save { puts "Saved!" }
model.save # prints "Saved!"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061923Z" creationid="hirofumiwakasugi" creationdate="20150918T061923Z">
        <seg>model = Model.new
model.on_save { puts "Saved!" }
model.save # "Saved!" と出力
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module A; end

module B; end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141833Z" creationid="makenowjust" creationdate="20200504T141833Z">
        <seg>module A; end

module B; end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module Base64</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141736Z" creationid="makenowjust" creationdate="20200504T141736Z">
        <seg>module Base64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module CaesarCipher</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T130046Z" creationid="makenowjust" creationdate="20200504T130046Z">
        <seg>module CaesarCipher</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module Curses</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141122Z" creationid="makenowjust" creationdate="20200504T141122Z">
        <seg>module Curses</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module Earth</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055323Z" creationid="hirofumiwakasugi" creationdate="20150913T055323Z">
        <seg>module Earth</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module Foo</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220113Z" creationid="makenowjust" creationdate="20200509T220113Z">
        <seg>module Foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module HTTP</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010225Z" creationid="hirofumiwakasugi" creationdate="20151010T010225Z">
        <seg>module HTTP</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module ItemsSize</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141246Z" creationid="makenowjust" creationdate="20200504T141246Z">
        <seg>module ItemsSize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module Json</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T081516Z" creationid="makenowjust" creationdate="20200506T081516Z">
        <seg>module Json</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module Money</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T205212Z" creationid="makenowjust" creationdate="20200412T205212Z">
        <seg>module Money</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module Moo
end

Moo.new # undefined method 'new' for Moo:Module</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141747Z" creationid="makenowjust" creationdate="20200504T141747Z">
        <seg>module Moo
end

Moo.new # undefined method 'new' for Moo:Module</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module Moo(T)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T142957Z" creationid="makenowjust" creationdate="20200504T142957Z">
        <seg>module Moo(T)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module Scorecard</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T205020Z" creationid="makenowjust" creationdate="20200412T205020Z">
        <seg>module Scorecard</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module SomeModule</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141718Z" creationid="makenowjust" creationdate="20200504T141718Z">
        <seg>module SomeModule</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module SomeSize</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141633Z" creationid="makenowjust" creationdate="20200504T141633Z">
        <seg>module SomeSize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module Ticker</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090324Z" creationid="makenowjust" creationdate="20200512T090324Z">
        <seg>module Ticker</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module {{module_name}}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T214944Z" creationid="makenowjust" creationdate="20200509T214944Z">
        <seg>module {{module_name}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>modulo &lt;g1&gt;and&lt;/g1&gt; assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100637Z" creationid="makenowjust" creationdate="20200502T100637Z">
        <seg>余りの&lt;g1&gt;複合&lt;/g1&gt;代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>modulus</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085936Z" creationid="makenowjust" creationdate="20200502T085936Z">
        <seg>余り</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>multiplication</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085525Z" creationid="makenowjust" creationdate="20200502T085525Z">
        <seg>乗法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>multiplication &lt;g1&gt;and&lt;/g1&gt; assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100503Z" creationid="makenowjust" creationdate="20200502T100503Z">
        <seg>乗法&lt;g1&gt;複合&lt;/g1&gt;代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>my_hash = MyHash(typeof("foo", "bar"), typeof(1, "baz")).new
my_hash["foo"] = 1
my_hash["bar"] = "baz"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180558Z" creationid="makenowjust" creationdate="20200420T180558Z">
        <seg>my_hash = MyHash(typeof("foo", "bar"), typeof(1, "baz")).new
my_hash["foo"] = 1
my_hash["bar"] = "baz"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>mysql:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100746Z" creationid="makenowjust" creationdate="20210324T100746Z">
        <seg>mysql:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>name</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T223805Z" creationid="makenowjust" creationdate="20200509T223805Z">
        <seg>name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>name = "Crystal"
age = 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T180227Z" creationid="makenowjust" creationdate="20200422T180227Z">
        <seg>name = "Crystal"
age = 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>name = "world"
%q(hello \n #{name}) # =&gt; "hello \\n \#{name}"
%Q(hello \n #{name}) # =&gt; "hello \n world"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T193621Z" creationid="makenowjust" creationdate="20200419T193621Z">
        <seg>name = "world"
%q(hello \n #{name}) # =&gt; "hello \\n \#{name}"
%Q(hello \n #{name}) # =&gt; "hello \n world"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>name = 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T141430Z" creationid="makenowjust" creationdate="20200427T141430Z">
        <seg>name = 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>name = rs.read(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100804Z" creationid="makenowjust" creationdate="20210324T100804Z">
        <seg>name = rs.read(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>name, age = "Crystal", 1

# The above is the same as this:
temp1 = "Crystal"
temp2 = 1
name = temp1
age = temp2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175403Z" creationid="makenowjust" creationdate="20200422T175403Z">
        <seg>name, age = "Crystal", 1

# 上記は以下と同じ
temp1 = "Crystal"
temp2 = 1
name = temp1
age = temp2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>name, age = db.query_one "select name, age from contacts order by age desc limit 1", as: {String, Int32}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100811Z" creationid="makenowjust" creationdate="20210324T100811Z">
        <seg>name, age = db.query_one "select name, age from contacts order by age desc limit 1", as: {String, Int32}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>name, age = rs.read(String, Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100808Z" creationid="makenowjust" creationdate="20210324T100808Z">
        <seg>name, age = rs.read(String, Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>name, age, source = "Crystal, 123, GitHub".split(", ")

# The above is the same as this:
temp = "Crystal, 123, GitHub".split(", ")
name = temp[0]
age = temp[1]
source = temp[2]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175556Z" creationid="makenowjust" creationdate="20200422T175556Z">
        <seg>name, age, source = "Crystal, 123, GitHub".split(", ")

# 上記は以下に同じ
temp = "Crystal, 123, GitHub".split(", ")
name = temp[0]
age = temp[1]
source = temp[2]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>name: palindrome-example</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T162440Z" creationid="makenowjust" creationdate="20200527T162440Z">
        <seg>name: palindrome-example</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>negative</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085302Z" creationid="makenowjust" creationdate="20200502T085302Z">
        <seg>負の数にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nest = [1, ["b", [:c, ['d']]]]
flat = Array(typeof(Array.elem_type(nest))).new
typeof(nest) #=&gt; Array(Int32 | Array(String | Array(Symbol | Array(Char))))
typeof(flat) #=&gt; Array(String | Int32 | Symbol | Char)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063211Z" creationid="hirofumiwakasugi" creationdate="20150930T063211Z">
        <seg>nest = [1, ["b", [:c, ['d']]]]
flat = Array(typeof(Array.elem_type(nest))).new
typeof(nest) #=&gt; Array(Int32 | Array(String | Array(Symbol | Array(Char))))
typeof(flat) #=&gt; Array(String | Int32 | Symbol | Char)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>new("unknown")</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T141906Z" creationid="makenowjust" creationdate="20200427T141906Z">
        <seg>new("unknown")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>new, initialize and allocate</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T102422Z" creationid="makenowjust" creationdate="20200427T102422Z">
        <seg>new/initialize/allocate</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>next</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052326Z" creationid="hirofumiwakasugi" creationdate="20150905T052326Z">
        <seg>next</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>next "hello"
end

# The above prints "hello"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T100428Z" creationid="makenowjust" creationdate="20200424T100403Z">
        <seg>next "hello"
end

# 上記を実行すると "hello" と表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>next 10</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030107Z" creationid="hirofumiwakasugi" creationdate="20150916T030107Z">
        <seg>next 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nil</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000907Z" creationid="makenowjust" creationdate="20200414T000907Z">
        <seg>nil</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nil
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013600Z" creationid="hirofumiwakasugi" creationdate="20150903T013600Z">
        <seg>nil
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nil
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013522Z" creationid="hirofumiwakasugi" creationdate="20150903T013522Z">
        <seg>nil
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nil
end

# Another example:
if 1 &gt; 2
else</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080609Z" creationid="makenowjust" creationdate="20200424T080604Z">
        <seg>nil
end

# 他の例
if 1 &gt; 2
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nil : 3
# a is Int32 or Nil

if a</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083356Z" creationid="makenowjust" creationdate="20200424T083356Z">
        <seg>nil : 3
# a is Int32 or Nil

if a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nil : 3
if !a</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085746Z" creationid="makenowjust" creationdate="20200424T085746Z">
        <seg>nil : 3
if !a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nil : 3
if a.nil?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085227Z" creationid="makenowjust" creationdate="20200424T085227Z">
        <seg>nil : 3
if a.nil?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nil?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T090821Z" creationid="makenowjust" creationdate="20200518T090821Z">
        <seg>nil?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nilable index accessor</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T101345Z" creationid="makenowjust" creationdate="20200502T101340Z">
        <seg>nil を受け入れるインデックスアクセサ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>no</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090225Z" creationid="makenowjust" creationdate="20200502T090225Z">
        <seg>no</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>no newlines" # same as "hello world, no newlines"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194806Z" creationid="makenowjust" creationdate="20200419T194806Z">
        <seg>no newlines" # same as "hello world, no newlines"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>no newlines" # same as "hello world, no newlines"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104125Z" creationid="hirofumiwakasugi" creationdate="20150901T104125Z">
        <seg>no newlines" # "hello world, no newlines" と同じ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>no pattern match</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091331Z" creationid="makenowjust" creationdate="20200502T091331Z">
        <seg>パターンマッチしないことの検査</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>node : Node*</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045919Z" creationid="hirofumiwakasugi" creationdate="20151007T045919Z">
        <seg>node : Node*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>not equals</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091315Z" creationid="makenowjust" creationdate="20200502T091315Z">
        <seg>非等価性の検査</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>note
&lt;g1&gt;TypeNode.instance_vars&lt;/g1&gt; currently only works in the context of an instance/class method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T071316Z" creationid="makenowjust" creationdate="20201213T071316Z">
        <seg> note
     &lt;g1&gt;TypeNode.instance_vars&lt;/g1&gt; は今のところ、インスタンス/クラスメソッドのコンテキストでのみ動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>note
Be sure to replace all instances of &lt;g1&gt;[your-github-name]&lt;/g1&gt; in the Crystal-generated README template with your GitHub/GitLab username.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100134Z" creationid="makenowjust" creationdate="20210324T100134Z">
        <seg>note
Crystal の生成した README のテンプレート中の &lt;g1&gt;[your-github-name]&lt;/g1&gt; という部分を実際の GitHub もしくはl GitLab のユーザ名で置換するのを忘れないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>note
Building fully statical linked executables is currently only supported on Alpine Linux.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T063824Z" creationid="makenowjust" creationdate="20201213T055933Z">
        <seg> note
    静的リンクした実行可能ファイルのビルドは現在Alpine Linux上でのみサポートされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>note
If multiple annotations of the same type are applied, the &lt;g1&gt;.annotation&lt;/g1&gt; method will return the &lt;g2&gt;last&lt;/g2&gt; one.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T071253Z" creationid="makenowjust" creationdate="20201213T071253Z">
        <seg> note
    もし複数の同じ型のアノテーションが適用されていた場合、 &lt;g1&gt;.annotation&lt;/g1&gt; メソッドは&lt;g2&gt;最後&lt;/g2&gt;のものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>note
Inheriting documentation only works on &lt;g1&gt;instance&lt;/g1&gt;, non-constructor methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T072352Z" creationid="makenowjust" creationdate="20201213T072348Z">
        <seg> note
    ドキュメントの継承はコンストラクタメソッドではなく、 &lt;g1&gt;インスタンスメソッド&lt;/g1&gt; でのみ機能します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>note
Range literals are often wrapped in parentheses, for example if it is meant to be used as the receiver of a call.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T064514Z" creationid="makenowjust" creationdate="20201213T064514Z">
        <seg> note
    範囲リテラルをレシーバにしてメソッド呼び出しを続けるような場合、範囲リテラルを括弧で囲う必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>note
The C &lt;g1&gt;char&lt;/g1&gt; type is &lt;g2&gt;UInt8&lt;/g2&gt; in Crystal, so a &lt;g3&gt;char*&lt;/g3&gt; or a &lt;g4&gt;const char*&lt;/g4&gt; is &lt;g5&gt;UInt8*&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T071511Z" creationid="makenowjust" creationdate="20201213T071511Z">
        <seg> note
    C の &lt;g1&gt;char&lt;/g1&gt; 型は Crystal では &lt;g2&gt;UInt8&lt;/g2&gt; です。なので、&lt;g3&gt;char*&lt;/g3&gt; や &lt;g4&gt;const char*&lt;/g4&gt; は &lt;g5&gt;UInt8*&lt;/g5&gt; になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>note
The main routine is simply the program itself.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T061826Z" creationid="makenowjust" creationdate="20201213T061636Z">
        <seg>note
    メインの処理は単純にプログラム自身となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>note
When running interactively, stdin can usually be closed by typing the end of transmission character (&lt;g1&gt;Ctrl+D&lt;/g1&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T063838Z" creationid="makenowjust" creationdate="20201213T060000Z">
        <seg> note
    対話的に実行したい場合、一般的には&lt;g1&gt;Ctrl+D&lt;/g1&gt;を入力することで標準入力を閉じることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>note
You can't use &lt;g1&gt;as&lt;/g1&gt; to convert a type to an unrelated type: &lt;g2&gt;as&lt;/g2&gt; is not like a &lt;g3&gt;cast&lt;/g3&gt; in other languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20201213T070935Z" creationid="makenowjust" creationdate="20201213T070935Z">
        <seg> note
    &lt;g1&gt;as&lt;/g1&gt; を使っても、関連のない型に変換することはできません。その点では他の言語の &lt;g3&gt;cast&lt;/g3&gt; とは異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>number = arg[0]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T191538Z" creationid="makenowjust" creationdate="20200505T191538Z">
        <seg>number = arg[0]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>numbers = [1, 10, 3, 4, 5, 8]
numbers.select(6..) # =&gt; [10, 8]
numbers.select(..6) # =&gt; [1, 3, 4, 5]

numbers[2..] = [3, 4, 5, 8]
numbers[..2] = [1, 10, 3]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T035742Z" creationid="makenowjust" creationdate="20200421T035742Z">
        <seg>numbers = [1, 10, 3, 4, 5, 8]
numbers.select(6..) # =&gt; [10, 8]
numbers.select(..6) # =&gt; [1, 3, 4, 5]

numbers[2..] = [3, 4, 5, 8]
numbers[..2] = [1, 10, 3]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>object.array &lt;&lt; "bar"
end

klass = Klass.new
puts modify(klass) # =&gt; ["new", "bar"]
puts klass.array   # =&gt; ["new", "bar"]

strukt = Strukt.new
puts modify(strukt) # =&gt; ["new", "bar"]
puts strukt.array   # =&gt; ["str", "foo"]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T173240Z" creationid="makenowjust" creationdate="20200505T173240Z">
        <seg>object.array &lt;&lt; "bar"
end

klass = Klass.new
puts modify(klass) # =&gt; ["new", "bar"]
puts klass.array   # =&gt; ["new", "bar"]

strukt = Strukt.new
puts modify(strukt) # =&gt; ["new", "bar"]
puts strukt.array   # =&gt; ["str", "foo"]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>object.array &lt;&lt; "foo"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T173239Z" creationid="makenowjust" creationdate="20200505T173239Z">
        <seg>object.array &lt;&lt; "foo"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>object.array = ["new"]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T173240Z" creationid="makenowjust" creationdate="20200505T173240Z">
        <seg>object.array = ["new"]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>objects[1] += 2        # same as: objects[1] = objects[1] + 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T055115Z" creationid="hirofumiwakasugi" creationdate="20150902T055115Z">
        <seg>objects[1] += 2        # objects[1] = objects[1] + 2 と同じ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>objects[1] ||= 2       # same as: objects[1]? || (objects[1] = 2)
objects[1] &amp;&amp;= 2       # same as: objects[1]? &amp;&amp; (objects[1] = 2)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T055129Z" creationid="hirofumiwakasugi" creationdate="20150902T055122Z">
        <seg>objects[1] ||= 2       # objects[1]? || (objects[1] = 2) と同じ
objects[1] &amp;&amp;= 2       # objects[1]? &amp;&amp; (objects[1] = 2) と同じ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>objects[1], objects[2] = 3, 4

# Same as:
temp1 = 3
temp2 = 4
objects[1] = temp1
objects[2] = temp2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175709Z" creationid="makenowjust" creationdate="20200422T175709Z">
        <seg>objects[1], objects[2] = 3, 4

#以下に同じ
temp1 = 3
temp2 = 4
objects[1] = temp1
objects[2] = temp2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>offsetof</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T015944Z" creationid="makenowjust" creationdate="20200511T015944Z">
        <seg>offsetof</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>offsetof(Type, @ivar)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T020155Z" creationid="makenowjust" creationdate="20200511T020155Z">
        <seg>offsetof(Type, @ivar)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>one = One.new
two = Two.new
three = Three.new

new_array = Array(A).new
new_array &lt;&lt; one   # Ok, One inherits module A
new_array &lt;&lt; three # Ok, Three includes module A

new_array &lt;&lt; two # Error, because Two does not inherit module A</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T142057Z" creationid="makenowjust" creationdate="20200504T142057Z">
        <seg>one = One.new
two = Two.new
three = Three.new

new_array = Array(A).new
new_array &lt;&lt; one   # One は A をインクルードしているのでOK
new_array &lt;&lt; three # Three は A をインクルードしているのでOK

new_array &lt;&lt; two # Two は A をインクルードしていないのでエラー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>one = One.new
typeof(one)  # =&gt; One
one.is_a?(A) # =&gt; true
one.is_a?(B) # =&gt; false

three = Three.new
typeof(three)  # =&gt; Three
three.is_a?(A) # =&gt; true
three.is_a?(B) # =&gt; true</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T141923Z" creationid="makenowjust" creationdate="20200504T141923Z">
        <seg>one = One.new
typeof(one)  # =&gt; One
one.is_a?(A) # =&gt; true
one.is_a?(B) # =&gt; false

three = Three.new
typeof(three)  # =&gt; Three
three.is_a?(A) # =&gt; true
three.is_a?(B) # =&gt; true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>one = Person.new 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043748Z" creationid="hirofumiwakasugi" creationdate="20150905T043748Z">
        <seg>one = Person.new 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>one_more = Person.new "One more"
one_more.say "hello" # Error, one_more is a Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033726Z" creationid="hirofumiwakasugi" creationdate="20150909T033652Z">
        <seg>one_more = Person.new "One more"
one_more.say "hello" # one_more が Person だが</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>open file "foo.cr" do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184452Z" creationid="makenowjust" creationdate="20200505T184452Z">
        <seg>open file "foo.cr" do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>open(file("foo.cr") do
end)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184532Z" creationid="makenowjust" creationdate="20200505T184532Z">
        <seg>open(file("foo.cr") do
end)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>or</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140809Z" creationid="hirofumiwakasugi" creationdate="20151010T140807Z">
        <seg>または</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>other
end

foo 1, y: 2, z: 3    # =&gt; {y: 2, z: 3}
foo y: 2, x: 1, z: 3 # =&gt; {y: 2, z: 3}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T155135Z" creationid="makenowjust" creationdate="20200429T155135Z">
        <seg>other
end

foo 1, y: 2, z: 3    # =&gt; {y: 2, z: 3}
foo y: 2, x: 1, z: 3 # =&gt; {y: 2, z: 3}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>other = Person.new</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T073844Z" creationid="makenowjust" creationdate="20210324T073844Z">
        <seg>other = Person.new</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>other = Person.new "Other"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032731Z" creationid="hirofumiwakasugi" creationdate="20150909T032731Z">
        <seg>other = Person.new "Other"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>other.name == name</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T022640Z" creationid="hirofumiwakasugi" creationdate="20150908T022640Z">
        <seg>other.name == name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>other.say "hello" # Error, other is a receiver</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T110422Z" creationid="hirofumiwakasugi" creationdate="20150909T032746Z">
        <seg>other.say "hello" # other がレシーバのためエラー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>other.say "hello" # OK, other is a Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033742Z" creationid="hirofumiwakasugi" creationdate="20150909T033500Z">
        <seg>other.say "hello" # other は Person なので OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>out</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T081831Z" creationid="makenowjust" creationdate="20200512T081831Z">
        <seg>out</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>p "is {{klass}}"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221909Z" creationid="makenowjust" creationdate="20200509T221909Z">
        <seg>p "is {{klass}}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>p "is {{klass}}"
{% end %}
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221658Z" creationid="makenowjust" creationdate="20200509T221658Z">
        <seg>p "is {{klass}}"
{% end %}
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>p = Person.new
p.greet "everyone" # "Hi, everyone"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024149Z" creationid="hirofumiwakasugi" creationdate="20150910T024149Z">
        <seg>p = Person.new
p.greet "everyone" # "Hi, everyone"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>p1.name == p2.name</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025142Z" creationid="hirofumiwakasugi" creationdate="20150908T025142Z">
        <seg>p1.name == p2.name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>pages</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075454Z" creationid="makenowjust" creationdate="20200516T075454Z">
        <seg>pages</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>paint :red
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T012136Z" creationid="hirofumiwakasugi" creationdate="20150916T012136Z">
        <seg>paint :red
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>paint Color::Red
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T012101Z" creationid="hirofumiwakasugi" creationdate="20150916T012101Z">
        <seg>paint Color::Red
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>param.some_method
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094638Z" creationid="makenowjust" creationdate="20210324T094638Z">
        <seg>param.some_method
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>parser.banner = "#{"The Beatles".colorize(:yellow).on(:black)} App"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T184309Z" creationid="makenowjust" creationdate="20200413T184309Z">
        <seg>parser.banner = "#{"The Beatles".colorize(:yellow).on(:black)} App"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>parser.banner = "Welcome to The Beatles App!"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172456Z" creationid="makenowjust" creationdate="20200413T172456Z">
        <seg>parser.banner = "Welcome to The Beatles App!"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>parser.invalid_option do |option_flag|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180431Z" creationid="makenowjust" creationdate="20200413T180431Z">
        <seg>parser.invalid_option do |option_flag|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>parser.missing_option do |option_flag|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180424Z" creationid="makenowjust" creationdate="20200413T180424Z">
        <seg>parser.missing_option do |option_flag|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>parser.on "-g NAME", "--goodbye_hello=NAME", "Say hello to whoever you want" do |name|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175226Z" creationid="makenowjust" creationdate="20200413T175226Z">
        <seg>parser.on "-g NAME", "--goodbye_hello=NAME", "Say hello to whoever you want" do |name|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>parser.on "-h", "--help", "Show help" do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172503Z" creationid="makenowjust" creationdate="20200413T172503Z">
        <seg>parser.on "-h", "--help", "Show help" do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>parser.on "-r", "--random_goodbye_hello", "Say hello to one random member" do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180419Z" creationid="makenowjust" creationdate="20200413T180419Z">
        <seg>parser.on "-r", "--random_goodbye_hello", "Say hello to one random member" do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>parser.on "-s", "--strawberry", "Strawberry fields forever mode ON" do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180421Z" creationid="makenowjust" creationdate="20200413T180421Z">
        <seg>parser.on "-s", "--strawberry", "Strawberry fields forever mode ON" do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>parser.on "-t", "--twist", "Twist and SHOUT" do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174910Z" creationid="makenowjust" creationdate="20200413T174910Z">
        <seg>parser.on "-t", "--twist", "Twist and SHOUT" do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>parser.on "-v", "--version", "Show version" do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172458Z" creationid="makenowjust" creationdate="20200413T172458Z">
        <seg>parser.on "-v", "--version", "Show version" do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>path = Path.new(path) # *path* is now of the type Path</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T160831Z" creationid="makenowjust" creationdate="20200429T160807Z">
        <seg>path = Path.new(path) # *path* はこれによって Path 型になった</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>pattern match</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T091334Z" creationid="makenowjust" creationdate="20200502T091319Z">
        <seg>パターンマッチの検査</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person = Person.new</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033520Z" creationid="hirofumiwakasugi" creationdate="20150909T033520Z">
        <seg>person = Person.new</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person = Person.new "John"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071817Z" creationid="hirofumiwakasugi" creationdate="20150906T071817Z">
        <seg>person = Person.new "John"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person = Person.new "John"
person.become_older
person.age #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T123112Z" creationid="hirofumiwakasugi" creationdate="20150904T123112Z">
        <seg>person = Person.new "John"
person.become_older
person.age #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person = Person.new "John"
person.become_older
person.age #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T123334Z" creationid="hirofumiwakasugi" creationdate="20150904T123334Z">
        <seg>person = Person.new "John"
person.become_older
person.age #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person = Person.new "John", 30
person.has_instance_var?("name") #=&gt; true
person.has_instance_var?("birthday") #=&gt; false
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T031041Z" creationid="hirofumiwakasugi" creationdate="20151009T031041Z">
        <seg>person = Person.new "John", 30
person.has_instance_var?("name") #=&gt; true
person.has_instance_var?("birthday") #=&gt; false
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person = Person.new "John", 30
person.instance_vars_names #=&gt; ["name", "age"]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T012114Z" creationid="hirofumiwakasugi" creationdate="20151002T012114Z">
        <seg>person = Person.new "John", 30
person.instance_vars_names #=&gt; ["name", "age"]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person.age += 1 # same as: person.age = person.age + 1

person.name ||= "John" # same as: person.name || (person.name = "John")
person.name &amp;&amp;= "John" # same as: person.name &amp;&amp; (person.name = "John")

objects[1] += 2 # same as: objects[1] = objects[1] + 2

objects[1] ||= 2 # same as: objects[1]?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174912Z" creationid="makenowjust" creationdate="20200422T174838Z">
        <seg>person.age += 1 # person.age = person.age + 1 と同じ

person.name ||= "John" # person.name || (person.name = "John") と同じ
person.name &amp;&amp;= "John" # person.name &amp;&amp; (person.name = "John") と同じ

objects[1] += 2 # objects[1] = objects[1] + 2 と同じ

objects[1] ||= 2 # objects[1]? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person.become_older
person.age #=&gt; 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071817Z" creationid="hirofumiwakasugi" creationdate="20150906T071817Z">
        <seg>person.become_older
person.age #=&gt; 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person.become_older "12"
person.age #=&gt; 18</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071818Z" creationid="hirofumiwakasugi" creationdate="20150906T071818Z">
        <seg>person.become_older "12"
person.age #=&gt; 18</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person.become_older 5
person.age #=&gt; 6</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071818Z" creationid="hirofumiwakasugi" creationdate="20150906T071818Z">
        <seg>person.become_older 5
person.age #=&gt; 6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person.become_older do |current_age|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071819Z" creationid="hirofumiwakasugi" creationdate="20150906T071819Z">
        <seg>person.become_older do |current_age|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person.name ||= "John" # same as: person.name || (person.name = "John")
person.name &amp;&amp;= "John" # same as: person.name &amp;&amp; (person.name = "John")</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T055108Z" creationid="hirofumiwakasugi" creationdate="20150902T055102Z">
        <seg>person.name ||= "John" # person.name || (person.name = "John") と同じ
person.name &amp;&amp;= "John" # person.name &amp;&amp; (person.name = "John") と同じ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person.name, person.age = "John", 32

# Same as:
temp1 = "John"
temp2 = 32
person.name = temp1
person.age = temp2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175627Z" creationid="makenowjust" creationdate="20200422T175627Z">
        <seg>person.name, person.age = "John", 32

# 以下に同じ
temp1 = "John"
temp2 = 32
person.name = temp1
person.age = temp2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person.say "hello" # Error, person is a Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033730Z" creationid="hirofumiwakasugi" creationdate="20150909T033536Z">
        <seg>person.say "hello" # person は Person だが</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person.say "hello" # Error: person is a Person but current type is an Animal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T111809Z" creationid="makenowjust" creationdate="20200502T111809Z">
        <seg>person.say "hello" # person は Person だけど、現在の型は Animal なのでエラー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>pet = Cat.new
end

# pet : Animal+</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T110945Z" creationid="makenowjust" creationdate="20200504T110945Z">
        <seg>pet = Cat.new
end

# pet : Animal+</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>pet = Dog.new
else</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T110944Z" creationid="makenowjust" creationdate="20200504T110944Z">
        <seg>pet = Dog.new
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>peter.age #=&gt; 0
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122233Z" creationid="hirofumiwakasugi" creationdate="20150904T122233Z">
        <seg>peter.age #=&gt; 0
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>peter.name #=&gt; "Peter"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055722Z" creationid="hirofumiwakasugi" creationdate="20150904T055722Z">
        <seg>peter.name #=&gt; "Peter"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>play                     starts Crystal playground server</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080701Z" creationid="makenowjust" creationdate="20200516T080701Z">
        <seg>play                     starts Crystal playground server</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>point = Point.new 1, 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035034Z" creationid="hirofumiwakasugi" creationdate="20150906T035034Z">
        <seg>point = Point.new 1, 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>point.x #=&gt; 10
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035035Z" creationid="hirofumiwakasugi" creationdate="20150906T035035Z">
        <seg>point.x #=&gt; 10
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>pointerof</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T015108Z" creationid="makenowjust" creationdate="20200511T015108Z">
        <seg>pointerof</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>pointerof(@x)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035033Z" creationid="hirofumiwakasugi" creationdate="20150906T035033Z">
        <seg>pointerof(@x)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>positive</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085229Z" creationid="makenowjust" creationdate="20200502T085229Z">
        <seg>正の数にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>post</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075505Z" creationid="makenowjust" creationdate="20200516T075505Z">
        <seg>post</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>posts</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075459Z" creationid="makenowjust" creationdate="20200516T075459Z">
        <seg>posts</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>pp "Annotation {{ idx }} = {{ ann[0].id }}"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T112644Z" creationid="makenowjust" creationdate="20200510T112644Z">
        <seg>pp "Annotation {{ idx }} = {{ ann[0].id }}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>pp "{{ idx }} = #{{{ value }}}"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T111538Z" creationid="makenowjust" creationdate="20200510T111538Z">
        <seg>pp "{{ idx }} = #{{{ value }}}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>pp "{{ idx }} = {{ value }}"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T111131Z" creationid="makenowjust" creationdate="20200510T111131Z">
        <seg>pp "{{ idx }} = {{ value }}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>pp {{ @def.annotation(MyMethod).stringify }}
end

Foo.new.properties
my_method
pp {{ Foo.annotation(MyClass).stringify }}

# Which would print
"@[MyClass]"
"@[MyIvar]"
"@[MyIvar]"
"@[MyMethod]"
"@[MyClass]"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114133Z" creationid="makenowjust" creationdate="20200510T112328Z">
        <seg>pp {{ @def.annotation(MyMethod).stringify }}
end

Foo.new.properties
my_method
pp {{ Foo.annotation(MyClass).stringify }}

# このように表示されます
"@[MyClass]"
"@[MyIvar]"
"@[MyIvar]"
"@[MyMethod]"
"@[MyClass]"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>pp {{ @type.annotation(MyClass).stringify }}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T112316Z" creationid="makenowjust" creationdate="20200510T112316Z">
        <seg>pp {{ @type.annotation(MyClass).stringify }}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>pp {{ ivar.annotation(MyIvar).stringify }}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T112321Z" creationid="makenowjust" creationdate="20200510T112321Z">
        <seg>pp {{ ivar.annotation(MyIvar).stringify }}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>prev, _next : LinkedListNode*</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T082715Z" creationid="makenowjust" creationdate="20200512T082715Z">
        <seg>prev, _next : LinkedListNode*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>previous_def</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T123325Z" creationid="hirofumiwakasugi" creationdate="20150904T123325Z">
        <seg>previous_def</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>print "%name{index}: ", %name{index}, '\n'</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T021033Z" creationid="hirofumiwakasugi" creationdate="20151002T021033Z">
        <seg>print "%name{index}: ", %name{index}, '\n'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>print "Declaring: ", "%name{index}", '\n'</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T021007Z" creationid="hirofumiwakasugi" creationdate="20151002T021007Z">
        <seg>print "Declaring: ", "%name{index}", '\n'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>print "Got ", {{call.name.id.stringify}}, " with ", {{call.args.size}}, " arguments", '\n'
end

foo          # Prints: Got foo with 0 arguments
bar 'a', 'b' # Prints: Got bar with 2 arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224506Z" creationid="makenowjust" creationdate="20200509T224506Z">
        <seg>print "Got ", {{call.name.id.stringify}}, " with ", {{call.args.size}}, " arguments", '\n'
end

foo          # Prints: Got foo with 0 arguments
bar 'a', 'b' # Prints: Got bar with 2 arguments</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>print "Got ", {{name.id.stringify}}, " with ", {{args.length}}, " arguments", '\n'
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014453Z" creationid="hirofumiwakasugi" creationdate="20151002T014453Z">
        <seg>print "Got ", {{name.id.stringify}}, " with ", {{args.length}}, " arguments", '\n'
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>print "Got ", {{name.id.stringify}}, " with ", {{args.size}}, " arguments", '\n'
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030040Z" creationid="hirofumiwakasugi" creationdate="20151009T030040Z">
        <seg>print "Got ", {{name.id.stringify}}, " with ", {{args.size}}, " arguments", '\n'
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>print second
end

# Output: 246</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094544Z" creationid="makenowjust" creationdate="20210324T094544Z">
        <seg>print second
end

# Output: 246</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>print {{*values}}, '\n'
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040859Z" creationid="hirofumiwakasugi" creationdate="20151001T040859Z">
        <seg>print {{*values}}, '\n'
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>print {{*values}}, '\n'
end

println 1, 2, 3 # outputs 123\n</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215513Z" creationid="makenowjust" creationdate="20200509T215513Z">
        <seg>print {{*values}}, '\n'
end

println 1, 2, 3 # outputs 123\n</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>print(&lt;&lt;-FIRST, &lt;&lt;-SECOND) # prints "HelloWorld"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T091345Z" creationid="makenowjust" creationdate="20210130T091345Z">
        <seg>print(&lt;&lt;-FIRST, &lt;&lt;-SECOND) # prints "HelloWorld"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>print_methods
end

class Foo</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224929Z" creationid="makenowjust" creationdate="20200509T224929Z">
        <seg>print_methods
end

class Foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>println 1, 2, 3 # outputs 123\n
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040912Z" creationid="hirofumiwakasugi" creationdate="20151001T040912Z">
        <seg>println 1, 2, 3 # 123\n と出力
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>private ONE = 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T110118Z" creationid="makenowjust" creationdate="20200502T110118Z">
        <seg>private ONE = 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>private class Bar</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T110031Z" creationid="makenowjust" creationdate="20200502T110031Z">
        <seg>private class Bar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>private def say(message)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032701Z" creationid="hirofumiwakasugi" creationdate="20150909T032701Z">
        <seg>private def say(message)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc = -&gt;(x : Int32) do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081545Z" creationid="makenowjust" creationdate="20200518T081545Z">
        <seg>proc = -&gt;(x : Int32) do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc = -&gt;(x : Int32, y : Int32) { x + y }
proc.call(1, 2) # =&gt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172008Z" creationid="makenowjust" creationdate="20200422T172008Z">
        <seg>proc = -&gt;(x : Int32, y : Int32) { x + y }
proc.call(1, 2) # =&gt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc = -&gt;one
proc.call #=&gt; 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022052Z" creationid="hirofumiwakasugi" creationdate="20150902T022052Z">
        <seg>proc = -&gt;one
proc.call #=&gt; 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc = -&gt;plus_one(Int32)
proc.call(41) #=&gt; 42
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022126Z" creationid="hirofumiwakasugi" creationdate="20150902T022126Z">
        <seg>proc = -&gt;plus_one(Int32)
proc.call(41) #=&gt; 42
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc = capture { puts "Hello" }
invoke(&amp;proc) # prints "Hello"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024216Z" creationid="hirofumiwakasugi" creationdate="20150917T024156Z">
        <seg>proc = capture { puts "Hello" }
invoke(&amp;proc) # "Hello" を表示
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc = capture { puts "Hello" }
twice &amp;proc
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024954Z" creationid="hirofumiwakasugi" creationdate="20150917T024954Z">
        <seg>proc = capture { puts "Hello" }
twice &amp;proc
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc = capture { puts "Hello" }
twice do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075515Z" creationid="makenowjust" creationdate="20200506T075515Z">
        <seg>proc = capture { puts "Hello" }
twice do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc = counter
proc.call #=&gt; 1
proc.call #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T053729Z" creationid="hirofumiwakasugi" creationdate="20150918T053729Z">
        <seg>proc = counter
proc.call #=&gt; 1
proc.call #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc = int_to_int { |x| x + 1 }
proc.call(1) #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T040125Z" creationid="hirofumiwakasugi" creationdate="20150916T040125Z">
        <seg>proc = int_to_int { |x| x + 1 }
proc.call(1) #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc = some_proc { |x| x + 1 }
proc.call(1) # 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061952Z" creationid="hirofumiwakasugi" creationdate="20150918T061952Z">
        <seg>proc = some_proc { |x| x + 1 }
proc.call(1) # 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc = some_proc { |x| x + 1 }
proc.call(1) # void
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061943Z" creationid="hirofumiwakasugi" creationdate="20150918T061943Z">
        <seg>proc = some_proc { |x| x + 1 }
proc.call(1) # void
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc = some_proc { |x| x.to_s }
proc.call(1) # "1"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061952Z" creationid="hirofumiwakasugi" creationdate="20150918T061952Z">
        <seg>proc = some_proc { |x| x.to_s }
proc.call(1) # "1"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc.call
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075516Z" creationid="makenowjust" creationdate="20200506T075516Z">
        <seg>proc.call
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc.call
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025015Z" creationid="hirofumiwakasugi" creationdate="20150917T025015Z">
        <seg>proc.call
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc.call(i)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081547Z" creationid="makenowjust" creationdate="20200518T081547Z">
        <seg>proc.call(i)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>property age</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T124528Z" creationid="makenowjust" creationdate="20200427T124528Z">
        <seg>property age</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>property array = ["str"]
end

def modify(object)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T173238Z" creationid="makenowjust" creationdate="20200505T173238Z">
        <seg>property array = ["str"]
end

def modify(object)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>property array = ["str"]
end

struct Strukt</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T173237Z" creationid="makenowjust" creationdate="20200505T173237Z">
        <seg>property array = ["str"]
end

struct Strukt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>property char = '\0'
end

s = Int32OrChar.new
s.char = 'A'
s.int # =&gt; 65

s.int = 66
s.char # =&gt; 'B'</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114949Z" creationid="makenowjust" creationdate="20200510T114949Z">
        <seg>property char = '\0'
end

s = Int32OrChar.new
s.char = 'A'
s.int # =&gt; 65

s.int = 66
s.char # =&gt; 'B'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>property int = 0</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114946Z" creationid="makenowjust" creationdate="20200510T114946Z">
        <seg>property int = 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>property name : String = "jim"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T112319Z" creationid="makenowjust" creationdate="20200510T112319Z">
        <seg>property name : String = "jim"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>property x</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T053815Z" creationid="hirofumiwakasugi" creationdate="20150913T053815Z">
        <seg>property x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>property x, y</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T171238Z" creationid="makenowjust" creationdate="20200505T171238Z">
        <seg>property x, y</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>property y</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T053815Z" creationid="hirofumiwakasugi" creationdate="20150913T053815Z">
        <seg>property y</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>protected def foo</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T111942Z" creationid="makenowjust" creationdate="20200502T111942Z">
        <seg>protected def foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>protected def say(message)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033414Z" creationid="hirofumiwakasugi" creationdate="20150909T033414Z">
        <seg>protected def say(message)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>protected def self.protected_method</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T112611Z" creationid="makenowjust" creationdate="20200502T112611Z">
        <seg>protected def self.protected_method</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>protected def self.say(message)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T040624Z" creationid="hirofumiwakasugi" creationdate="20150909T040624Z">
        <seg>protected def self.say(message)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>pseudo_constants
end

# Program prints:
# Called from line number: 13
# Currently at line number: 5
# End of caller block is at: 14
# File path is: /crystal_code/pseudo_constants.cr
# Directory file is in: /crystal_code</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T181105Z" creationid="makenowjust" creationdate="20200505T181105Z">
        <seg>pseudo_constants
end

# Program prints:
# 呼び出された行番号: 13
# ここの行番号r: 5
# 呼び出し元のブロックの終わりの行: 14
# ファイル名: /crystal_code/pseudo_constants.cr
# ディレクトリ名: /crystal_code</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ptr = PInt32.malloc(1) # : Pointer(Int32)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061341Z" creationid="hirofumiwakasugi" creationdate="20160204T061339Z">
        <seg>ptr = PInt32.malloc(1) # : Pointer(Int32)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ptr = PInt32.malloc(1) # :: Pointer(Int32)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T070810Z" creationid="hirofumiwakasugi" creationdate="20150919T070810Z">
        <seg>ptr = PInt32.malloc(1) # :: Pointer(Int32)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ptr = Pointer(Int32).malloc(1)
ptr.as(Int8*) # :: Pointer(Int8)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T115445Z" creationid="makenowjust" creationdate="20200512T115445Z">
        <seg>ptr = Pointer(Int32).malloc(1)
ptr.as(Int8*) # :: Pointer(Int8)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ptr = point.x_ptr
ptr.value = 10</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035034Z" creationid="hirofumiwakasugi" creationdate="20150906T035034Z">
        <seg>ptr = point.x_ptr
ptr.value = 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ptr = pointerof(a)
ptr.value = 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035023Z" creationid="hirofumiwakasugi" creationdate="20150906T035023Z">
        <seg>ptr = pointerof(a)
ptr.value = 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts ""</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175231Z" creationid="makenowjust" creationdate="20200413T175231Z">
        <seg>puts ""</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "#{"The Beatles".colorize(:yellow).on(:black)} App"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100622Z" creationid="makenowjust" creationdate="20210324T100622Z">
        <seg>puts "#{"The Beatles".colorize(:yellow).on(:black)} App"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "#{name} (#{age})"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100805Z" creationid="makenowjust" creationdate="20210324T100805Z">
        <seg>puts "#{name} (#{age})"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "#{number}: #{word} #{bool}"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T191732Z" creationid="makenowjust" creationdate="20200505T191732Z">
        <seg>puts "#{number}: #{word} #{bool}"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "#{number}: #{word}"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T191524Z" creationid="makenowjust" creationdate="20200505T191524Z">
        <seg>puts "#{number}: #{word}"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "#{strawberry ?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180435Z" creationid="makenowjust" creationdate="20200413T180435Z">
        <seg>puts "#{strawberry ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "After 3"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024342Z" creationid="hirofumiwakasugi" creationdate="20150916T024342Z">
        <seg>puts "After 3"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "After 3"
end

thrice do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190212Z" creationid="makenowjust" creationdate="20200505T190212Z">
        <seg>puts "After 3"
end

thrice do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "After foo"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025544Z" creationid="hirofumiwakasugi" creationdate="20150917T025544Z">
        <seg>puts "After foo"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "After foo"
end

wrap_foo do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075602Z" creationid="makenowjust" creationdate="20200506T075602Z">
        <seg>puts "After foo"
end

wrap_foo do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "After receive"
end

puts "Before yield"
Fiber.yield
puts "After yield"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081826Z" creationid="makenowjust" creationdate="20200518T081826Z">
        <seg>puts "After receive"
end

puts "Before yield"
Fiber.yield
puts "After yield"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "After send"
end

3.times do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081834Z" creationid="makenowjust" creationdate="20200518T081834Z">
        <seg>puts "After send"
end

3.times do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "After send"
end

puts "Before receive"
channel.receive
puts "After receive"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081756Z" creationid="makenowjust" creationdate="20200518T081756Z">
        <seg>puts "After send"
end

puts "Before receive"
channel.receive
puts "After receive"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "After send"
end

spawn do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081822Z" creationid="makenowjust" creationdate="20200518T081822Z">
        <seg>puts "After send"
end

spawn do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Before 1"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024340Z" creationid="hirofumiwakasugi" creationdate="20150916T024340Z">
        <seg>puts "Before 1"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Before 2"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024341Z" creationid="hirofumiwakasugi" creationdate="20150916T024341Z">
        <seg>puts "Before 2"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Before 3"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024342Z" creationid="hirofumiwakasugi" creationdate="20150916T024342Z">
        <seg>puts "Before 3"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Before first send"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081800Z" creationid="makenowjust" creationdate="20200518T081800Z">
        <seg>puts "Before first send"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Before foo"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025543Z" creationid="hirofumiwakasugi" creationdate="20150917T025543Z">
        <seg>puts "Before foo"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Before receive"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081824Z" creationid="makenowjust" creationdate="20200518T081824Z">
        <seg>puts "Before receive"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Before second send"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081801Z" creationid="makenowjust" creationdate="20200518T081801Z">
        <seg>puts "Before second send"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Before send 1"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081830Z" creationid="makenowjust" creationdate="20200518T081830Z">
        <seg>puts "Before send 1"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Before send 2"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081831Z" creationid="makenowjust" creationdate="20200518T081831Z">
        <seg>puts "Before send 2"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Before send 3"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081833Z" creationid="makenowjust" creationdate="20200518T081833Z">
        <seg>puts "Before send 3"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Before send"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081754Z" creationid="makenowjust" creationdate="20200518T081754Z">
        <seg>puts "Before send"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Bye bye from #{self}!"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041659Z" creationid="hirofumiwakasugi" creationdate="20150910T041659Z">
        <seg>puts "Bye bye from #{self}!"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Called from line number: #{caller_line}"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T180944Z" creationid="makenowjust" creationdate="20200505T180924Z">
        <seg>puts "呼び出された行番号: #{caller_line}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Cleanup..."
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013357Z" creationid="hirofumiwakasugi" creationdate="20150907T013357Z">
        <seg>puts "Cleanup..."
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Cleanup..."
end

# Will print "Cleanup..." after invoking something_dangerous,
# regardless of whether it raised or not</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103819Z" creationid="makenowjust" creationdate="20200506T103731Z">
        <seg>puts "Cleanup..."
end

# 例外が発生したかどうかに関わらず、
# something_dangerous が実行されたあとに "Cleanup..." が出力される</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Currently at line number: #{__LINE__}"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T180936Z" creationid="makenowjust" creationdate="20200505T180936Z">
        <seg>puts "ここの行番号: #{__LINE__}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Directory file is in: #{__DIR__}"
end

begin</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T181012Z" creationid="makenowjust" creationdate="20200505T181012Z">
        <seg>puts "ディレクトリ名: #{__DIR__}"
end

begin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "End of caller block is at: #{end_of_caller}"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T181000Z" creationid="makenowjust" creationdate="20200505T181000Z">
        <seg>puts "呼び出し元のブロックの終わりの行: #{end_of_caller}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "File path is: #{__FILE__}"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T181110Z" creationid="makenowjust" creationdate="20200505T181005Z">
        <seg>puts "ファイル名: #{__FILE__}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Got #{i}"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025706Z" creationid="hirofumiwakasugi" creationdate="20150916T025706Z">
        <seg>puts "Got #{i}"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Got #{i}"
end

# Ouptut:
# Skipping 1
# Got 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190738Z" creationid="makenowjust" creationdate="20200505T190738Z">
        <seg>puts "Got #{i}"
end

# Ouptut:
# Skipping 1
# Got 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Got #{i}"
end

# Output:
# Skipping 1
# Got 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T094455Z" creationid="makenowjust" creationdate="20200518T094455Z">
        <seg>puts "Got #{i}"
end

# Output:
# Skipping 1
# Got 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Got #{i}"
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T015730Z" creationid="hirofumiwakasugi" creationdate="20150916T015730Z">
        <seg>puts "Got #{i}"
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Got Int32"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025811Z" creationid="hirofumiwakasugi" creationdate="20150908T025811Z">
        <seg>puts "Got Int32"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Got Int32"
end

def foo(x : String.class)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T161750Z" creationid="makenowjust" creationdate="20200429T161750Z">
        <seg>puts "Got Int32"
end

def foo(x : String.class)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Got String"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025813Z" creationid="hirofumiwakasugi" creationdate="20150908T025813Z">
        <seg>puts "Got String"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Got String"
end

foo Int32  # prints "Got Int32"
foo String # prints "Got String"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T161804Z" creationid="makenowjust" creationdate="20200429T161804Z">
        <seg>puts "Got String"
end

foo Int32  # "Got Int32" と表示
foo String # "Got String" と表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Got: #{i}"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T192022Z" creationid="makenowjust" creationdate="20200505T192022Z">
        <seg>puts "Got: #{i}"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Got: #{i}"
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T031409Z" creationid="hirofumiwakasugi" creationdate="20150916T031409Z">
        <seg>puts "Got: #{i}"
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hello world!"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T161805Z" creationid="makenowjust" creationdate="20200413T161805Z">
        <seg>puts "Hello world!"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hello!"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081529Z" creationid="makenowjust" creationdate="20200518T081529Z">
        <seg>puts "Hello!"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hello!"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T014757Z" creationid="hirofumiwakasugi" creationdate="20150916T014757Z">
        <seg>puts "Hello!"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hello!"
end

twice do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184302Z" creationid="makenowjust" creationdate="20200505T184302Z">
        <seg>puts "Hello!"
end

twice do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hello!"
end

twice { puts "Hello!" }</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184303Z" creationid="makenowjust" creationdate="20200505T184303Z">
        <seg>puts "Hello!"
end

twice { puts "Hello!" }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hello!"
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T013506Z" creationid="hirofumiwakasugi" creationdate="20150916T013506Z">
        <seg>puts "Hello!"
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hello"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T111948Z" creationid="makenowjust" creationdate="20200502T111948Z">
        <seg>puts "Hello"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hello"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T040820Z" creationid="hirofumiwakasugi" creationdate="20150909T040820Z">
        <seg>puts "Hello"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hello"
end

greet # =&gt; "Hello"

# In file two.cr
require "./one"

greet # undefined local variable or method 'greet'</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T112733Z" creationid="makenowjust" creationdate="20200502T112733Z">
        <seg>puts "Hello"
end

greet # =&gt; "Hello"

# two.cr:
require "./one"

greet # undefined local variable or method 'greet'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hello"
end

twice &amp;-&gt;say_hello</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075533Z" creationid="makenowjust" creationdate="20200506T075533Z">
        <seg>puts "Hello"
end

twice &amp;-&gt;say_hello</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hello, "#{msg}"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024758Z" creationid="hirofumiwakasugi" creationdate="20150910T024758Z">
        <seg>puts "Hello, "#{msg}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hello, #{msg}"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024148Z" creationid="hirofumiwakasugi" creationdate="20150910T024148Z">
        <seg>puts "Hello, #{msg}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hi, #{msg}"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024146Z" creationid="hirofumiwakasugi" creationdate="20150910T024146Z">
        <seg>puts "Hi, #{msg}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hi, I'm #{@name}"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T023717Z" creationid="hirofumiwakasugi" creationdate="20150910T023717Z">
        <seg>puts "Hi, I'm #{@name}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hi, this is a number: #{msg}"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024421Z" creationid="hirofumiwakasugi" creationdate="20150910T024421Z">
        <seg>puts "Hi, this is a number: #{msg}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "I'm a method!"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224930Z" creationid="makenowjust" creationdate="20200509T224930Z">
        <seg>puts "I'm a method!"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "I'm a unicorn"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144059Z" creationid="hirofumiwakasugi" creationdate="20151010T144059Z">
        <seg>puts "I'm a unicorn"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "I'm a unicorn"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214638Z" creationid="makenowjust" creationdate="20200412T214638Z">
        <seg>puts "I'm a unicorn"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "I'm a unicorn"
end

# Makes the unicorn talk to STDOUT
#
# DEPRECATED: Use `speak`
def talk</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214636Z" creationid="makenowjust" creationdate="20200412T214636Z">
        <seg>puts "I'm a unicorn"
end

# Makes the unicorn talk to STDOUT
#
# DEPRECATED: Use `speak`
def talk</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "In outer scope, got call: ", {{ call.name.stringify }}
end

class SomeClass</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224649Z" creationid="makenowjust" creationdate="20200509T224649Z">
        <seg>puts "In outer scope, got call: ", {{ call.name.stringify }}
end

class SomeClass</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Inside SomeClass, got call: ", {{ call.name.stringify }}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224651Z" creationid="makenowjust" creationdate="20200509T224651Z">
        <seg>puts "Inside SomeClass, got call: ", {{ call.name.stringify }}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Listening on http://0.0.0.0:8080"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072632Z" creationid="hirofumiwakasugi" creationdate="20150901T072632Z">
        <seg>puts "Listening on http://0.0.0.0:8080"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Listening on http://0.0.0.0:8080"
server.listen
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072546Z" creationid="hirofumiwakasugi" creationdate="20150901T072546Z">
        <seg>puts "Listening on http://0.0.0.0:8080"
server.listen
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Listening on http://0.0.0.0:8080"
server.listen
{% endhighlight %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T034947Z" creationid="hirofumiwakasugi" creationdate="20151102T034947Z">
        <seg>puts "Listening on http://0.0.0.0:8080"
server.listen
{% endhighlight %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Passed with x: #{x}"
end

def foo(*, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160832Z" creationid="makenowjust" creationdate="20200501T160832Z">
        <seg>puts "x と共に渡された: #{x}"
end

def foo(*, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Passed with y: #{y}"
end

foo x: 1 # =&gt; Passed with x: 1
foo y: 2 # =&gt; Passed with y: 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T160848Z" creationid="makenowjust" creationdate="20200501T160822Z">
        <seg>puts "y と共に渡された: #{y}"
end

foo x: 1 # =&gt; x と共に渡された: 1
foo y: 2 # =&gt; y と共に渡された: 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Planning between #{begin_time} and #{end_time}"
end

plan begin: Time.now, end: 2.days.from_now</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T161312Z" creationid="makenowjust" creationdate="20200501T161250Z">
        <seg>puts "#{begin_time} と #{end_time} の間で予定しています"
end

plan begin: Time.now, end: 2.days.from_now</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Rescued MyException"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012244Z" creationid="hirofumiwakasugi" creationdate="20150907T012244Z">
        <seg>puts "Rescued MyException"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Rescued MyException"
end

# Output: Rescued MyException</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103509Z" creationid="makenowjust" creationdate="20200506T103509Z">
        <seg>puts "Rescued MyException"
end

# Output: Rescued MyException</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Rescued MyException: #{ex.message}"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012418Z" creationid="hirofumiwakasugi" creationdate="20150907T012418Z">
        <seg>puts "Rescued MyException: #{ex.message}"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Rescued MyException: #{ex.message}"
end

# Output: Rescued MyException: OH NO!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103512Z" creationid="makenowjust" creationdate="20200506T103512Z">
        <seg>puts "Rescued MyException: #{ex.message}"
end

# Output: Rescued MyException: OH NO!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Rescued!"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011958Z" creationid="hirofumiwakasugi" creationdate="20150907T011958Z">
        <seg>puts "Rescued!"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Rescued!"
end

# Output: Rescued!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103442Z" creationid="makenowjust" creationdate="20200506T103442Z">
        <seg>puts "Rescued!"
end

# Output: Rescued!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Skipping 1"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025704Z" creationid="hirofumiwakasugi" creationdate="20150916T025704Z">
        <seg>puts "Skipping 1"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "We are in test mode"
{% end %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215135Z" creationid="makenowjust" creationdate="20200509T215135Z">
        <seg>puts "We are in test mode"
{% end %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "We are in test mode"
{% end %}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040249Z" creationid="hirofumiwakasugi" creationdate="20151001T040249Z">
        <seg>puts "We are in test mode"
{% end %}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets

exit if user_input.nil?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100627Z" creationid="makenowjust" creationdate="20210324T100627Z">
        <seg>puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets

exit if user_input.nil?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Welcome to The Beatles Sing-Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets

exit if user_input.nil?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20211107T091021Z" creationid="makenowjust" creationdate="20211107T091021Z">
        <seg>puts "Welcome to The Beatles Sing-Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets

exit if user_input.nil?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "You say goodbye, and #{the_beatles.sample} says hello to #{say_hi_to}!"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175236Z" creationid="makenowjust" creationdate="20200413T175236Z">
        <seg>puts "You say goodbye, and #{the_beatles.sample} says hello to #{say_hi_to}!"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "You say goodbye, and #{the_beatles.sample} says hello to #{say_hi_to}!"
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100602Z" creationid="makenowjust" creationdate="20210324T100602Z">
        <seg>puts "You say goodbye, and #{the_beatles.sample} says hello to #{say_hi_to}!"
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "You say goodbye, and I say hello to #{say_hi_to}!"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180438Z" creationid="makenowjust" creationdate="20200413T180438Z">
        <seg>puts "You say goodbye, and I say hello to #{say_hi_to}!"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "You say goodbye, and I say hello to #{say_hi_to}!"
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100607Z" creationid="makenowjust" creationdate="20210324T100607Z">
        <seg>puts "You say goodbye, and I say hello to #{say_hi_to}!"
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "hello"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T100255Z" creationid="makenowjust" creationdate="20200424T100255Z">
        <seg>puts "hello"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "version 1.0"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172459Z" creationid="makenowjust" creationdate="20200413T172459Z">
        <seg>puts "version 1.0"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "world"
end

# The above prints "hello"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T100424Z" creationid="makenowjust" creationdate="20200424T100258Z">
        <seg>puts "world"
end

# 上記を実行すると "hello" と表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts %x
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T020012Z" creationid="hirofumiwakasugi" creationdate="20151002T020012Z">
        <seg>puts %x
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts %x
end

x = 0
dont_update_x # outputs 1
x             # =&gt; 0</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T225920Z" creationid="makenowjust" creationdate="20200509T225920Z">
        <seg>puts %x
end

x = 0
dont_update_x # outputs 1
x             # =&gt; 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts 123</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T090717Z" creationid="makenowjust" creationdate="20200506T090717Z">
        <seg>puts 123</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts 123.to_s</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T090848Z" creationid="makenowjust" creationdate="20200506T090848Z">
        <seg>puts 123.to_s</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts 42</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221154Z" creationid="makenowjust" creationdate="20200509T221154Z">
        <seg>puts 42</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts Color.new(1) # =&gt; prints "Green"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182555Z" creationid="makenowjust" creationdate="20200505T182544Z">
        <seg>puts Color.new(1) # =&gt; "Green" と出力</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts Color.new(10) # =&gt; prints "10"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182745Z" creationid="makenowjust" creationdate="20200505T182738Z">
        <seg>puts Color.new(10) # =&gt; "10" と出力</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts a
end

# The above prints the numbers 2, 4 and 5</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T100414Z" creationid="makenowjust" creationdate="20200424T095923Z">
        <seg>puts a
end

# 上記を実行すると2、4、5と表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts a
end
# The above prints the numbers 2, 4 and 5
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052338Z" creationid="hirofumiwakasugi" creationdate="20150905T052333Z">
        <seg>puts a
end
# 上記を実行すると 2、4、5 と表示されます。
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts a + 1 # error, undefined method '+' for Nil
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T104448Z" creationid="makenowjust" creationdate="20200506T104448Z">
        <seg>puts a + 1 # error, undefined method '+' for Nil
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts a + 1 # error, undefined method '+' for Nil
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T020149Z" creationid="hirofumiwakasugi" creationdate="20150907T020149Z">
        <seg>puts a + 1 # error, undefined method '+' for Nil
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts a + 1 # works
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T104658Z" creationid="makenowjust" creationdate="20200506T104658Z">
        <seg>puts a + 1 # works
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts a + 1 # works
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T023246Z" creationid="hirofumiwakasugi" creationdate="20150907T023246Z">
        <seg>puts a + 1 # エラーにならない
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts channel.receive</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081823Z" creationid="makenowjust" creationdate="20200518T081823Z">
        <seg>puts channel.receive</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts channel.receive
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081815Z" creationid="makenowjust" creationdate="20200518T081815Z">
        <seg>puts channel.receive
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts ex.message
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012109Z" creationid="hirofumiwakasugi" creationdate="20150907T012109Z">
        <seg>puts ex.message
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts ex.message
end

# Output: OH NO!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103507Z" creationid="makenowjust" creationdate="20200506T103507Z">
        <seg>puts ex.message
end

# Output: OH NO!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts greeting</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010359Z" creationid="hirofumiwakasugi" creationdate="20151010T010359Z">
        <seg>puts greeting</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts i</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T032842Z" creationid="hirofumiwakasugi" creationdate="20150916T032842Z">
        <seg>puts i</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts i
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025545Z" creationid="hirofumiwakasugi" creationdate="20150917T025545Z">
        <seg>puts i
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts i
end

# Output:
# Before foo
# 1
# After foo</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075604Z" creationid="makenowjust" creationdate="20200506T075604Z">
        <seg>puts i
end

# Output:
# Before foo
# 1
# After foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts i
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T031810Z" creationid="hirofumiwakasugi" creationdate="20150916T031810Z">
        <seg>puts i
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts i.inspect
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022550Z" creationid="hirofumiwakasugi" creationdate="20150916T022550Z">
        <seg>puts i.inspect
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts member
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174915Z" creationid="makenowjust" creationdate="20200413T174915Z">
        <seg>puts member
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts member
end
```

Running the application with the `-t` option will output:

```console
$ crystal run ./twist_and_shout.cr -- -t

Group members:
==============
JOHN LENNON
PAUL MCCARTNEY
GEORGE HARRISON
RINGO STARR
```</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100556Z" creationid="makenowjust" creationdate="20210324T100556Z">
        <seg>puts member
end
```

`-t` をつけてこのアプリケーションを実行すると、次のように表示されるでしょう。

```console
$ crystal run ./twist_and_shout.cr -- -t

Group members:
==============
JOHN LENNON
PAUL MCCARTNEY
GEORGE HARRISON
RINGO STARR
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts message</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032701Z" creationid="hirofumiwakasugi" creationdate="20150909T032701Z">
        <seg>puts message</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts parser</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172504Z" creationid="makenowjust" creationdate="20200413T172504Z">
        <seg>puts parser</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts self
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T101248Z" creationid="makenowjust" creationdate="20200427T101248Z">
        <seg>puts self
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts tick
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090952Z" creationid="makenowjust" creationdate="20200512T090952Z">
        <seg>puts tick
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts v1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023506Z" creationid="hirofumiwakasugi" creationdate="20150916T023506Z">
        <seg>puts v1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts v2
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023507Z" creationid="hirofumiwakasugi" creationdate="20150916T023507Z">
        <seg>puts v2
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts v2
end

twice do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185845Z" creationid="makenowjust" creationdate="20200505T185845Z">
        <seg>puts v2
end

twice do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts x + y
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022444Z" creationid="hirofumiwakasugi" creationdate="20150916T022444Z">
        <seg>puts x + y
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts x + y
end

# Output: 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184755Z" creationid="makenowjust" creationdate="20200505T184755Z">
        <seg>puts x + y
end

# Output: 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts x + y + z
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022218Z" creationid="hirofumiwakasugi" creationdate="20150916T022218Z">
        <seg>puts x + y + z
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts x + y + z
end

# Output: 6</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184746Z" creationid="makenowjust" creationdate="20200505T184746Z">
        <seg>puts x + y + z
end

# Output: 6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts yield
end

block do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T100344Z" creationid="makenowjust" creationdate="20200424T100344Z">
        <seg>puts yield
end

block do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts {{value}}
{% end %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220124Z" creationid="makenowjust" creationdate="20200509T220124Z">
        <seg>puts {{value}}
{% end %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts {{value}}
{% end %}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T041454Z" creationid="hirofumiwakasugi" creationdate="20151001T041454Z">
        <seg>puts {{value}}
{% end %}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts(Color::Red)                    # prints "Red"
puts(IOMode::Write | IOMode::Async) # prints "Write, Async"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182513Z" creationid="makenowjust" creationdate="20200505T182513Z">
        <seg>puts(Color::Red)                    # prints "Red"
puts(IOMode::Write | IOMode::Async) # prints "Write, Async"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts(i)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081540Z" creationid="makenowjust" creationdate="20200518T081540Z">
        <seg>puts(i)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts(x)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081546Z" creationid="makenowjust" creationdate="20200518T081546Z">
        <seg>puts(x)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>raise "Not a unicorn" if @horns != 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144051Z" creationid="hirofumiwakasugi" creationdate="20151010T144051Z">
        <seg>raise "Not a unicorn" if @horns != 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>raise "Not a unicorn" if @horns != 1
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T211949Z" creationid="makenowjust" creationdate="20200412T211949Z">
        <seg>raise "Not a unicorn" if @horns != 1
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>raise "Not a unicorn" if @horns != 1
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140506Z" creationid="hirofumiwakasugi" creationdate="20151010T140506Z">
        <seg>raise "Not a unicorn" if @horns != 1
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>raise "OH NO!"
raise Exception.new("Some error")</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T103252Z" creationid="makenowjust" creationdate="20200506T103252Z">
        <seg>raise "OH NO!"
raise Exception.new("Some error")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>raise "OH NO!"
rescue</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011957Z" creationid="hirofumiwakasugi" creationdate="20150907T011957Z">
        <seg>raise "OH NO!"
rescue</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>raise "OH NO!"
rescue ex</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012108Z" creationid="hirofumiwakasugi" creationdate="20150907T012108Z">
        <seg>raise "OH NO!"
rescue ex</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>raise "unknown color: #{color}"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T012101Z" creationid="hirofumiwakasugi" creationdate="20150916T012101Z">
        <seg>raise "unknown color: #{color}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>raise MyException.new("OH NO!")
rescue MyException</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012243Z" creationid="hirofumiwakasugi" creationdate="20150907T012243Z">
        <seg>raise MyException.new("OH NO!")
rescue MyException</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>raise MyException.new("OH NO!")
rescue ex : MyException</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012417Z" creationid="hirofumiwakasugi" creationdate="20150907T012417Z">
        <seg>raise MyException.new("OH NO!")
rescue ex : MyException</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>range</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T092005Z" creationid="makenowjust" creationdate="20200502T092005Z">
        <seg>範囲</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>require "./filename"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T090702Z" creationid="makenowjust" creationdate="20200427T090702Z">
        <seg>require "./filename"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>require "benchmark"

Benchmark.ips do |bm|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T090952Z" creationid="makenowjust" creationdate="20200506T090952Z">
        <seg>require "benchmark"

Benchmark.ips do |bm|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>require "db"
require "mysql"

DB.open "mysql://root@localhost/test" do |db|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100748Z" creationid="makenowjust" creationdate="20210324T100748Z">
        <seg>require "db"
require "mysql"

DB.open "mysql://root@localhost/test" do |db|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>require "db"
require "mysql"

db = DB.open "mysql://root@localhost/test"
begin</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100753Z" creationid="makenowjust" creationdate="20210324T100753Z">
        <seg>require "db"
require "mysql"

db = DB.open "mysql://root@localhost/test"
begin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>require "filename"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T084504Z" creationid="makenowjust" creationdate="20200427T084504Z">
        <seg>require "filename"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>require "http/server"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072605Z" creationid="hirofumiwakasugi" creationdate="20150901T072605Z">
        <seg>require "http/server"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>require "http/server"

server = HTTP::Server.new do |context|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T161812Z" creationid="makenowjust" creationdate="20200413T161812Z">
        <seg>require "http/server"

server = HTTP::Server.new do |context|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>require "socket"

channel = Channel(String).new

spawn do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081806Z" creationid="makenowjust" creationdate="20200518T081806Z">
        <seg>require "socket"

channel = Channel(String).new

spawn do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>required and optional named arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T084614Z" creationid="makenowjust" creationdate="20200430T144116Z">
        <seg>必須もしくはオプションの名前付き引数がいくつか</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>required and optional named parameters</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T090931Z" creationid="makenowjust" creationdate="20210324T090931Z">
        <seg>必須もしくはオプションの位置指定の引数がいくつか</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>required and optional positional arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T084612Z" creationid="makenowjust" creationdate="20200430T144017Z">
        <seg>必須もしくはオプションの位置指定の引数がいくつか</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>required and optional positional parameters</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T090907Z" creationid="makenowjust" creationdate="20210324T090907Z">
        <seg>必須もしくはオプションの位置指定の引数がいくつか</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>rescue</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014249Z" creationid="hirofumiwakasugi" creationdate="20150907T014249Z">
        <seg>rescue</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>rescue err : ParseError</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011938Z" creationid="hirofumiwakasugi" creationdate="20151010T011938Z">
        <seg>rescue err : ParseError</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>responds_to?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T113500Z" creationid="makenowjust" creationdate="20200512T113500Z">
        <seg>responds_to?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>result * 2
end

transform_int(3) { |x| x + 2 } # =&gt; 10
transform_int(3) { |x| "foo" } # Error: expected block to return Int32, not String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190148Z" creationid="makenowjust" creationdate="20200505T190148Z">
        <seg>result * 2
end

transform_int(3) { |x| x + 2 } # =&gt; 10
transform_int(3) { |x| "foo" } # Error: expected block to return Int32, not String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>result = yield start</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190147Z" creationid="makenowjust" creationdate="20200505T190147Z">
        <seg>result = yield start</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>return
end
# e : Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T075230Z" creationid="makenowjust" creationdate="20200424T075230Z">
        <seg>return
end
# e : Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>return
end
# e : Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061716Z" creationid="hirofumiwakasugi" creationdate="20160204T061716Z">
        <seg>return
end
# e : Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>return
end
# e :: Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012733Z" creationid="hirofumiwakasugi" creationdate="20150903T012733Z">
        <seg>return
end
# e :: Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>return false
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T100104Z" creationid="makenowjust" creationdate="20200427T100104Z">
        <seg>return false
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>return false
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T015403Z" creationid="hirofumiwakasugi" creationdate="20150904T015403Z">
        <seg>return false
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>return true</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T015357Z" creationid="hirofumiwakasugi" creationdate="20150904T015357Z">
        <seg>return true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>rhoeft</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084047Z" creationid="makenowjust" creationdate="20200516T084047Z">
        <seg>rhoeft</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>right shift &lt;g1&gt;and&lt;/g1&gt; assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T101048Z" creationid="makenowjust" creationdate="20200502T101048Z">
        <seg>右シフト&lt;g1&gt;複合&lt;/g1&gt;代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>rouge</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075511Z" creationid="makenowjust" creationdate="20200516T075511Z">
        <seg>rouge</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>rs.each do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100802Z" creationid="makenowjust" creationdate="20210324T100802Z">
        <seg>rs.each do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>run (default)            build and run program</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080702Z" creationid="makenowjust" creationdate="20200516T080702Z">
        <seg>run (default)            build and run program</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>run (default)            compile and run program file</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072216Z" creationid="hirofumiwakasugi" creationdate="20150901T072216Z">
        <seg>run (default)            compile and run program file</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>s = "hello"
# s : String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170043Z" creationid="makenowjust" creationdate="20200413T170043Z">
        <seg>s = "hello"
# s : String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>say "bye" # OK</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032834Z" creationid="hirofumiwakasugi" creationdate="20150909T032834Z">
        <seg>say "bye" # OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>say "hello"      # OK, implicit self is a Person</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T110402Z" creationid="makenowjust" creationdate="20200502T110335Z">
        <seg>say "hello"      # 暗黙の self は Person なので OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>say "hello"      # OK, no receiver</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T110409Z" creationid="makenowjust" creationdate="20200502T105428Z">
        <seg>say "hello"      # レシーバが無いため OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>say "hello" # OK, implicit self is a Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033511Z" creationid="hirofumiwakasugi" creationdate="20150909T033434Z">
        <seg>say "hello" # 暗黙の self が Person なので OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>say "hello" # OK, no receiver</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032715Z" creationid="hirofumiwakasugi" creationdate="20150909T032715Z">
        <seg>say "hello" # レシーバなしなので OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>say_hi_to = name</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175227Z" creationid="makenowjust" creationdate="20200413T175227Z">
        <seg>say_hi_to = name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>say_hi_to = the_beatles.sample</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180420Z" creationid="makenowjust" creationdate="20200413T180420Z">
        <seg>say_hi_to = the_beatles.sample</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>schaarw</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T084048Z" creationid="makenowjust" creationdate="20200516T084048Z">
        <seg>schaarw</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>score_text.scan(SCORE_PATTERN) do |match|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011937Z" creationid="hirofumiwakasugi" creationdate="20151010T011937Z">
        <seg>score_text.scan(SCORE_PATTERN) do |match|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>scripts/*.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075519Z" creationid="makenowjust" creationdate="20200516T075519Z">
        <seg>scripts/*.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>self</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T172748Z" creationid="makenowjust" creationdate="20200505T172748Z">
        <seg>self</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>self == Color::Red</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011445Z" creationid="hirofumiwakasugi" creationdate="20150916T011445Z">
        <seg>self == Color::Red</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>self restriction</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T160838Z" creationid="makenowjust" creationdate="20200429T160838Z">
        <seg>self 型制約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>self.say "hello" # Error, self is a receiver</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032729Z" creationid="hirofumiwakasugi" creationdate="20150909T032729Z">
        <seg>self.say "hello" # self というレシーバが指定されているのでエラー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>self.say "hello" # OK, self is a Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033748Z" creationid="hirofumiwakasugi" creationdate="20150909T033446Z">
        <seg>self.say "hello" # self は Person なので OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>self.say "hello" # OK, self is a receiver, but it's allowed.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T110414Z" creationid="makenowjust" creationdate="20200502T105438Z">
        <seg>self.say "hello" # self がレシーバのため OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>server = HTTP::Server.new ...</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072615Z" creationid="hirofumiwakasugi" creationdate="20150901T072615Z">
        <seg>server = HTTP::Server.new ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>server = HTTP::Server.new(8080) do |context|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061318Z" creationid="hirofumiwakasugi" creationdate="20160204T061318Z">
        <seg>server = HTTP::Server.new(8080) do |context|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>server = HTTP::Server.new(8080) do |request|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T034948Z" creationid="hirofumiwakasugi" creationdate="20151102T034948Z">
        <seg>server = HTTP::Server.new(8080) do |request|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>server = TCPServer.new("0.0.0.0", 8080)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081809Z" creationid="makenowjust" creationdate="20200518T081809Z">
        <seg>server = TCPServer.new("0.0.0.0", 8080)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>server.listen</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072633Z" creationid="hirofumiwakasugi" creationdate="20150901T072633Z">
        <seg>server.listen</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shards [&lt;options&gt;...] [&lt;command&gt;]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T174622Z" creationid="makenowjust" creationdate="20200419T174622Z">
        <seg>shards [&lt;options&gt;...] [&lt;command&gt;]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shards build [&lt;targets&gt;] [&lt;options&gt;...]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180043Z" creationid="makenowjust" creationdate="20200419T180043Z">
        <seg>shards build [&lt;targets&gt;] [&lt;options&gt;...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shards check</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180334Z" creationid="makenowjust" creationdate="20200419T180334Z">
        <seg>shards check</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shards init</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180452Z" creationid="makenowjust" creationdate="20200419T180452Z">
        <seg>shards init</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shards install</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180514Z" creationid="makenowjust" creationdate="20200419T180514Z">
        <seg>shards install</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shards list</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181023Z" creationid="makenowjust" creationdate="20200419T181023Z">
        <seg>shards list</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shards prune</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181042Z" creationid="makenowjust" creationdate="20200419T181042Z">
        <seg>shards prune</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shards update</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181105Z" creationid="makenowjust" creationdate="20200419T181105Z">
        <seg>shards update</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shards version [&lt;path&gt;]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181249Z" creationid="makenowjust" creationdate="20200419T181249Z">
        <seg>shards version [&lt;path&gt;]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shift left, append</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090402Z" creationid="makenowjust" creationdate="20200502T090402Z">
        <seg>左シフト、もしくは追記</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shift right</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090408Z" creationid="makenowjust" creationdate="20200502T090408Z">
        <seg>右シフト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shout = true</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174911Z" creationid="makenowjust" creationdate="20200413T174911Z">
        <seg>shout = true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>sizeof</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T015354Z" creationid="makenowjust" creationdate="20200511T015354Z">
        <seg>sizeof</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>sizeof(Int32) # =&gt; 4
sizeof(Int64) # =&gt; 8</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T015417Z" creationid="makenowjust" creationdate="20200511T015417Z">
        <seg>sizeof(Int32) # =&gt; 4
sizeof(Int64) # =&gt; 8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>sleep 5.seconds</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081526Z" creationid="makenowjust" creationdate="20200518T081526Z">
        <seg>sleep 5.seconds</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>socket = server.accept</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081807Z" creationid="makenowjust" creationdate="20200518T081807Z">
        <seg>socket = server.accept</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>socket.gets</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081521Z" creationid="makenowjust" creationdate="20200518T081521Z">
        <seg>socket.gets</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>some do |first, second|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023035Z" creationid="hirofumiwakasugi" creationdate="20150916T023035Z">
        <seg>some do |first, second|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>some_call { |v| v.method.as(ExpectedType) }</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T120517Z" creationid="makenowjust" creationdate="20200512T120517Z">
        <seg>some_call { |v| v.method.as(ExpectedType) }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>some_exp1 &amp;&amp; some_exp2

# The above is the same as:
tmp = some_exp1
if tmp</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101634Z" creationid="makenowjust" creationdate="20200424T101634Z">
        <seg>some_exp1 &amp;&amp; some_exp2

# 上記は以下に同じ
tmp = some_exp1
if tmp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>some_exp1 || some_exp2

# The above is the same as:
tmp = some_exp1
if tmp</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101813Z" creationid="makenowjust" creationdate="20200424T101813Z">
        <seg>some_exp1 || some_exp2

# 上記は以下に同じ
tmp = some_exp1
if tmp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>some_exp2
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052621Z" creationid="hirofumiwakasugi" creationdate="20150905T052621Z">
        <seg>some_exp2
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>some_exp2
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101814Z" creationid="makenowjust" creationdate="20200424T101814Z">
        <seg>some_exp2
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>some_exp2
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052700Z" creationid="hirofumiwakasugi" creationdate="20150905T052700Z">
        <seg>some_exp2
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>some_field : Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T043753Z" creationid="hirofumiwakasugi" creationdate="20150909T043753Z">
        <seg>some_field : Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>some_field : Int64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T043755Z" creationid="hirofumiwakasugi" creationdate="20150909T043755Z">
        <seg>some_field : Int64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>some_float : Float64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052211Z" creationid="hirofumiwakasugi" creationdate="20151007T052211Z">
        <seg>some_float : Float64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>some_int : Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052211Z" creationid="hirofumiwakasugi" creationdate="20151007T052211Z">
        <seg>some_int : Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>some_method 10 # x = 10, y = 1, z = 2, w = 3
some_method 10, z: 10 # x = 10, y = 1, z = 10, w = 3
some_method 10, w: 1, y: 2, z: 3 # x = 10, y = 2, z = 3, w = 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T113344Z" creationid="hirofumiwakasugi" creationdate="20150906T113344Z">
        <seg>some_method 10 # x = 10, y = 1, z = 2, w = 3
some_method 10, z: 10 # x = 10, y = 1, z = 10, w = 3
some_method 10, w: 1, y: 2, z: 3 # x = 10, y = 2, z = 3, w = 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>something
end

# Same as:
open(file("foo.cr")) do
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184502Z" creationid="makenowjust" creationdate="20200505T184453Z">
        <seg>something
end

# 以下と同じ
open(file("foo.cr")) do
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>something
end

# The above is the same as
foo(bar) do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184358Z" creationid="makenowjust" creationdate="20200505T184358Z">
        <seg>something
end

# 上記は以下に同じ
foo(bar) do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>something
end

foo bar { something }

# The above is the same as

foo(bar { something })</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184405Z" creationid="makenowjust" creationdate="20200505T184405Z">
        <seg>something
end

foo bar { something }

# 上記は以下に同じ

foo(bar { something })</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>something_dangerous</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014248Z" creationid="hirofumiwakasugi" creationdate="20150907T014248Z">
        <seg>something_dangerous</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>something_dangerous
ensure</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013356Z" creationid="hirofumiwakasugi" creationdate="20150907T013356Z">
        <seg>something_dangerous
ensure</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>something_dangerous
rescue</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013614Z" creationid="hirofumiwakasugi" creationdate="20150907T013614Z">
        <seg>something_dangerous
rescue</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>spawn do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081520Z" creationid="makenowjust" creationdate="20200518T081520Z">
        <seg>spawn do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>spawn puts(i)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081750Z" creationid="makenowjust" creationdate="20200518T081750Z">
        <seg>spawn puts(i)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>spec                     build and run specs (in spec directory)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080702Z" creationid="makenowjust" creationdate="20200516T080702Z">
        <seg>spec                     build and run specs (in spec directory)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>spec                     compile and run specs (in spec directory)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072216Z" creationid="hirofumiwakasugi" creationdate="20150901T072216Z">
        <seg>spec                     compile and run specs (in spec directory)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>specifying &lt;g1&gt;type arguments&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T115806Z" creationid="makenowjust" creationdate="20200507T115806Z">
        <seg>&lt;g1&gt;型引数&lt;/g1&gt;を指定するとき</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>specifying &lt;g1&gt;type restrictions&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T115754Z" creationid="makenowjust" creationdate="20200507T115754Z">
        <seg>&lt;g1&gt;型制約&lt;/g1&gt;を指定するとき</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>splat</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T092211Z" creationid="makenowjust" creationdate="20200502T092211Z">
        <seg>スプラット展開</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>status_ptr = uninitialized Int32

C.waitpid(pid, pointerof(status_ptr), options)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T081942Z" creationid="makenowjust" creationdate="20200512T081942Z">
        <seg>status_ptr = uninitialized Int32

C.waitpid(pid, pointerof(status_ptr), options)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>str = "hello"
proc = -&gt;str.count(Char)
proc.call('e') # =&gt; 1
proc.call('l') # =&gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172029Z" creationid="makenowjust" creationdate="20200422T172029Z">
        <seg>str = "hello"
proc = -&gt;str.count(Char)
proc.call('e') # =&gt; 1
proc.call('l') # =&gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>strawberry = true</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180422Z" creationid="makenowjust" creationdate="20200413T180422Z">
        <seg>strawberry = true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>string = "foo"
string.each_char do |char|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091302Z" creationid="makenowjust" creationdate="20200506T091302Z">
        <seg>string = "foo"
string.each_char do |char|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>string = "foo"
while i &lt; string.size</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091259Z" creationid="makenowjust" creationdate="20200506T091259Z">
        <seg>string = "foo"
while i &lt; string.size</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>string = STDIN.gets
typeof(string)                        # =&gt; String?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T142341Z" creationid="makenowjust" creationdate="20200430T142341Z">
        <seg>string = STDIN.gets
typeof(string)                        # =&gt; String?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>string.chars.map { |char| ((char.upcase.ord - 52) % 26 + 65).chr }.join</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T130047Z" creationid="makenowjust" creationdate="20200504T130047Z">
        <seg>string.chars.map { |char| ((char.upcase.ord - 52) % 26 + 65).chr }.join</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>string.upcase
end

upcase(&lt;&lt;-SOME) # =&gt; "HELLO"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T034039Z" creationid="makenowjust" creationdate="20200420T034039Z">
        <seg>string.upcase
end

upcase(&lt;&lt;-SOME) # =&gt; "HELLO"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>string.upcase
end

upcase(&lt;&lt;-STRING) # =&gt; "HELLO WORLD"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T091256Z" creationid="makenowjust" creationdate="20210130T091256Z">
        <seg>string.upcase
end

upcase(&lt;&lt;-STRING) # =&gt; "HELLO WORLD"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T030322Z" creationid="makenowjust" creationdate="20200511T030322Z">
        <seg>struct</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct Counter</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T172745Z" creationid="makenowjust" creationdate="20200505T172745Z">
        <seg>struct Counter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct Foo</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T020255Z" creationid="makenowjust" creationdate="20200511T020255Z">
        <seg>struct Foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct Int</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T192144Z" creationid="makenowjust" creationdate="20200505T192144Z">
        <seg>struct Int</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct LinkedList</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T082731Z" creationid="makenowjust" creationdate="20200512T082731Z">
        <seg>struct LinkedList</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct LinkedListNode</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T082714Z" creationid="makenowjust" creationdate="20200512T082714Z">
        <seg>struct LinkedListNode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct Node</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045919Z" creationid="hirofumiwakasugi" creationdate="20151007T045919Z">
        <seg>struct Node</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct Point</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T171238Z" creationid="makenowjust" creationdate="20200505T171238Z">
        <seg>struct Point</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct SomeStruct</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T043732Z" creationid="hirofumiwakasugi" creationdate="20150909T043732Z">
        <seg>struct SomeStruct</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct TagDirective
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010228Z" creationid="hirofumiwakasugi" creationdate="20151010T010228Z">
        <seg>struct TagDirective
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct TimeZone</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045657Z" creationid="hirofumiwakasugi" creationdate="20151007T045657Z">
        <seg>struct TimeZone</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct Vector2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T083639Z" creationid="makenowjust" creationdate="20200502T083639Z">
        <seg>struct Vector2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>subtraction</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090020Z" creationid="makenowjust" creationdate="20200502T090020Z">
        <seg>減法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>subtraction &lt;g1&gt;and&lt;/g1&gt; assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100430Z" creationid="makenowjust" creationdate="20200502T100430Z">
        <seg>減法&lt;g1&gt;複合&lt;/g1&gt;代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>sum += channel.receive
end
puts sum # =&gt; 90</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081820Z" creationid="makenowjust" creationdate="20200518T081820Z">
        <seg>sum += channel.receive
end
puts sum # =&gt; 90</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>sum 1, 2, 3    #=&gt; 6
sum 1, 2, 3, 4.5 #=&gt; 10.5
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042107Z" creationid="hirofumiwakasugi" creationdate="20150907T042107Z">
        <seg>sum 1, 2, 3    #=&gt; 6
sum 1, 2, 3, 4.5 #=&gt; 10.5
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>super</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T103756Z" creationid="makenowjust" creationdate="20200504T103756Z">
        <seg>super</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>super # Same as: super(msg)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024800Z" creationid="hirofumiwakasugi" creationdate="20150910T024800Z">
        <seg>super # Same as: super(msg)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>super("another message")</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024800Z" creationid="hirofumiwakasugi" creationdate="20150910T024800Z">
        <seg>super("another message")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>t1 : t2
typeof(t3) # NamedTuple(x: Int32 | Nil, y: String | Bool)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T145441Z" creationid="makenowjust" creationdate="20200429T145441Z">
        <seg>t1 : t2
typeof(t3) # NamedTuple(x: Int32 | Nil, y: String | Bool)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>t1 : t2
typeof(t3) # Tuple(Int32 | Bool, String | Nil)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T145443Z" creationid="makenowjust" creationdate="20200429T145443Z">
        <seg>t1 : t2
typeof(t3) # Tuple(Int32 | Bool, String | Nil)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>t1 = {1, "hi"}   # Tuple(Int32, String)
t2 = {true, nil} # Tuple(Bool, Nil)

t3 = rand &lt; 0.5 ?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T145255Z" creationid="makenowjust" creationdate="20200429T145255Z">
        <seg>t1 = {1, "hi"}   # Tuple(Int32, String)
t2 = {true, nil} # Tuple(Bool, Nil)

t3 = rand &lt; 0.5 ? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>t1 = {x: 1, y: "hi"}   # Tuple(x: Int32, y: String)
t2 = {y: true, x: nil} # Tuple(y: Bool, x: Nil)

t3 = rand &lt; 0.5 ?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T145440Z" creationid="makenowjust" creationdate="20200429T145440Z">
        <seg>t1 = {x: 1, y: "hi"}   # Tuple(x: Int32, y: String)
t2 = {y: true, x: nil} # Tuple(y: Bool, x: Nil)

t3 = rand &lt; 0.5 ? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the argument of a &lt;g1&gt;sizeof&lt;/g1&gt; expression</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T120022Z" creationid="makenowjust" creationdate="20200507T120022Z">
        <seg> &lt;g1&gt;sizeof&lt;/g1&gt; 式の引数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the argument of an &lt;g1&gt;as&lt;/g1&gt; expression</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T120016Z" creationid="makenowjust" creationdate="20200507T120016Z">
        <seg>&lt;g1&gt;as&lt;/g1&gt; 式の引数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the argument of an &lt;g1&gt;instance_sizeof&lt;/g1&gt; expression</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T120034Z" creationid="makenowjust" creationdate="20200507T120034Z">
        <seg>&lt;g1&gt;instance_sizeof&lt;/g1&gt; 式の引数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the argument of an &lt;g1&gt;is_a?&lt;/g1&gt; pseudo-call</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T120027Z" creationid="makenowjust" creationdate="20200507T120007Z">
        <seg>&lt;g1&gt;is_a?&lt;/g1&gt; 疑似メソッドの引数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the array referenced by &lt;g1&gt;array&lt;/g1&gt; is modified (element inside it is added) by &lt;g2&gt;object.array &lt;&lt; "foo"&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T173849Z" creationid="makenowjust" creationdate="20200505T173849Z">
        <seg>配列の参照の &lt;g1&gt;array&lt;/g1&gt; が &lt;g2&gt;object.array &lt;&lt; "foo"&lt;/g2&gt; によって変更され (要素が追加され) ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the reference to this new array was held only in the &lt;g1&gt;copy&lt;/g1&gt; of &lt;g2&gt;strukt&lt;/g2&gt;, but not in the original, so that's why the original &lt;g3&gt;strukt&lt;/g3&gt; only retained the result of the first statement, but not of the other two statements</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T174456Z" creationid="makenowjust" creationdate="20200505T174456Z">
        <seg>この新しい配列の参照は &lt;g2&gt;strukt&lt;/g2&gt; の&lt;g1&gt;コピー&lt;/g1&gt;が所持されていて、元のものは持っていません。そのため &lt;g3&gt;strukt&lt;/g3&gt; は最初の変更の影響のみを受けていて、残りの処理の影響を受けていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the_beatles = [</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100525Z" creationid="makenowjust" creationdate="20210324T100525Z">
        <seg>the_beatles = [</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>then_expression
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022842Z" creationid="hirofumiwakasugi" creationdate="20150903T022842Z">
        <seg>then_expression
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>then_expression
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022845Z" creationid="hirofumiwakasugi" creationdate="20150903T022845Z">
        <seg>then_expression
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>then_expression
end

# Can also be written as a suffix
close_door unless door_closed?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090541Z" creationid="makenowjust" creationdate="20200424T090541Z">
        <seg>then_expression
end

# このように後置して使うこともできる
close_door unless door_closed?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>this is also reflected in the original &lt;g1&gt;strukt&lt;/g1&gt; as it holds reference to the same array</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T173905Z" creationid="makenowjust" creationdate="20200505T173905Z">
        <seg>これは元の &lt;g1&gt;strukt&lt;/g1&gt; が参照しているものと同じ配列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>thrice do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024343Z" creationid="hirofumiwakasugi" creationdate="20150916T024343Z">
        <seg>thrice do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tmp
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052659Z" creationid="hirofumiwakasugi" creationdate="20150905T052659Z">
        <seg>tmp
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tmp
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101635Z" creationid="makenowjust" creationdate="20200424T101635Z">
        <seg>tmp
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tmp
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052622Z" creationid="hirofumiwakasugi" creationdate="20150905T052622Z">
        <seg>tmp
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>to_unsafe</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T082404Z" creationid="makenowjust" creationdate="20200512T082404Z">
        <seg>to_unsafe</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>toc</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T150844Z" creationid="makenowjust" creationdate="20210726T150844Z">
        <seg>toc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tool                     run a tool</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140115Z" creationid="hirofumiwakasugi" creationdate="20151009T140115Z">
        <seg>tool                     run a tool</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>total
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042106Z" creationid="hirofumiwakasugi" creationdate="20150907T042106Z">
        <seg>total
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>total
end

sum 1, 2, 3              # =&gt; 6
sum 1, 2, 3, initial: 10 # =&gt; 16</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T154317Z" creationid="makenowjust" creationdate="20200429T154317Z">
        <seg>total
end

sum 1, 2, 3              # =&gt; 6
sum 1, 2, 3, initial: 10 # =&gt; 16</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>total
end

sum 1, 2, 3              # Error, missing argument: initial
sum 1, 2, 3, initial: 10 # =&gt; 16</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T154423Z" creationid="makenowjust" creationdate="20200429T154423Z">
        <seg>total
end

sum 1, 2, 3              # Error, missing argument: initial
sum 1, 2, 3, initial: 10 # =&gt; 16</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>total
end

sum 1, 2, 3      # =&gt; 6
sum 1, 2, 3, 4.5 # =&gt; 10.5</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T154145Z" creationid="makenowjust" creationdate="20200429T154145Z">
        <seg>total
end

sum 1, 2, 3      # =&gt; 6
sum 1, 2, 3, 4.5 # =&gt; 10.5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>total += value</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042106Z" creationid="hirofumiwakasugi" creationdate="20150907T042106Z">
        <seg>total += value</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>total = 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042105Z" creationid="hirofumiwakasugi" creationdate="20150907T042105Z">
        <seg>total = 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>total = initial</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T154314Z" creationid="makenowjust" creationdate="20200429T154314Z">
        <seg>total = initial</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>transform(1) { |x| x + 1 } #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024144Z" creationid="hirofumiwakasugi" creationdate="20150916T024144Z">
        <seg>transform(1) { |x| x + 1 } #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075502Z" creationid="makenowjust" creationdate="20200516T075502Z">
        <seg>true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true  # A Bool that is true
false # A Bool that is false</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T001212Z" creationid="makenowjust" creationdate="20200414T001143Z">
        <seg>true  # 真の Bool 値
false # 偽の Bool 値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tuple = {1, "hello", 'x'} # Tuple(Int32, String, Char)
tuple[0]                  # =&gt; 1       (Int32)
tuple[1]                  # =&gt; "hello" (String)
tuple[2]                  # =&gt; 'x'     (Char)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T164922Z" creationid="makenowjust" creationdate="20200422T164922Z">
        <seg>tuple = {1, "hello", 'x'} # Tuple(Int32, String, Char)
tuple[0]                  # =&gt; 1       (Int32)
tuple[1]                  # =&gt; "hello" (String)
tuple[2]                  # =&gt; 'x'     (Char)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tuple = {name: "Crystal", year: 2011} # NamedTuple(name: String, year: Int32)
tuple[:name]                          # =&gt; "Crystal" (String)
tuple[:year]                          # =&gt; 2011      (Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T165934Z" creationid="makenowjust" creationdate="20200422T165934Z">
        <seg>tuple = {name: "Crystal", year: 2011} # NamedTuple(name: String, year: Int32)
tuple[:name]                          # =&gt; "Crystal" (String)
tuple[:year]                          # =&gt; 2011      (Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>twice &amp;-&gt;say_hello
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025107Z" creationid="hirofumiwakasugi" creationdate="20150917T025107Z">
        <seg>twice &amp;-&gt;say_hello
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>twice &amp;-&gt;{ puts "Hello" }</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075531Z" creationid="makenowjust" creationdate="20200506T075531Z">
        <seg>twice &amp;-&gt;{ puts "Hello" }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>twice do</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T013506Z" creationid="hirofumiwakasugi" creationdate="20150916T013506Z">
        <seg>twice do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>twice do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T015729Z" creationid="hirofumiwakasugi" creationdate="20150916T015729Z">
        <seg>twice do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>twice { puts "Hello!" }
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T014758Z" creationid="hirofumiwakasugi" creationdate="20150916T014758Z">
        <seg>twice { puts "Hello!" }
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>twice { |i| i + 1 } #=&gt; 3
twice { |i| break "hello" } #=&gt; "hello"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024602Z" creationid="hirofumiwakasugi" creationdate="20150916T024602Z">
        <seg>twice { |i| i + 1 } #=&gt; 3
twice { |i| break "hello" } #=&gt; "hello"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>twice { |i| puts "Got #{i}" }</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184732Z" creationid="makenowjust" creationdate="20200505T184732Z">
        <seg>twice { |i| puts "Got #{i}" }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>twice() do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184259Z" creationid="makenowjust" creationdate="20200505T184259Z">
        <seg>twice() do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>typ</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063209Z" creationid="hirofumiwakasugi" creationdate="20150930T063209Z">
        <seg>typ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>type</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T084416Z" creationid="makenowjust" creationdate="20200512T084416Z">
        <seg>type</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>type MyInt = Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023153Z" creationid="hirofumiwakasugi" creationdate="20151008T023153Z">
        <seg>type MyInt = Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>type MyInt = Int32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T084504Z" creationid="makenowjust" creationdate="20200512T084504Z">
        <seg>type MyInt = Int32
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>type MyInt = Int32
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023124Z" creationid="hirofumiwakasugi" creationdate="20151008T023124Z">
        <seg>type MyInt = Int32
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>typeof</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T123249Z" creationid="makenowjust" creationdate="20200507T123249Z">
        <seg>typeof</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>typeof(1 + 2)  # =&gt; Int32
typeof(1, "a") # =&gt; (Int32 | String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T123302Z" creationid="makenowjust" creationdate="20200507T123302Z">
        <seg>typeof(1 + 2)  # =&gt; Int32
typeof(1, "a") # =&gt; (Int32 | String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>typeof(1, "a", 'a') # =&gt; (Int32 | String | Char)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T121512Z" creationid="makenowjust" creationdate="20200512T121512Z">
        <seg>typeof(1, "a", 'a') # =&gt; (Int32 | String | Char)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>typeof(raise "Empty input")           # =&gt; NoReturn
typeof(string || raise "Empty input") # =&gt; String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T142342Z" creationid="makenowjust" creationdate="20200430T142342Z">
        <seg>typeof(raise "Empty input")           # =&gt; NoReturn
typeof(string || raise "Empty input") # =&gt; String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>types                    show type of main variables</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072216Z" creationid="hirofumiwakasugi" creationdate="20150901T072216Z">
        <seg>types                    show type of main variables</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tz = C::TimeZone.new</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T082734Z" creationid="makenowjust" creationdate="20200512T082734Z">
        <seg>tz = C::TimeZone.new</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tz = C::TimeZone.new
change_it tz
tz.minutes_west #=&gt; 0
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T051843Z" creationid="hirofumiwakasugi" creationdate="20151007T051843Z">
        <seg>tz = C::TimeZone.new
change_it tz
tz.minutes_west #=&gt; 0
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tz = C::TimeZone.new
tz.minutes_west = 1
tz.minutes_west # =&gt; 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T082800Z" creationid="makenowjust" creationdate="20200512T082800Z">
        <seg>tz = C::TimeZone.new
tz.minutes_west = 1
tz.minutes_west # =&gt; 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tz = C::TimeZone.new minutes_west: 1, dst_time: 2
tz.minutes_west # =&gt; 1
tz.dst_time     # =&gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083054Z" creationid="makenowjust" creationdate="20200512T083054Z">
        <seg>tz = C::TimeZone.new minutes_west: 1, dst_time: 2
tz.minutes_west # =&gt; 1
tz.dst_time     # =&gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tz = uninitialized C::TimeZone
tz.minutes_west # =&gt; some garbage value</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T082758Z" creationid="makenowjust" creationdate="20200512T082758Z">
        <seg>tz = uninitialized C::TimeZone
tz.minutes_west # =&gt; some garbage value</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tz.minutes_west = 1
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T051842Z" creationid="hirofumiwakasugi" creationdate="20151007T051842Z">
        <seg>tz.minutes_west = 1
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tz.minutes_west = 1
end

tz = C::TimeZone.new
change_it tz
tz.minutes_west # =&gt; 0</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083056Z" creationid="makenowjust" creationdate="20200512T083056Z">
        <seg>tz.minutes_west = 1
end

tz = C::TimeZone.new
change_it tz
tz.minutes_west # =&gt; 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>union</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083256Z" creationid="makenowjust" creationdate="20200512T083256Z">
        <seg>union</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>union IntOrFloat</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052210Z" creationid="hirofumiwakasugi" creationdate="20151007T052210Z">
        <seg>union IntOrFloat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>unless</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090401Z" creationid="makenowjust" creationdate="20200424T090401Z">
        <seg>unless</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>unless some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090502Z" creationid="makenowjust" creationdate="20200424T090502Z">
        <seg>unless some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>until</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T100933Z" creationid="makenowjust" creationdate="20200424T100933Z">
        <seg>until</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>until some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101047Z" creationid="makenowjust" creationdate="20200424T101047Z">
        <seg>until some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>url: "pkg+http://pkg.FreeBSD.org/${ABI}/latest"
}
{% endhighlight ucl %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111152Z" creationid="makenowjust" creationdate="20200518T111152Z">
        <seg>url: "pkg+http://pkg.FreeBSD.org/${ABI}/latest"
}
{% endhighlight ucl %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>user_input = "hello; rm -rf *"
`echo #{user_input}`</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T173139Z" creationid="makenowjust" creationdate="20200422T173139Z">
        <seg>user_input = "hello; rm -rf *"
`echo #{user_input}`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>user_input = "hello; rm -rf *"
process = Process.new("echo", [user_input], output: Process::Redirect::Pipe)
process.output.gets_to_end # =&gt; "hello; rm -rf *"
process.wait.success?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T173608Z" creationid="makenowjust" creationdate="20200422T173320Z">
        <seg>user_input = "hello; rm -rf *"
process = Process.new("echo", [user_input], output: Process::Redirect::Pipe)
process.output.gets_to_end # =&gt; "hello; rm -rf *"
process.wait.success?      </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>v1 = Vector2.new(1, 2)
-v1                    #=&gt; Vector2(@x=-1, @y=-2)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025729Z" creationid="hirofumiwakasugi" creationdate="20150909T025729Z">
        <seg>v1 = Vector2.new(1, 2)
-v1                    #=&gt; Vector2(@x=-1, @y=-2)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>v1 = Vector2.new(1, 2)
v2 = Vector2.new(3, 4)
v1 + v2               #=&gt; Vector2(@x=4, @y=6)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025223Z" creationid="hirofumiwakasugi" creationdate="20150909T025223Z">
        <seg>v1 = Vector2.new(1, 2)
v2 = Vector2.new(3, 4)
v1 + v2               #=&gt; Vector2(@x=4, @y=6)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>v1 = yield 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023506Z" creationid="hirofumiwakasugi" creationdate="20150916T023506Z">
        <seg>v1 = yield 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>v2 = yield 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023507Z" creationid="hirofumiwakasugi" creationdate="20150916T023507Z">
        <seg>v2 = yield 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>value # =&gt; "bar"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T191910Z" creationid="makenowjust" creationdate="20200505T191910Z">
        <seg>value # =&gt; "bar"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>value + amount
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T161418Z" creationid="makenowjust" creationdate="20200501T161418Z">
        <seg>value + amount
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>value + by
end

def increment(value, by amount)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200501T161408Z" creationid="makenowjust" creationdate="20200501T161408Z">
        <seg>value + by
end

def increment(value, by amount)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>value = U::IntOrFloat.new</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083340Z" creationid="makenowjust" creationdate="20200512T083340Z">
        <seg>value = U::IntOrFloat.new</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>value = U::IntOrFloat.new
change_it value
value.some_int #=&gt; 0
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052424Z" creationid="hirofumiwakasugi" creationdate="20151007T052424Z">
        <seg>value = U::IntOrFloat.new
change_it value
value.some_int #=&gt; 0
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>value = U::IntOrFloat.new
value.some_int = 1
value.some_int   # =&gt; 1
value.some_float # =&gt; 4.94066e-324</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083402Z" creationid="makenowjust" creationdate="20200512T083402Z">
        <seg>value = U::IntOrFloat.new
value.some_int = 1
value.some_int   # =&gt; 1
value.some_float # =&gt; 4.94066e-324</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>value = rand &lt; 0.5 ?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T082845Z" creationid="makenowjust" creationdate="20200512T120805Z">
        <seg>value = rand &lt; 0.5 ? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>value = twice do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190530Z" creationid="makenowjust" creationdate="20200505T190530Z">
        <seg>value = twice do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>value = twice { break }
value # =&gt; nil</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190640Z" creationid="makenowjust" creationdate="20200505T190640Z">
        <seg>value = twice { break }
value # =&gt; nil</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>value = uninitialized U::IntOrFloat
value.some_int # =&gt; some garbage value</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083356Z" creationid="makenowjust" creationdate="20200512T083356Z">
        <seg>value = uninitialized U::IntOrFloat
value.some_int # =&gt; 何かゴミの値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>value.some_int = 1
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052423Z" creationid="hirofumiwakasugi" creationdate="20151007T052423Z">
        <seg>value.some_int = 1
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>value.some_int = 1
end

value = U::IntOrFloat.new
change_it value
value.some_int # =&gt; 0</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T083408Z" creationid="makenowjust" creationdate="20200512T083408Z">
        <seg>value.some_int = 1
end

value = U::IntOrFloat.new
change_it value
value.some_int # =&gt; 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>values = twice { break 1, 2 }
values # =&gt; {1, 2}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190606Z" creationid="makenowjust" creationdate="20200505T190606Z">
        <seg>values = twice { break 1, 2 }
values # =&gt; {1, 2}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>var = 1
# At this point 'var' is an Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T052142Z" creationid="hirofumiwakasugi" creationdate="20150902T052142Z">
        <seg>var = 1
# At this point 'var' is an Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>variable assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T094458Z" creationid="makenowjust" creationdate="20200502T094458Z">
        <seg>変数への代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>vendor</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T075528Z" creationid="makenowjust" creationdate="20200516T075528Z">
        <seg>vendor</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>verbatim</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220345Z" creationid="makenowjust" creationdate="20200509T220345Z">
        <seg>verbatim</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>version, --version, -v   show version

Run a command followed by --help to see command specific information, ex:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T080704Z" creationid="makenowjust" creationdate="20200516T080704Z">
        <seg>version, --version, -v   show version

Run a command followed by --help to see command specific information, ex:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>we get:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T055924Z" creationid="hirofumiwakasugi" creationdate="20150912T055916Z">
        <seg>すると、結果は以下となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>we've declared &lt;g1&gt;@arr&lt;/g1&gt; as type &lt;g2&gt;Array(Foo)&lt;/g2&gt; so we may be tempted to think that we can start putting &lt;g3&gt;Bar&lt;/g3&gt;s in there.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200504T105436Z" creationid="makenowjust" creationdate="20200504T105436Z">
        <seg>&lt;g1&gt;@arr&lt;/g1&gt; を &lt;g2&gt;Array(Foo)&lt;/g2&gt; として宣言したので、このインスタンス変数に対して &lt;g3&gt;Bar&lt;/g3&gt; の配列を代入できるように感じます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>when :red</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T012133Z" creationid="hirofumiwakasugi" creationdate="20150916T012133Z">
        <seg>when :red</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>when &lt;g1&gt;strukt&lt;/g1&gt; is passed to &lt;g2&gt;modify&lt;/g2&gt;, a &lt;g3&gt;copy&lt;/g3&gt; of the &lt;g4&gt;strukt&lt;/g4&gt; is passed with the reference to array inside it</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T173807Z" creationid="makenowjust" creationdate="20200505T173807Z">
        <seg>&lt;g1&gt;strukt&lt;/g1&gt; を &lt;g2&gt;modify&lt;/g2&gt; の引数にしたとき、配列への参照を内部に持った &lt;g4&gt;strukt&lt;/g4&gt; の&lt;g3&gt;コピー&lt;/g3&gt;が実際には渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>when Color::Red</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011857Z" creationid="hirofumiwakasugi" creationdate="20150916T011857Z">
        <seg>when Color::Red</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>when {{klass.id}}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221657Z" creationid="makenowjust" creationdate="20200509T221657Z">
        <seg>when {{klass.id}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>which might be a bit cleaner depending on your taste.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T090010Z" creationid="makenowjust" creationdate="20200427T090010Z">
        <seg>こちらの方が良いと感じる人もいるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>while</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094511Z" creationid="makenowjust" creationdate="20200424T094511Z">
        <seg>while</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>while a &lt; 10</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055808Z" creationid="hirofumiwakasugi" creationdate="20150913T055808Z">
        <seg>while a &lt; 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>while i &lt; self</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T032023Z" creationid="hirofumiwakasugi" creationdate="20150916T032023Z">
        <seg>while i &lt; self</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>while line = gets</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081813Z" creationid="makenowjust" creationdate="20200518T081813Z">
        <seg>while line = gets</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>while line = socket.gets</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T081810Z" creationid="makenowjust" creationdate="20200518T081810Z">
        <seg>while line = socket.gets</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>while some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094710Z" creationid="makenowjust" creationdate="20200424T094710Z">
        <seg>while some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>while true</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095151Z" creationid="makenowjust" creationdate="20200424T095151Z">
        <seg>while true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>width=device-width, initial-scale=1.0</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083841Z" creationid="makenowjust" creationdate="20200516T083841Z">
        <seg>width=device-width, initial-scale=1.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>with ... yield</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T191441Z" creationid="makenowjust" creationdate="20200505T191441Z">
        <seg>with ... yield</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>with self yield</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030942Z" creationid="hirofumiwakasugi" creationdate="20150916T030942Z">
        <seg>with self yield</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>with to_s  18.15M ( 55.09ns) (± 7.99%)  4.25× slower</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T090921Z" creationid="makenowjust" creationdate="20200506T090921Z">
        <seg>with to_s  18.15M ( 55.09ns) (± 7.99%)  4.25× slower</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>word = arg[1]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T191539Z" creationid="makenowjust" creationdate="20200505T191539Z">
        <seg>word = arg[1]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>world</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T063555Z" creationid="hirofumiwakasugi" creationdate="20160204T062353Z">
        <seg>world</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>world" # =&gt; "hello\n      world"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194215Z" creationid="makenowjust" creationdate="20200419T194215Z">
        <seg>world" # =&gt; "hello\n      world"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>world" # same as "hello\n      world"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T081348Z" creationid="hirofumiwakasugi" creationdate="20150901T081305Z">
        <seg>world" # "hello\n      world" と同じ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>world, \</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104118Z" creationid="hirofumiwakasugi" creationdate="20150901T104118Z">
        <seg>world, \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wrap_foo do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025545Z" creationid="hirofumiwakasugi" creationdate="20150917T025545Z">
        <seg>wrap_foo do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wrapper = IntWrapper.new(1)
C.exit(wrapper) # wrapper is not an Int32, but its to_unsafe</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044815Z" creationid="hirofumiwakasugi" creationdate="20151005T044627Z">
        <seg>wrapper = IntWrapper.new(1)
C.exit(wrapper) # wrapper は Int32 ではないが、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wrapping addition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090013Z" creationid="makenowjust" creationdate="20200502T090013Z">
        <seg>加法 (オーバーフローの可能性がある)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wrapping addition &lt;g1&gt;and&lt;/g1&gt; assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100417Z" creationid="makenowjust" creationdate="20200502T100119Z">
        <seg>オーバーフローの起こる加法の&lt;g1&gt;複合&lt;/g1&gt;代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wrapping exponentiation</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085512Z" creationid="makenowjust" creationdate="20200502T085512Z">
        <seg>指数 (オーバーフローの可能性がある)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wrapping multiplication</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085608Z" creationid="makenowjust" creationdate="20200502T085608Z">
        <seg>乗法 (オーバーフローの可能性がある)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wrapping multiplication &lt;g1&gt;and&lt;/g1&gt; assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100519Z" creationid="makenowjust" creationdate="20200502T100519Z">
        <seg>オーバーフローの起こる&lt;g1&gt;複合&lt;/g1&gt;代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wrapping negative</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085314Z" creationid="makenowjust" creationdate="20200502T085314Z">
        <seg>負の数にする (オーバーフローの可能性がある)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wrapping positive</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085253Z" creationid="makenowjust" creationdate="20200502T085253Z">
        <seg>正の数にする (オーバフローの可能性がある)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wrapping subtraction</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T090209Z" creationid="makenowjust" creationdate="20200502T090209Z">
        <seg>減法 (オーバーフローの可能性がある)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wrapping subtraction &lt;g1&gt;and&lt;/g1&gt; assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T100450Z" creationid="makenowjust" creationdate="20200502T100450Z">
        <seg>オーバーフローの起こる減法&lt;g1&gt;複合&lt;/g1&gt;代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x * y</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021153Z" creationid="hirofumiwakasugi" creationdate="20150904T021153Z">
        <seg>x * y</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x + 1
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022126Z" creationid="hirofumiwakasugi" creationdate="20150902T022126Z">
        <seg>x + 1
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x + 1
end

proc = -&gt;plus_one(Int32)
proc.call(41) # =&gt; 42</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172026Z" creationid="makenowjust" creationdate="20200422T172026Z">
        <seg>x + 1
end

proc = -&gt;plus_one(Int32)
proc.call(41) # =&gt; 42</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x + y</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042924Z" creationid="hirofumiwakasugi" creationdate="20150907T042924Z">
        <seg>x + y</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x + y
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T015153Z" creationid="hirofumiwakasugi" creationdate="20150904T015153Z">
        <seg>x + y
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x + y
end

# Error: no overload matches 'restricted_add' with types Six, Int32
restricted_add Six.new, 10</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T160633Z" creationid="makenowjust" creationdate="20200429T160633Z">
        <seg>x + y
end

# Error: no overload matches 'restricted_add' with types Six, Int32
restricted_add Six.new, 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x + y
end

# Invokes the add method in the program
add(1, 2) # =&gt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T100300Z" creationid="makenowjust" creationdate="20200427T095936Z">
        <seg>x + y
end

# プログラムでメソッドを呼び出す
add(1, 2) # =&gt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x + y
end

# OK
add Six.new, 10

# add method with type restrictions
def restricted_add(x : Number, y : Number)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T160630Z" creationid="makenowjust" creationdate="20200429T160630Z">
        <seg>x + y
end

# OK
add Six.new, 10

# 型制約を持つ add メソッド
def restricted_add(x : Number, y : Number)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x + y
end

# Ok
add 1, 2

# Error: no overload matches 'add' with types Bool, Bool
add true, false</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T160047Z" creationid="makenowjust" creationdate="20200429T160047Z">
        <seg>x + y
end

# Ok
add 1, 2

# Error: no overload matches 'add' with types Bool, Bool
add true, false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x + y
end

add true, false</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T160118Z" creationid="makenowjust" creationdate="20200429T160118Z">
        <seg>x + y
end

add true, false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x + y
end

adder = -&gt;add(Int32, Int32)
adder.call(1, 2) # =&gt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T074428Z" creationid="makenowjust" creationdate="20200506T074428Z">
        <seg>x + y
end

adder = -&gt;add(Int32, Int32)
adder.call(1, 2) # =&gt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x + y
end

class Foo</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T100355Z" creationid="makenowjust" creationdate="20200427T100355Z">
        <seg>x + y
end

class Foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x + y
end

tuple = {1, 2}
foo *tuple # =&gt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T154936Z" creationid="makenowjust" creationdate="20200429T154936Z">
        <seg>x + y
end

tuple = {1, 2}
foo *tuple # =&gt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x + y # error: undefined local variable or method 'x'
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021550Z" creationid="hirofumiwakasugi" creationdate="20150904T021509Z">
        <seg>x + y # error: undefined local variable or method 'x'
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x + y # error: undefined local variable or method 'x'
end

add(2)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T101003Z" creationid="makenowjust" creationdate="20200427T101003Z">
        <seg>x + y # error: undefined local variable or method 'x'
end

add(2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x - y</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021414Z" creationid="hirofumiwakasugi" creationdate="20150904T021414Z">
        <seg>x - y</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x - y
end

tuple = {y: 3, x: 10}
foo **tuple # =&gt; 7</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200429T155214Z" creationid="makenowjust" creationdate="20200429T155214Z">
        <seg>x - y
end

tuple = {y: 3, x: 10}
foo **tuple # =&gt; 7</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = "hello"
end
x # : Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061614Z" creationid="hirofumiwakasugi" creationdate="20160204T061614Z">
        <seg>x = "hello"
end
x # : Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = "hello"
end
x # : Int32 | String

x = 'a'
x # : Char</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T081115Z" creationid="makenowjust" creationdate="20200506T081115Z">
        <seg>x = "hello"
end
x # : Int32 | String

x = 'a'
x # : Char</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = "hello"
end
x # : Int32 | String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061611Z" creationid="hirofumiwakasugi" creationdate="20160204T061611Z">
        <seg>x = "hello"
end
x # : Int32 | String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = "hello"
end
x # :: Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T055059Z" creationid="hirofumiwakasugi" creationdate="20150918T055059Z">
        <seg>x = "hello"
end
x # :: Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = "hello"
end
x # :: Int32 | String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T054338Z" creationid="hirofumiwakasugi" creationdate="20150918T054338Z">
        <seg>x = "hello"
end
x # :: Int32 | String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 'a'
x # : Char
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061617Z" creationid="hirofumiwakasugi" creationdate="20160204T061617Z">
        <seg>x = 'a'
x # : Char
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 'a'
x # : Int32 | String | Char
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061619Z" creationid="hirofumiwakasugi" creationdate="20160204T061619Z">
        <seg>x = 'a'
x # : Int32 | String | Char
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 'a'
x # :: Char
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T055102Z" creationid="hirofumiwakasugi" creationdate="20150918T055102Z">
        <seg>x = 'a'
x # :: Char
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 'a'
x # :: Int32 | String | Char
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T055221Z" creationid="hirofumiwakasugi" creationdate="20150918T055221Z">
        <seg>x = 'a'
x # :: Int32 | String | Char
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T053728Z" creationid="hirofumiwakasugi" creationdate="20150918T053728Z">
        <seg>x = 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 0
dont_update_x # outputs 1
x #=&gt; 0
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T020021Z" creationid="hirofumiwakasugi" creationdate="20151002T020021Z">
        <seg>x = 0
dont_update_x # 1を出力
x #=&gt; 0
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 0
proc = -&gt;(i : Int32) { x += i }
proc = some_proc(&amp;proc)
proc.call(1)  #=&gt; 1
proc.call(10) #=&gt; 11
x #=&gt; 11
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061639Z" creationid="hirofumiwakasugi" creationdate="20150918T061639Z">
        <seg>x = 0
proc = -&gt;(i : Int32) { x += i }
proc = some_proc(&amp;proc)
proc.call(1)  #=&gt; 1
proc.call(10) #=&gt; 11
x #=&gt; 11
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 0
proc = -&gt;{ x += 1; x }
proc.call # =&gt; 1
proc.call # =&gt; 2
x         # =&gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T080509Z" creationid="makenowjust" creationdate="20200506T080509Z">
        <seg>x = 0
proc = -&gt;{ x += 1; x }
proc.call # =&gt; 1
proc.call # =&gt; 2
x         # =&gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 0
update_x
x #=&gt; 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T015558Z" creationid="hirofumiwakasugi" creationdate="20151002T015558Z">
        <seg>x = 0
update_x
x #=&gt; 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T090851Z" creationid="makenowjust" creationdate="20200506T090851Z">
        <seg>x = 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 1

def add(y)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T101251Z" creationid="makenowjust" creationdate="20200427T101251Z">
        <seg>x = 1

def add(y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 1
-&gt;{ x = "hello" }</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T060106Z" creationid="hirofumiwakasugi" creationdate="20150918T060106Z">
        <seg>x = 1
-&gt;{ x = "hello" }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 1
capture { x = "hello" }</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T055220Z" creationid="hirofumiwakasugi" creationdate="20150918T055220Z">
        <seg>x = 1
capture { x = "hello" }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 1
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T015558Z" creationid="hirofumiwakasugi" creationdate="20151002T015558Z">
        <seg>x = 1
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 1
end

x = 0
update_x
x # =&gt; 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T225646Z" creationid="makenowjust" creationdate="20200509T225646Z">
        <seg>x = 1
end

x = 0
update_x
x # =&gt; 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 1
foo do</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T054337Z" creationid="hirofumiwakasugi" creationdate="20150918T054337Z">
        <seg>x = 1
foo do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = uninitialized Int32
x # =&gt; some random value, garbage, unreliable</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T020710Z" creationid="makenowjust" creationdate="20200511T020710Z">
        <seg>x = uninitialized Int32
x # =&gt; some random value, garbage, unreliable</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x, y, z = 1,</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200430T144446Z" creationid="makenowjust" creationdate="20200430T144446Z">
        <seg>x, y, z = 1,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x.report("class") { PointClass.new(1, 2) }</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091359Z" creationid="makenowjust" creationdate="20200506T091359Z">
        <seg>x.report("class") { PointClass.new(1, 2) }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x.report("struct") { PointStruct.new(1, 2) }
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091255Z" creationid="makenowjust" creationdate="20200506T091255Z">
        <seg>x.report("struct") { PointStruct.new(1, 2) }
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x.report("struct") { PointStruct.new(1, 2) }
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T100253Z" creationid="makenowjust" creationdate="20210324T100253Z">
        <seg>x.report("struct") { PointStruct.new(1, 2) }
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x.report("with to_s") do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T090911Z" creationid="makenowjust" creationdate="20200506T090911Z">
        <seg>x.report("with to_s") do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x.report("without to_s") do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T090905Z" creationid="makenowjust" creationdate="20200506T090905Z">
        <seg>x.report("without to_s") do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x.to_s.upcase
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T212543Z" creationid="makenowjust" creationdate="20200413T212543Z">
        <seg>  x.to_s.upcase
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>y = 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T090856Z" creationid="makenowjust" creationdate="20200506T090856Z">
        <seg>y = 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>y = 2
X.callback -&gt;(x) { x + y } # Error: can't send closure to C function</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T085706Z" creationid="makenowjust" creationdate="20200512T085706Z">
        <seg>y = 2
X.callback -&gt;(x) { x + y } # Error: can't send closure to C function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yes</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T085231Z" creationid="makenowjust" creationdate="20200502T085231Z">
        <seg>yes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T013505Z" creationid="hirofumiwakasugi" creationdate="20150916T013505Z">
        <seg>yield</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T013506Z" creationid="hirofumiwakasugi" creationdate="20150916T013506Z">
        <seg>yield
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield
end

block do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095959Z" creationid="makenowjust" creationdate="20200424T095959Z">
        <seg>yield
end

block do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield
end

proc = capture { puts "Hello" }
twice &amp;proc</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075503Z" creationid="makenowjust" creationdate="20200506T075503Z">
        <seg>yield
end

proc = capture { puts "Hello" }
twice &amp;proc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield
end

twice do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T183853Z" creationid="makenowjust" creationdate="20200505T183853Z">
        <seg>yield
end

twice do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield
end

twice do |i| # Error: too many block arguments
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184827Z" creationid="makenowjust" creationdate="20200505T184827Z">
        <seg>yield
end

twice do |i| # Error: too many block arguments
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield
end

twice do |i| # Error: too many block parameters
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094456Z" creationid="makenowjust" creationdate="20210324T094456Z">
        <seg>yield
end

twice do |i| # Error: too many block parameters
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield
end

x = 1
foo do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T080717Z" creationid="makenowjust" creationdate="20200506T080717Z">
        <seg>yield
end

x = 1
foo do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T014713Z" creationid="hirofumiwakasugi" creationdate="20150916T014713Z">
        <seg>yield
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T015728Z" creationid="hirofumiwakasugi" creationdate="20150916T015728Z">
        <seg>yield 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 1
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025543Z" creationid="hirofumiwakasugi" creationdate="20150917T025543Z">
        <seg>yield 1
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 1
end

def wrap_foo</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075600Z" creationid="makenowjust" creationdate="20200506T075600Z">
        <seg>yield 1
end

def wrap_foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 1
end

def wrap_foo(&amp;block : Int32 -&gt; _)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T075652Z" creationid="makenowjust" creationdate="20200506T075652Z">
        <seg>yield 1
end

def wrap_foo(&amp;block : Int32 -&gt; _)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 1, 'a'</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023033Z" creationid="hirofumiwakasugi" creationdate="20150916T023033Z">
        <seg>yield 1, 'a'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 1, 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094541Z" creationid="makenowjust" creationdate="20210324T094541Z">
        <seg>yield 1, 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 1, 2, 3
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022217Z" creationid="hirofumiwakasugi" creationdate="20150916T022217Z">
        <seg>yield 1, 2, 3
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 1, 2, 3
end

many do |x, y, z|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184745Z" creationid="makenowjust" creationdate="20200505T184745Z">
        <seg>yield 1, 2, 3
end

many do |x, y, z|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 1, 2, 3
end

many do |x, y|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184755Z" creationid="makenowjust" creationdate="20200505T184755Z">
        <seg>yield 1, 2, 3
end

many do |x, y|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024341Z" creationid="hirofumiwakasugi" creationdate="20150916T024341Z">
        <seg>yield 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 2
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T015728Z" creationid="hirofumiwakasugi" creationdate="20150916T015728Z">
        <seg>yield 2
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 2
end

twice do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184717Z" creationid="makenowjust" creationdate="20200505T184717Z">
        <seg>yield 2
end

twice do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 2
end

twice { |i| i + 1 }         # =&gt; 3
twice { |i| break "hello" } # =&gt; "hello"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T190323Z" creationid="makenowjust" creationdate="20200505T190323Z">
        <seg>yield 2
end

twice { |i| i + 1 }         # =&gt; 3
twice { |i| break "hello" } # =&gt; "hello"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 2, 4</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094541Z" creationid="makenowjust" creationdate="20210324T094541Z">
        <seg>yield 2, 4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 2, nil
end

some do |first, second|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T184831Z" creationid="makenowjust" creationdate="20200505T184831Z">
        <seg>yield 2, nil
end

some do |first, second|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024342Z" creationid="hirofumiwakasugi" creationdate="20150916T024342Z">
        <seg>yield 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 3, 6
end

pairs do |_, second|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210324T094542Z" creationid="makenowjust" creationdate="20210324T094542Z">
        <seg>yield 3, 6
end

pairs do |_, second|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield i</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T032023Z" creationid="hirofumiwakasugi" creationdate="20150916T032023Z">
        <seg>yield i</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield true, "hello"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023034Z" creationid="hirofumiwakasugi" creationdate="20150916T023034Z">
        <seg>yield true, "hello"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield value</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185811Z" creationid="makenowjust" creationdate="20200505T185811Z">
        <seg>yield の値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield value
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024143Z" creationid="hirofumiwakasugi" creationdate="20150916T024143Z">
        <seg>yield value
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield value
end

transform(1) { |x| x + 1 } # =&gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T185951Z" creationid="makenowjust" creationdate="20200505T185951Z">
        <seg>yield value
end

transform(1) { |x| x + 1 } # =&gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield x</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025544Z" creationid="hirofumiwakasugi" creationdate="20150917T025544Z">
        <seg>yield x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>you can have it like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085901Z" creationid="makenowjust" creationdate="20200427T085711Z">
        <seg>このようにすることができることも意味しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>you may need to install OpenSSL and link pkg-config to OpenSSL:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112128Z" creationid="makenowjust" creationdate="20200518T112128Z">
        <seg>その場合 OpenSSL をインストールして pkg-config にその OpenSSL を伝える必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>you need to reinstall the command line tools and then select the default active toolchain:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061307Z" creationid="hirofumiwakasugi" creationdate="20160204T061241Z">
        <seg>この場合、Command Line Tools を再インストールした後、デフォルトのツールチェインを選択する必要がありあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035525Z" creationid="makenowjust" creationdate="20200420T035525Z">
        <seg>{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{ |string| line.includes?(string) }</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200506T091011Z" creationid="makenowjust" creationdate="20200506T091011Z">
        <seg>{ |string| line.includes?(string) }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{"one" =&gt; 1, "two" =&gt; 2}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T175322Z" creationid="makenowjust" creationdate="20200420T175322Z">
        <seg>{"one" =&gt; 1, "two" =&gt; 2}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{"this is a key": 1}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T170054Z" creationid="makenowjust" creationdate="20200422T170054Z">
        <seg>{"this is a key": 1}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% @def.args %}     # =&gt; [arg1, arg2]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220116Z" creationid="makenowjust" creationdate="20200509T220116Z">
        <seg>{% @def.args %}     # =&gt; [arg1, arg2]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% @def.name %}     # =&gt; boo</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220115Z" creationid="makenowjust" creationdate="20200509T220115Z">
        <seg>{% @def.name %}     # =&gt; boo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% @def.receiver %} # =&gt; Foo</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220115Z" creationid="makenowjust" creationdate="20200509T220115Z">
        <seg>{% @def.receiver %} # =&gt; Foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% assign articles = site.posts | where_exp: "item","item.release_notes != true" %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T103010Z" creationid="makenowjust" creationdate="20200516T081643Z">
        <seg>{% assign articles = site.posts | where_exp: 'item','item.release_notes != true' %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% assign articles = site.posts | where_exp: "item","item.release_notes != true" %} {% for post in articles limit: 3 %} {% include blog_row.html post=post %} {% endfor %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T102705Z" creationid="makenowjust" creationdate="20200413T222643Z">
        <seg>{% assign articles = site.posts | where_exp: 'item','item.release_notes != true' %} {% for post in articles limit: 3 %} {% include blog_row.html post=post %} {% endfor %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% assign releases = site.posts | where: "release_notes",true %} {% for post in releases %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T103017Z" creationid="makenowjust" creationdate="20200516T081656Z">
        <seg>{% assign releases = site.posts | where: 'release_notes',true %} {% for post in releases %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% assign releases = site.posts | where: "release_notes",true %} {% for post in releases limit: 10 %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T102637Z" creationid="makenowjust" creationdate="20200413T222650Z">
        <seg>{% assign releases = site.posts | where: 'release_notes',true %} {% for post in releases limit: 10 %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% assign snapcraft_url = 'https://snapcraft.io/install/crystal/' | append: include.distro %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T113500Z" creationid="makenowjust" creationdate="20200518T113500Z">
        <seg>{% assign snapcraft_url = 'https://snapcraft.io/install/crystal/' | append: include.distro %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% begin %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221907Z" creationid="makenowjust" creationdate="20200509T221907Z">
        <seg>{% begin %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% css stylesheet %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093054Z" creationid="makenowjust" creationdate="20200518T093054Z">
        <seg>{% css stylesheet %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% css stylesheet %} &lt;l0&gt; &lt;l1&gt; &lt;l2&gt; {% seo %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083840Z" creationid="makenowjust" creationdate="20200516T083840Z">
        <seg>{% css stylesheet %} &lt;l0&gt; &lt;l1&gt; &lt;l2&gt; {% seo %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% else %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035954Z" creationid="hirofumiwakasugi" creationdate="20151001T035954Z">
        <seg>{% else %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% else %}   {% endif %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T082811Z" creationid="makenowjust" creationdate="20200516T082811Z">
        <seg>{% else %}   {% endif %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% elsif content == 2 %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215029Z" creationid="makenowjust" creationdate="20200509T215029Z">
        <seg>{% elsif content == 2 %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% end %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035955Z" creationid="hirofumiwakasugi" creationdate="20151001T035955Z">
        <seg>{% end %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% end %}
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040353Z" creationid="hirofumiwakasugi" creationdate="20151001T040353Z">
        <seg>{% end %}
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% end %}
end

# This generates:
#
#     macro greeting_for_alice
#       {% if greeting == "hola" %}
#         "¡hola alice!"
#       {% else %}
#         "{{greeting.id}} alice"
#       {% end %}
#     end
#     macro greeting_for_bob
#       {% if greeting == "hola" %}
#         "¡hola bob!"
#       {% else %}
#         "{{greeting.id}} bob"
#       {% end %}
#     end
define_macros alice, bob

greeting_for_alice "hello" # =&gt; "hello alice"
greeting_for_bob "hallo"   # =&gt; "hallo bob"
greeting_for_alice "hej"   # =&gt; "hej alice"
greeting_for_bob "hola"    # =&gt; "¡hola bob!"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220341Z" creationid="makenowjust" creationdate="20200509T220341Z">
        <seg>{% end %}
end

# これは以下を生成します:
#
#     macro greeting_for_alice
#       {% if greeting == "hola" %}
#         "¡hola alice!"
#       {% else %}
#         "{{greeting.id}} alice"
#       {% end %}
#     end
#     macro greeting_for_bob
#       {% if greeting == "hola" %}
#         "¡hola bob!"
#       {% else %}
#         "{{greeting.id}} bob"
#       {% end %}
#     end
define_macros alice, bob

greeting_for_alice "hello" # =&gt; "hello alice"
greeting_for_bob "hallo"   # =&gt; "hallo bob"
greeting_for_alice "hej"   # =&gt; "hej alice"
greeting_for_bob "hola"    # =&gt; "¡hola bob!"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% end %}
end

# This generates:
#
#     macro greeting_for_alice
#       {% name = "alice" %}
#       {% if greeting == "hola" %}
#         "¡hola alice!"
#       {% else %}
#         "{{greeting.id}} alice"
#       {% end %}
#     end
#     macro greeting_for_bob
#       {% name = "bob" %}
#       {% if greeting == "hola" %}
#         "¡hola bob!"
#       {% else %}
#         "{{greeting.id}} bob"
#       {% end %}
#     end
define_macros alice, bob

greeting_for_alice "hello" # =&gt; "hello alice"
greeting_for_bob "hallo"   # =&gt; "hallo bob"
greeting_for_alice "hej"   # =&gt; "hej alice"
greeting_for_bob "hola"    # =&gt; "¡hola bob!"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220618Z" creationid="makenowjust" creationdate="20200509T220618Z">
        <seg>{% end %}
end

# 以下が生成されます。
#
#     macro greeting_for_alice
#       {% name = "alice" %}
#       {% if greeting == "hola" %}
#         "¡hola alice!"
#       {% else %}
#         "{{greeting.id}} alice"
#       {% end %}
#     end
#     macro greeting_for_bob
#       {% name = "bob" %}
#       {% if greeting == "hola" %}
#         "¡hola bob!"
#       {% else %}
#         "{{greeting.id}} bob"
#       {% end %}
#     end
define_macros alice, bob

greeting_for_alice "hello" # =&gt; "hello alice"
greeting_for_bob "hallo"   # =&gt; "hallo bob"
greeting_for_alice "hej"   # =&gt; "hej alice"
greeting_for_bob "hola"    # =&gt; "¡hola bob!"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% end %}
end

annotation_read

# Which would print
"0 = 1"
"1 = 2"
"2 = 3"
"3 = 4"
"4 = nil"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114227Z" creationid="makenowjust" creationdate="20200510T111133Z">
        <seg>{% end %}
end

annotation_read

# このように表示されます
"0 = 1"
"1 = 2"
"2 = 3"
"3 = 4"
"4 = nil"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% end %}
end

annotation_read

# Which would print
"0 = 1"
"1 = foo"
"2 = true"
"3 = 17.0"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114124Z" creationid="makenowjust" creationdate="20200510T111538Z">
        <seg>{% end %}
end

annotation_read

# このように表示されます
"0 = 1"
"1 = foo"
"2 = true"
"3 = 17.0"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% end %}
end

annotation_read

# Which would print
"Annotation 0 = foo"
"Annotation 1 = 123"
"Annotation 2 = 123"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T114142Z" creationid="makenowjust" creationdate="20200510T112649Z">
        <seg>{% end %}
end

annotation_read

# このように表示されます
"Annotation 0 = foo"
"Annotation 1 = 123"
"Annotation 2 = 123"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% end %}
end

define_constants(3)

PI_1 # =&gt; 3.14159...</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215213Z" creationid="makenowjust" creationdate="20200509T215213Z">
        <seg>{% end %}
end

define_constants(3)

PI_1 # =&gt; 3.14159...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% end %}
end

define_dummy_methods [foo, bar, baz]

foo # =&gt; 0
bar # =&gt; 1
baz # =&gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215245Z" creationid="makenowjust" creationdate="20200509T215245Z">
        <seg>{% end %}
end

define_dummy_methods [foo, bar, baz]

foo # =&gt; 0
bar # =&gt; 1
baz # =&gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% end %}
end

define_dummy_methods foo, bar, baz

foo # =&gt; 0
bar # =&gt; 1
baz # =&gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215353Z" creationid="makenowjust" creationdate="20200509T215353Z">
        <seg>{% end %}
end

define_dummy_methods foo, bar, baz

foo # =&gt; 0
bar # =&gt; 1
baz # =&gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% end %}
end

define_dummy_methods({foo: 10, bar: 20})
foo # =&gt; 10
bar # =&gt; 20</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215330Z" creationid="makenowjust" creationdate="20200509T215330Z">
        <seg>{% end %}
end

define_dummy_methods({foo: 10, bar: 20})
foo # =&gt; 10
bar # =&gt; 20</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% end %}
end

fresh_vars_sample a, b, c

# Sample output:
# Declaring: __temp_255
# Declaring: __temp_256
# Declaring: __temp_257
# __temp_255: 0
# __temp_256: 1
# __temp_257: 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T230105Z" creationid="makenowjust" creationdate="20200509T230105Z">
        <seg>{% end %}
end

fresh_vars_sample a, b, c

# 出力例:
# Declaring: __temp_255
# Declaring: __temp_256
# Declaring: __temp_257
# __temp_255: 0
# __temp_256: 1
# __temp_257: 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% end %}
end

generate_methods [foo, bar, baz]
foo #=&gt; 0
baz #=&gt; 2
bar # (compile-time error, `bar` undefined)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T200816Z" creationid="makenowjust" creationdate="20200413T200038Z">
        <seg>{% end %}
end

generate_methods [foo, bar, baz]
foo #=&gt; 0
baz #=&gt; 2
bar # (compile-time error, `bar` undefined){% endhighlight %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% end %}
end

new_test # =&gt; #&lt;SomeClass:0x5621a19ddf00 @name="Jim", @value=2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T110756Z" creationid="makenowjust" creationdate="20200510T110756Z">
        <seg>{% end %}
end

new_test # =&gt; #&lt;SomeClass:0x5621a19ddf00 @name="Jim", @value=2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% end %}
end
define_dummy_methods({foo: 10, bar: 20})
foo #=&gt; 10
bar #=&gt; 20
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040430Z" creationid="hirofumiwakasugi" creationdate="20151001T040430Z">
        <seg>{% end %}
end
define_dummy_methods({foo: 10, bar: 20})
foo #=&gt; 10
bar #=&gt; 20
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% endfor %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222901Z" creationid="makenowjust" creationdate="20200413T222901Z">
        <seg>{% endfor %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T101730Z" creationid="makenowjust" creationdate="20200518T101730Z">
        <seg>{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% for ann, idx in @def.annotations(MyAnnotation) %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T112644Z" creationid="makenowjust" creationdate="20200510T112644Z">
        <seg>{% for ann, idx in @def.annotations(MyAnnotation) %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% for i in (1..count) %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215208Z" creationid="makenowjust" creationdate="20200509T215208Z">
        <seg>{% for i in (1..count) %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% for idx in [0, 1, 2, 3, 4] %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T111130Z" creationid="makenowjust" creationdate="20200510T111130Z">
        <seg>{% for idx in [0, 1, 2, 3, 4] %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% for item in site.data.install %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T064514Z" creationid="makenowjust" creationdate="20200518T064514Z">
        <seg>{% for item in site.data.install %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% for ivar in @type.instance_vars %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T112320Z" creationid="makenowjust" creationdate="20200510T112320Z">
        <seg>{% for ivar in @type.instance_vars %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% for key, value in hash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040429Z" creationid="hirofumiwakasugi" creationdate="20151001T040429Z">
        <seg>{% for key, value in hash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% for klass in [Int32, String] %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T221908Z" creationid="makenowjust" creationdate="20200509T221908Z">
        <seg>{% for klass in [Int32, String] %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% for name in names %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220316Z" creationid="makenowjust" creationdate="20200509T220316Z">
        <seg>{% for name in names %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% for name, index in ["foo", "bar", "baz"] %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215338Z" creationid="makenowjust" creationdate="20200509T215338Z">
        <seg>{% for name, index in ["foo", "bar", "baz"] %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% for name, index in names %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040351Z" creationid="hirofumiwakasugi" creationdate="20151001T040351Z">
        <seg>{% for name, index in names %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% for post in articles %} {% include blog_row.html post=post %} {% endfor %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T081644Z" creationid="makenowjust" creationdate="20200516T081644Z">
        <seg>{% for post in articles %} {% include blog_row.html post=post %} {% endfor %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% for sp in site.data.sponsors %} {% capture sponsor_class %}level-{{sp.level}} sponsor{% endcapture %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T082805Z" creationid="makenowjust" creationdate="20200516T082805Z">
        <seg>{% for sp in site.data.sponsors %} {% capture sponsor_class %}level-{{sp.level}} sponsor{% endcapture %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% for value in VALUES %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T041454Z" creationid="hirofumiwakasugi" creationdate="20151001T041454Z">
        <seg>{% for value in VALUES %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% for value, idx in @def.annotation(MyAnnotation).args %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T111524Z" creationid="makenowjust" creationdate="20200510T111524Z">
        <seg>{% for value, idx in @def.annotation(MyAnnotation).args %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
# equery u dev-lang/crystal
[ Legend : U - final flag setting for installation]
[        : I - package is installed with flag     ]
[ Colors : set, unset                             ]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111614Z" creationid="makenowjust" creationdate="20200518T111614Z">
        <seg>{% highlight bash %}
# equery u dev-lang/crystal
[ Legend : U - final flag setting for installation]
[        : I - package is installed with flag     ]
[ Colors : set, unset                             ]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
apk add crystal shards
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T100848Z" creationid="makenowjust" creationdate="20200518T100848Z">
        <seg>{% highlight bash %}
apk add crystal shards
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
brew install crystal-lang --with-llvm
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T113254Z" creationid="makenowjust" creationdate="20200518T113254Z">
        <seg>{% highlight bash %}
brew install crystal-lang --with-llvm
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
brew install openssl
export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/opt/openssl/lib/pkgconfig
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112128Z" creationid="makenowjust" creationdate="20200518T112128Z">
        <seg>{% highlight bash %}
brew install openssl
export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/opt/openssl/lib/pkgconfig
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
brew update
brew install crystal
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111915Z" creationid="makenowjust" creationdate="20200518T111915Z">
        <seg>{% highlight bash %}
brew update
brew install crystal
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
brew update
brew install crystal-lang
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T113212Z" creationid="makenowjust" creationdate="20200518T113212Z">
        <seg>{% highlight bash %}
brew update
brew install crystal-lang
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
brew update
brew upgrade crystal
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112040Z" creationid="makenowjust" creationdate="20200518T112040Z">
        <seg>{% highlight bash %}
brew update
brew upgrade crystal
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
cat &gt; /etc/yum.repos.d/crystal.repo &lt;&lt;END
[crystal]
name=Crystal
baseurl=https://dl.bintray.com/crystal/rpm/{DISTRO}/x86_64/{CHANNEL}
gpgcheck=0
repo_gpgcheck=1
gpgkey=http://bintray.com/user/downloadSubjectPublicKey?username=bintray
END</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T093749Z" creationid="makenowjust" creationdate="20210130T093749Z">
        <seg>{% highlight bash %}
cat &gt; /etc/yum.repos.d/crystal.repo &lt;&lt;END
[crystal]
name=Crystal
baseurl=https://dl.bintray.com/crystal/rpm/{DISTRO}/x86_64/{CHANNEL}
gpgcheck=0
repo_gpgcheck=1
gpgkey=http://bintray.com/user/downloadSubjectPublicKey?username=bintray
END</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
cat &gt; /etc/yum.repos.d/crystal.repo &lt;&lt;END
[crystal]
name=Crystal
type=rpm-md
baseurl=https://download.opensuse.org/repositories/devel:languages:crystal/{REPOSITORY}/
gpgcheck=1
gpgkey=https://download.opensuse.org/repositories/devel:languages:crystal/{REPOSITORY}/repodata/repomd.xml.key
enabled=1
END</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210504T120435Z" creationid="makenowjust" creationdate="20210504T120435Z">
        <seg>{% highlight bash %}
cat &gt; /etc/yum.repos.d/crystal.repo &lt;&lt;END
[crystal]
name=Crystal
type=rpm-md
baseurl=https://download.opensuse.org/repositories/devel:languages:crystal/{REPOSITORY}/
gpgcheck=1
gpgkey=https://download.opensuse.org/repositories/devel:languages:crystal/{REPOSITORY}/repodata/repomd.xml.key
enabled=1
END</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
crystal --version
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T071628Z" creationid="makenowjust" creationdate="20200518T071628Z">
        <seg>{% highlight bash %}
crystal --version
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
curl -fsSL https://crystal-lang.org/install.sh | sudo bash
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T092546Z" creationid="makenowjust" creationdate="20210130T092546Z">
        <seg>{% highlight bash %}
curl -fsSL https://crystal-lang.org/install.sh | sudo bash
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
curl -fsSL https://crystal-lang.org/install.sh | sudo bash -s -- --channel=nightly
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T092738Z" creationid="makenowjust" creationdate="20210130T092738Z">
        <seg>{% highlight bash %}
curl -fsSL https://crystal-lang.org/install.sh | sudo bash -s -- --channel=nightly
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
curl -sL "https://keybase.io/crystal/pgp_keys.asc" | sudo apt-key add -
echo "deb https://dist.crystal-lang.org/apt crystal main" | sudo tee /etc/apt/sources.list.d/crystal.list
sudo apt-get update
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T102829Z" creationid="makenowjust" creationdate="20200518T102829Z">
        <seg>{% highlight bash %}
curl -sL "https://keybase.io/crystal/pgp_keys.asc" | sudo apt-key add -
echo "deb https://dist.crystal-lang.org/apt crystal main" | sudo tee /etc/apt/sources.list.d/crystal.list
sudo apt-get update
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
curl -sSL https://dist.crystal-lang.org/apt/setup.sh | sudo bash
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T102807Z" creationid="makenowjust" creationdate="20200518T102807Z">
        <seg>{% highlight bash %}
curl -sSL https://dist.crystal-lang.org/apt/setup.sh | sudo bash
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
curl https://dist.crystal-lang.org/rpm/setup.sh | sudo bash
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T101725Z" creationid="makenowjust" creationdate="20200518T101725Z">
        <seg>{% highlight bash %}
curl https://dist.crystal-lang.org/rpm/setup.sh | sudo bash
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
echo "deb http://download.opensuse.org/repositories/devel:/languages:/crystal/{REPOSITORY}/ /" | tee /etc/apt/sources.list.d/crystal.list</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210504T120412Z" creationid="makenowjust" creationdate="20210504T120412Z">
        <seg>{% highlight bash %}
echo "deb http://download.opensuse.org/repositories/devel:/languages:/crystal/{REPOSITORY}/ /" | tee /etc/apt/sources.list.d/crystal.list</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
echo "deb https://dl.bintray.com/crystal/deb all {CHANNEL}" | tee /etc/apt/sources.list.d/crystal.list</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T093051Z" creationid="makenowjust" creationdate="20210130T093051Z">
        <seg>{% highlight bash %}
echo "deb https://dl.bintray.com/crystal/deb all {CHANNEL}" | tee /etc/apt/sources.list.d/crystal.list</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
ln -s [full path to bin/crystal] /usr/local/bin/crystal
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T070747Z" creationid="makenowjust" creationdate="20200518T070747Z">
        <seg>{% highlight bash %}
ln -s [full path to bin/crystal] /usr/local/bin/crystal
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
rpm --import http://bintray.com/user/downloadSubjectPublicKey?username=bintray
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T092241Z" creationid="makenowjust" creationdate="20210130T092241Z">
        <seg>{% highlight bash %}
rpm --import http://bintray.com/user/downloadSubjectPublicKey?username=bintray
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
rpm --import https://dist.crystal-lang.org/rpm/RPM-GPG-KEY</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T101726Z" creationid="makenowjust" creationdate="20200518T101726Z">
        <seg>{% highlight bash %}
rpm --import https://dist.crystal-lang.org/rpm/RPM-GPG-KEY</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
rpm --import https://dist.crystal-lang.org/rpm/RPM-GPG-KEY
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112412Z" creationid="makenowjust" creationdate="20200518T112412Z">
        <seg>{% highlight bash %}
rpm --import https://dist.crystal-lang.org/rpm/RPM-GPG-KEY
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
su -
emerge -a dev-lang/crystal
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111700Z" creationid="makenowjust" creationdate="20200518T111700Z">
        <seg>{% highlight bash %}
su -
emerge -a dev-lang/crystal
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
sudo apt install crystal
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T102836Z" creationid="makenowjust" creationdate="20200518T102836Z">
        <seg>{% highlight bash %}
sudo apt install crystal
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
sudo apt install libssl-dev      # for using OpenSSL
sudo apt install libxml2-dev     # for using XML
sudo apt install libyaml-dev     # for using YAML
sudo apt install libgmp-dev      # for using Big numbers
sudo apt install libreadline-dev # for using Readline
sudo apt install libz-dev        # for using crystal play
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T102921Z" creationid="makenowjust" creationdate="20200518T102921Z">
        <seg>{% highlight bash %}
sudo apt install libssl-dev      # for using OpenSSL
sudo apt install libxml2-dev     # for using XML
sudo apt install libyaml-dev     # for using YAML
sudo apt install libgmp-dev      # for using Big numbers
sudo apt install libreadline-dev # for using Readline
sudo apt install libz-dev        # for using crystal play
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
sudo apt install libssl-dev      # for using OpenSSL
sudo apt install libxml2-dev     # for using XML
sudo apt install libyaml-dev     # for using YAML
sudo apt install libgmp-dev      # for using Big numbers
sudo apt install libz-dev        # for using crystal play
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200617T112047Z" creationid="makenowjust" creationdate="20200617T112047Z">
        <seg>{% highlight bash %}
sudo apt install libssl-dev      # for using OpenSSL
sudo apt install libxml2-dev     # for using XML
sudo apt install libyaml-dev     # for using YAML
sudo apt install libgmp-dev      # for using Big numbers
sudo apt install libz-dev        # for using crystal play
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
sudo apt update
sudo apt install crystal
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T102923Z" creationid="makenowjust" creationdate="20200518T102923Z">
        <seg>{% highlight bash %}
sudo apt update
sudo apt install crystal
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
sudo make -C/usr/ports/lang/crystal reinstall clean
sudo make -C/usr/ports/devel/shards reinstall clean
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111332Z" creationid="makenowjust" creationdate="20200518T111332Z">
        <seg>{% highlight bash %}
sudo make -C/usr/ports/lang/crystal reinstall clean
sudo make -C/usr/ports/devel/shards reinstall clean
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
sudo pacman -S crystal shards
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T101627Z" creationid="makenowjust" creationdate="20200518T101627Z">
        <seg>{% highlight bash %}
sudo pacman -S crystal shards
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
sudo pkg install -y crystal shards
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111011Z" creationid="makenowjust" creationdate="20200518T111011Z">
        <seg>{% highlight bash %}
sudo pkg install -y crystal shards
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
sudo pkg install -y llvm60
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111424Z" creationid="makenowjust" creationdate="20200518T111424Z">
        <seg>{% highlight bash %}
sudo pkg install -y llvm60
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
sudo snap install crystal --classic
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T113436Z" creationid="makenowjust" creationdate="20200518T113436Z">
        <seg>{% highlight bash %}
sudo snap install crystal --classic
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
sudo snap install crystal --classic --edge
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T113454Z" creationid="makenowjust" creationdate="20200518T113454Z">
        <seg>{% highlight bash %}
sudo snap install crystal --classic --edge
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
sudo yum install crystal
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T101753Z" creationid="makenowjust" creationdate="20200518T101753Z">
        <seg>{% highlight bash %}
sudo yum install crystal
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
sudo yum update crystal
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T101757Z" creationid="makenowjust" creationdate="20200518T101757Z">
        <seg>{% highlight bash %}
sudo yum update crystal
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
sudo zypper ar -e -f -t rpm-md https://dist.crystal-lang.org/rpm/ Crystal
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112423Z" creationid="makenowjust" creationdate="20200518T112423Z">
        <seg>{% highlight bash %}
sudo zypper ar -e -f -t rpm-md https://dist.crystal-lang.org/rpm/ Crystal
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
sudo zypper ar -e -f -t rpm-md https://dl.bintray.com/crystal/rpm/all/x86_64/stable Crystal
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T092242Z" creationid="makenowjust" creationdate="20210130T092242Z">
        <seg>{% highlight bash %}
sudo zypper ar -e -f -t rpm-md https://dl.bintray.com/crystal/rpm/all/x86_64/stable Crystal
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
sudo zypper install crystal
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112445Z" creationid="makenowjust" creationdate="20200518T112445Z">
        <seg>{% highlight bash %}
sudo zypper install crystal
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
sudo zypper update crystal
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112511Z" creationid="makenowjust" creationdate="20200518T112511Z">
        <seg>{% highlight bash %}
sudo zypper update crystal
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight bash %}
xcode-select --install
xcode-select --switch /Library/Developer/CommandLineTools
{% endhighlight bash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112054Z" creationid="makenowjust" creationdate="20200518T112054Z">
        <seg>{% highlight bash %}
xcode-select --install
xcode-select --switch /Library/Developer/CommandLineTools
{% endhighlight bash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight crystal %}
# Compiles!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T123052Z" creationid="makenowjust" creationdate="20200610T125833Z">
        <seg>{% highlight crystal %}
# Compiles! </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight crystal %}
Log.info { "Program started" }
Log.info &amp;.emit("Program started") # same as previous
Log.info &amp;.emit("User logged in", user_id: 42) # local data
Log.info &amp;.emit("User logged in", expr_that_computes_hash_named_tuple_or_metadata)
Log.warn exception: e, &amp;.emit("Oh no!", user_id: 42) # with exception
Log.warn exception: e, &amp;.emit("Oh no!") # with exception, no local data
Log.warn(exception: e) { "Oh no!" } # same as previous
Log.info &amp;.emit(action: "log_in", user_id: 42) # empty message
{% endhighlight crystal %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200611T031205Z" creationid="makenowjust" creationdate="20200611T031205Z">
        <seg>{% highlight crystal %}
Log.info { "Program started" }
Log.info &amp;.emit("Program started") # same as previous
Log.info &amp;.emit("User logged in", user_id: 42) # local data
Log.info &amp;.emit("User logged in", expr_that_computes_hash_named_tuple_or_metadata)
Log.warn exception: e, &amp;.emit("Oh no!", user_id: 42) # with exception
Log.warn exception: e, &amp;.emit("Oh no!") # with exception, no local data
Log.warn(exception: e) { "Oh no!" } # same as previous
Log.info &amp;.emit(action: "log_in", user_id: 42) # empty message
{% endhighlight crystal %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight crystal %}
Log.setup :debug # will show debug or above in the stdout for all source
Log.setup "db.*", :trace # will show trace or above in the stdout for db.* sources and nothing else
Log.setup_from_env # will grab the value of LOG_LEVEL env variable
{% endhighlight crystal %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200610T153417Z" creationid="makenowjust" creationdate="20200610T153417Z">
        <seg>{% highlight crystal %}
Log.setup :debug # will show debug or above in the stdout for all source
Log.setup "db.*", :trace # will show trace or above in the stdout for db.* sources and nothing else
Log.setup_from_env # will grab the value of LOG_LEVEL env variable
{% endhighlight crystal %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight crystal %}
if rand(2) &gt; 0
my_string = "hello world"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T212451Z" creationid="makenowjust" creationdate="20200413T212446Z">
        <seg>{% highlight crystal %}
if rand(2) &gt; 0
  my_string = "hello world"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight ruby %}
# A very basic HTTP server
require "http/server"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T035021Z" creationid="hirofumiwakasugi" creationdate="20151102T034949Z">
        <seg>{% highlight ruby %}
# 簡易 HTTP サーバー
require "http/server"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight txt %}
ld: library not found for -levent
{% endhighlight txt %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112053Z" creationid="makenowjust" creationdate="20200518T112053Z">
        <seg>{% highlight txt %}
ld: library not found for -levent
{% endhighlight txt %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight txt %}
ld: library not found for -lssl (this usually means you need to install the development package for libssl)
{% endhighlight txt %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112059Z" creationid="makenowjust" creationdate="20200518T112059Z">
        <seg>{% highlight txt %}
ld: library not found for -lssl (this usually means you need to install the development package for libssl)
{% endhighlight txt %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight ucl %}
FreeBSD: {</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111146Z" creationid="makenowjust" creationdate="20200518T111146Z">
        <seg>{% highlight ucl %}
FreeBSD: {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% if content == 1 %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035953Z" creationid="hirofumiwakasugi" creationdate="20151001T035953Z">
        <seg>{% if content == 1 %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% if env("TEST") %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215134Z" creationid="makenowjust" creationdate="20200509T215134Z">
        <seg>{% if env("TEST") %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% if flag?(:linux) &amp;&amp; flag?(:x86_64) %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T023141Z" creationid="makenowjust" creationdate="20200511T023141Z">
        <seg>{% if flag?(:linux) &amp;&amp; flag?(:x86_64) %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% if flag?(:x86_64) %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200511T023052Z" creationid="makenowjust" creationdate="20200511T023052Z">
        <seg>{% if flag?(:x86_64) %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% if greeting == "hola" %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220601Z" creationid="makenowjust" creationdate="20200509T220601Z">
        <seg>{% if greeting == "hola" %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% if page.url != '/' %}{% unless page.layout == "install" %}{{ page.title }}{% else %}Install {{page.subtitle}}{% endunless %} - {% endif %}The Crystal Programming Language</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T113629Z" creationid="makenowjust" creationdate="20200516T083835Z">
        <seg>{% if page.url != '/' %}{% unless page.layout == 'install' %}{{ page.title }}{% else %}{{page.subtitle}}インストール{% endunless %} - {% endif %}プログラミング言語 Crystal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% if sp.logo %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T082807Z" creationid="makenowjust" creationdate="20200516T082807Z">
        <seg>{% if sp.logo %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% if sp.url %} &lt;a0&gt; {% img '{{ assets[sp.logo].filename }}' %} &lt;/a0&gt; {% else %} {% img '{{ assets[sp.logo].filename }}' %} {% endif %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T082809Z" creationid="makenowjust" creationdate="20200516T082809Z">
        <seg>{% if sp.url %} &lt;a0&gt; {% img '{{ assets[sp.logo].filename }}' %} &lt;/a0&gt; {% else %} {% img '{{ assets[sp.logo].filename }}' %} {% endif %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% if sp.url %} &lt;a0&gt; {{sp.name}} &lt;/a0&gt; {% else %} {{sp.name}} {% endif %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T082812Z" creationid="makenowjust" creationdate="20200516T082812Z">
        <seg>{% if sp.url %} &lt;a0&gt; {{sp.name}} &lt;/a0&gt; {% else %} {{sp.name}} {% endif %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% if sp.url %} &lt;g1&gt; {% img '{{ assets[sp.logo].filename }}' %} &lt;/g1&gt; {% else %} {% img '{{ assets[sp.logo].filename }}' %} {% endif %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093328Z" creationid="makenowjust" creationdate="20200518T093328Z">
        <seg>{% if sp.url %} &lt;g1&gt; {% img '{{ assets[sp.logo].filename }}' %} &lt;/g1&gt; {% else %} {% img '{{ assets[sp.logo].filename }}' %} {% endif %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% if sp.url %} &lt;g1&gt; {{sp.name}} &lt;/g1&gt; {% else %} {{sp.name}} {% endif %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093331Z" creationid="makenowjust" creationdate="20200518T093331Z">
        <seg>{% if sp.url %} &lt;g1&gt; {{sp.name}} &lt;/g1&gt; {% else %} {{sp.name}} {% endif %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include community_row.html title="Language Reference" divId="language-reference" content="Documentation of the Crystal language and compiler features." link_text="crystal-lang.org/reference" url="https://crystal-lang.org/reference" icon="menu_book" %} {% include community_row.html title="API Docs" divId="api" content="Documentation for the Crystal standard-library." link_text="crystal-lang.org/api" url="https://crystal-lang.org/api" icon="explore" %} {% include community_row.html title="Installation instructions" divId="install" content="Installation instructions for Crystal." link_text="crystal-lang.org/install" url="/install" icon="get_app" %} {% include community_row.html title="Media" divId="media" content="Logos and style guide." link_text="crystal-lang.org/media" url="/media" icon="palette" %} {% include community_row.html title="Developer Wiki" divId="developer-wiki" content="Developer resources." link_text="GitHub Wiki" url="https://github.com/crystal-lang/crystal/wiki" icon="github" custom_icon="true" %} {% include community_row.html title="Shards documentation" divId="shards" content="Documentation for official shards." link_text="crystal-db" url="http://crystal-lang.github.io/crystal-db/api/latest/" icon="apps" %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T114916Z" creationid="makenowjust" creationdate="20200413T201803Z">
        <seg>{% include community_row.html
   title='言語リファレンス'
   divId='language-reference'
   content='Crystal の言語機能とコンパイラのリファレンス'
   link_text='ja.crystal-lang.org/reference'
   url='/reference'
   icon='menu_book' %}

{% include community_row.html
   title='API ドキュメント'
   divId='api'
   content='Crystal の標準ライブラリのドキュメント (英語)'
   link_text='crystal-lang.org/api'
   url='https://crystal-lang.org/api'
   icon='explore' %}

{% include community_row.html
   title='インストール方法'
   divId='install'
   content='Crystalのインストール方法'
   link_text='ja.crystal-lang.org/install'
   url='/install'
   icon='get_app' %}

{% include community_row.html
   title='メディア'
   divId='media'
   content='ロゴとスタイルのガイド'
   link_text='ja.crystal-lang.org/media'
   url='/media'
   icon='palette' %}

{% include community_row.html
   title='開発者 Wiki (英語)'
   divId='developer-wiki'
   content='開発者向けの情報'
   link_text='GitHub Wiki'
   url='https://github.com/crystal-lang/crystal/wiki'
   icon='github'
   custom_icon='true' %}

{% include community_row.html
   title='shards のドキュメント'
   divId='shards'
   content='公式 shards のドキュメント'
   link_text='crystal-db'
   url='http://crystal-lang.github.io/crystal-db/api/latest/'
   icon='apps' %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include community_row.html title="Security Issues" divId="security" content="Should you find any security-related issue, please &lt;g1&gt;do not share them openly&lt;/g1&gt; in the issue tracker.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T103040Z" creationid="makenowjust" creationdate="20200518T075442Z">
        <seg>{% include community_row.html
   title='セキュリティの問題'
   divId='security'
   content='何かセキュリティに関する問題を見つけても、issueトラッカーで&lt;g1&gt;オープンに公開しないでください&lt;/g1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include community_row.html title="Security Issues" divId="security" content="Should you find any security-related issue, please &lt;s0&gt;do not share them openly&lt;/s0&gt; in the issue tracker.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20220525T091223Z" creationid="makenowjust" creationdate="20200516T091524Z">
        <seg>{% include community_row.html
   title='セキュリティの問題'
   divId='security'
   content='何かセキュリティに関する問題を見つけても、issueトラッカーで&lt;s0&gt;オープンに公開しないでください&lt;/s0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include community_row.html title="Security Issues" divId="security" content='Should you find any security-related issue, please &lt;g1&gt;do not share them openly&lt;/g1&gt; in the issue tracker.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T104720Z" creationid="makenowjust" creationdate="20200518T104720Z">
        <seg>{% include community_row.html
   title='セキュリティの問題'
   divId='security'
   content='何かセキュリティに関する問題を見つけても、issueトラッカーで&lt;g1&gt;オープンに公開しないでください&lt;/g1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include footer.html %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093058Z" creationid="makenowjust" creationdate="20200518T093058Z">
        <seg>{% include footer.html %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include install_from_bintray_deb.md %}
{% include install_from_snapcraft.md distro="debian" %}
{% include install_from_linuxbrew.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T092338Z" creationid="makenowjust" creationdate="20210130T092338Z">
        <seg>{% include install_from_bintray_deb.md %}
{% include install_from_snapcraft.md distro="debian" %}
{% include install_from_linuxbrew.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include install_from_bintray_deb.md %}
{% include install_from_snapcraft.md distro="kubuntu" %}
{% include install_from_linuxbrew.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T092253Z" creationid="makenowjust" creationdate="20210130T092253Z">
        <seg>{% include install_from_bintray_deb.md %}
{% include install_from_snapcraft.md distro="kubuntu" %}
{% include install_from_linuxbrew.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include install_from_bintray_deb.md %}
{% include install_from_snapcraft.md distro="ubuntu" %}
{% include install_from_linuxbrew.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T092128Z" creationid="makenowjust" creationdate="20210130T092128Z">
        <seg>{% include install_from_bintray_deb.md %}
{% include install_from_snapcraft.md distro="ubuntu" %}
{% include install_from_linuxbrew.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include install_from_bintray_rpm.md %}
{% include install_from_linuxbrew.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T092212Z" creationid="makenowjust" creationdate="20210130T092212Z">
        <seg>{% include install_from_bintray_rpm.md %}
{% include install_from_linuxbrew.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include install_from_bintray_rpm.md %}
{% include install_from_snapcraft.md distro="centos" %}
{% include install_from_linuxbrew.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210130T092413Z" creationid="makenowjust" creationdate="20210130T092413Z">
        <seg>{% include install_from_bintray_rpm.md %}
{% include install_from_snapcraft.md distro="centos" %}
{% include install_from_linuxbrew.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include install_from_linuxbrew.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112529Z" creationid="makenowjust" creationdate="20200518T112529Z">
        <seg>{% include install_from_linuxbrew.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include install_from_snapcraft.md distro="arch" %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T110412Z" creationid="makenowjust" creationdate="20200518T101628Z">
        <seg>{% include install_from_snapcraft.md distro='arch' %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include install_from_snapcraft.md distro="centos" %}
{% include install_from_linuxbrew.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T110406Z" creationid="makenowjust" creationdate="20200518T101758Z">
        <seg>{% include install_from_snapcraft.md distro='centos' %}
{% include install_from_linuxbrew.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include install_from_snapcraft.md distro="debian" %}
{% include install_from_linuxbrew.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T102924Z" creationid="makenowjust" creationdate="20200518T102924Z">
        <seg>{% include install_from_snapcraft.md distro="debian" %}
{% include install_from_linuxbrew.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include install_from_snapcraft.md distro="elementary" %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T110357Z" creationid="makenowjust" creationdate="20200518T102928Z">
        <seg>{% include install_from_snapcraft.md distro='elementary' %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include install_from_snapcraft.md distro="fedora" %}
{% include install_from_linuxbrew.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T110350Z" creationid="makenowjust" creationdate="20200518T110346Z">
        <seg>{% include install_from_snapcraft.md distro='fedora' %}
{% include install_from_linuxbrew.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include install_from_snapcraft.md distro="kde-neon" %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111715Z" creationid="makenowjust" creationdate="20200518T111715Z">
        <seg>{% include install_from_snapcraft.md distro='kde-neon' %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include install_from_snapcraft.md distro="kubuntu" %}
{% include install_from_linuxbrew.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111811Z" creationid="makenowjust" creationdate="20200518T111811Z">
        <seg>{% include install_from_snapcraft.md distro='kubuntu' %}
{% include install_from_linuxbrew.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include install_from_snapcraft.md distro="manjaro" %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112306Z" creationid="makenowjust" creationdate="20200518T112306Z">
        <seg>{% include install_from_snapcraft.md distro='manjaro' %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include install_from_snapcraft.md distro="mint" %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T111841Z" creationid="makenowjust" creationdate="20200518T111841Z">
        <seg>{% include install_from_snapcraft.md distro='mint' %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include install_from_snapcraft.md distro="opensuse" %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112516Z" creationid="makenowjust" creationdate="20200518T112516Z">
        <seg>{% include install_from_snapcraft.md distro='opensuse' %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include install_from_snapcraft.md distro="ubuntu" %}
{% include install_from_linuxbrew.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T112540Z" creationid="makenowjust" creationdate="20200518T112540Z">
        <seg>{% include install_from_snapcraft.md distro='ubuntu' %}
{% include install_from_linuxbrew.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include media_color_sample.html color="Black" hex="#000" class="black" %} {% include media_color_sample.html color="White" hex="#FFF" class="white" %} {% include media_color_sample.html color="Gray" hex="#777" class="gray" %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T105141Z" creationid="makenowjust" creationdate="20200516T084859Z">
        <seg>{% include media_color_sample.html color='Black' hex='#000' class='black' %} {% include media_color_sample.html color='White' hex='#FFF' class='white' %} {% include media_color_sample.html color='Gray' hex='#777' class='gray' %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include media_font_sample.html name="Roboto" class="roboto" %} {% include media_font_sample.html name="Roboto Medium" class="medium" %} {% include media_font_sample.html name="Roboto Mono Medium" class="mono" %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T105150Z" creationid="makenowjust" creationdate="20200516T084909Z">
        <seg>{% include media_font_sample.html name='Roboto' class='roboto' %} {% include media_font_sample.html name='Roboto Medium' class='medium' %} {% include media_font_sample.html name='Roboto Mono Medium' class='mono' %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include media_gallery_item.html img="media/crystal_logo.svg" name="Logo" %} {% include media_gallery_item.html img="media/crystal_logo-stacked_version.svg" name="Logo - stacked version" %} {% include media_gallery_item.html img="media/crystal_icon.svg" name="Icon" %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T105133Z" creationid="makenowjust" creationdate="20200516T084837Z">
        <seg>{% include media_gallery_item.html img='media/crystal_logo.svg' name='ロゴ' %}
{% include media_gallery_item.html img='media/crystal_logo-stacked_version.svg' name='ロゴ - 縦バージョン' %}
{% include media_gallery_item.html img='media/crystal_icon.svg' name='アイコン' %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include nav.html %} {% unless page.layout == "install" %} {% if page.is_post %} {% include post_header.html %} {% else %} {% include header.html %} {% endif %} {% endunless %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T102539Z" creationid="makenowjust" creationdate="20200518T093056Z">
        <seg>{% include nav.html %} {% unless page.layout == 'install' %} {% if page.is_post %} {% include post_header.html %} {% else %} {% include header.html %} {% endif %} {% endunless %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include nav.html %} {% unless page.layout == "install" %} {% if page.is_post %} {% include post_header.html %} {% else %} {% include header.html %} {% endif %} {% endunless %} &lt;m0&gt; {{ content }} &lt;/m0&gt; {% include footer.html %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083842Z" creationid="makenowjust" creationdate="20200516T083842Z">
        <seg>{% include nav.html %} {% unless page.layout == "install" %} {% if page.is_post %} {% include post_header.html %} {% else %} {% include header.html %} {% endif %} {% endunless %} &lt;m0&gt; {{ content }} &lt;/m0&gt; {% include footer.html %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include sample_bindings.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221526Z" creationid="makenowjust" creationdate="20200413T221526Z">
        <seg>{% include sample_bindings.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include sample_concurrency.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221340Z" creationid="makenowjust" creationdate="20200413T221340Z">
        <seg>{% include sample_concurrency.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include sample_dependencies.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221854Z" creationid="makenowjust" creationdate="20200413T221854Z">
        <seg>{% include sample_dependencies.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include sample_macros.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221025Z" creationid="makenowjust" creationdate="20200413T221025Z">
        <seg>{% include sample_macros.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include sample_null.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211637Z" creationid="makenowjust" creationdate="20200413T211637Z">
        <seg>{% include sample_null.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include sample_null_refs.html %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211712Z" creationid="makenowjust" creationdate="20200413T211712Z">
        <seg>{% include sample_null_refs.html %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include sample_server.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210742Z" creationid="makenowjust" creationdate="20200413T210742Z">
        <seg>{% include sample_server.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include sample_type_system.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211233Z" creationid="makenowjust" creationdate="20200413T211233Z">
        <seg>{% include sample_type_system.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include sponsors_sidebar.html %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T082816Z" creationid="makenowjust" creationdate="20200516T082816Z">
        <seg>{% include sponsors_sidebar.html %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% js bundle %} {% include google_analytics.html %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T083843Z" creationid="makenowjust" creationdate="20200516T083843Z">
        <seg>{% js bundle %} {% include google_analytics.html %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% puts "Method added:", method.name.stringify %}
end

def generate_random_number</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224513Z" creationid="makenowjust" creationdate="20200509T224513Z">
        <seg>{% puts "Method added:", method.name.stringify %}
end

def generate_random_number</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% puts @type.methods.map &amp;.name %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224925Z" creationid="makenowjust" creationdate="20200509T224925Z">
        <seg>{% puts @type.methods.map &amp;.name %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% puts @type.methods.map &amp;.name %}
end

class Foo</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T224924Z" creationid="makenowjust" creationdate="20200509T224924Z">
        <seg>{% puts @type.methods.map &amp;.name %}
end

class Foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% seo %} &lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093055Z" creationid="makenowjust" creationdate="20200518T093055Z">
        <seg>{% seo %} &lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% value = @def.annotation(MyAnnotation)[idx] %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T111131Z" creationid="makenowjust" creationdate="20200510T111131Z">
        <seg>{% value = @def.annotation(MyAnnotation)[idx] %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% verbatim do %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T220601Z" creationid="makenowjust" creationdate="20200509T220601Z">
        <seg>{% verbatim do %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{1 =&gt; 2, 3 =&gt; 4}   # Hash(Int32, Int32)
{1 =&gt; 2, 'a' =&gt; 3} # Hash(Int32 | Char, Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T175605Z" creationid="makenowjust" creationdate="20200420T175605Z">
        <seg>{1 =&gt; 2, 3 =&gt; 4}   # Hash(Int32, Int32)
{1 =&gt; 2, 'a' =&gt; 3} # Hash(Int32 | Char, Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ 'bounty.png' | asset_path }}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210328Z" creationid="makenowjust" creationdate="20200413T210328Z">
        <seg>{{ 'bounty.png' | asset_path }}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ 'oc.png' | asset_path }}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210324Z" creationid="makenowjust" creationdate="20200413T210324Z">
        <seg>{{ 'oc.png' | asset_path }}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ @def.annotation(MyAnnotation).args }}
end

annotation_args # =&gt; {1, 2, 3, 4}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T111242Z" creationid="makenowjust" creationdate="20200510T111242Z">
        <seg>{{ @def.annotation(MyAnnotation).args }}
end

annotation_args # =&gt; {1, 2, 3, 4}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ @def.annotation(MyAnnotation).named_args }}
end

annotation_named_args # =&gt; {value: 2, name: "Jim"}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T110540Z" creationid="makenowjust" creationdate="20200510T110540Z">
        <seg>{{ @def.annotation(MyAnnotation).named_args }}
end

annotation_named_args # =&gt; {value: 2, name: "Jim"}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ @def.annotation(MyAnnotation)[:value] }}
end

annotation_value # =&gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200510T110335Z" creationid="makenowjust" creationdate="20200510T110335Z">
        <seg>{{ @def.annotation(MyAnnotation)[:value] }}
end

annotation_value # =&gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ @type.instance_vars.map &amp;.name.stringify }}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T012112Z" creationid="hirofumiwakasugi" creationdate="20151002T012112Z">
        <seg>{{ @type.instance_vars.map &amp;.name.stringify }}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ @type.instance_vars.map &amp;.name.stringify }}.includes?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T223802Z" creationid="makenowjust" creationdate="20200509T223802Z">
        <seg>{{ @type.instance_vars.map &amp;.name.stringify }}.includes?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ @type.instance_vars.map &amp;.name.stringify }}.includes? name</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T031040Z" creationid="hirofumiwakasugi" creationdate="20151009T031040Z">
        <seg>{{ @type.instance_vars.map &amp;.name.stringify }}.includes? name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ content }}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T093057Z" creationid="makenowjust" creationdate="20200518T093057Z">
        <seg>{{ content }}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ item.icon | asset_path }}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T064519Z" creationid="makenowjust" creationdate="20200518T064519Z">
        <seg>{{ item.icon | asset_path }}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ item.url }}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T064518Z" creationid="makenowjust" creationdate="20200518T064518Z">
        <seg>{{ item.url }}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ page.subtitle }}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T100705Z" creationid="makenowjust" creationdate="20200518T100705Z">
        <seg>{{ page.subtitle }}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ post.date | date_to_string }}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222653Z" creationid="makenowjust" creationdate="20200413T222653Z">
        <seg>{{ post.date | date_to_string }}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ post.title }}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222656Z" creationid="makenowjust" creationdate="20200413T222656Z">
        <seg>{{ post.title }}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ post.url }}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222647Z" creationid="makenowjust" creationdate="20200413T222647Z">
        <seg>{{ post.url }}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ site.latest_release.date | date: "%d %B %Y" }} - &lt;g1&gt;More release notes&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T150053Z" creationid="makenowjust" creationdate="20210726T144059Z">
        <seg>{{ site.latest_release.date | date: '%d %B %Y' }} - &lt;g1&gt;その他のリリースノート&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ system("date").stringify }}
end

build_date = compile_time_date
puts build_date</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T200651Z" creationid="makenowjust" creationdate="20200413T200138Z">
        <seg>{{ system("date").stringify }}
end

build_date = compile_time_date
puts build_date{% endhighlight %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{content}}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T014650Z" creationid="hirofumiwakasugi" creationdate="20151001T014650Z">
        <seg>{{content}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{content}} + @name</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T214946Z" creationid="makenowjust" creationdate="20200509T214946Z">
        <seg>{{content}} + @name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{index}}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040352Z" creationid="hirofumiwakasugi" creationdate="20151001T040352Z">
        <seg>{{index}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{item.caption}}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200518T064519Z" creationid="makenowjust" creationdate="20200518T064519Z">
        <seg>{{item.caption}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{sp.all_time}}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T082814Z" creationid="makenowjust" creationdate="20200516T082814Z">
        <seg>{{sp.all_time}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{sp.since}}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T082818Z" creationid="makenowjust" creationdate="20200516T082818Z">
        <seg>{{sp.since}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{sp.this_month}}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T082813Z" creationid="makenowjust" creationdate="20200516T082813Z">
        <seg>{{sp.this_month}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{sp.url}}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T082808Z" creationid="makenowjust" creationdate="20200516T082808Z">
        <seg>{{sp.url}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{value}}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040429Z" creationid="hirofumiwakasugi" creationdate="20151001T040429Z">
        <seg>{{value}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{} of Int32 =&gt; Int32 # =&gt; Hash(Int32, Int32).new</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T175831Z" creationid="makenowjust" creationdate="20200420T175831Z">
        <seg>{} of Int32 =&gt; Int32 # =&gt; Hash(Int32, Int32).new</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135124Z" creationid="hirofumiwakasugi" creationdate="20150904T135124Z">
        <seg>|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>|      @value : String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063041Z" creationid="hirofumiwakasugi" creationdate="20150912T063041Z">
        <seg>|      @value : String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>|| (objects[1] = 2)
objects[1] &amp;&amp;= 2 # same as: objects[1]?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174925Z" creationid="makenowjust" creationdate="20200422T174925Z">
        <seg>|| (objects[1] = 2) と同じ
objects[1] &amp;&amp;= 2 # objects[1]? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>|| - Logical OR Operator</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101655Z" creationid="makenowjust" creationdate="20200424T101655Z">
        <seg>|| - 論理和 (または) 演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>|| b)&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200502T095338Z" creationid="makenowjust" creationdate="20200502T095338Z">
        <seg>|| b)&lt;/g2&gt; に変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012156Z" creationid="hirofumiwakasugi" creationdate="20151010T012156Z">
        <seg>}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>}
}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035517Z" creationid="makenowjust" creationdate="20200420T035517Z">
        <seg>}
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>},</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035933Z" creationid="makenowjust" creationdate="20200420T035933Z">
        <seg>},</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>}, boxed_data)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T090949Z" creationid="makenowjust" creationdate="20200512T090949Z">
        <seg>}, boxed_data)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>−2,147,483,648</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182050Z" creationid="makenowjust" creationdate="20200419T182050Z">
        <seg>−2,147,483,648</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>−2&lt;x1/&gt;63&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182056Z" creationid="makenowjust" creationdate="20200419T182056Z">
        <seg>−2&lt;x1/&gt;63&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>−32,768</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182046Z" creationid="makenowjust" creationdate="20200419T182046Z">
        <seg>−32,768</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
    <tu>
      <prop type="file">crystal-book/SUMMARY.md</prop>
      <prop type="id">tu114_0</prop>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;alias&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200516T081139Z" creationid="makenowjust" creationdate="20200516T081139Z">
        <seg>&lt;g1&gt;alias&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <prop type="file">crystal-book/SUMMARY.md</prop>
      <prop type="id">tu115_0</prop>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;alias&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T092336Z" creationid="makenowjust" creationdate="20200512T092336Z">
        <seg>&lt;g1&gt;alias&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <prop type="file">crystal-book/docs/README.md</prop>
      <prop type="id">tu11_0</prop>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Guides&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T165935Z" creationid="makenowjust" creationdate="20210726T155917Z">
        <seg>&lt;g1&gt;ガイド&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <prop type="file">crystal-book/docs/README.md</prop>
      <prop type="id">tu13_0</prop>
      <tuv lang="EN-US">
        <seg>Tools</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T165940Z" creationid="makenowjust" creationdate="20210726T155847Z">
        <seg>ツール</seg>
      </tuv>
    </tu>
    <tu>
      <prop type="file">crystal-book/docs/README.md</prop>
      <prop type="id">tu6_0</prop>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Getting started&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T160029Z" creationid="makenowjust" creationdate="20210726T160029Z">
        <seg>&lt;g1&gt;Getting Started&lt;/g1&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <prop type="file">crystal-book/docs/README.md</prop>
      <prop type="id">tu8_0</prop>
      <tuv lang="EN-US">
        <seg>Tutorials</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20210726T165932Z" creationid="makenowjust" creationdate="20210726T155716Z">
        <seg>チュートリアル</seg>
      </tuv>
    </tu>
    <tu>
      <prop type="file">crystal-book/guides/writing_shards.md</prop>
      <prop type="id">tu60_0</prop>
      <tuv lang="EN-US">
        <seg>Description</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200527T162500Z" creationid="makenowjust" creationdate="20200527T162500Z">
        <seg>説明文</seg>
      </tuv>
    </tu>
    <tu>
      <prop type="file">crystal-book/syntax_and_semantics/c_bindings/alias.md</prop>
      <prop type="id">tu1_0</prop>
      <tuv lang="EN-US">
        <seg>alias</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200512T092240Z" creationid="makenowjust" creationdate="20200512T092240Z">
        <seg>alias</seg>
      </tuv>
    </tu>
    <tu>
      <prop type="file">crystal-book/syntax_and_semantics/enum.md</prop>
      <prop type="id">tu32_0</prop>
      <tuv lang="EN-US">
        <seg>Usage</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200505T182859Z" creationid="makenowjust" creationdate="20200505T182859Z">
        <seg>用途</seg>
      </tuv>
    </tu>
    <tu>
      <prop type="file">crystal-book/syntax_and_semantics/macros.md</prop>
      <prop type="id">tu12_0</prop>
      <tuv lang="EN-US">
        <seg>Interpolation</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200509T215447Z" creationid="makenowjust" creationdate="20200509T214543Z">
        <seg>マクロでの埋め込み</seg>
      </tuv>
    </tu>
    <tu>
      <prop type="file">crystal-book/syntax_and_semantics/type_grammar.md</prop>
      <prop type="id">tu45_0</prop>
      <tuv lang="EN-US">
        <seg>Proc</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T122648Z" creationid="makenowjust" creationdate="20200507T122648Z">
        <seg>Proc 型</seg>
      </tuv>
    </tu>
    <tu>
      <prop type="file">crystal-book/syntax_and_semantics/type_grammar.md</prop>
      <prop type="id">tu56_0</prop>
      <tuv lang="EN-US">
        <seg>self</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200507T122741Z" creationid="makenowjust" creationdate="20200507T122741Z">
        <seg>self 型</seg>
      </tuv>
    </tu>
  </body>
</tmx>
